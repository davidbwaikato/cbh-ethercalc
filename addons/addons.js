(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
//Init
if (!SocialCalc.SpreadsheetControl.Coerce) SocialCalc.SpreadsheetControl.Coerce = {};

SocialCalc.SpreadsheetControl.Coerce.ShowDialog = function () {

    var SCLocSS = SocialCalc.LocalizeSubstrings;

    var str, ele;

    var spreadsheet = SocialCalc.GetSpreadsheetControlObject();
    var editor = spreadsheet.editor;

    var idp = spreadsheet.idPrefix + "coerce-";

    if (!SocialCalc.SpreadsheetControl.CheckLoneDialog(idp + "dialog")) {
        return;
    }

    editor.inputBox.element.disabled = true;

    str = "";

    str += '<div id="' + idp + 'controls" style="width:380px;text-align:right;padding:6px 0px 4px 6px;font-size:small;"></div>';

    if (!SocialCalc.SpreadsheetControl.HTMLCoercionControlElements) {

        var controlhtml =
            SCLocSS(
                '<select id="' + idp + 'output-combobox" value="html" style="font-size:smaller;">' +
                '<option value="html">%loc!As HTML!</option>' +
                '<option value="html">%loc!As wrapped HTML!</option>' +
                '<option value="text">%loc!As text!</option>' +
                '<option value="natural">%loc!As natural!</option>' +
                '</select>' +

                '<input type="button" value="%loc!Set Cell Contents!" style="font-size:smaller;" onclick="SocialCalc.SpreadsheetControl.Coerce.DoCoercion();">&nbsp;' +
                '<input type="button" value="%loc!Cancel!" style="font-size:smaller;" onclick="SocialCalc.SpreadsheetControl.Coerce.HideDialog();"></div>');

        var cediv = document.createElement("div");
        cediv.innerHTML = controlhtml;
        
        SocialCalc.SpreadsheetControl.Coerce.ControlElements = [];
        for (var i = 0; i < cediv.children.length; i++) {
            var child = cediv.children[i];
            SocialCalc.SpreadsheetControl.Coerce.ControlElements.push(child);
        }

    }

    var main = document.createElement("div");
    main.id = idp + "dialog";

    main.style.position = "absolute";

    var vp = SocialCalc.GetViewportInfo();
    var pos = SocialCalc.GetElementPositionWithScroll(spreadsheet.spreadsheetDiv);

    main.style.top = ((vp.height / 3) - pos.top) + "px";
    main.style.left = ((vp.width / 3) - pos.left) + "px";
    main.style.zIndex = 100;
    main.style.backgroundColor = "#FFF";
    main.style.border = "1px solid black";

    //TODO Make nice
    main.innerHTML = '<table cellspacing="0" cellpadding="0" style="border-bottom:1px solid black;"><tr>' +
        '<td style="font-size:10px;cursor:default;width:380px;background-color:#999;color:#FFF;">' +
        SCLocSS("&nbsp;%loc!Coerce Selected Data!") + '</td>' +
        '<td style="font-size:10px;cursor:default;color:#666;" onclick="SocialCalc.SpreadsheetControl.Coerce.HideDialog();">&nbsp;X&nbsp;</td></tr></table>' +
        '<div style="background-color:#DDD;">' + str + '</div>';

    

    SocialCalc.DragRegister(main.firstChild.firstChild.firstChild.firstChild, true, true,
        {
            MouseDown: SocialCalc.DragFunctionStart,
            MouseMove: SocialCalc.DragFunctionPosition,
            MouseUp: SocialCalc.DragFunctionPosition,
            Disabled: null, positionobj: main
        },
        spreadsheet.spreadsheetDiv);

    spreadsheet.spreadsheetDiv.appendChild(main);

    //Set up controls
    var controlElement = document.getElementById(idp + "controls");
    for (var i = 0; i < SocialCalc.SpreadsheetControl.Coerce.ControlElements.length; i++) {
        controlElement.appendChild(SocialCalc.SpreadsheetControl.Coerce.ControlElements[i]);
    }

    ele = document.getElementById(idp + "output-combobox");
    ele.focus();
    SocialCalc.CmdGotFocus(ele);
    //!!! need to do keyboard handling: if esc, hide?

}



SocialCalc.SpreadsheetControl.Coerce.HideDialog = function() {
    SocialCalc.SpreadsheetControl.HideDialog("coerce");
}



SocialCalc.SpreadsheetControl.Coerce.DoCoercion = function() {

    var spreadsheet = SocialCalc.GetSpreadsheetControlObject();
    var idp = spreadsheet.idPrefix + "coerce-";

    var coercion = document.getElementById(idp + "output-combobox").value;

    var editor = spreadsheet.editor;
    var wval = editor.workingvalues;

    var cmd = "";

    if (editor.range.hasrange) {
        wval.ecoord = SocialCalc.crToCoord(editor.range.left, editor.range.top);
        wval.ecol = editor.range.top;
        wval.erow = editor.range.left;
        wval.numcols = editor.range.right - editor.range.left + 1;
        wval.numrows = editor.range.bottom - editor.range.top + 1;
        
        for (var row = editor.range.top; row <= editor.range.bottom; row++) {
            for (var col = editor.range.left; col <= editor.range.right; col++) {
                var cr = SocialCalc.crToCoord(col, row);
                var c = SocialCalc.SpreadsheetControl.Coerce.DoCoercionForCell(coercion, cr);
                if (c) cmd += (cmd == "" ? "" : "\n") + c;
            }
        }
    }
    else {
        wval.ecoord = editor.ecell.coord;
        wval.erow = editor.ecell.row;
        wval.ecol = editor.ecell.col;
        cmd = (SocialCalc.SpreadsheetControl.Coerce.DoCoercionForCell(coercion, wval.ecoord) || "");
    }

    SocialCalc.SpreadsheetControl.Coerce.HideDialog();

    if (cmd != "") editor.EditorScheduleSheetCommands(cmd, true, false);

}

SocialCalc.SpreadsheetControl.Coerce.DoCoercionForCell = function(coercion, cr) {

    var spreadsheet = SocialCalc.GetSpreadsheetControlObject();
    // var editor = spreadsheet.editor;
    var sheet = spreadsheet.sheet;

    cell = sheet.GetAssuredCell(cr);
    if (cell.readonly) return null;

    var value = cell.datavalue;//SocialCalc.GetCellContents(editor.context.sheetobj, cr);
    var valuetype = cell.valuetype;

    //TODO If formula?
    coercionResult = SocialCalc.SpreadsheetControl.Coerce.DoCoercionForValue(coercion, value, valuetype);
    value = coercionResult.value;
    var type = coercionResult.type;

    value = SocialCalc.encodeForSave(value);

    var cmdline;
    if (value == "") cmdline = "set "+cr+" empty";
    cmdline = "set "+cr+" "+type+" "+value;
    return cmdline;

}



SocialCalc.SpreadsheetControl.Coerce.DoCoercionForValue = function(coercion, value, valuetype) {

    var html, json;

    if ((html = SocialCalc.SpreadsheetControl.GetHTMLContent(value)) || valuetype == "th" ? value : null) {
        value = SocialCalc.HtmlSanitizer.SanitizeHtml(html);
    }
    else if (json = SocialCalc.SpreadsheetControl.GetJSONContent(value)) {
        value = json;
    }
    else if (value.startsWith("'")) {
        value = value.substring(1);
    }

    var type = "text t";

    switch (coercion) {
        case "text":
        case "natural":

            if (html) {
                var rootNode = document.createElement("div");
                rootNode.innerHTML = value;
                var xpathResult = document.evaluate("//text()", rootNode, null, XPathResult.UNORDERED_NODE_ITERATOR_TYPE, null);
                value = "";
                while (node = xpathResult.iterateNext()) {
                    if (node.data) {
                        var text = node.data.trim();
                        if (text.length > 0) {
                            value += (value == "" ? "" : " ") + text;
                        }
                    }
                }
            }

            if (coercion == "natural") {
                var parse = SocialCalc.Formula.ParseFormulaIntoTokens(value);
                if (parse.length == 1 && parse[0].type == 1) {
                    type = "value n";
                }
            }

        break;
        case "html":
        case "wrappedhtml":
        default:
            if (!html) {
                value = SocialCalc.special_chars(value);
            }
            if ("wrappedhtml") value = "<div>" + value + "</div>";
            value = SocialCalc.SpreadsheetControl.BeautifyHtml(value);
            value = ".html\n\n" + value + "\n\n.html";
            var type = "text th";
        break;
        
    }

    return {
        value: value,
        type: type
    };

}

},{}],2:[function(require,module,exports){
// ###############    GENERAL     ###############

SocialCalc.SpreadsheetControl.BeautifyHtml = require("./lib/beautify-html.js").html_beautify;

SocialCalc.SpreadsheetControl.Zip = require('zipjs-browserify');
SocialCalc.SpreadsheetControl.Lda = require('lda-topic-model').default;

SocialCalc.SpreadsheetControl.HTMLRegex = /^'?\.html *\n(([^\n]*\n)*)\.html[\n ]*$/;
SocialCalc.SpreadsheetControl.JSONRegex = /^'?\.json *\n(([^\n]*\n)*)\.json[\n ]*$/;

SocialCalc.SpreadsheetControl.GetHTMLContent = function(text) {
    var match = text.match(SocialCalc.SpreadsheetControl.HTMLRegex);
    if (match) match = match[1];
    return match;
}

SocialCalc.SpreadsheetControl.GetJSONContent = function(text) {
    var match = text.match(SocialCalc.SpreadsheetControl.JSONRegex);
    if (match) match = match[1];
    return match;
}

SocialCalc.SpreadsheetControl.EnsureDialogElementFocus = function(element) {
    if (element.contentEditable != "true") {
        //https://stackoverflow.com/questions/6444968/check-if-object-is-a-textbox-javascript
        var tagName = element.tagName.toLowerCase();
        if (tagName !== 'textarea') {
            if (tagName !== 'input') return;
            var type = element.getAttribute('type').toLowerCase(),
            // if any of these input types is not supported by a browser, it will behave as input type text.
            inputTypes = ['text', 'password', 'number', 'email', 'tel', 'url', 'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week']
            if (inputTypes.indexOf(type) < 0) return;
        }
    }
    element.addEventListener('focus', function(e) {
        SocialCalc.CmdGotFocus(e.target);
    });    
}



SocialCalc.SpreadsheetControl.CheckLoneDialog = function(id) {

    if (!SocialCalc.SpreadsheetControl.DialogIdentifierRegistry) {
        SocialCalc.SpreadsheetControl.DialogIdentifierRegistry = {}
    }
    
    var spreadsheet = SocialCalc.GetSpreadsheetControlObject();
    var multilinedialog = spreadsheet.idPrefix + "multilinedialog";
    SocialCalc.SpreadsheetControl.DialogIdentifierRegistry[multilinedialog] = true;

    if (id) SocialCalc.SpreadsheetControl.DialogIdentifierRegistry[id] = true;

    for (var k in SocialCalc.SpreadsheetControl.DialogIdentifierRegistry) {
        if (document.getElementById(k)) return false;
    }

    var temp = document.createElement("div");
    temp.id = multilinedialog;
    spreadsheet.spreadsheetDiv.appendChild(temp);

    return true;

}



SocialCalc.SpreadsheetControl.HideDialog = function(name) {

    var spreadsheet = SocialCalc.GetSpreadsheetControlObject();
    var idp = spreadsheet.idPrefix + name + "-";
    id = idp + "dialog";

    var editor = spreadsheet.editor;

    var ele = document.getElementById(id);

    if (ele) {
        ele.innerHTML = "";

        SocialCalc.DragUnregister(ele);

        SocialCalc.KeyboardFocus();

        if (ele.parentNode) {
            ele.parentNode.removeChild(ele);
        }
    }

    var spreadsheet = SocialCalc.GetSpreadsheetControlObject();
    var multilinedialog = spreadsheet.idPrefix + "multilinedialog";
    var temp = document.getElementById(multilinedialog);
    if (temp && temp.parentNode) {
        temp.parentNode.removeChild(temp);
    }

    switch (editor.state) {
        case "start":
            editor.inputBox.DisplayCellContents(null);
            break;
        case "input":
        case "inputboxdirect":
            editor.inputBox.element.disabled = false;
            editor.inputBox.Focus();
            break;
    }


}
},{"./lib/beautify-html.js":7,"lda-topic-model":302,"zipjs-browserify":318}],3:[function(require,module,exports){
// ###############  HTML DISPLAY  ###############

var oldFormatValueForDisplay = SocialCalc.FormatValueForDisplay;
SocialCalc.FormatValueForDisplay = function(sheetobj, value, cr, linkstyle) {
    var cell = sheetobj.GetAssuredCell(cr);
    var rownum = SocialCalc.coordToCr(cr).row;
    //Check if it is HTML
    if (cell.valuetype.charAt(0) == 't') {
        var html = SocialCalc.SpreadsheetControl.GetHTMLContent(value);
        if (!html && cell.valuetype == "th") html = value;
        if (html) {
            //Sanitise and rename ids and classes
            value = SocialCalc.HtmlSanitizer.SanitizeHtml(html, "sc-renamed-cell-" + cr + "-");
            var height = sheetobj.rowattribs.height[rownum] || (sheetobj.attribs.rowheight ? sheetobj.attribs.rowheight["html"] : false) || 300;
            if (sheetobj.attribs.ignorerowheights) return '<div>' + value + '</div>';
            else return '<div class="tablerow-html-' + rownum + '" style="max-height:' + height + 'px;overflow:auto;">' + value + '</div>';
        }
        var json = SocialCalc.SpreadsheetControl.GetJSONContent(value);
        if (json) {
            value = SocialCalc.special_chars(json);
            var height = sheetobj.rowattribs.height[rownum] || (sheetobj.attribs.rowheight ? sheetobj.attribs.rowheight["json"] : false) || 300;
            if (sheetobj.attribs.ignorerowheights) return '<div>' + value + '</div>';
            else return '<div class="tablerow-json-' + rownum + '" style="max-height:' + height + 'px;overflow:auto;">' + value + '</div>';
        }
    }
    var value = oldFormatValueForDisplay(sheetobj, value, cr, linkstyle);
    var height = sheetobj.rowattribs.height[rownum] || (sheetobj.attribs.rowheight ? sheetobj.attribs.rowheight["wiki"] : false) || 300;
    if (sheetobj.attribs.ignorerowheights || !value.startsWith('<div class="wiki')) return value;
    else return value.substring(0, 16) + ' tablerow-wiki-' + rownum + '" style="max-height:' + height + 'px;overflow:auto;' + value.substring(16);
}



var oldRenderRow = SocialCalc.RenderRow;
SocialCalc.RenderRow = function(context, rownum, rowpane, linkstyle) {
    var result = oldRenderRow(context, rownum, rowpane, linkstyle);
    var sheetobj = context.sheetobj;
    if (!sheetobj.attribs.ignorerowheights) {
        for (var type of ["html", "json", "wiki"]) {
            var elements = result.getElementsByClassName("tablerow-" + type + "-" + rownum);
            var height = sheetobj.rowattribs.height[rownum] || (sheetobj.attribs.rowheight ? sheetobj.attribs.rowheight[type] : false) || 300;//|| sheetobj.attribs.defaultrowheight || SocialCalc.Constants.defaultAssumedRowHeight;
            for (var element of elements) {
                element.style.maxHeight = height + "px";
                element.style.overflow = "auto";
            }
        }
    }

    return result;
}
},{}],4:[function(require,module,exports){
SocialCalc.Formula.XPathFunction = function (fname, operand, foperand, sheet) {

    //Check args
    if (foperand.length != 2) {
        SocialCalc.Formula.FunctionArgsError(fname, operand);
        return;
    }

    var value = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t = value.type.charAt(0);
    var xpath = value.value;

    var value2 = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t2 = value2.type.charAt(0);
    var text = value2.value;

    var result = 0;
    var resulttype = "e#VALUE!";

    //XPath, target
    if (t == "t" && t2 == "t") {

        var html = SocialCalc.SpreadsheetControl.GetHTMLContent(text);
        if (!html && value2.type == "th") html = text;
        
        if (html) {
            text = SocialCalc.HtmlSanitizer.SanitizeHtml(html);

            var rootNode = document.createElement("div");
            rootNode.innerHTML = text;


            try {

                var xpathResult = document.evaluate(xpath, rootNode, null, XPathResult.ANY_TYPE, null);

                switch (xpathResult.resultType) {

                    case XPathResult.NUMBER_TYPE:
                        result = xpathResult.numberValue;
                        resulttype = "n";
                        break;
                    case XPathResult.STRING_TYPE:
                        result = xpathResult.stringValue;
                        resulttype = "t";
                        break;
                    case XPathResult.BOOLEAN_TYPE:
                        result = xpathResult.booleanValue ? 1 : 0;
                        resulttype = "n";
                        break;
                    case XPathResult.UNORDERED_NODE_ITERATOR_TYPE:
                        var node, nodeText = "";
                        while (node = xpathResult.iterateNext()) {
                            if (node.outerHTML) nodeText += node.outerHTML + "\n";
                            else nodeText += node.data + "\n";
                        }
                        result = ".html\n\n" + nodeText + "\n.html";
                        resulttype = "t";
                        break;

                }

            } catch (error) { }

        }

    }

    SocialCalc.Formula.PushOperand(operand, resulttype, result);
}

SocialCalc.Formula.CSSSelectorFunction = function (fname, operand, foperand, sheet) {

    //Check args
    if (foperand.length != 2) {
        SocialCalc.Formula.FunctionArgsError(fname, operand);
        return;
    }

    var value = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t = value.type.charAt(0);
    var selector = value.value;

    var value2 = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t2 = value2.type.charAt(0);
    var text = value2.value;

    var result = 0;
    var resulttype = "e#VALUE!";

    //XPath, target
    if (t == "t" && t2 == "t") {

        var html = SocialCalc.SpreadsheetControl.GetHTMLContent(text);
        if (!html && value2.type == "th") html = text;

        if (html) {
            text = SocialCalc.HtmlSanitizer.SanitizeHtml(html);

            var rootNode = document.createElement("div");
            rootNode.innerHTML = text;

            try {

                var nodeList = rootNode.querySelectorAll(selector);

                var nodeText = "";

                for (var i = 0; i < nodeList.length; i++) {
                    var node = nodeList[i];
                    nodeText += node.outerHTML + "\n";
                }

                result = ".html\n\n" + nodeText + "\n.html";
                resulttype = "t";


            } catch (error) { }

        }

    }

    SocialCalc.Formula.PushOperand(operand, resulttype, result);
}

SocialCalc.Formula.ElementAtFunction = function (fname, operand, foperand, sheet) {

    //Check args
    if (foperand.length != 2) {
        SocialCalc.Formula.FunctionArgsError(fname, operand);
        return;
    }

    var value = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t = value.type.charAt(0);
    var index = value.value;

    var value2 = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t2 = value2.type.charAt(0);
    var text = value2.value;

    var result = 0;
    var resulttype = "e#VALUE!";

    if (t == "n" && t2 == "t") {

        var html = SocialCalc.SpreadsheetControl.GetHTMLContent(text);
        if (!html && value2.type == "th") html = text;
        
        if (html) {
            text = SocialCalc.HtmlSanitizer.SanitizeHtml(html);

            var rootNode = document.createElement("div");
            rootNode.innerHTML = text;

            if (index >= 1 && index <= rootNode.children.length) {
                result = ".html\n\n" + rootNode.children[index - 1].outerHTML + "\n\n.html";
                resulttype = "t";
            }
            else {
                result = ".html\n\n.html";
                resulttype = "t";
            }

        }

    }

    SocialCalc.Formula.PushOperand(operand, resulttype, result);
}



SocialCalc.Formula.FunctionList["XPATH"] = [SocialCalc.Formula.XPathFunction, 2, "selector", "", "html"];
SocialCalc.Formula.FunctionList["CSSS"] = [SocialCalc.Formula.CSSSelectorFunction, 2, "selector", "", "html"];
SocialCalc.Formula.FunctionList["ELEMENTAT"] = [SocialCalc.Formula.ElementAtFunction, 2, "elementat", "", "html"];


SocialCalc.Formula.CoerceFunction = function (fname, operand, foperand, sheet) {

    //Check args
    if (foperand.length != 2) {
        SocialCalc.Formula.FunctionArgsError(fname, operand);
        return;
    }

    var value = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t = value.type.charAt(0);
    var coercion = value.value;
    
    var value2 = SocialCalc.Formula.OperandAsText(sheet, foperand);
    var text = value2.value;

    var result = 0;
    var resulttype = "e#VALUE!";

    if (t == "t") {
        
        var coercionResult = SocialCalc.SpreadsheetControl.Coerce.DoCoercionForValue(coercion, text, value2.type);

        result = coercionResult.value;
        resulttype = coercionResult.type;

    }

    SocialCalc.Formula.PushOperand(operand, resulttype, result);
}

SocialCalc.Formula.FunctionList["COERCE"] = [SocialCalc.Formula.CoerceFunction, 2, "coerce", "", "html"];

},{}],5:[function(require,module,exports){
//### PASTING ###

if (!SocialCalc.SpreadsheetControl.HTMLMultiline) SocialCalc.SpreadsheetControl.HTMLMultiline = {}

//https://stackoverflow.com/questions/2176861/javascript-get-clipboard-data-on-paste-event-cross-browser/6804718#6804718
//https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event

SocialCalc.SpreadsheetControl.HTMLMultiline.AddPasteHandler = function(element) {

    element.addEventListener('paste', function(e) {

        var spreadsheet = SocialCalc.GetSpreadsheetControlObject();
        var idp = spreadsheet.idPrefix + "htmlmultiline-";

        var richtextCheckbox = document.getElementById(idp + "richtext");
        var richtext = richtextCheckbox ? richtextCheckbox.checked : false;

        var text = "";

        // Browsers that support the 'text/html' type in the Clipboard API (Chrome, Firefox 22+)
        if (e && e.clipboardData && e.clipboardData.types && e.clipboardData.getData) {

            // Check for 'text/html' in types list. See abligh's answer below for deatils on
            // why the DOMStringList bit is needed. We cannot fall back to 'text/plain' as
            // Safari/Edge don't advertise HTML data even if it is available
            types = e.clipboardData.types;

            var pasteHtmlCheckbox = document.getElementById(idp + "paste-html");
            var type = !pasteHtmlCheckbox ? null : (richtext || pasteHtmlCheckbox.checked) ? "text/html" : "text/plain";

            if (type && ((types instanceof DOMStringList) && types.contains(type))
                    || (types.indexOf && types.indexOf(type) !== -1)) {
        
                text = e.clipboardData.getData(type);
            }

        }
        else {
            text = (e.clipboardData || window.clipboardData).getData('text');
        }

        if (richtext && type != "text/html") text = SocialCalc.special_chars(text);

        SocialCalc.SpreadsheetControl.HTMLMultiline.InsertText(text, richtext);
        
        // Stop the data from actually being pasted
        e.stopPropagation();
        e.preventDefault();
        return false;

    });

}



SocialCalc.SpreadsheetControl.HTMLMultiline.InsertText = function(text, richtext) {

    if (!richtext && document.queryCommandSupported && document.queryCommandSupported('insertText')) {
        // This method is deprecated and has differing support
        document.execCommand('insertText', false, text);
    }
    else if (richtext && document.queryCommandSupported && document.queryCommandSupported('insertHTML')) {
        text = SocialCalc.HtmlSanitizer.SanitizeHtml(text);
        // This method is deprecated and has differing support
        document.execCommand('insertHTML', false, text);
    } else {
        // Range.insertNode does not support undo properly
        var selection = window.getSelection();
        if (!selection.rangeCount) return false;
        selection.deleteFromDocument();

        var range = selection.getRangeAt(0);

        if (!richtext) {
            range.insertNode(document.createTextNode(text));
        }
        else {
            var container = document.createElement("div");
            text = SocialCalc.HtmlSanitizer.SanitizeHtml(text);
            container.innerHTML = text;
            var fragment = document.createDocumentFragment();
            var node;
            while (node = container.firstChild) {
                fragment.appendChild(node);
            }
            range.insertNode(fragment);
        }
    }

}








SocialCalc.SpreadsheetControl.HTMLMultiline.AddDropHandler = function(element) {

    element.addEventListener('drop', function (e) {

        var dropped = false;
        var stringItem = null;

        if (e.dataTransfer.items) {
            // Use DataTransferItemList interface to access the file(s)
            for (var i = 0; i < e.dataTransfer.items.length; i++) {
                // If dropped items aren't files, reject them
                if (e.dataTransfer.items[i].kind === 'file') {
                    var file = e.dataTransfer.items[i].getAsFile();
                    var nowDropped = SocialCalc.SpreadsheetControl.HTMLMultiline.DropFile(file);
                    if (!dropped) dropped = nowDropped;
                }
                else {
                    //Dropped string
                    var item = e.dataTransfer.items[i];
                    if (!stringItem
                            || SocialCalc.SpreadsheetControl.HTMLMultiline.ScoreStringItem(item)
                             > SocialCalc.SpreadsheetControl.HTMLMultiline.ScoreStringItem(stringItem)) {
                        stringItem = item;
                    }
                }
            }
            if (stringItem) {
                dropped = SocialCalc.SpreadsheetControl.HTMLMultiline.DropFile(stringItem, true);
            }
        } else {
            // Use DataTransfer interface to access the file(s)
            for (var i = 0; i < e.dataTransfer.files.length; i++) {
                var file = e.dataTransfer.files[i];
                dropped = SocialCalc.SpreadsheetControl.HTMLMultiline.DropFile(file);
            }
        }

        if (dropped) e.preventDefault();

    });

}



SocialCalc.SpreadsheetControl.HTMLMultiline.DropFile = function(file, isString) {

    var spreadsheet = SocialCalc.GetSpreadsheetControlObject();
    var idp = spreadsheet.idPrefix + "htmlmultiline-";
    var richtext = document.getElementById(idp + "richtext").checked;

    var type = file.type;
    var name = (file.name || "");

    var callback = null;
    var asData = false;

    if (type == "text/html") {
        callback = function(text) {
            text = SocialCalc.HtmlSanitizer.SanitizeHtml(text);
            text = SocialCalc.SpreadsheetControl.BeautifyHtml(text);
            SocialCalc.SpreadsheetControl.HTMLMultiline.InsertText(text, richtext);
        }
    }
    else if (type.startsWith("text")) {
        callback = function(text) {
            text = SocialCalc.special_chars(text);
            SocialCalc.SpreadsheetControl.HTMLMultiline.InsertText(text, richtext);
        }
    }
    else if (type.startsWith("image")) {
        callback = function(text) {
            text = '<img src="' + text + '">';
            SocialCalc.SpreadsheetControl.HTMLMultiline.InsertText(text, richtext);
        }
        asData = true;
    }
    else if (name.endsWith(".htz")) {
        callback = function(text) {
            SocialCalc.SpreadsheetControl.HTMLMultiline.InsertHTZ(text, richtext);
        }
        asData = true;
    }
    else return true;

    if (isString) {
        file.getAsString(callback);
        //TODO Could base64 be needed?
    }
    else {
        var reader = new FileReader();

        reader.onload = function() {
            var text = reader.result;
            callback(text);
        };

        reader.onerror = function() {
            console.err(reader.error);
        };

        if (asData) reader.readAsDataURL(file);
        else reader.readAsText(file);
    }

    return true;
    
}



SocialCalc.SpreadsheetControl.HTMLMultiline.ScoreStringItem = function(item) {
    var type = item.type;
    var score = 0;
    if (type.startsWith("image")) score = 100;
    if (type == "text/html") score = 90;
    else if (type == "text/plain") score = 80;
    else if (type.startsWith("text")) score = 70;

    return score;
}



SocialCalc.SpreadsheetControl.HTMLMultiline.LoadFiles = function(input) {
    for (var file of input.files) {
        SocialCalc.SpreadsheetControl.HTMLMultiline.DropFile(file);
    }
}



SocialCalc.SpreadsheetControl.HTMLMultiline.InsertHTZ = function(zipData, richtext) {
    
    var zip = SocialCalc.SpreadsheetControl.Zip;

    // use a BlobReader to read the zip from a Blob object
    zip.createReader(new zip.Data64URIReader(zipData), function(reader) {

        // get all entries from the zip
        reader.getEntries(function(entries) {

            for (var entry of entries) {
                if (entry.filename.endsWith(".html")) {
                    entry.getData(new zip.TextWriter(), function(text) {
                        // text contains the entry data as a String
                        text = SocialCalc.HtmlSanitizer.SanitizeHtml(text);
                        text = SocialCalc.SpreadsheetControl.BeautifyHtml(text);
                        SocialCalc.SpreadsheetControl.HTMLMultiline.InsertText(text, richtext);

                        // close the zip reader
                        reader.close(function() {
                            // onclose callback
                        });

                    }, function (current, total) {
                        // onprogress callback
                    });
                }
            }
        });
    }, function (error) {
        // onerror callback
    });

}


},{}],6:[function(require,module,exports){
//Placeholder to load beautify-html.js as module
},{}],7:[function(require,module,exports){
(function (global){(function (){
/* AUTO-GENERATED. DO NOT MODIFY. */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.


 Style HTML
---------------

  Written by Nochum Sossonko, (nsossonko@hotmail.com)

  Based on code initially developed by: Einar Lielmanis, <einar@beautifier.io>
    https://beautifier.io/

  Usage:
    style_html(html_source);

    style_html(html_source, options);

  The options are:
    indent_inner_html (default false)  — indent <head> and <body> sections,
    indent_size (default 4)          — indentation size,
    indent_char (default space)      — character to indent with,
    wrap_line_length (default 250)            -  maximum amount of characters per line (0 = disable)
    brace_style (default "collapse") - "collapse" | "expand" | "end-expand" | "none"
            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.
    inline (defaults to inline tags) - list of tags to be considered inline tags
    unformatted (defaults to inline tags) - list of tags, that shouldn't be reformatted
    content_unformatted (defaults to ["pre", "textarea"] tags) - list of tags, whose content shouldn't be reformatted
    indent_scripts (default normal)  - "keep"|"separate"|"normal"
    preserve_newlines (default true) - whether existing line breaks before elements should be preserved
                                        Only works before elements, not inside tags or for text.
    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk
    indent_handlebars (default false) - format and indent {{#foo}} and {{/foo}}
    end_with_newline (false)          - end with a newline
    extra_liners (default [head,body,/html]) -List of tags that should have an extra newline before them.

    e.g.

    style_html(html_source, {
      'indent_inner_html': false,
      'indent_size': 2,
      'indent_char': ' ',
      'wrap_line_length': 78,
      'brace_style': 'expand',
      'preserve_newlines': true,
      'max_preserve_newlines': 5,
      'indent_handlebars': false,
      'extra_liners': ['/html']
    });
*/

(function() {

/* GENERATED_BUILD_OUTPUT */
var legacy_beautify_html =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 18);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */,
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true */
/*
  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/



function OutputLine(parent) {
  this.__parent = parent;
  this.__character_count = 0;
  // use indent_count as a marker for this.__lines that have preserved indentation
  this.__indent_count = -1;
  this.__alignment_count = 0;
  this.__wrap_point_index = 0;
  this.__wrap_point_character_count = 0;
  this.__wrap_point_indent_count = -1;
  this.__wrap_point_alignment_count = 0;

  this.__items = [];
}

OutputLine.prototype.clone_empty = function() {
  var line = new OutputLine(this.__parent);
  line.set_indent(this.__indent_count, this.__alignment_count);
  return line;
};

OutputLine.prototype.item = function(index) {
  if (index < 0) {
    return this.__items[this.__items.length + index];
  } else {
    return this.__items[index];
  }
};

OutputLine.prototype.has_match = function(pattern) {
  for (var lastCheckedOutput = this.__items.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--) {
    if (this.__items[lastCheckedOutput].match(pattern)) {
      return true;
    }
  }
  return false;
};

OutputLine.prototype.set_indent = function(indent, alignment) {
  if (this.is_empty()) {
    this.__indent_count = indent || 0;
    this.__alignment_count = alignment || 0;
    this.__character_count = this.__parent.get_indent_size(this.__indent_count, this.__alignment_count);
  }
};

OutputLine.prototype._set_wrap_point = function() {
  if (this.__parent.wrap_line_length) {
    this.__wrap_point_index = this.__items.length;
    this.__wrap_point_character_count = this.__character_count;
    this.__wrap_point_indent_count = this.__parent.next_line.__indent_count;
    this.__wrap_point_alignment_count = this.__parent.next_line.__alignment_count;
  }
};

OutputLine.prototype._should_wrap = function() {
  return this.__wrap_point_index &&
    this.__character_count > this.__parent.wrap_line_length &&
    this.__wrap_point_character_count > this.__parent.next_line.__character_count;
};

OutputLine.prototype._allow_wrap = function() {
  if (this._should_wrap()) {
    this.__parent.add_new_line();
    var next = this.__parent.current_line;
    next.set_indent(this.__wrap_point_indent_count, this.__wrap_point_alignment_count);
    next.__items = this.__items.slice(this.__wrap_point_index);
    this.__items = this.__items.slice(0, this.__wrap_point_index);

    next.__character_count += this.__character_count - this.__wrap_point_character_count;
    this.__character_count = this.__wrap_point_character_count;

    if (next.__items[0] === " ") {
      next.__items.splice(0, 1);
      next.__character_count -= 1;
    }
    return true;
  }
  return false;
};

OutputLine.prototype.is_empty = function() {
  return this.__items.length === 0;
};

OutputLine.prototype.last = function() {
  if (!this.is_empty()) {
    return this.__items[this.__items.length - 1];
  } else {
    return null;
  }
};

OutputLine.prototype.push = function(item) {
  this.__items.push(item);
  var last_newline_index = item.lastIndexOf('\n');
  if (last_newline_index !== -1) {
    this.__character_count = item.length - last_newline_index;
  } else {
    this.__character_count += item.length;
  }
};

OutputLine.prototype.pop = function() {
  var item = null;
  if (!this.is_empty()) {
    item = this.__items.pop();
    this.__character_count -= item.length;
  }
  return item;
};


OutputLine.prototype._remove_indent = function() {
  if (this.__indent_count > 0) {
    this.__indent_count -= 1;
    this.__character_count -= this.__parent.indent_size;
  }
};

OutputLine.prototype._remove_wrap_indent = function() {
  if (this.__wrap_point_indent_count > 0) {
    this.__wrap_point_indent_count -= 1;
  }
};
OutputLine.prototype.trim = function() {
  while (this.last() === ' ') {
    this.__items.pop();
    this.__character_count -= 1;
  }
};

OutputLine.prototype.toString = function() {
  var result = '';
  if (this.is_empty()) {
    if (this.__parent.indent_empty_lines) {
      result = this.__parent.get_indent_string(this.__indent_count);
    }
  } else {
    result = this.__parent.get_indent_string(this.__indent_count, this.__alignment_count);
    result += this.__items.join('');
  }
  return result;
};

function IndentStringCache(options, baseIndentString) {
  this.__cache = [''];
  this.__indent_size = options.indent_size;
  this.__indent_string = options.indent_char;
  if (!options.indent_with_tabs) {
    this.__indent_string = new Array(options.indent_size + 1).join(options.indent_char);
  }

  // Set to null to continue support for auto detection of base indent
  baseIndentString = baseIndentString || '';
  if (options.indent_level > 0) {
    baseIndentString = new Array(options.indent_level + 1).join(this.__indent_string);
  }

  this.__base_string = baseIndentString;
  this.__base_string_length = baseIndentString.length;
}

IndentStringCache.prototype.get_indent_size = function(indent, column) {
  var result = this.__base_string_length;
  column = column || 0;
  if (indent < 0) {
    result = 0;
  }
  result += indent * this.__indent_size;
  result += column;
  return result;
};

IndentStringCache.prototype.get_indent_string = function(indent_level, column) {
  var result = this.__base_string;
  column = column || 0;
  if (indent_level < 0) {
    indent_level = 0;
    result = '';
  }
  column += indent_level * this.__indent_size;
  this.__ensure_cache(column);
  result += this.__cache[column];
  return result;
};

IndentStringCache.prototype.__ensure_cache = function(column) {
  while (column >= this.__cache.length) {
    this.__add_column();
  }
};

IndentStringCache.prototype.__add_column = function() {
  var column = this.__cache.length;
  var indent = 0;
  var result = '';
  if (this.__indent_size && column >= this.__indent_size) {
    indent = Math.floor(column / this.__indent_size);
    column -= indent * this.__indent_size;
    result = new Array(indent + 1).join(this.__indent_string);
  }
  if (column) {
    result += new Array(column + 1).join(' ');
  }

  this.__cache.push(result);
};

function Output(options, baseIndentString) {
  this.__indent_cache = new IndentStringCache(options, baseIndentString);
  this.raw = false;
  this._end_with_newline = options.end_with_newline;
  this.indent_size = options.indent_size;
  this.wrap_line_length = options.wrap_line_length;
  this.indent_empty_lines = options.indent_empty_lines;
  this.__lines = [];
  this.previous_line = null;
  this.current_line = null;
  this.next_line = new OutputLine(this);
  this.space_before_token = false;
  this.non_breaking_space = false;
  this.previous_token_wrapped = false;
  // initialize
  this.__add_outputline();
}

Output.prototype.__add_outputline = function() {
  this.previous_line = this.current_line;
  this.current_line = this.next_line.clone_empty();
  this.__lines.push(this.current_line);
};

Output.prototype.get_line_number = function() {
  return this.__lines.length;
};

Output.prototype.get_indent_string = function(indent, column) {
  return this.__indent_cache.get_indent_string(indent, column);
};

Output.prototype.get_indent_size = function(indent, column) {
  return this.__indent_cache.get_indent_size(indent, column);
};

Output.prototype.is_empty = function() {
  return !this.previous_line && this.current_line.is_empty();
};

Output.prototype.add_new_line = function(force_newline) {
  // never newline at the start of file
  // otherwise, newline only if we didn't just add one or we're forced
  if (this.is_empty() ||
    (!force_newline && this.just_added_newline())) {
    return false;
  }

  // if raw output is enabled, don't print additional newlines,
  // but still return True as though you had
  if (!this.raw) {
    this.__add_outputline();
  }
  return true;
};

Output.prototype.get_code = function(eol) {
  this.trim(true);

  // handle some edge cases where the last tokens
  // has text that ends with newline(s)
  var last_item = this.current_line.pop();
  if (last_item) {
    if (last_item[last_item.length - 1] === '\n') {
      last_item = last_item.replace(/\n+$/g, '');
    }
    this.current_line.push(last_item);
  }

  if (this._end_with_newline) {
    this.__add_outputline();
  }

  var sweet_code = this.__lines.join('\n');

  if (eol !== '\n') {
    sweet_code = sweet_code.replace(/[\n]/g, eol);
  }
  return sweet_code;
};

Output.prototype.set_wrap_point = function() {
  this.current_line._set_wrap_point();
};

Output.prototype.set_indent = function(indent, alignment) {
  indent = indent || 0;
  alignment = alignment || 0;

  // Next line stores alignment values
  this.next_line.set_indent(indent, alignment);

  // Never indent your first output indent at the start of the file
  if (this.__lines.length > 1) {
    this.current_line.set_indent(indent, alignment);
    return true;
  }

  this.current_line.set_indent();
  return false;
};

Output.prototype.add_raw_token = function(token) {
  for (var x = 0; x < token.newlines; x++) {
    this.__add_outputline();
  }
  this.current_line.set_indent(-1);
  this.current_line.push(token.whitespace_before);
  this.current_line.push(token.text);
  this.space_before_token = false;
  this.non_breaking_space = false;
  this.previous_token_wrapped = false;
};

Output.prototype.add_token = function(printable_token) {
  this.__add_space_before_token();
  this.current_line.push(printable_token);
  this.space_before_token = false;
  this.non_breaking_space = false;
  this.previous_token_wrapped = this.current_line._allow_wrap();
};

Output.prototype.__add_space_before_token = function() {
  if (this.space_before_token && !this.just_added_newline()) {
    if (!this.non_breaking_space) {
      this.set_wrap_point();
    }
    this.current_line.push(' ');
  }
};

Output.prototype.remove_indent = function(index) {
  var output_length = this.__lines.length;
  while (index < output_length) {
    this.__lines[index]._remove_indent();
    index++;
  }
  this.current_line._remove_wrap_indent();
};

Output.prototype.trim = function(eat_newlines) {
  eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;

  this.current_line.trim();

  while (eat_newlines && this.__lines.length > 1 &&
    this.current_line.is_empty()) {
    this.__lines.pop();
    this.current_line = this.__lines[this.__lines.length - 1];
    this.current_line.trim();
  }

  this.previous_line = this.__lines.length > 1 ?
    this.__lines[this.__lines.length - 2] : null;
};

Output.prototype.just_added_newline = function() {
  return this.current_line.is_empty();
};

Output.prototype.just_added_blankline = function() {
  return this.is_empty() ||
    (this.current_line.is_empty() && this.previous_line.is_empty());
};

Output.prototype.ensure_empty_line_above = function(starts_with, ends_with) {
  var index = this.__lines.length - 2;
  while (index >= 0) {
    var potentialEmptyLine = this.__lines[index];
    if (potentialEmptyLine.is_empty()) {
      break;
    } else if (potentialEmptyLine.item(0).indexOf(starts_with) !== 0 &&
      potentialEmptyLine.item(-1) !== ends_with) {
      this.__lines.splice(index + 1, 0, new OutputLine(this));
      this.previous_line = this.__lines[this.__lines.length - 2];
      break;
    }
    index--;
  }
};

module.exports.Output = Output;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/



function Token(type, text, newlines, whitespace_before) {
  this.type = type;
  this.text = text;

  // comments_before are
  // comments that have a new line before them
  // and may or may not have a newline after
  // this is a set of comments before
  this.comments_before = null; /* inline comment*/


  // this.comments_after =  new TokenStream(); // no new line before and newline after
  this.newlines = newlines || 0;
  this.whitespace_before = whitespace_before || '';
  this.parent = null;
  this.next = null;
  this.previous = null;
  this.opened = null;
  this.closed = null;
  this.directives = null;
}


module.exports.Token = Token;


/***/ }),
/* 4 */,
/* 5 */,
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/



function Options(options, merge_child_field) {
  this.raw_options = _mergeOpts(options, merge_child_field);

  // Support passing the source text back with no change
  this.disabled = this._get_boolean('disabled');

  this.eol = this._get_characters('eol', 'auto');
  this.end_with_newline = this._get_boolean('end_with_newline');
  this.indent_size = this._get_number('indent_size', 4);
  this.indent_char = this._get_characters('indent_char', ' ');
  this.indent_level = this._get_number('indent_level');

  this.preserve_newlines = this._get_boolean('preserve_newlines', true);
  this.max_preserve_newlines = this._get_number('max_preserve_newlines', 32786);
  if (!this.preserve_newlines) {
    this.max_preserve_newlines = 0;
  }

  this.indent_with_tabs = this._get_boolean('indent_with_tabs', this.indent_char === '\t');
  if (this.indent_with_tabs) {
    this.indent_char = '\t';

    // indent_size behavior changed after 1.8.6
    // It used to be that indent_size would be
    // set to 1 for indent_with_tabs. That is no longer needed and
    // actually doesn't make sense - why not use spaces? Further,
    // that might produce unexpected behavior - tabs being used
    // for single-column alignment. So, when indent_with_tabs is true
    // and indent_size is 1, reset indent_size to 4.
    if (this.indent_size === 1) {
      this.indent_size = 4;
    }
  }

  // Backwards compat with 1.3.x
  this.wrap_line_length = this._get_number('wrap_line_length', this._get_number('max_char'));

  this.indent_empty_lines = this._get_boolean('indent_empty_lines');

  // valid templating languages ['django', 'erb', 'handlebars', 'php']
  // For now, 'auto' = all off for javascript, all on for html (and inline javascript).
  // other values ignored
  this.templating = this._get_selection_list('templating', ['auto', 'none', 'django', 'erb', 'handlebars', 'php'], ['auto']);
}

Options.prototype._get_array = function(name, default_value) {
  var option_value = this.raw_options[name];
  var result = default_value || [];
  if (typeof option_value === 'object') {
    if (option_value !== null && typeof option_value.concat === 'function') {
      result = option_value.concat();
    }
  } else if (typeof option_value === 'string') {
    result = option_value.split(/[^a-zA-Z0-9_\/\-]+/);
  }
  return result;
};

Options.prototype._get_boolean = function(name, default_value) {
  var option_value = this.raw_options[name];
  var result = option_value === undefined ? !!default_value : !!option_value;
  return result;
};

Options.prototype._get_characters = function(name, default_value) {
  var option_value = this.raw_options[name];
  var result = default_value || '';
  if (typeof option_value === 'string') {
    result = option_value.replace(/\\r/, '\r').replace(/\\n/, '\n').replace(/\\t/, '\t');
  }
  return result;
};

Options.prototype._get_number = function(name, default_value) {
  var option_value = this.raw_options[name];
  default_value = parseInt(default_value, 10);
  if (isNaN(default_value)) {
    default_value = 0;
  }
  var result = parseInt(option_value, 10);
  if (isNaN(result)) {
    result = default_value;
  }
  return result;
};

Options.prototype._get_selection = function(name, selection_list, default_value) {
  var result = this._get_selection_list(name, selection_list, default_value);
  if (result.length !== 1) {
    throw new Error(
      "Invalid Option Value: The option '" + name + "' can only be one of the following values:\n" +
      selection_list + "\nYou passed in: '" + this.raw_options[name] + "'");
  }

  return result[0];
};


Options.prototype._get_selection_list = function(name, selection_list, default_value) {
  if (!selection_list || selection_list.length === 0) {
    throw new Error("Selection list cannot be empty.");
  }

  default_value = default_value || [selection_list[0]];
  if (!this._is_valid_selection(default_value, selection_list)) {
    throw new Error("Invalid Default Value!");
  }

  var result = this._get_array(name, default_value);
  if (!this._is_valid_selection(result, selection_list)) {
    throw new Error(
      "Invalid Option Value: The option '" + name + "' can contain only the following values:\n" +
      selection_list + "\nYou passed in: '" + this.raw_options[name] + "'");
  }

  return result;
};

Options.prototype._is_valid_selection = function(result, selection_list) {
  return result.length && selection_list.length &&
    !result.some(function(item) { return selection_list.indexOf(item) === -1; });
};


// merges child options up with the parent options object
// Example: obj = {a: 1, b: {a: 2}}
//          mergeOpts(obj, 'b')
//
//          Returns: {a: 2}
function _mergeOpts(allOptions, childFieldName) {
  var finalOpts = {};
  allOptions = _normalizeOpts(allOptions);
  var name;

  for (name in allOptions) {
    if (name !== childFieldName) {
      finalOpts[name] = allOptions[name];
    }
  }

  //merge in the per type settings for the childFieldName
  if (childFieldName && allOptions[childFieldName]) {
    for (name in allOptions[childFieldName]) {
      finalOpts[name] = allOptions[childFieldName][name];
    }
  }
  return finalOpts;
}

function _normalizeOpts(options) {
  var convertedOpts = {};
  var key;

  for (key in options) {
    var newKey = key.replace(/-/g, "_");
    convertedOpts[newKey] = options[key];
  }
  return convertedOpts;
}

module.exports.Options = Options;
module.exports.normalizeOpts = _normalizeOpts;
module.exports.mergeOpts = _mergeOpts;


/***/ }),
/* 7 */,
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/



var regexp_has_sticky = RegExp.prototype.hasOwnProperty('sticky');

function InputScanner(input_string) {
  this.__input = input_string || '';
  this.__input_length = this.__input.length;
  this.__position = 0;
}

InputScanner.prototype.restart = function() {
  this.__position = 0;
};

InputScanner.prototype.back = function() {
  if (this.__position > 0) {
    this.__position -= 1;
  }
};

InputScanner.prototype.hasNext = function() {
  return this.__position < this.__input_length;
};

InputScanner.prototype.next = function() {
  var val = null;
  if (this.hasNext()) {
    val = this.__input.charAt(this.__position);
    this.__position += 1;
  }
  return val;
};

InputScanner.prototype.peek = function(index) {
  var val = null;
  index = index || 0;
  index += this.__position;
  if (index >= 0 && index < this.__input_length) {
    val = this.__input.charAt(index);
  }
  return val;
};

// This is a JavaScript only helper function (not in python)
// Javascript doesn't have a match method
// and not all implementation support "sticky" flag.
// If they do not support sticky then both this.match() and this.test() method
// must get the match and check the index of the match.
// If sticky is supported and set, this method will use it.
// Otherwise it will check that global is set, and fall back to the slower method.
InputScanner.prototype.__match = function(pattern, index) {
  pattern.lastIndex = index;
  var pattern_match = pattern.exec(this.__input);

  if (pattern_match && !(regexp_has_sticky && pattern.sticky)) {
    if (pattern_match.index !== index) {
      pattern_match = null;
    }
  }

  return pattern_match;
};

InputScanner.prototype.test = function(pattern, index) {
  index = index || 0;
  index += this.__position;

  if (index >= 0 && index < this.__input_length) {
    return !!this.__match(pattern, index);
  } else {
    return false;
  }
};

InputScanner.prototype.testChar = function(pattern, index) {
  // test one character regex match
  var val = this.peek(index);
  pattern.lastIndex = 0;
  return val !== null && pattern.test(val);
};

InputScanner.prototype.match = function(pattern) {
  var pattern_match = this.__match(pattern, this.__position);
  if (pattern_match) {
    this.__position += pattern_match[0].length;
  } else {
    pattern_match = null;
  }
  return pattern_match;
};

InputScanner.prototype.read = function(starting_pattern, until_pattern, until_after) {
  var val = '';
  var match;
  if (starting_pattern) {
    match = this.match(starting_pattern);
    if (match) {
      val += match[0];
    }
  }
  if (until_pattern && (match || !starting_pattern)) {
    val += this.readUntil(until_pattern, until_after);
  }
  return val;
};

InputScanner.prototype.readUntil = function(pattern, until_after) {
  var val = '';
  var match_index = this.__position;
  pattern.lastIndex = this.__position;
  var pattern_match = pattern.exec(this.__input);
  if (pattern_match) {
    match_index = pattern_match.index;
    if (until_after) {
      match_index += pattern_match[0].length;
    }
  } else {
    match_index = this.__input_length;
  }

  val = this.__input.substring(this.__position, match_index);
  this.__position = match_index;
  return val;
};

InputScanner.prototype.readUntilAfter = function(pattern) {
  return this.readUntil(pattern, true);
};

InputScanner.prototype.get_regexp = function(pattern, match_from) {
  var result = null;
  var flags = 'g';
  if (match_from && regexp_has_sticky) {
    flags = 'y';
  }
  // strings are converted to regexp
  if (typeof pattern === "string" && pattern !== '') {
    // result = new RegExp(pattern.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'), flags);
    result = new RegExp(pattern, flags);
  } else if (pattern) {
    result = new RegExp(pattern.source, flags);
  }
  return result;
};

InputScanner.prototype.get_literal_regexp = function(literal_string) {
  return RegExp(literal_string.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'));
};

/* css beautifier legacy helpers */
InputScanner.prototype.peekUntilAfter = function(pattern) {
  var start = this.__position;
  var val = this.readUntilAfter(pattern);
  this.__position = start;
  return val;
};

InputScanner.prototype.lookBack = function(testVal) {
  var start = this.__position - 1;
  return start >= testVal.length && this.__input.substring(start - testVal.length, start)
    .toLowerCase() === testVal;
};

module.exports.InputScanner = InputScanner;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/



var InputScanner = __webpack_require__(8).InputScanner;
var Token = __webpack_require__(3).Token;
var TokenStream = __webpack_require__(10).TokenStream;
var WhitespacePattern = __webpack_require__(11).WhitespacePattern;

var TOKEN = {
  START: 'TK_START',
  RAW: 'TK_RAW',
  EOF: 'TK_EOF'
};

var Tokenizer = function(input_string, options) {
  this._input = new InputScanner(input_string);
  this._options = options || {};
  this.__tokens = null;

  this._patterns = {};
  this._patterns.whitespace = new WhitespacePattern(this._input);
};

Tokenizer.prototype.tokenize = function() {
  this._input.restart();
  this.__tokens = new TokenStream();

  this._reset();

  var current;
  var previous = new Token(TOKEN.START, '');
  var open_token = null;
  var open_stack = [];
  var comments = new TokenStream();

  while (previous.type !== TOKEN.EOF) {
    current = this._get_next_token(previous, open_token);
    while (this._is_comment(current)) {
      comments.add(current);
      current = this._get_next_token(previous, open_token);
    }

    if (!comments.isEmpty()) {
      current.comments_before = comments;
      comments = new TokenStream();
    }

    current.parent = open_token;

    if (this._is_opening(current)) {
      open_stack.push(open_token);
      open_token = current;
    } else if (open_token && this._is_closing(current, open_token)) {
      current.opened = open_token;
      open_token.closed = current;
      open_token = open_stack.pop();
      current.parent = open_token;
    }

    current.previous = previous;
    previous.next = current;

    this.__tokens.add(current);
    previous = current;
  }

  return this.__tokens;
};


Tokenizer.prototype._is_first_token = function() {
  return this.__tokens.isEmpty();
};

Tokenizer.prototype._reset = function() {};

Tokenizer.prototype._get_next_token = function(previous_token, open_token) { // jshint unused:false
  this._readWhitespace();
  var resulting_string = this._input.read(/.+/g);
  if (resulting_string) {
    return this._create_token(TOKEN.RAW, resulting_string);
  } else {
    return this._create_token(TOKEN.EOF, '');
  }
};

Tokenizer.prototype._is_comment = function(current_token) { // jshint unused:false
  return false;
};

Tokenizer.prototype._is_opening = function(current_token) { // jshint unused:false
  return false;
};

Tokenizer.prototype._is_closing = function(current_token, open_token) { // jshint unused:false
  return false;
};

Tokenizer.prototype._create_token = function(type, text) {
  var token = new Token(type, text,
    this._patterns.whitespace.newline_count,
    this._patterns.whitespace.whitespace_before_token);
  return token;
};

Tokenizer.prototype._readWhitespace = function() {
  return this._patterns.whitespace.read();
};



module.exports.Tokenizer = Tokenizer;
module.exports.TOKEN = TOKEN;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/



function TokenStream(parent_token) {
  // private
  this.__tokens = [];
  this.__tokens_length = this.__tokens.length;
  this.__position = 0;
  this.__parent_token = parent_token;
}

TokenStream.prototype.restart = function() {
  this.__position = 0;
};

TokenStream.prototype.isEmpty = function() {
  return this.__tokens_length === 0;
};

TokenStream.prototype.hasNext = function() {
  return this.__position < this.__tokens_length;
};

TokenStream.prototype.next = function() {
  var val = null;
  if (this.hasNext()) {
    val = this.__tokens[this.__position];
    this.__position += 1;
  }
  return val;
};

TokenStream.prototype.peek = function(index) {
  var val = null;
  index = index || 0;
  index += this.__position;
  if (index >= 0 && index < this.__tokens_length) {
    val = this.__tokens[index];
  }
  return val;
};

TokenStream.prototype.add = function(token) {
  if (this.__parent_token) {
    token.parent = this.__parent_token;
  }
  this.__tokens.push(token);
  this.__tokens_length += 1;
};

module.exports.TokenStream = TokenStream;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/



var Pattern = __webpack_require__(12).Pattern;

function WhitespacePattern(input_scanner, parent) {
  Pattern.call(this, input_scanner, parent);
  if (parent) {
    this._line_regexp = this._input.get_regexp(parent._line_regexp);
  } else {
    this.__set_whitespace_patterns('', '');
  }

  this.newline_count = 0;
  this.whitespace_before_token = '';
}
WhitespacePattern.prototype = new Pattern();

WhitespacePattern.prototype.__set_whitespace_patterns = function(whitespace_chars, newline_chars) {
  whitespace_chars += '\\t ';
  newline_chars += '\\n\\r';

  this._match_pattern = this._input.get_regexp(
    '[' + whitespace_chars + newline_chars + ']+', true);
  this._newline_regexp = this._input.get_regexp(
    '\\r\\n|[' + newline_chars + ']');
};

WhitespacePattern.prototype.read = function() {
  this.newline_count = 0;
  this.whitespace_before_token = '';

  var resulting_string = this._input.read(this._match_pattern);
  if (resulting_string === ' ') {
    this.whitespace_before_token = ' ';
  } else if (resulting_string) {
    var matches = this.__split(this._newline_regexp, resulting_string);
    this.newline_count = matches.length - 1;
    this.whitespace_before_token = matches[this.newline_count];
  }

  return resulting_string;
};

WhitespacePattern.prototype.matching = function(whitespace_chars, newline_chars) {
  var result = this._create();
  result.__set_whitespace_patterns(whitespace_chars, newline_chars);
  result._update();
  return result;
};

WhitespacePattern.prototype._create = function() {
  return new WhitespacePattern(this._input, this);
};

WhitespacePattern.prototype.__split = function(regexp, input_string) {
  regexp.lastIndex = 0;
  var start_index = 0;
  var result = [];
  var next_match = regexp.exec(input_string);
  while (next_match) {
    result.push(input_string.substring(start_index, next_match.index));
    start_index = next_match.index + next_match[0].length;
    next_match = regexp.exec(input_string);
  }

  if (start_index < input_string.length) {
    result.push(input_string.substring(start_index, input_string.length));
  } else {
    result.push('');
  }

  return result;
};



module.exports.WhitespacePattern = WhitespacePattern;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/



function Pattern(input_scanner, parent) {
  this._input = input_scanner;
  this._starting_pattern = null;
  this._match_pattern = null;
  this._until_pattern = null;
  this._until_after = false;

  if (parent) {
    this._starting_pattern = this._input.get_regexp(parent._starting_pattern, true);
    this._match_pattern = this._input.get_regexp(parent._match_pattern, true);
    this._until_pattern = this._input.get_regexp(parent._until_pattern);
    this._until_after = parent._until_after;
  }
}

Pattern.prototype.read = function() {
  var result = this._input.read(this._starting_pattern);
  if (!this._starting_pattern || result) {
    result += this._input.read(this._match_pattern, this._until_pattern, this._until_after);
  }
  return result;
};

Pattern.prototype.read_match = function() {
  return this._input.match(this._match_pattern);
};

Pattern.prototype.until_after = function(pattern) {
  var result = this._create();
  result._until_after = true;
  result._until_pattern = this._input.get_regexp(pattern);
  result._update();
  return result;
};

Pattern.prototype.until = function(pattern) {
  var result = this._create();
  result._until_after = false;
  result._until_pattern = this._input.get_regexp(pattern);
  result._update();
  return result;
};

Pattern.prototype.starting_with = function(pattern) {
  var result = this._create();
  result._starting_pattern = this._input.get_regexp(pattern, true);
  result._update();
  return result;
};

Pattern.prototype.matching = function(pattern) {
  var result = this._create();
  result._match_pattern = this._input.get_regexp(pattern, true);
  result._update();
  return result;
};

Pattern.prototype._create = function() {
  return new Pattern(this._input, this);
};

Pattern.prototype._update = function() {};

module.exports.Pattern = Pattern;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/



function Directives(start_block_pattern, end_block_pattern) {
  start_block_pattern = typeof start_block_pattern === 'string' ? start_block_pattern : start_block_pattern.source;
  end_block_pattern = typeof end_block_pattern === 'string' ? end_block_pattern : end_block_pattern.source;
  this.__directives_block_pattern = new RegExp(start_block_pattern + / beautify( \w+[:]\w+)+ /.source + end_block_pattern, 'g');
  this.__directive_pattern = / (\w+)[:](\w+)/g;

  this.__directives_end_ignore_pattern = new RegExp(start_block_pattern + /\sbeautify\signore:end\s/.source + end_block_pattern, 'g');
}

Directives.prototype.get_directives = function(text) {
  if (!text.match(this.__directives_block_pattern)) {
    return null;
  }

  var directives = {};
  this.__directive_pattern.lastIndex = 0;
  var directive_match = this.__directive_pattern.exec(text);

  while (directive_match) {
    directives[directive_match[1]] = directive_match[2];
    directive_match = this.__directive_pattern.exec(text);
  }

  return directives;
};

Directives.prototype.readIgnored = function(input) {
  return input.readUntilAfter(this.__directives_end_ignore_pattern);
};


module.exports.Directives = Directives;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/



var Pattern = __webpack_require__(12).Pattern;


var template_names = {
  django: false,
  erb: false,
  handlebars: false,
  php: false
};

// This lets templates appear anywhere we would do a readUntil
// The cost is higher but it is pay to play.
function TemplatablePattern(input_scanner, parent) {
  Pattern.call(this, input_scanner, parent);
  this.__template_pattern = null;
  this._disabled = Object.assign({}, template_names);
  this._excluded = Object.assign({}, template_names);

  if (parent) {
    this.__template_pattern = this._input.get_regexp(parent.__template_pattern);
    this._excluded = Object.assign(this._excluded, parent._excluded);
    this._disabled = Object.assign(this._disabled, parent._disabled);
  }
  var pattern = new Pattern(input_scanner);
  this.__patterns = {
    handlebars_comment: pattern.starting_with(/{{!--/).until_after(/--}}/),
    handlebars_unescaped: pattern.starting_with(/{{{/).until_after(/}}}/),
    handlebars: pattern.starting_with(/{{/).until_after(/}}/),
    php: pattern.starting_with(/<\?(?:[=]|php)/).until_after(/\?>/),
    erb: pattern.starting_with(/<%[^%]/).until_after(/[^%]%>/),
    // django coflicts with handlebars a bit.
    django: pattern.starting_with(/{%/).until_after(/%}/),
    django_value: pattern.starting_with(/{{/).until_after(/}}/),
    django_comment: pattern.starting_with(/{#/).until_after(/#}/)
  };
}
TemplatablePattern.prototype = new Pattern();

TemplatablePattern.prototype._create = function() {
  return new TemplatablePattern(this._input, this);
};

TemplatablePattern.prototype._update = function() {
  this.__set_templated_pattern();
};

TemplatablePattern.prototype.disable = function(language) {
  var result = this._create();
  result._disabled[language] = true;
  result._update();
  return result;
};

TemplatablePattern.prototype.read_options = function(options) {
  var result = this._create();
  for (var language in template_names) {
    result._disabled[language] = options.templating.indexOf(language) === -1;
  }
  result._update();
  return result;
};

TemplatablePattern.prototype.exclude = function(language) {
  var result = this._create();
  result._excluded[language] = true;
  result._update();
  return result;
};

TemplatablePattern.prototype.read = function() {
  var result = '';
  if (this._match_pattern) {
    result = this._input.read(this._starting_pattern);
  } else {
    result = this._input.read(this._starting_pattern, this.__template_pattern);
  }
  var next = this._read_template();
  while (next) {
    if (this._match_pattern) {
      next += this._input.read(this._match_pattern);
    } else {
      next += this._input.readUntil(this.__template_pattern);
    }
    result += next;
    next = this._read_template();
  }

  if (this._until_after) {
    result += this._input.readUntilAfter(this._until_pattern);
  }
  return result;
};

TemplatablePattern.prototype.__set_templated_pattern = function() {
  var items = [];

  if (!this._disabled.php) {
    items.push(this.__patterns.php._starting_pattern.source);
  }
  if (!this._disabled.handlebars) {
    items.push(this.__patterns.handlebars._starting_pattern.source);
  }
  if (!this._disabled.erb) {
    items.push(this.__patterns.erb._starting_pattern.source);
  }
  if (!this._disabled.django) {
    items.push(this.__patterns.django._starting_pattern.source);
    items.push(this.__patterns.django_value._starting_pattern.source);
    items.push(this.__patterns.django_comment._starting_pattern.source);
  }

  if (this._until_pattern) {
    items.push(this._until_pattern.source);
  }
  this.__template_pattern = this._input.get_regexp('(?:' + items.join('|') + ')');
};

TemplatablePattern.prototype._read_template = function() {
  var resulting_string = '';
  var c = this._input.peek();
  if (c === '<') {
    var peek1 = this._input.peek(1);
    //if we're in a comment, do something special
    // We treat all comments as literals, even more than preformatted tags
    // we just look for the appropriate close tag
    if (!this._disabled.php && !this._excluded.php && peek1 === '?') {
      resulting_string = resulting_string ||
        this.__patterns.php.read();
    }
    if (!this._disabled.erb && !this._excluded.erb && peek1 === '%') {
      resulting_string = resulting_string ||
        this.__patterns.erb.read();
    }
  } else if (c === '{') {
    if (!this._disabled.handlebars && !this._excluded.handlebars) {
      resulting_string = resulting_string ||
        this.__patterns.handlebars_comment.read();
      resulting_string = resulting_string ||
        this.__patterns.handlebars_unescaped.read();
      resulting_string = resulting_string ||
        this.__patterns.handlebars.read();
    }
    if (!this._disabled.django) {
      // django coflicts with handlebars a bit.
      if (!this._excluded.django && !this._excluded.handlebars) {
        resulting_string = resulting_string ||
          this.__patterns.django_value.read();
      }
      if (!this._excluded.django) {
        resulting_string = resulting_string ||
          this.__patterns.django_comment.read();
        resulting_string = resulting_string ||
          this.__patterns.django.read();
      }
    }
  }
  return resulting_string;
};


module.exports.TemplatablePattern = TemplatablePattern;


/***/ }),
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/



var Beautifier = __webpack_require__(19).Beautifier,
  Options = __webpack_require__(20).Options;

function style_html(html_source, options, js_beautify, css_beautify) {
  var beautifier = new Beautifier(html_source, options, js_beautify, css_beautify);
  return beautifier.beautify();
}

module.exports = style_html;
module.exports.defaultOptions = function() {
  return new Options();
};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/



var Options = __webpack_require__(20).Options;
var Output = __webpack_require__(2).Output;
var Tokenizer = __webpack_require__(21).Tokenizer;
var TOKEN = __webpack_require__(21).TOKEN;

var lineBreak = /\r\n|[\r\n]/;
var allLineBreaks = /\r\n|[\r\n]/g;

var Printer = function(options, base_indent_string) { //handles input/output and some other printing functions

  this.indent_level = 0;
  this.alignment_size = 0;
  this.max_preserve_newlines = options.max_preserve_newlines;
  this.preserve_newlines = options.preserve_newlines;

  this._output = new Output(options, base_indent_string);

};

Printer.prototype.current_line_has_match = function(pattern) {
  return this._output.current_line.has_match(pattern);
};

Printer.prototype.set_space_before_token = function(value, non_breaking) {
  this._output.space_before_token = value;
  this._output.non_breaking_space = non_breaking;
};

Printer.prototype.set_wrap_point = function() {
  this._output.set_indent(this.indent_level, this.alignment_size);
  this._output.set_wrap_point();
};


Printer.prototype.add_raw_token = function(token) {
  this._output.add_raw_token(token);
};

Printer.prototype.print_preserved_newlines = function(raw_token) {
  var newlines = 0;
  if (raw_token.type !== TOKEN.TEXT && raw_token.previous.type !== TOKEN.TEXT) {
    newlines = raw_token.newlines ? 1 : 0;
  }

  if (this.preserve_newlines) {
    newlines = raw_token.newlines < this.max_preserve_newlines + 1 ? raw_token.newlines : this.max_preserve_newlines + 1;
  }
  for (var n = 0; n < newlines; n++) {
    this.print_newline(n > 0);
  }

  return newlines !== 0;
};

Printer.prototype.traverse_whitespace = function(raw_token) {
  if (raw_token.whitespace_before || raw_token.newlines) {
    if (!this.print_preserved_newlines(raw_token)) {
      this._output.space_before_token = true;
    }
    return true;
  }
  return false;
};

Printer.prototype.previous_token_wrapped = function() {
  return this._output.previous_token_wrapped;
};

Printer.prototype.print_newline = function(force) {
  this._output.add_new_line(force);
};

Printer.prototype.print_token = function(token) {
  if (token.text) {
    this._output.set_indent(this.indent_level, this.alignment_size);
    this._output.add_token(token.text);
  }
};

Printer.prototype.indent = function() {
  this.indent_level++;
};

Printer.prototype.get_full_indent = function(level) {
  level = this.indent_level + (level || 0);
  if (level < 1) {
    return '';
  }

  return this._output.get_indent_string(level);
};

var get_type_attribute = function(start_token) {
  var result = null;
  var raw_token = start_token.next;

  // Search attributes for a type attribute
  while (raw_token.type !== TOKEN.EOF && start_token.closed !== raw_token) {
    if (raw_token.type === TOKEN.ATTRIBUTE && raw_token.text === 'type') {
      if (raw_token.next && raw_token.next.type === TOKEN.EQUALS &&
        raw_token.next.next && raw_token.next.next.type === TOKEN.VALUE) {
        result = raw_token.next.next.text;
      }
      break;
    }
    raw_token = raw_token.next;
  }

  return result;
};

var get_custom_beautifier_name = function(tag_check, raw_token) {
  var typeAttribute = null;
  var result = null;

  if (!raw_token.closed) {
    return null;
  }

  if (tag_check === 'script') {
    typeAttribute = 'text/javascript';
  } else if (tag_check === 'style') {
    typeAttribute = 'text/css';
  }

  typeAttribute = get_type_attribute(raw_token) || typeAttribute;

  // For script and style tags that have a type attribute, only enable custom beautifiers for matching values
  // For those without a type attribute use default;
  if (typeAttribute.search('text/css') > -1) {
    result = 'css';
  } else if (typeAttribute.search(/module|((text|application|dojo)\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\+)?json|method|aspect))/) > -1) {
    result = 'javascript';
  } else if (typeAttribute.search(/(text|application|dojo)\/(x-)?(html)/) > -1) {
    result = 'html';
  } else if (typeAttribute.search(/test\/null/) > -1) {
    // Test only mime-type for testing the beautifier when null is passed as beautifing function
    result = 'null';
  }

  return result;
};

function in_array(what, arr) {
  return arr.indexOf(what) !== -1;
}

function TagFrame(parent, parser_token, indent_level) {
  this.parent = parent || null;
  this.tag = parser_token ? parser_token.tag_name : '';
  this.indent_level = indent_level || 0;
  this.parser_token = parser_token || null;
}

function TagStack(printer) {
  this._printer = printer;
  this._current_frame = null;
}

TagStack.prototype.get_parser_token = function() {
  return this._current_frame ? this._current_frame.parser_token : null;
};

TagStack.prototype.record_tag = function(parser_token) { //function to record a tag and its parent in this.tags Object
  var new_frame = new TagFrame(this._current_frame, parser_token, this._printer.indent_level);
  this._current_frame = new_frame;
};

TagStack.prototype._try_pop_frame = function(frame) { //function to retrieve the opening tag to the corresponding closer
  var parser_token = null;

  if (frame) {
    parser_token = frame.parser_token;
    this._printer.indent_level = frame.indent_level;
    this._current_frame = frame.parent;
  }

  return parser_token;
};

TagStack.prototype._get_frame = function(tag_list, stop_list) { //function to retrieve the opening tag to the corresponding closer
  var frame = this._current_frame;

  while (frame) { //till we reach '' (the initial value);
    if (tag_list.indexOf(frame.tag) !== -1) { //if this is it use it
      break;
    } else if (stop_list && stop_list.indexOf(frame.tag) !== -1) {
      frame = null;
      break;
    }
    frame = frame.parent;
  }

  return frame;
};

TagStack.prototype.try_pop = function(tag, stop_list) { //function to retrieve the opening tag to the corresponding closer
  var frame = this._get_frame([tag], stop_list);
  return this._try_pop_frame(frame);
};

TagStack.prototype.indent_to_tag = function(tag_list) {
  var frame = this._get_frame(tag_list);
  if (frame) {
    this._printer.indent_level = frame.indent_level;
  }
};

function Beautifier(source_text, options, js_beautify, css_beautify) {
  //Wrapper function to invoke all the necessary constructors and deal with the output.
  this._source_text = source_text || '';
  options = options || {};
  this._js_beautify = js_beautify;
  this._css_beautify = css_beautify;
  this._tag_stack = null;

  // Allow the setting of language/file-type specific options
  // with inheritance of overall settings
  var optionHtml = new Options(options, 'html');

  this._options = optionHtml;

  this._is_wrap_attributes_force = this._options.wrap_attributes.substr(0, 'force'.length) === 'force';
  this._is_wrap_attributes_force_expand_multiline = (this._options.wrap_attributes === 'force-expand-multiline');
  this._is_wrap_attributes_force_aligned = (this._options.wrap_attributes === 'force-aligned');
  this._is_wrap_attributes_aligned_multiple = (this._options.wrap_attributes === 'aligned-multiple');
  this._is_wrap_attributes_preserve = this._options.wrap_attributes.substr(0, 'preserve'.length) === 'preserve';
  this._is_wrap_attributes_preserve_aligned = (this._options.wrap_attributes === 'preserve-aligned');
}

Beautifier.prototype.beautify = function() {

  // if disabled, return the input unchanged.
  if (this._options.disabled) {
    return this._source_text;
  }

  var source_text = this._source_text;
  var eol = this._options.eol;
  if (this._options.eol === 'auto') {
    eol = '\n';
    if (source_text && lineBreak.test(source_text)) {
      eol = source_text.match(lineBreak)[0];
    }
  }

  // HACK: newline parsing inconsistent. This brute force normalizes the input.
  source_text = source_text.replace(allLineBreaks, '\n');

  var baseIndentString = source_text.match(/^[\t ]*/)[0];

  var last_token = {
    text: '',
    type: ''
  };

  var last_tag_token = new TagOpenParserToken();

  var printer = new Printer(this._options, baseIndentString);
  var tokens = new Tokenizer(source_text, this._options).tokenize();

  this._tag_stack = new TagStack(printer);

  var parser_token = null;
  var raw_token = tokens.next();
  while (raw_token.type !== TOKEN.EOF) {

    if (raw_token.type === TOKEN.TAG_OPEN || raw_token.type === TOKEN.COMMENT) {
      parser_token = this._handle_tag_open(printer, raw_token, last_tag_token, last_token);
      last_tag_token = parser_token;
    } else if ((raw_token.type === TOKEN.ATTRIBUTE || raw_token.type === TOKEN.EQUALS || raw_token.type === TOKEN.VALUE) ||
      (raw_token.type === TOKEN.TEXT && !last_tag_token.tag_complete)) {
      parser_token = this._handle_inside_tag(printer, raw_token, last_tag_token, tokens);
    } else if (raw_token.type === TOKEN.TAG_CLOSE) {
      parser_token = this._handle_tag_close(printer, raw_token, last_tag_token);
    } else if (raw_token.type === TOKEN.TEXT) {
      parser_token = this._handle_text(printer, raw_token, last_tag_token);
    } else {
      // This should never happen, but if it does. Print the raw token
      printer.add_raw_token(raw_token);
    }

    last_token = parser_token;

    raw_token = tokens.next();
  }
  var sweet_code = printer._output.get_code(eol);

  return sweet_code;
};

Beautifier.prototype._handle_tag_close = function(printer, raw_token, last_tag_token) {
  var parser_token = {
    text: raw_token.text,
    type: raw_token.type
  };
  printer.alignment_size = 0;
  last_tag_token.tag_complete = true;

  printer.set_space_before_token(raw_token.newlines || raw_token.whitespace_before !== '', true);
  if (last_tag_token.is_unformatted) {
    printer.add_raw_token(raw_token);
  } else {
    if (last_tag_token.tag_start_char === '<') {
      printer.set_space_before_token(raw_token.text[0] === '/', true); // space before />, no space before >
      if (this._is_wrap_attributes_force_expand_multiline && last_tag_token.has_wrapped_attrs) {
        printer.print_newline(false);
      }
    }
    printer.print_token(raw_token);

  }

  if (last_tag_token.indent_content &&
    !(last_tag_token.is_unformatted || last_tag_token.is_content_unformatted)) {
    printer.indent();

    // only indent once per opened tag
    last_tag_token.indent_content = false;
  }

  if (!last_tag_token.is_inline_element &&
    !(last_tag_token.is_unformatted || last_tag_token.is_content_unformatted)) {
    printer.set_wrap_point();
  }

  return parser_token;
};

Beautifier.prototype._handle_inside_tag = function(printer, raw_token, last_tag_token, tokens) {
  var wrapped = last_tag_token.has_wrapped_attrs;
  var parser_token = {
    text: raw_token.text,
    type: raw_token.type
  };

  printer.set_space_before_token(raw_token.newlines || raw_token.whitespace_before !== '', true);
  if (last_tag_token.is_unformatted) {
    printer.add_raw_token(raw_token);
  } else if (last_tag_token.tag_start_char === '{' && raw_token.type === TOKEN.TEXT) {
    // For the insides of handlebars allow newlines or a single space between open and contents
    if (printer.print_preserved_newlines(raw_token)) {
      raw_token.newlines = 0;
      printer.add_raw_token(raw_token);
    } else {
      printer.print_token(raw_token);
    }
  } else {
    if (raw_token.type === TOKEN.ATTRIBUTE) {
      printer.set_space_before_token(true);
      last_tag_token.attr_count += 1;
    } else if (raw_token.type === TOKEN.EQUALS) { //no space before =
      printer.set_space_before_token(false);
    } else if (raw_token.type === TOKEN.VALUE && raw_token.previous.type === TOKEN.EQUALS) { //no space before value
      printer.set_space_before_token(false);
    }

    if (raw_token.type === TOKEN.ATTRIBUTE && last_tag_token.tag_start_char === '<') {
      if (this._is_wrap_attributes_preserve || this._is_wrap_attributes_preserve_aligned) {
        printer.traverse_whitespace(raw_token);
        wrapped = wrapped || raw_token.newlines !== 0;
      }


      if (this._is_wrap_attributes_force) {
        var force_attr_wrap = last_tag_token.attr_count > 1;
        if (this._is_wrap_attributes_force_expand_multiline && last_tag_token.attr_count === 1) {
          var is_only_attribute = true;
          var peek_index = 0;
          var peek_token;
          do {
            peek_token = tokens.peek(peek_index);
            if (peek_token.type === TOKEN.ATTRIBUTE) {
              is_only_attribute = false;
              break;
            }
            peek_index += 1;
          } while (peek_index < 4 && peek_token.type !== TOKEN.EOF && peek_token.type !== TOKEN.TAG_CLOSE);

          force_attr_wrap = !is_only_attribute;
        }

        if (force_attr_wrap) {
          printer.print_newline(false);
          wrapped = true;
        }
      }
    }
    printer.print_token(raw_token);
    wrapped = wrapped || printer.previous_token_wrapped();
    last_tag_token.has_wrapped_attrs = wrapped;
  }
  return parser_token;
};

Beautifier.prototype._handle_text = function(printer, raw_token, last_tag_token) {
  var parser_token = {
    text: raw_token.text,
    type: 'TK_CONTENT'
  };
  if (last_tag_token.custom_beautifier_name) { //check if we need to format javascript
    this._print_custom_beatifier_text(printer, raw_token, last_tag_token);
  } else if (last_tag_token.is_unformatted || last_tag_token.is_content_unformatted) {
    printer.add_raw_token(raw_token);
  } else {
    printer.traverse_whitespace(raw_token);
    printer.print_token(raw_token);
  }
  return parser_token;
};

Beautifier.prototype._print_custom_beatifier_text = function(printer, raw_token, last_tag_token) {
  var local = this;
  if (raw_token.text !== '') {

    var text = raw_token.text,
      _beautifier,
      script_indent_level = 1,
      pre = '',
      post = '';
    if (last_tag_token.custom_beautifier_name === 'javascript' && typeof this._js_beautify === 'function') {
      _beautifier = this._js_beautify;
    } else if (last_tag_token.custom_beautifier_name === 'css' && typeof this._css_beautify === 'function') {
      _beautifier = this._css_beautify;
    } else if (last_tag_token.custom_beautifier_name === 'html') {
      _beautifier = function(html_source, options) {
        var beautifier = new Beautifier(html_source, options, local._js_beautify, local._css_beautify);
        return beautifier.beautify();
      };
    }

    if (this._options.indent_scripts === "keep") {
      script_indent_level = 0;
    } else if (this._options.indent_scripts === "separate") {
      script_indent_level = -printer.indent_level;
    }

    var indentation = printer.get_full_indent(script_indent_level);

    // if there is at least one empty line at the end of this text, strip it
    // we'll be adding one back after the text but before the containing tag.
    text = text.replace(/\n[ \t]*$/, '');

    // Handle the case where content is wrapped in a comment or cdata.
    if (last_tag_token.custom_beautifier_name !== 'html' &&
      text[0] === '<' && text.match(/^(<!--|<!\[CDATA\[)/)) {
      var matched = /^(<!--[^\n]*|<!\[CDATA\[)(\n?)([ \t\n]*)([\s\S]*)(-->|]]>)$/.exec(text);

      // if we start to wrap but don't finish, print raw
      if (!matched) {
        printer.add_raw_token(raw_token);
        return;
      }

      pre = indentation + matched[1] + '\n';
      text = matched[4];
      if (matched[5]) {
        post = indentation + matched[5];
      }

      // if there is at least one empty line at the end of this text, strip it
      // we'll be adding one back after the text but before the containing tag.
      text = text.replace(/\n[ \t]*$/, '');

      if (matched[2] || matched[3].indexOf('\n') !== -1) {
        // if the first line of the non-comment text has spaces
        // use that as the basis for indenting in null case.
        matched = matched[3].match(/[ \t]+$/);
        if (matched) {
          raw_token.whitespace_before = matched[0];
        }
      }
    }

    if (text) {
      if (_beautifier) {

        // call the Beautifier if avaliable
        var Child_options = function() {
          this.eol = '\n';
        };
        Child_options.prototype = this._options.raw_options;
        var child_options = new Child_options();
        text = _beautifier(indentation + text, child_options);
      } else {
        // simply indent the string otherwise
        var white = raw_token.whitespace_before;
        if (white) {
          text = text.replace(new RegExp('\n(' + white + ')?', 'g'), '\n');
        }

        text = indentation + text.replace(/\n/g, '\n' + indentation);
      }
    }

    if (pre) {
      if (!text) {
        text = pre + post;
      } else {
        text = pre + text + '\n' + post;
      }
    }

    printer.print_newline(false);
    if (text) {
      raw_token.text = text;
      raw_token.whitespace_before = '';
      raw_token.newlines = 0;
      printer.add_raw_token(raw_token);
      printer.print_newline(true);
    }
  }
};

Beautifier.prototype._handle_tag_open = function(printer, raw_token, last_tag_token, last_token) {
  var parser_token = this._get_tag_open_token(raw_token);

  if ((last_tag_token.is_unformatted || last_tag_token.is_content_unformatted) &&
    !last_tag_token.is_empty_element &&
    raw_token.type === TOKEN.TAG_OPEN && raw_token.text.indexOf('</') === 0) {
    // End element tags for unformatted or content_unformatted elements
    // are printed raw to keep any newlines inside them exactly the same.
    printer.add_raw_token(raw_token);
    parser_token.start_tag_token = this._tag_stack.try_pop(parser_token.tag_name);
  } else {
    printer.traverse_whitespace(raw_token);
    this._set_tag_position(printer, raw_token, parser_token, last_tag_token, last_token);
    if (!parser_token.is_inline_element) {
      printer.set_wrap_point();
    }
    printer.print_token(raw_token);
  }

  //indent attributes an auto, forced, aligned or forced-align line-wrap
  if (this._is_wrap_attributes_force_aligned || this._is_wrap_attributes_aligned_multiple || this._is_wrap_attributes_preserve_aligned) {
    parser_token.alignment_size = raw_token.text.length + 1;
  }

  if (!parser_token.tag_complete && !parser_token.is_unformatted) {
    printer.alignment_size = parser_token.alignment_size;
  }

  return parser_token;
};

var TagOpenParserToken = function(parent, raw_token) {
  this.parent = parent || null;
  this.text = '';
  this.type = 'TK_TAG_OPEN';
  this.tag_name = '';
  this.is_inline_element = false;
  this.is_unformatted = false;
  this.is_content_unformatted = false;
  this.is_empty_element = false;
  this.is_start_tag = false;
  this.is_end_tag = false;
  this.indent_content = false;
  this.multiline_content = false;
  this.custom_beautifier_name = null;
  this.start_tag_token = null;
  this.attr_count = 0;
  this.has_wrapped_attrs = false;
  this.alignment_size = 0;
  this.tag_complete = false;
  this.tag_start_char = '';
  this.tag_check = '';

  if (!raw_token) {
    this.tag_complete = true;
  } else {
    var tag_check_match;

    this.tag_start_char = raw_token.text[0];
    this.text = raw_token.text;

    if (this.tag_start_char === '<') {
      tag_check_match = raw_token.text.match(/^<([^\s>]*)/);
      this.tag_check = tag_check_match ? tag_check_match[1] : '';
    } else {
      tag_check_match = raw_token.text.match(/^{{(?:[\^]|#\*?)?([^\s}]+)/);
      this.tag_check = tag_check_match ? tag_check_match[1] : '';

      // handle "{{#> myPartial}}
      if (raw_token.text === '{{#>' && this.tag_check === '>' && raw_token.next !== null) {
        this.tag_check = raw_token.next.text;
      }
    }
    this.tag_check = this.tag_check.toLowerCase();

    if (raw_token.type === TOKEN.COMMENT) {
      this.tag_complete = true;
    }

    this.is_start_tag = this.tag_check.charAt(0) !== '/';
    this.tag_name = !this.is_start_tag ? this.tag_check.substr(1) : this.tag_check;
    this.is_end_tag = !this.is_start_tag ||
      (raw_token.closed && raw_token.closed.text === '/>');

    // handlebars tags that don't start with # or ^ are single_tags, and so also start and end.
    this.is_end_tag = this.is_end_tag ||
      (this.tag_start_char === '{' && (this.text.length < 3 || (/[^#\^]/.test(this.text.charAt(2)))));
  }
};

Beautifier.prototype._get_tag_open_token = function(raw_token) { //function to get a full tag and parse its type
  var parser_token = new TagOpenParserToken(this._tag_stack.get_parser_token(), raw_token);

  parser_token.alignment_size = this._options.wrap_attributes_indent_size;

  parser_token.is_end_tag = parser_token.is_end_tag ||
    in_array(parser_token.tag_check, this._options.void_elements);

  parser_token.is_empty_element = parser_token.tag_complete ||
    (parser_token.is_start_tag && parser_token.is_end_tag);

  parser_token.is_unformatted = !parser_token.tag_complete && in_array(parser_token.tag_check, this._options.unformatted);
  parser_token.is_content_unformatted = !parser_token.is_empty_element && in_array(parser_token.tag_check, this._options.content_unformatted);
  parser_token.is_inline_element = in_array(parser_token.tag_name, this._options.inline) || parser_token.tag_start_char === '{';

  return parser_token;
};

Beautifier.prototype._set_tag_position = function(printer, raw_token, parser_token, last_tag_token, last_token) {

  if (!parser_token.is_empty_element) {
    if (parser_token.is_end_tag) { //this tag is a double tag so check for tag-ending
      parser_token.start_tag_token = this._tag_stack.try_pop(parser_token.tag_name); //remove it and all ancestors
    } else { // it's a start-tag
      // check if this tag is starting an element that has optional end element
      // and do an ending needed
      if (this._do_optional_end_element(parser_token)) {
        if (!parser_token.is_inline_element) {
          printer.print_newline(false);
        }
      }

      this._tag_stack.record_tag(parser_token); //push it on the tag stack

      if ((parser_token.tag_name === 'script' || parser_token.tag_name === 'style') &&
        !(parser_token.is_unformatted || parser_token.is_content_unformatted)) {
        parser_token.custom_beautifier_name = get_custom_beautifier_name(parser_token.tag_check, raw_token);
      }
    }
  }

  if (in_array(parser_token.tag_check, this._options.extra_liners)) { //check if this double needs an extra line
    printer.print_newline(false);
    if (!printer._output.just_added_blankline()) {
      printer.print_newline(true);
    }
  }

  if (parser_token.is_empty_element) { //if this tag name is a single tag type (either in the list or has a closing /)

    // if you hit an else case, reset the indent level if you are inside an:
    // 'if', 'unless', or 'each' block.
    if (parser_token.tag_start_char === '{' && parser_token.tag_check === 'else') {
      this._tag_stack.indent_to_tag(['if', 'unless', 'each']);
      parser_token.indent_content = true;
      // Don't add a newline if opening {{#if}} tag is on the current line
      var foundIfOnCurrentLine = printer.current_line_has_match(/{{#if/);
      if (!foundIfOnCurrentLine) {
        printer.print_newline(false);
      }
    }

    // Don't add a newline before elements that should remain where they are.
    if (parser_token.tag_name === '!--' && last_token.type === TOKEN.TAG_CLOSE &&
      last_tag_token.is_end_tag && parser_token.text.indexOf('\n') === -1) {
      //Do nothing. Leave comments on same line.
    } else {
      if (!(parser_token.is_inline_element || parser_token.is_unformatted)) {
        printer.print_newline(false);
      }
      this._calcluate_parent_multiline(printer, parser_token);
    }
  } else if (parser_token.is_end_tag) { //this tag is a double tag so check for tag-ending
    var do_end_expand = false;

    // deciding whether a block is multiline should not be this hard
    do_end_expand = parser_token.start_tag_token && parser_token.start_tag_token.multiline_content;
    do_end_expand = do_end_expand || (!parser_token.is_inline_element &&
      !(last_tag_token.is_inline_element || last_tag_token.is_unformatted) &&
      !(last_token.type === TOKEN.TAG_CLOSE && parser_token.start_tag_token === last_tag_token) &&
      last_token.type !== 'TK_CONTENT'
    );

    if (parser_token.is_content_unformatted || parser_token.is_unformatted) {
      do_end_expand = false;
    }

    if (do_end_expand) {
      printer.print_newline(false);
    }
  } else { // it's a start-tag
    parser_token.indent_content = !parser_token.custom_beautifier_name;

    if (parser_token.tag_start_char === '<') {
      if (parser_token.tag_name === 'html') {
        parser_token.indent_content = this._options.indent_inner_html;
      } else if (parser_token.tag_name === 'head') {
        parser_token.indent_content = this._options.indent_head_inner_html;
      } else if (parser_token.tag_name === 'body') {
        parser_token.indent_content = this._options.indent_body_inner_html;
      }
    }

    if (!(parser_token.is_inline_element || parser_token.is_unformatted) &&
      (last_token.type !== 'TK_CONTENT' || parser_token.is_content_unformatted)) {
      printer.print_newline(false);
    }

    this._calcluate_parent_multiline(printer, parser_token);
  }
};

Beautifier.prototype._calcluate_parent_multiline = function(printer, parser_token) {
  if (parser_token.parent && printer._output.just_added_newline() &&
    !((parser_token.is_inline_element || parser_token.is_unformatted) && parser_token.parent.is_inline_element)) {
    parser_token.parent.multiline_content = true;
  }
};

//To be used for <p> tag special case:
var p_closers = ['address', 'article', 'aside', 'blockquote', 'details', 'div', 'dl', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hr', 'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'];
var p_parent_excludes = ['a', 'audio', 'del', 'ins', 'map', 'noscript', 'video'];

Beautifier.prototype._do_optional_end_element = function(parser_token) {
  var result = null;
  // NOTE: cases of "if there is no more content in the parent element"
  // are handled automatically by the beautifier.
  // It assumes parent or ancestor close tag closes all children.
  // https://www.w3.org/TR/html5/syntax.html#optional-tags
  if (parser_token.is_empty_element || !parser_token.is_start_tag || !parser_token.parent) {
    return;

  }

  if (parser_token.tag_name === 'body') {
    // A head element’s end tag may be omitted if the head element is not immediately followed by a space character or a comment.
    result = result || this._tag_stack.try_pop('head');

    //} else if (parser_token.tag_name === 'body') {
    // DONE: A body element’s end tag may be omitted if the body element is not immediately followed by a comment.

  } else if (parser_token.tag_name === 'li') {
    // An li element’s end tag may be omitted if the li element is immediately followed by another li element or if there is no more content in the parent element.
    result = result || this._tag_stack.try_pop('li', ['ol', 'ul']);

  } else if (parser_token.tag_name === 'dd' || parser_token.tag_name === 'dt') {
    // A dd element’s end tag may be omitted if the dd element is immediately followed by another dd element or a dt element, or if there is no more content in the parent element.
    // A dt element’s end tag may be omitted if the dt element is immediately followed by another dt element or a dd element.
    result = result || this._tag_stack.try_pop('dt', ['dl']);
    result = result || this._tag_stack.try_pop('dd', ['dl']);


  } else if (parser_token.parent.tag_name === 'p' && p_closers.indexOf(parser_token.tag_name) !== -1) {
    // IMPORTANT: this else-if works because p_closers has no overlap with any other element we look for in this method
    // check for the parent element is an HTML element that is not an <a>, <audio>, <del>, <ins>, <map>, <noscript>, or <video> element,  or an autonomous custom element.
    // To do this right, this needs to be coded as an inclusion of the inverse of the exclusion above.
    // But to start with (if we ignore "autonomous custom elements") the exclusion would be fine.
    var p_parent = parser_token.parent.parent;
    if (!p_parent || p_parent_excludes.indexOf(p_parent.tag_name) === -1) {
      result = result || this._tag_stack.try_pop('p');
    }
  } else if (parser_token.tag_name === 'rp' || parser_token.tag_name === 'rt') {
    // An rt element’s end tag may be omitted if the rt element is immediately followed by an rt or rp element, or if there is no more content in the parent element.
    // An rp element’s end tag may be omitted if the rp element is immediately followed by an rt or rp element, or if there is no more content in the parent element.
    result = result || this._tag_stack.try_pop('rt', ['ruby', 'rtc']);
    result = result || this._tag_stack.try_pop('rp', ['ruby', 'rtc']);

  } else if (parser_token.tag_name === 'optgroup') {
    // An optgroup element’s end tag may be omitted if the optgroup element is immediately followed by another optgroup element, or if there is no more content in the parent element.
    // An option element’s end tag may be omitted if the option element is immediately followed by another option element, or if it is immediately followed by an optgroup element, or if there is no more content in the parent element.
    result = result || this._tag_stack.try_pop('optgroup', ['select']);
    //result = result || this._tag_stack.try_pop('option', ['select']);

  } else if (parser_token.tag_name === 'option') {
    // An option element’s end tag may be omitted if the option element is immediately followed by another option element, or if it is immediately followed by an optgroup element, or if there is no more content in the parent element.
    result = result || this._tag_stack.try_pop('option', ['select', 'datalist', 'optgroup']);

  } else if (parser_token.tag_name === 'colgroup') {
    // DONE: A colgroup element’s end tag may be omitted if the colgroup element is not immediately followed by a space character or a comment.
    // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.
    result = result || this._tag_stack.try_pop('caption', ['table']);

  } else if (parser_token.tag_name === 'thead') {
    // A colgroup element's end tag may be ommitted if a thead, tfoot, tbody, or tr element is started.
    // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.
    result = result || this._tag_stack.try_pop('caption', ['table']);
    result = result || this._tag_stack.try_pop('colgroup', ['table']);

    //} else if (parser_token.tag_name === 'caption') {
    // DONE: A caption element’s end tag may be omitted if the caption element is not immediately followed by a space character or a comment.

  } else if (parser_token.tag_name === 'tbody' || parser_token.tag_name === 'tfoot') {
    // A thead element’s end tag may be omitted if the thead element is immediately followed by a tbody or tfoot element.
    // A tbody element’s end tag may be omitted if the tbody element is immediately followed by a tbody or tfoot element, or if there is no more content in the parent element.
    // A colgroup element's end tag may be ommitted if a thead, tfoot, tbody, or tr element is started.
    // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.
    result = result || this._tag_stack.try_pop('caption', ['table']);
    result = result || this._tag_stack.try_pop('colgroup', ['table']);
    result = result || this._tag_stack.try_pop('thead', ['table']);
    result = result || this._tag_stack.try_pop('tbody', ['table']);

    //} else if (parser_token.tag_name === 'tfoot') {
    // DONE: A tfoot element’s end tag may be omitted if there is no more content in the parent element.

  } else if (parser_token.tag_name === 'tr') {
    // A tr element’s end tag may be omitted if the tr element is immediately followed by another tr element, or if there is no more content in the parent element.
    // A colgroup element's end tag may be ommitted if a thead, tfoot, tbody, or tr element is started.
    // A caption element's end tag may be ommitted if a colgroup, thead, tfoot, tbody, or tr element is started.
    result = result || this._tag_stack.try_pop('caption', ['table']);
    result = result || this._tag_stack.try_pop('colgroup', ['table']);
    result = result || this._tag_stack.try_pop('tr', ['table', 'thead', 'tbody', 'tfoot']);

  } else if (parser_token.tag_name === 'th' || parser_token.tag_name === 'td') {
    // A td element’s end tag may be omitted if the td element is immediately followed by a td or th element, or if there is no more content in the parent element.
    // A th element’s end tag may be omitted if the th element is immediately followed by a td or th element, or if there is no more content in the parent element.
    result = result || this._tag_stack.try_pop('td', ['table', 'thead', 'tbody', 'tfoot', 'tr']);
    result = result || this._tag_stack.try_pop('th', ['table', 'thead', 'tbody', 'tfoot', 'tr']);
  }

  // Start element omission not handled currently
  // A head element’s start tag may be omitted if the element is empty, or if the first thing inside the head element is an element.
  // A tbody element’s start tag may be omitted if the first thing inside the tbody element is a tr element, and if the element is not immediately preceded by a tbody, thead, or tfoot element whose end tag has been omitted. (It can’t be omitted if the element is empty.)
  // A colgroup element’s start tag may be omitted if the first thing inside the colgroup element is a col element, and if the element is not immediately preceded by another colgroup element whose end tag has been omitted. (It can’t be omitted if the element is empty.)

  // Fix up the parent of the parser token
  parser_token.parent = this._tag_stack.get_parser_token();

  return result;
};

module.exports.Beautifier = Beautifier;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/



var BaseOptions = __webpack_require__(6).Options;

function Options(options) {
  BaseOptions.call(this, options, 'html');
  if (this.templating.length === 1 && this.templating[0] === 'auto') {
    this.templating = ['django', 'erb', 'handlebars', 'php'];
  }

  this.indent_inner_html = this._get_boolean('indent_inner_html');
  this.indent_body_inner_html = this._get_boolean('indent_body_inner_html', true);
  this.indent_head_inner_html = this._get_boolean('indent_head_inner_html', true);

  this.indent_handlebars = this._get_boolean('indent_handlebars', true);
  this.wrap_attributes = this._get_selection('wrap_attributes',
    ['auto', 'force', 'force-aligned', 'force-expand-multiline', 'aligned-multiple', 'preserve', 'preserve-aligned']);
  this.wrap_attributes_indent_size = this._get_number('wrap_attributes_indent_size', this.indent_size);
  this.extra_liners = this._get_array('extra_liners', ['head', 'body', '/html']);

  // Block vs inline elements
  // https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements
  // https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements
  // https://www.w3.org/TR/html5/dom.html#phrasing-content
  this.inline = this._get_array('inline', [
    'a', 'abbr', 'area', 'audio', 'b', 'bdi', 'bdo', 'br', 'button', 'canvas', 'cite',
    'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'i', 'iframe', 'img',
    'input', 'ins', 'kbd', 'keygen', 'label', 'map', 'mark', 'math', 'meter', 'noscript',
    'object', 'output', 'progress', 'q', 'ruby', 's', 'samp', /* 'script', */ 'select', 'small',
    'span', 'strong', 'sub', 'sup', 'svg', 'template', 'textarea', 'time', 'u', 'var',
    'video', 'wbr', 'text',
    // obsolete inline tags
    'acronym', 'big', 'strike', 'tt'
  ]);
  this.void_elements = this._get_array('void_elements', [
    // HTLM void elements - aka self-closing tags - aka singletons
    // https://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements
    'area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen',
    'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr',
    // NOTE: Optional tags are too complex for a simple list
    // they are hard coded in _do_optional_end_element

    // Doctype and xml elements
    '!doctype', '?xml',

    // obsolete tags
    // basefont: https://www.computerhope.com/jargon/h/html-basefont-tag.htm
    // isndex: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/isindex
    'basefont', 'isindex'
  ]);
  this.unformatted = this._get_array('unformatted', []);
  this.content_unformatted = this._get_array('content_unformatted', [
    'pre', 'textarea'
  ]);
  this.unformatted_content_delimiter = this._get_characters('unformatted_content_delimiter');
  this.indent_scripts = this._get_selection('indent_scripts', ['normal', 'keep', 'separate']);

}
Options.prototype = new BaseOptions();



module.exports.Options = Options;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/



var BaseTokenizer = __webpack_require__(9).Tokenizer;
var BASETOKEN = __webpack_require__(9).TOKEN;
var Directives = __webpack_require__(13).Directives;
var TemplatablePattern = __webpack_require__(14).TemplatablePattern;
var Pattern = __webpack_require__(12).Pattern;

var TOKEN = {
  TAG_OPEN: 'TK_TAG_OPEN',
  TAG_CLOSE: 'TK_TAG_CLOSE',
  ATTRIBUTE: 'TK_ATTRIBUTE',
  EQUALS: 'TK_EQUALS',
  VALUE: 'TK_VALUE',
  COMMENT: 'TK_COMMENT',
  TEXT: 'TK_TEXT',
  UNKNOWN: 'TK_UNKNOWN',
  START: BASETOKEN.START,
  RAW: BASETOKEN.RAW,
  EOF: BASETOKEN.EOF
};

var directives_core = new Directives(/<\!--/, /-->/);

var Tokenizer = function(input_string, options) {
  BaseTokenizer.call(this, input_string, options);
  this._current_tag_name = '';

  // Words end at whitespace or when a tag starts
  // if we are indenting handlebars, they are considered tags
  var templatable_reader = new TemplatablePattern(this._input).read_options(this._options);
  var pattern_reader = new Pattern(this._input);

  this.__patterns = {
    word: templatable_reader.until(/[\n\r\t <]/),
    single_quote: templatable_reader.until_after(/'/),
    double_quote: templatable_reader.until_after(/"/),
    attribute: templatable_reader.until(/[\n\r\t =>]|\/>/),
    element_name: templatable_reader.until(/[\n\r\t >\/]/),

    handlebars_comment: pattern_reader.starting_with(/{{!--/).until_after(/--}}/),
    handlebars: pattern_reader.starting_with(/{{/).until_after(/}}/),
    handlebars_open: pattern_reader.until(/[\n\r\t }]/),
    handlebars_raw_close: pattern_reader.until(/}}/),
    comment: pattern_reader.starting_with(/<!--/).until_after(/-->/),
    cdata: pattern_reader.starting_with(/<!\[CDATA\[/).until_after(/]]>/),
    // https://en.wikipedia.org/wiki/Conditional_comment
    conditional_comment: pattern_reader.starting_with(/<!\[/).until_after(/]>/),
    processing: pattern_reader.starting_with(/<\?/).until_after(/\?>/)
  };

  if (this._options.indent_handlebars) {
    this.__patterns.word = this.__patterns.word.exclude('handlebars');
  }

  this._unformatted_content_delimiter = null;

  if (this._options.unformatted_content_delimiter) {
    var literal_regexp = this._input.get_literal_regexp(this._options.unformatted_content_delimiter);
    this.__patterns.unformatted_content_delimiter =
      pattern_reader.matching(literal_regexp)
      .until_after(literal_regexp);
  }
};
Tokenizer.prototype = new BaseTokenizer();

Tokenizer.prototype._is_comment = function(current_token) { // jshint unused:false
  return false; //current_token.type === TOKEN.COMMENT || current_token.type === TOKEN.UNKNOWN;
};

Tokenizer.prototype._is_opening = function(current_token) {
  return current_token.type === TOKEN.TAG_OPEN;
};

Tokenizer.prototype._is_closing = function(current_token, open_token) {
  return current_token.type === TOKEN.TAG_CLOSE &&
    (open_token && (
      ((current_token.text === '>' || current_token.text === '/>') && open_token.text[0] === '<') ||
      (current_token.text === '}}' && open_token.text[0] === '{' && open_token.text[1] === '{')));
};

Tokenizer.prototype._reset = function() {
  this._current_tag_name = '';
};

Tokenizer.prototype._get_next_token = function(previous_token, open_token) { // jshint unused:false
  var token = null;
  this._readWhitespace();
  var c = this._input.peek();

  if (c === null) {
    return this._create_token(TOKEN.EOF, '');
  }

  token = token || this._read_open_handlebars(c, open_token);
  token = token || this._read_attribute(c, previous_token, open_token);
  token = token || this._read_close(c, open_token);
  token = token || this._read_raw_content(c, previous_token, open_token);
  token = token || this._read_content_word(c);
  token = token || this._read_comment_or_cdata(c);
  token = token || this._read_processing(c);
  token = token || this._read_open(c, open_token);
  token = token || this._create_token(TOKEN.UNKNOWN, this._input.next());

  return token;
};

Tokenizer.prototype._read_comment_or_cdata = function(c) { // jshint unused:false
  var token = null;
  var resulting_string = null;
  var directives = null;

  if (c === '<') {
    var peek1 = this._input.peek(1);
    // We treat all comments as literals, even more than preformatted tags
    // we only look for the appropriate closing marker
    if (peek1 === '!') {
      resulting_string = this.__patterns.comment.read();

      // only process directive on html comments
      if (resulting_string) {
        directives = directives_core.get_directives(resulting_string);
        if (directives && directives.ignore === 'start') {
          resulting_string += directives_core.readIgnored(this._input);
        }
      } else {
        resulting_string = this.__patterns.cdata.read();
      }
    }

    if (resulting_string) {
      token = this._create_token(TOKEN.COMMENT, resulting_string);
      token.directives = directives;
    }
  }

  return token;
};

Tokenizer.prototype._read_processing = function(c) { // jshint unused:false
  var token = null;
  var resulting_string = null;
  var directives = null;

  if (c === '<') {
    var peek1 = this._input.peek(1);
    if (peek1 === '!' || peek1 === '?') {
      resulting_string = this.__patterns.conditional_comment.read();
      resulting_string = resulting_string || this.__patterns.processing.read();
    }

    if (resulting_string) {
      token = this._create_token(TOKEN.COMMENT, resulting_string);
      token.directives = directives;
    }
  }

  return token;
};

Tokenizer.prototype._read_open = function(c, open_token) {
  var resulting_string = null;
  var token = null;
  if (!open_token) {
    if (c === '<') {

      resulting_string = this._input.next();
      if (this._input.peek() === '/') {
        resulting_string += this._input.next();
      }
      resulting_string += this.__patterns.element_name.read();
      token = this._create_token(TOKEN.TAG_OPEN, resulting_string);
    }
  }
  return token;
};

Tokenizer.prototype._read_open_handlebars = function(c, open_token) {
  var resulting_string = null;
  var token = null;
  if (!open_token) {
    if (this._options.indent_handlebars && c === '{' && this._input.peek(1) === '{') {
      if (this._input.peek(2) === '!') {
        resulting_string = this.__patterns.handlebars_comment.read();
        resulting_string = resulting_string || this.__patterns.handlebars.read();
        token = this._create_token(TOKEN.COMMENT, resulting_string);
      } else {
        resulting_string = this.__patterns.handlebars_open.read();
        token = this._create_token(TOKEN.TAG_OPEN, resulting_string);
      }
    }
  }
  return token;
};


Tokenizer.prototype._read_close = function(c, open_token) {
  var resulting_string = null;
  var token = null;
  if (open_token) {
    if (open_token.text[0] === '<' && (c === '>' || (c === '/' && this._input.peek(1) === '>'))) {
      resulting_string = this._input.next();
      if (c === '/') { //  for close tag "/>"
        resulting_string += this._input.next();
      }
      token = this._create_token(TOKEN.TAG_CLOSE, resulting_string);
    } else if (open_token.text[0] === '{' && c === '}' && this._input.peek(1) === '}') {
      this._input.next();
      this._input.next();
      token = this._create_token(TOKEN.TAG_CLOSE, '}}');
    }
  }

  return token;
};

Tokenizer.prototype._read_attribute = function(c, previous_token, open_token) {
  var token = null;
  var resulting_string = '';
  if (open_token && open_token.text[0] === '<') {

    if (c === '=') {
      token = this._create_token(TOKEN.EQUALS, this._input.next());
    } else if (c === '"' || c === "'") {
      var content = this._input.next();
      if (c === '"') {
        content += this.__patterns.double_quote.read();
      } else {
        content += this.__patterns.single_quote.read();
      }
      token = this._create_token(TOKEN.VALUE, content);
    } else {
      resulting_string = this.__patterns.attribute.read();

      if (resulting_string) {
        if (previous_token.type === TOKEN.EQUALS) {
          token = this._create_token(TOKEN.VALUE, resulting_string);
        } else {
          token = this._create_token(TOKEN.ATTRIBUTE, resulting_string);
        }
      }
    }
  }
  return token;
};

Tokenizer.prototype._is_content_unformatted = function(tag_name) {
  // void_elements have no content and so cannot have unformatted content
  // script and style tags should always be read as unformatted content
  // finally content_unformatted and unformatted element contents are unformatted
  return this._options.void_elements.indexOf(tag_name) === -1 &&
    (this._options.content_unformatted.indexOf(tag_name) !== -1 ||
      this._options.unformatted.indexOf(tag_name) !== -1);
};


Tokenizer.prototype._read_raw_content = function(c, previous_token, open_token) { // jshint unused:false
  var resulting_string = '';
  if (open_token && open_token.text[0] === '{') {
    resulting_string = this.__patterns.handlebars_raw_close.read();
  } else if (previous_token.type === TOKEN.TAG_CLOSE &&
    previous_token.opened.text[0] === '<' && previous_token.text[0] !== '/') {
    // ^^ empty tag has no content 
    var tag_name = previous_token.opened.text.substr(1).toLowerCase();
    if (tag_name === 'script' || tag_name === 'style') {
      // Script and style tags are allowed to have comments wrapping their content
      // or just have regular content.
      var token = this._read_comment_or_cdata(c);
      if (token) {
        token.type = TOKEN.TEXT;
        return token;
      }
      resulting_string = this._input.readUntil(new RegExp('</' + tag_name + '[\\n\\r\\t ]*?>', 'ig'));
    } else if (this._is_content_unformatted(tag_name)) {

      resulting_string = this._input.readUntil(new RegExp('</' + tag_name + '[\\n\\r\\t ]*?>', 'ig'));
    }
  }

  if (resulting_string) {
    return this._create_token(TOKEN.TEXT, resulting_string);
  }

  return null;
};

Tokenizer.prototype._read_content_word = function(c) {
  var resulting_string = '';
  if (this._options.unformatted_content_delimiter) {
    if (c === this._options.unformatted_content_delimiter[0]) {
      resulting_string = this.__patterns.unformatted_content_delimiter.read();
    }
  }

  if (!resulting_string) {
    resulting_string = this.__patterns.word.read();
  }
  if (resulting_string) {
    return this._create_token(TOKEN.TEXT, resulting_string);
  }
};

module.exports.Tokenizer = Tokenizer;
module.exports.TOKEN = TOKEN;


/***/ })
/******/ ]);
var style_html = legacy_beautify_html;
/* Footer */
if (typeof define === "function" && define.amd) {
    // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
    define(["require", "./beautify", "./beautify-css"], function(requireamd) {
        var js_beautify = requireamd("./beautify");
        var css_beautify = requireamd("./beautify-css");

        return {
            html_beautify: function(html_source, options) {
                return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);
            }
        };
    });
} else if (typeof exports !== "undefined") {
    // Add support for CommonJS. Just put this file somewhere on your require.paths
    // and you will be able to `var html_beautify = require("beautify").html_beautify`.
    var js_beautify = require('./beautify.js');
    var css_beautify = require('./beautify-css.js');

    exports.html_beautify = function(html_source, options) {
        return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);
    };
} else if (typeof window !== "undefined") {
    // If we're running a web page and don't have either of the above, add our one global
    window.html_beautify = function(html_source, options) {
        return style_html(html_source, options, window.js_beautify, window.css_beautify);
    };
} else if (typeof global !== "undefined") {
    // If we don't even have window, try global.
    global.html_beautify = function(html_source, options) {
        return style_html(html_source, options, global.js_beautify, global.css_beautify);
    };
}

}());

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./beautify-css.js":6,"./beautify.js":8}],8:[function(require,module,exports){
arguments[4][6][0].apply(exports,arguments)
},{"dup":6}],9:[function(require,module,exports){
//JavaScript HTML Sanitizer, (c) Alexander Yumashev, Jitbit Software.

//homepage https://github.com/jitbit/HtmlSanitizer

//License: MIT https://github.com/jitbit/HtmlSanitizer/blob/master/LICENSE

//console.log('Sanitizer loading');

SocialCalc.HtmlSanitizer = new (function () {

	var tagWhitelist_ = {
		'A': true, 'ABBR': true, 'ARTICLE': true, 'B': true, 'BLOCKQUOTE': true, 'BODY': true, 'BR': true, 'CENTER': true, 'CODE': true, 'DIV': true, 'EM': true, 'FONT': true,
		'H1': true, 'H2': true, 'H3': true, 'H4': true, 'H5': true, 'H6': true, 'HR': true, 'I': true, 'IMG': true, 'LABEL': true, 'LI': true,'MAIN': true, 'OL': true, 'P': true, 'PRE': true,
        'SECTION': true, 'SMALL': true, 'SOURCE': true, 'SPAN': true, 'STRONG': true, 'TABLE': true, 'TBODY': true, 'TR': true, 'TD': true, 'TH': true, 'THEAD': true, 'UL': true, 'U': true, 'VIDEO': true,
	};

	var contentTagWhiteList_ = { 'FORM': true }; //tags that will be converted to DIVs

	var attributeWhitelist_ = { 'align': true, 'color': true, 'controls': true, 'height': true, 'href': true, 'src': true, 'style': true, 'target': true, 'title': true, 'type': true, 'width': true, 'class': true, 'id': true };

	var cssWhitelist_ = { 'color': true, 'background-color': true, 'font-size': true, 'text-align': true, 'text-decoration': true, 'font-weight': true };

	var schemaWhiteList_ = [ 'http:', 'https:', 'data:', 'm-files:', 'file:', 'ftp:' ]; //which "protocols" are allowed in "href", "src" etc

	var uriAttributes_ = { 'href': true, 'action': true };

	this.SanitizeHtml = function(input, prefix, removePrefix) {
		input = input.trim();
		if (input == "") return ""; //to save performance and not create iframe

		//firefox "bogus node" workaround
		if (input == "<br>") return "";

		var iframe = document.createElement('iframe');
		if (iframe['sandbox'] === undefined) {
			alert('Your browser does not support sandboxed iframes. Please upgrade to a modern browser.');
			return '';
		}
		iframe['sandbox'] = 'allow-same-origin';
		iframe.style.display = 'none';
		document.body.appendChild(iframe); // necessary so the iframe contains a document
		var iframedoc = iframe.contentDocument || iframe.contentWindow.document;
		if (iframedoc.body == null) iframedoc.write("<body></body>"); // null in IE
		iframedoc.body.innerHTML = input;

		function makeSanitizedCopy(node) {
			if (node.nodeType == Node.TEXT_NODE) {
				var newNode = node.cloneNode(true);
			} else if (node.nodeType == Node.ELEMENT_NODE && (tagWhitelist_[node.tagName] || contentTagWhiteList_[node.tagName] || node.tagName.indexOf("-") != -1)) {

				//remove useless empty spans (lots of those when pasting from MS Outlook)
				if ((node.tagName == "SPAN" || node.tagName == "B" || node.tagName == "I" || node.tagName == "U")
					&& node.innerHTML.trim() == "") {
					return document.createDocumentFragment();
				}

				if (contentTagWhiteList_[node.tagName])
					newNode = iframedoc.createElement('DIV'); //convert to DIV
				else if (prefix && node.tagName.indexOf("-") != -1) {
					if (removePrefix) {
						if (node.tagName.startsWith(prefix)) {
							node.tagName.substring(prefix.length);
						}
					}
					else newNode = iframedoc.createElement(prefix + node.tagName);
				}
				else newNode = iframedoc.createElement(node.tagName);

				for (var i = 0; i < node.attributes.length; i++) {
					var attr = node.attributes[i];
					if (attributeWhitelist_[attr.name]) {
						if (attr.name == "style") {
							for (s = 0; s < node.style.length; s++) {
								var styleName = node.style[s];
								if (cssWhitelist_[styleName])
									newNode.style.setProperty(styleName, node.style.getPropertyValue(styleName));
							}
						}
						else {
							if (uriAttributes_[attr.name]) { //if this is a "uri" attribute, that can have "javascript:" or something
								if (attr.value.indexOf(":") > -1 && !startsWithAny(attr.value, schemaWhiteList_))
									continue;
							}
							else if (attr.name == "class") {
								if (prefix && attr.value) {
									var classes = attr.value.split(/\s+/);
									newValue = "";
									for (c = 0; c < classes.length; c++) {
										var newClass;
										if (removePrefix) {
											if (parts[c].startsWith(prefix)) {
												newClass = classes[c].substring(prefix.length);
											}
											else newClass = classes[c];
										}
										else  newClass = prefix + classes[c];
										newValue += (newValue == "" ? "" : " ") + newClass;
									}
									attr.value = newValue;
								}
							}
							else if (attr.name == "id") {
								if (prefix && attr.value) {
									if (removePrefix) {
										if (attr.value.startsWith(prefix)) {
											attr.value = attr.value.substring(prefix.length);
										}
									}
									else attr.value = prefix + attr.value;
								}
							}
							newNode.setAttribute(attr.name, attr.value);
						}
					}
				}
				if (node.tagName == "IMG" || node.tagName == "VIDEO") {
					newNode.setAttribute("crossorigin", "");
				}
				for (i = 0; i < node.childNodes.length; i++) {
					var subCopy = makeSanitizedCopy(node.childNodes[i]);
					newNode.appendChild(subCopy, false);
				}
			} else {
				newNode = document.createDocumentFragment();
			}
			return newNode;
		};

		var resultElement = makeSanitizedCopy(iframedoc.body);
		document.body.removeChild(iframe);
		return resultElement.innerHTML
			.replace(/<br[^>]*>(\S)/g, "<br>\n$1")
			.replace(/div><div/g, "div>\n<div"); //replace is just for cleaner code
	}

	function startsWithAny(str, substrings) {
		for (var i = 0; i < substrings.length; i++) {
			if (str.indexOf(substrings[i]) == 0) {
				return true;
			}
		}
		return false;
	}

	this.AllowedTags = tagWhitelist_;
	this.AllowedAttributes = attributeWhitelist_;
	this.AllowedCssStyles = cssWhitelist_;
	this.AllowedSchemas = schemaWhiteList_;
});
},{}],10:[function(require,module,exports){
// SocialCalc.SpreadsheetControl.Lda = 

/*
 * Based on http://www.arbylon.net/projects/LdaGibbsSampler.java
 */



var lda = new function () {
    var documents, z, nw, nd, nwsum, ndsum, thetasum, phisum, V, K, alpha, beta;
    var THIN_INTERVAL = 20;
    var BURN_IN = 100;
    var ITERATIONS = 1000;
    var SAMPLE_LAG;
    var dispcol = 0;
    var numstats = 0;

    function makeArray(x) {
        var a = new Array();
        for (var i = 0; i < x; i++) {
            a[i] = 0;
        }
        return a;
    }
    
    function make2DArray(x, y) {
        var a = new Array();
        for (var i = 0; i < x; i++) {
            a[i] = new Array();
            for (var j = 0; j < y; j++)
                a[i][j] = 0;
        }
        return a;
    }

    this.configure = function (docs, v, iterations, burnIn, thinInterval, sampleLag) {
        this.ITERATIONS = iterations;
        this.BURN_IN = burnIn;
        this.THIN_INTERVAL = thinInterval;
        this.SAMPLE_LAG = sampleLag;
        this.documents = docs;
        this.V = v;
        this.dispcol = 0;
        this.numstats = 0;
    }
    this.initialState = function (K) {
        var i;
        var M = this.documents.length;
        this.nw = make2DArray(this.V, K);
        this.nd = make2DArray(M, K);
        this.nwsum = makeArray(K);
        this.ndsum = makeArray(M);
        this.z = new Array(); for (i = 0; i < M; i++) this.z[i] = new Array();
        for (var m = 0; m < M; m++) {
            var N = this.documents[m].length;
            this.z[m] = new Array();
            for (var n = 0; n < N; n++) {
                var topic = parseInt("" + (Math.random() * K));
                this.z[m][n] = topic;
                this.nw[this.documents[m][n]][topic]++;
                this.nd[m][topic]++;
                this.nwsum[topic]++;
            }
            this.ndsum[m] = N;
        }
    }

    this.gibbs = function (K, alpha, beta) {
        var i;
        this.K = K;
        this.alpha = alpha;
        this.beta = beta;
        if (this.SAMPLE_LAG > 0) {
            this.thetasum = make2DArray(this.documents.length, this.K);
            this.phisum = make2DArray(this.K, this.V);
            this.numstats = 0;
        }
        this.initialState(K);
        //document.write("Sampling " + this.ITERATIONS
        //   + " iterations with burn-in of " + this.BURN_IN + " (B/S="
        //   + this.THIN_INTERVAL + ").<br/>");
        for (i = 0; i < this.ITERATIONS; i++) {
            for (var m = 0; m < this.z.length; m++) {
                for (var n = 0; n < this.z[m].length; n++) {
                    var topic = this.sampleFullConditional(m, n);
                    this.z[m][n] = topic;
                }
            }
            if ((i < this.BURN_IN) && (i % this.THIN_INTERVAL == 0)) {
                //document.write("B");
                this.dispcol++;
            }
            if ((i > this.BURN_IN) && (i % this.THIN_INTERVAL == 0)) {
                //document.write("S");
                this.dispcol++;
            }
            if ((i > this.BURN_IN) && (this.SAMPLE_LAG > 0) && (i % this.SAMPLE_LAG == 0)) {
                this.updateParams();
                //document.write("|");                
                if (i % this.THIN_INTERVAL != 0)
                    this.dispcol++;
            }
            if (this.dispcol >= 100) {
                //document.write("*<br/>");                
                this.dispcol = 0;
            }
        }
    }


    this.sampleFullConditional = function (m, n) {
        var topic = this.z[m][n];
        this.nw[this.documents[m][n]][topic]--;
        this.nd[m][topic]--;
        this.nwsum[topic]--;
        this.ndsum[m]--;
        var p = makeArray(this.K);
        for (var k = 0; k < this.K; k++) {
            p[k] = (this.nw[this.documents[m][n]][k] + this.beta) / (this.nwsum[k] + this.V * this.beta)
                * (this.nd[m][k] + this.alpha) / (this.ndsum[m] + this.K * this.alpha);
        }
        for (var k = 1; k < p.length; k++) {
            p[k] += p[k - 1];
        }
        var u = Math.random() * p[this.K - 1];
        for (topic = 0; topic < p.length; topic++) {
            if (u < p[topic])
                break;
        }
        this.nw[this.documents[m][n]][topic]++;
        this.nd[m][topic]++;
        this.nwsum[topic]++;
        this.ndsum[m]++;
        return topic;
    }

    this.updateParams = function () {
        for (var m = 0; m < this.documents.length; m++) {
            for (var k = 0; k < this.K; k++) {
                this.thetasum[m][k] += (this.nd[m][k] + this.alpha) / (this.ndsum[m] + this.K * this.alpha);
            }
        }
        for (var k = 0; k < this.K; k++) {
            for (var w = 0; w < this.V; w++) {
                this.phisum[k][w] += (this.nw[w][k] + this.beta) / (this.nwsum[k] + this.V * this.beta);
            }
        }
        this.numstats++;
    }

    this.getTheta = function () {
        var theta = new Array(); for (var i = 0; i < this.documents.length; i++) theta[i] = new Array();
        if (this.SAMPLE_LAG > 0) {
            for (var m = 0; m < this.documents.length; m++) {
                for (var k = 0; k < this.K; k++) {
                    theta[m][k] = this.thetasum[m][k] / this.numstats;
                }
            }
        } else {
            for (var m = 0; m < this.documents.length; m++) {
                for (var k = 0; k < this.K; k++) {
                    theta[m][k] = (this.nd[m][k] + this.alpha) / (this.ndsum[m] + this.K * this.alpha);
                }
            }
        }
        return theta;
    }

    this.getPhi = function () {
        var phi = new Array(); for (var i = 0; i < this.K; i++) phi[i] = new Array();
        if (this.SAMPLE_LAG > 0) {
            for (var k = 0; k < this.K; k++) {
                for (var w = 0; w < this.V; w++) {
                    phi[k][w] = this.phisum[k][w] / this.numstats;
                }
            }
        } else {
            for (var k = 0; k < this.K; k++) {
                for (var w = 0; w < this.V; w++) {
                    phi[k][w] = (this.nw[w][k] + this.beta) / (this.nwsum[k] + this.V * this.beta);
                }
            }
        }
        return phi;
    }

}
},{}],11:[function(require,module,exports){
// ############### HTML MULTILINE ###############

//Init
if (!SocialCalc.SpreadsheetControl.HTMLMultiline) SocialCalc.SpreadsheetControl.HTMLMultiline = {}

SocialCalc.SpreadsheetControl.HTMLMultiline.ControlElements = null;

SocialCalc.SpreadsheetControl.HTMLMultiline.ShowDialog = function () {

    var SCLocSS = SocialCalc.LocalizeSubstrings;

    var str, ele, text;

    var spreadsheet = SocialCalc.GetSpreadsheetControlObject();
    var editor = spreadsheet.editor;
    var wval = editor.workingvalues;

    var idp = spreadsheet.idPrefix + "htmlmultiline-";

    var twidth = -1;

    if (!SocialCalc.SpreadsheetControl.CheckLoneDialog(idp + "dialog")) {
        return;
    }

    switch (editor.state) {

        case "start":
            
            if (editor.range.hasrange) {
                wval.ecoord = SocialCalc.crToCoord(editor.range.left, editor.range.top);
                wval.ecol = editor.range.top;
                wval.erow = editor.range.left;
                wval.numcols = editor.range.right - editor.range.left + 1;
                wval.numrows = editor.range.bottom - editor.range.top + 1;
                
                var text = [];
                for (var row = editor.range.top; row <= editor.range.bottom; row++) {
                    for (var col = editor.range.left; col <= editor.range.right; col++) {
                        var cr = SocialCalc.crToCoord(col, row);
                        text.push(editor.context.sheetobj.GetAssuredCell(cr).datavalue+"");
                    }
                }

                if (wval.numcols == 1 || wval.numrows == 1) {
                    twidth = -1;
                }
                else {
                    twidth = wval.numcols;
                }
                
            }
            else {
                wval.ecoord = editor.ecell.coord;
                wval.erow = editor.ecell.row;
                wval.ecol = editor.ecell.col;
                text = editor.context.sheetobj.GetAssuredCell(wval.ecoord).datavalue+"";
            }
            // editor.RangeRemove();
            break;

        case "input":
        case "inputboxdirect":
            text = editor.inputBox.GetText();
            break;
    }

    var text = SocialCalc.SpreadsheetControl.HTMLMultiline.GetText(text, false, true, twidth);

    editor.inputBox.element.disabled = true;

    str = "";

    var previewHTML = "";
    previewHTML = '<div id="' + spreadsheet.idPrefix + 'preview-display-pane" style="width:680px;height:120px;margin:0px 10px 10px 10px; background-color: white; resize: both; overflow: auto;"></div>';

    str += '<div id="' + idp + 'textarea"></div>' +
    '<div id="' + idp + 'controls1" style="width:680px;text-align:right;padding:6px 0px 4px 6px;font-size:small;"></div>' +
    previewHTML +
    '<div id="' + idp + 'controls2" style="width:680px;text-align:right;padding:6px 0px 4px 6px;font-size:small;"></div>' +
    '<hr>' +
    '<div id="' + idp + 'controls3" style="width:680px;text-align:right;padding:6px 0px 4px 6px;font-size:small;"></div>';  

    if (!SocialCalc.SpreadsheetControl.HTMLMultiline.ControlElements) {

        var controlhtml =
            SCLocSS(
                '<input type="checkbox" id="' + idp + 'richtext" checked="true" onchange="SocialCalc.SpreadsheetControl.HTMLMultiline.SwitchEditMode()">&nbsp;'+
                '<label for="' + idp + 'richtext">%loc!Richtext!</label> '+
                
                '<input type="checkbox" id="' + idp + 'paste-html">&nbsp;'+
                '<label for="' + idp + 'paste-html">%loc!Paste HTML!</label> '+

                '<label class=".custom-file-input" for="' + idp + `load" style="content: 'Select some files';display: inline-block;background: -webkit-linear-gradient(top, #f9f9f9, #e3e3e3);border: 1px solid #999;border-radius: 3px;padding: 2px 8px;outline: none;white-space: nowrap;-webkit-user-select: none;cursor: pointer;text-shadow: 1px 1px #fff;font-size:smaller;">%loc!Load...!</label>` +
                '<input type="file" id="' + idp + 'load" multiple="multiple" accept="text/*,image/*,*.htz" style="display:none" onchange="SocialCalc.SpreadsheetControl.HTMLMultiline.LoadFiles(this);"/>' +

                '<br>' +

                '<select id="' + idp + 'orientation-combobox" value="single" style="font-size:smaller;" onchange="SocialCalc.SpreadsheetControl.HTMLMultiline.UpdatePreview();">' +
                '<option value="single">%loc!Single Cell!</option>' +
                '<option value="vertical">%loc!Vertical!</option>' +
                '<option value="horizontal">%loc!Horizontal!</option>' +
                '<option value="table">%loc!Table!</option>' +
                '</select>' +

                '<input type="text" id="' + idp + 'position-textbox" title="%loc!Coordinates!" style="font-size:smaller;width:30px;" oninput="SocialCalc.SpreadsheetControl.HTMLMultiline.UpdatePreview();">&nbsp;' +

                '<select id="' + idp + 'selector-combobox" value="root" style="font-size:smaller;" onchange="SocialCalc.SpreadsheetControl.HTMLMultiline.HandleSelectorChange();">' +
                '<option value="root">%loc!Root Elements!</option>' +
                '<option value="xpath">%loc!XPATH!</option>' +
                '<option value="css">%loc!CSS!</option>' +
                '</select>' +

                '<input type="text" id="' + idp + 'selector-textbox" title="%loc!Selector!" placeholder="%loc!N/A!" style="font-size:smaller;width:80px;" oninput="SocialCalc.SpreadsheetControl.HTMLMultiline.UpdatePreview();">&nbsp;' +

                '<input type="button" value="%loc!Build Selector!" style="font-size:smaller;" onclick="SocialCalc.SpreadsheetControl.SelectorBuilder.ShowDialog();">&nbsp;' +
                
                '<br>' +

                '<input type="button" value="%loc!Cancel!" style="font-size:smaller;" onclick="SocialCalc.SpreadsheetControl.HTMLMultiline.HideDialog();">&nbsp;' +
                '<input type="button" value="%loc!Clear!" style="font-size:smaller;" onclick="SocialCalc.SpreadsheetControl.HTMLMultiline.DoClear();">&nbsp;' +
                '<input type="button" value="%loc!Set Cell Contents!" style="font-size:smaller;" onclick="SocialCalc.SpreadsheetControl.HTMLMultiline.DoPaste();"></div>');
                
        //SocialCalc.SpreadsheetControl.HTMLMultiline.ControlElement
        var cediv = document.createElement("div");
        cediv.innerHTML = controlhtml;
        
        SocialCalc.SpreadsheetControl.HTMLMultiline.ControlElements = [];
        for (var i = 0; i < cediv.children.length; i++) {
            var child = cediv.children[i];
            SocialCalc.SpreadsheetControl.HTMLMultiline.ControlElements.push(child);
            SocialCalc.SpreadsheetControl.EnsureDialogElementFocus(child);
            if (child.id == idp + "position-textbox") {
                editor.StatusCallback[idp + "callback"] = function(element) {
                    return {
                        func: function(editor, command, newcell, params) {
                            if (command == "moveecell") {
                                element.value = newcell;
                                SocialCalc.SpreadsheetControl.HTMLMultiline.UpdatePreview();
                            }
                        }
                    }
                }(child);
            }
            else if (child.id == idp + "selector-textbox") {
                var selectorBox = child;
                $.widget( "custom.catcomplete", $.ui.autocomplete, {
                    _create: function() {
                        this._super();
                        this.widget().menu( "option", "items", "> :not(.ui-autocomplete-category)" );
                    },
                    _renderMenu: function( ul, items ) {
                        var that = this,
                        currentCategory = "";
                        var rect = selectorBox.getBoundingClientRect();

                        //TODO Position at top if not enough space
                        //$( ".selector" ).autocomplete( "option", "position", { my : "left bottom", at: "left top" } );
                        var spaceBottom = (window.innerHeight - rect.bottom - 10);
                        // var spaceTop = (window.innerHeight - rect.top - 10);
                        // var maxHeight;
                        // if (spaceBottom > spaceTop - 100) {
                        //     maxHeight = spaceBottom;
                        //     // $(selectorBox).autocomplete( "option", "position", { my : "left top", at: "left bottom" } );

                        // }
                        // else {
                        //     maxHeight = spaceTop;
                        //     // $(selectorBox).autocomplete( "option", "position", { my : "left bottom", at: "left top" } );
                        // }
                        ul[0].style.maxHeight = spaceBottom + "px";
                        ul[0].style.overflowY = "auto";
                        ul[0].style.overflowX = "hidden";
                        $.each( items, function( index, item ) {
                            var li;
                            if ( item.category != currentCategory ) {
                                ul.append( "<li class='ui-autocomplete-category'><b>" + item.category + "</b></li>" );
                                currentCategory = item.category;
                            }
                            li = that._renderItemData( ul, item );
                            if ( item.category ) {
                                li.attr( "aria-label", item.category + " : " + item.label );
                            }
                        });
                    }
                });
                $(selectorBox).catcomplete({
                    select: function(event, ui) {
                        SocialCalc.SpreadsheetControl.HTMLMultiline.UpdatePreview();
                        return true;
                    },
                    source: function( request, response ) {
                        var matcher = new RegExp( $.ui.autocomplete.escapeRegex( request.term ), "i" );
                        response( $.grep( SocialCalc.SpreadsheetControl.HTMLMultiline.SelectedPredefinedSelectors, function( item ){
                            return matcher.test( item.label ) || matcher.test( item.category );
                        }) );
                    },
                    // position: {
                    //     collision: "flip"
                    // }
                });
            }
        }

    }

    var main = document.createElement("div");
    main.id = idp + "dialog";

    main.style.position = "absolute";

    var vp = SocialCalc.GetViewportInfo();
    var pos = SocialCalc.GetElementPositionWithScroll(spreadsheet.spreadsheetDiv);

    main.style.top = ((vp.height / 3) - pos.top) + "px";
    main.style.left = ((vp.width / 3) - pos.left) + "px";
    main.style.zIndex = 100;
    main.style.backgroundColor = "#FFF";
    main.style.border = "1px solid black";

    //TODO Make nice
    main.innerHTML = '<table cellspacing="0" cellpadding="0" style="border-bottom:1px solid black;"><tr>' +
        '<td style="font-size:10px;cursor:default;width:100%;background-color:#999;color:#FFF;">' +
        SCLocSS("&nbsp;%loc!HTML Input Box!") + '</td>' +
        '<td style="font-size:10px;cursor:default;color:#666;" onclick="SocialCalc.SpreadsheetControl.HTMLMultiline.HideDialog();">&nbsp;X&nbsp;</td></tr></table>' +
        '<div style="background-color:#DDD;">' + str + '</div>';

    

    SocialCalc.DragRegister(main.firstChild.firstChild.firstChild.firstChild, true, true,
        {
            MouseDown: SocialCalc.DragFunctionStart,
            MouseMove: SocialCalc.DragFunctionPosition,
            MouseUp: SocialCalc.DragFunctionPosition,
            Disabled: null, positionobj: main
        },
        spreadsheet.spreadsheetDiv);

    spreadsheet.spreadsheetDiv.appendChild(main);

    // Set up controls
    var controlID = 1;
    for (var i = 0; i < SocialCalc.SpreadsheetControl.HTMLMultiline.ControlElements.length; i++) {
        var controlElement = document.getElementById(idp + "controls" + controlID);
        var element = SocialCalc.SpreadsheetControl.HTMLMultiline.ControlElements[i];
        if (element.tagName == "BR") {
            controlID++;
            continue;
        }
        controlElement.appendChild(element);
    }
    var positionTextbox = document.getElementById(idp + "position-textbox");
    positionTextbox.value = "";
    positionTextbox.placeholder = wval.ecoord;

    // Set up text area
    ele = document.getElementById(idp + "textarea");
    var shadowRoot = ele.attachShadow({mode:"open"});
    shadowRoot.innerHTML = '<div contenteditable="true" style="width:680px;height:120px;margin:0px 10px 10px 10px; background-color: white; resize: both; overflow: auto;" oninput="SocialCalc.SpreadsheetControl.HTMLMultiline.UpdatePreview();">' + text + '</div>';
    ele = shadowRoot.firstChild;
    ele.style.fontFamily = "Courier New";
    SocialCalc.SpreadsheetControl.HTMLMultiline.AddPasteHandler(ele);
    SocialCalc.SpreadsheetControl.HTMLMultiline.AddDropHandler(ele);
    SocialCalc.SpreadsheetControl.EnsureDialogElementFocus(ele);
    ele.focus();
    //!!! need to do keyboard handling: if esc, hide?

    // Switch edit mode if richtext
    var richtextcheckbox = document.getElementById(idp + "richtext");
    if (richtextcheckbox.checked) {
        SocialCalc.SpreadsheetControl.HTMLMultiline.SwitchEditMode();
    }

    // Display preview
    SocialCalc.SpreadsheetControl.HTMLMultiline.UpdatePreview();

}



SocialCalc.SpreadsheetControl.HTMLMultiline.PreviewUpdateTimer = null;

SocialCalc.SpreadsheetControl.HTMLMultiline.UpdatePreview = function() {

    var spreadsheet = SocialCalc.GetSpreadsheetControlObject();
    var previewPaneID = spreadsheet.idPrefix + "preview-display-pane";
    clearTimeout(SocialCalc.SpreadsheetControl.HTMLMultiline.PreviewUpdateTimer);
    if (document.getElementById(previewPaneID)) {
        SocialCalc.SpreadsheetControl.HTMLMultiline.PreviewUpdateTimer =
            setTimeout(function() {
                if (document.getElementById(previewPaneID)) {
                    SocialCalc.SpreadsheetControl.HTMLMultiline.DoPaste(true, true);
                }
            }, 1000);
    }
}



SocialCalc.SpreadsheetControl.HTMLMultiline.HideDialog = function() {
    SocialCalc.SpreadsheetControl.Preview.HideDialog();
    SocialCalc.SpreadsheetControl.HideDialog("htmlmultiline");
}



SocialCalc.SpreadsheetControl.HTMLMultiline.DoClear = function() {
    var spreadsheet = SocialCalc.GetSpreadsheetControlObject();
    var idp = spreadsheet.idPrefix + "htmlmultiline-";
    document.getElementById(idp + "textarea").shadowRoot.firstChild.innerHTML = "";
    SocialCalc.SpreadsheetControl.HTMLMultiline.UpdatePreview();
}



SocialCalc.SpreadsheetControl.HTMLMultiline.ReplaceInitialCharacters = function(text, initialChar, replacement) {
    var c;
    var lines = text.split("\n");
    text = "";
    for (var l = 0; l < lines.length; l++) {
        var line = lines[l];
        var s = "";
        for (c = 0; c < line.length; c++) {
            if (line.charAt(c) == initialChar) s += replacement;
            else break;
        }
        text += (l == 0 ? "" : "\n") + s + line.substring(c);
    }
    return text;
}



SocialCalc.SpreadsheetControl.HTMLMultiline.GetText = function(textinput, richtext, initial, twidth) {

    var textresult = "";

    if (!(textinput instanceof Array)) textinput = [textinput];

    for (var t = 0; t < textinput.length; t++) {
        var text = textinput[t];

        var html = SocialCalc.SpreadsheetControl.GetHTMLContent(text);
        
        if (!initial || html) {

            if (html) text = html;

            if (richtext) {
                text = SocialCalc.SpreadsheetControl.HTMLMultiline.ReplaceInitialCharacters(text, '\xa0', ' ');
            }

            text = SocialCalc.HtmlSanitizer.SanitizeHtml(text);
    
            if (!richtext) {
                if (twidth >= 0) {
                    text = (t % twidth == 0 ? "<tr>" : "")
                        + "<td>" + text + "</td>"
                        + (t % twidth == twidth - 1 || t == textinput.length - 1 ? "</tr>" : "");
                }
                text = SocialCalc.SpreadsheetControl.BeautifyHtml(text);
                
                //text = text.replace(/ /g, "&nbsp;");
                text = SocialCalc.SpreadsheetControl.HTMLMultiline.ReplaceInitialCharacters(text, ' ', '\xa0');

                text = (t == 0 ? "" : "\n") + text;
                text = SocialCalc.special_chars(text);
                text = text.replace(/\n/g, "<br>");
            }
        }
        else {
            if (text.startsWith("'")) {
                text = text.substring(1);
            }
            if (twidth >= 0) {
                text = (t % twidth == 0 ? "<tr>" : "")
                    + "<td>" + text + "</td>"
                    + (t % twidth == twidth - 1 || t == textinput.length - 1 ? "</tr>" : "");
            }
            text = SocialCalc.special_chars(text);
        }

        textresult += text;

    }

    if (twidth >= 0) {
        textresult = "&lt;table><br>" + textresult + "<br>&lt;/table>";
    }

    return textresult;

}



SocialCalc.SpreadsheetControl.HTMLMultiline.SwitchEditMode = function() {

    var spreadsheet = SocialCalc.GetSpreadsheetControlObject();
    var idp = spreadsheet.idPrefix + "htmlmultiline-";
    var id = idp + "textarea";

    var checkbox = document.getElementById(idp + "richtext");
    var richtext = checkbox.checked;
    var currentlyRichtext = !richtext;

    var ele = document.getElementById(id).shadowRoot.firstChild;

    var text = currentlyRichtext ? ele.innerHTML : ele.innerText;

    ele.innerHTML = SocialCalc.SpreadsheetControl.HTMLMultiline.GetText(text, richtext, false, -1);
    ele.style.fontFamily = richtext ? "" : "Courier New";

}



SocialCalc.SpreadsheetControl.HTMLMultiline.DoPaste = function(preview, autoUpdatedPreview) {

    var spreadsheet = SocialCalc.GetSpreadsheetControlObject();
    var editor = spreadsheet.editor;
    var wval = editor.workingvalues;
    var idp = spreadsheet.idPrefix + "htmlmultiline-";

    var ele = document.getElementById(idp + "textarea").shadowRoot.firstChild;

    var richtextcheckbox = document.getElementById(idp + "richtext");
    var selectorType = document.getElementById(idp + "selector-combobox").value;
    var selector = document.getElementById(idp + "selector-textbox").value;
    var positionTextbox = document.getElementById(idp + "position-textbox");
    var position = (positionTextbox.value || positionTextbox.placeholder);
    var orientation = document.getElementById(idp + "orientation-combobox").value;

    var text = richtextcheckbox.checked ? ele.innerHTML : ele.innerText;

    var twidth = -1;
    
    //Editor
    switch (editor.state) {
        case "start":
            wval.partialexpr = "";
            wval.ecoord = editor.ecell.coord;
            wval.erow = editor.ecell.row;
            wval.ecol = editor.ecell.col;
            break;
        case "input":
        case "inputboxdirect":
            editor.inputBox.Blur();
            editor.inputBox.ShowInputBox(false);
            editor.state = "start";
            break;
    }

    //Turn nbsp back into normal spaces
    var lines = text.split("\n");
    var text = "";
    for (var l = 0; l < lines.length; l++) {
        var line = lines[l];
        var c;
        var s = "";
        for (c = 0; c < line.length; c++) {
            if (line.charAt(c) == '\xa0') s += " ";
            else break;
        }
        text += (l == 0 ? "" : "\n") + s + line.substring(c);
    }


    text = SocialCalc.HtmlSanitizer.SanitizeHtml(text);
    var rootNode = document.createElement("div");
    rootNode.innerHTML = text;

    switch (selectorType) {
        case "xpath":
        case "css":
            //Handle table items if selector on single root table
            if (rootNode.children.length == 1 && rootNode.children[0].tagName == "TABLE") {
                result = [];
                var table = rootNode.children[0];
                var numrows = table.rows.length;
                var numcols = 0;
                for (var t = 0; t < numrows; t++) {
                    var row = table.rows[t];
                    if (row.cells.length > numcols) numcols = row.cells.length;
                }
                for (var t = 0; t < numrows; t++) {
                    var row = table.rows[t];
                    for (var c = 0; c < numcols; c++) {
                        if (c < row.cells.length) {
                            var cell = row.cells[c];
                            var cellDiv = document.createElement("div");
                            while (cell.childNodes.length > 0) {
                                cellDiv.appendChild(cell.childNodes[0]);
                            }
                            result.push(SocialCalc.SpreadsheetControl.HTMLMultiline.ApplyHTMLSelector(cellDiv, selectorType, selector));
                        }
                        //TODO Currently empty table cell will still be shown in vertical/horizontal, is this best?
                        else result.push(null);
                    }
                }
                result = {
                    type: "table",
                    result: result,
                    twidth: numcols
                }
            }
            else {
                result = SocialCalc.SpreadsheetControl.HTMLMultiline.ApplyHTMLSelector(rootNode, selectorType, selector);
            }
            break;
        default:
            result = SocialCalc.SpreadsheetControl.HTMLMultiline.ApplyHTMLSelector(rootNode, selectorType, selector);
            break;
    }

    var coercedSelectorResult = SocialCalc.SpreadsheetControl.HTMLMultiline.CoerceSelectorResult(result);
    if (coercedSelectorResult) {
        result = coercedSelectorResult;
    }
    else if (typeof result == "object" && result.type == "table") {
        //It is a table
        twidth = result.twidth;
        result = result.result;
        for (var r = 0; r < result.length; r++) {
            result[r] = SocialCalc.SpreadsheetControl.HTMLMultiline.CoerceSelectorResult(result[r]);
            if (result[r] == null) continue;
            var resultText = "";
            for (var i = 0; i < result[r].length; i++) {
                resultText += (resultText == "" ? "" : "\n") + result[r][i];
            }
            result[r] = resultText;
        }
    }
    else {
        console.error("Unknown selector result type!");
        console.error(result);
        return;
    }


    var numcols = 0;
    var numrows = 0;
    var keepEmptyValues = true;

    
    switch (orientation) {
        case "single":
            var resultText = "";
            for (var i = 0; i < result.length; i++) {
                if (result[i] == null) continue;
                resultText += (resultText == "" ? "" : "\n") + result[i];
            }
            result = [resultText];
            
            numcols = 1;
            numrows = 1;
        break;
        case "vertical":
            numcols = 1;
            numrows = result.length;
            keepEmptyValues = false;
        break;
        case "horizontal":
            numcols = result.length;
            numrows = 1;
            keepEmptyValues = false;
        break;
        case "table":
            if (twidth > -1) {
                numcols = twidth;
                numrows = result.length/twidth;
            }
            else {
                //TODO What if not a table? Currently fails silently
                if (result.length == 1) {
                    var rootNode = document.createElement("div");
                    rootNode.innerHTML = text;
                    var el = rootNode.children[0];
                    if (el && el.tagName == "TABLE") {
                        var result = [];
                        numrows = el.rows.length;
                        for (var t = 0; t < numrows; t++) {
                            var row = el.rows[t];
                            if (row.cells.length > numcols) numcols = row.cells.length;
                        }
                        for (var t = 0; t < numrows; t++) {
                            var row = el.rows[t];
                            for (var c = 0; c < numcols; c++) {
                                if (c < row.cells.length) {
                                    result.push(row.cells[c].innerHTML);
                                }
                                else result.push(null);
                            }
                        }
                    }
                }
            }
        break;
    }


    
    var sheet = spreadsheet.sheet;

    var saveundo = true;
    var changes = sheet.changes;

    var cr1 = /[A-Z]+[1-9][0-9]*/.test(position)
        ? SocialCalc.coordToCr(position)
        : SocialCalc.coordToCr(wval.ecoord);
    var attribs = sheet.attribs;

    sheet.renderneeded = true;
    sheet.changedrendervalues = true;
    if (saveundo) changes.AddUndo("changedrendervalues"); // to take care of undone pasted spans

    if (cr1.col + numcols - 1 > attribs.lastcol) attribs.lastcol = cr1.col + numcols - 1;
    if (cr1.row + numrows - 1 > attribs.lastrow) attribs.lastrow = cr1.row + numrows - 1;

    var cmds = "";

    var previewSheet;
    if (preview) previewSheet = new SocialCalc.Sheet();

    var resultIndex = 0;
    for (row = cr1.row; row < cr1.row + numrows; row++) {
        for (col = cr1.col; col < cr1.col + numcols; col++) {

            var value = result[resultIndex];
            resultIndex++;

            if (value == null) value = "";
            // if (value == null) {
            //     if (keepEmptyValues) value = "";
            //     else continue;
            // }
            
            value = ".html\n\n" + value + "\n\n.html";
            value = SocialCalc.encodeForSave(value);
            var type = "text th";

            var cr = SocialCalc.crToCoord(col, row);
            var cmd = "set "+cr+" "+type+" "+value;
            
            if (preview) {
                var parsedCmd = new SocialCalc.Parse(cmd);
                SocialCalc.ExecuteSheetCommand(previewSheet, parsedCmd, false);
            }
            else {
                cell = sheet.GetAssuredCell(cr);
                if (cell.readonly) continue;

                cmds += (cmds == "" ? "" : "\n") + cmd;
            }
        }
    }

    if (preview) {
        var coord = SocialCalc.crToCoord(cr1.col, cr1.row);
        // var callback = function() {
        //     SocialCalc.SpreadsheetControl.HTMLMultiline.DoPaste();
        // };
        // SocialCalc.SpreadsheetControl.Preview.ShowDialog(previewSheet, coord, callback, autoUpdatedPreview);
        var displayPane = document.getElementById(spreadsheet.idPrefix + "preview-display-pane");
        if  (displayPane) SocialCalc.SpreadsheetControl.Preview.PreviewSheet(displayPane, previewSheet, coord);
    }
    else {
        SocialCalc.SpreadsheetControl.HTMLMultiline.HideDialog();
        editor.EditorScheduleSheetCommands(cmds, true, false);
    }

}



SocialCalc.SpreadsheetControl.HTMLMultiline.ApplyHTMLSelector = function(rootNode, selectorType, selector) {

    var result = [];

    switch (selectorType) {

        case "xpath":

            //Select root nodes if empty
            if (selector == "") selector = "/node()";

            try {

                var xpathResult = document.evaluate(selector, rootNode, null, XPathResult.UNORDERED_NODE_ITERATOR_TYPE, null);

                switch (xpathResult.resultType) {

                    case XPathResult.NUMBER_TYPE:
                        result = xpathResult.numberValue;
                        break;
                    case XPathResult.STRING_TYPE:
                        result = xpathResult.stringValue;
                        break;
                    case XPathResult.BOOLEAN_TYPE:
                        result = xpathResult.booleanValue;
                        break;
                    case XPathResult.UNORDERED_NODE_ITERATOR_TYPE:
                        var node;
                        while (node = xpathResult.iterateNext()) {
                            if (node.outerHTML) result.push(node.outerHTML);
                            else {
                                //Exclude whitespace nodes unless nbsp
                                if (node.nodeValue.indexOf("\u00A0") > -1 || node.nodeValue.trim().length > 0) {
                                    result.push(node.nodeValue);
                                }
                            }
                        }
                        break;

                }

            } catch (error) {
                result = error;
            }

            break;

        case "css":

            try {

                var nodeList = rootNode.querySelectorAll(selector);

                for (var i = 0; i < nodeList.length; i++) {
                    var node = nodeList[i];
                    result.push(node.outerHTML);
                }

            } catch (error) {
                result = error;
            }

            break;

        case "root":
        default:
            for (var i = 0; i < rootNode.childNodes.length; i++) {
                var node = rootNode.childNodes[i];
                if (node.outerHTML) result.push(node.outerHTML);
                else {
                    //Exclude whitespace nodes unless nbsp
                    if (node.nodeValue.indexOf("\u00A0") > -1 || node.nodeValue.trim().length > 0) {
                        result.push(node.nodeValue);
                    }
                }
                
            }
            break;

    }

    return result;

}



SocialCalc.SpreadsheetControl.HTMLMultiline.CoerceSelectorResult = function(result) {

    if (result == null) {
        //Do nothing
    } if (typeof result == "string") {
        result = [result];
    }
    else if (typeof result == "number") {
        //TODO Consider
        result = [result + ""];
    }
    else if (typeof result == "boolean") {
        //TODO Consider
        result = [result + ""];
    }
    else if (result instanceof Error) {
        result = ["<!-- " + result.name + ": " + result.message + " -->"];
    }
    else if (result instanceof Array) {
        //Do nothing
    }
    else return null;

    return result;

}



SocialCalc.SpreadsheetControl.HTMLMultiline.HandleSelectorChange = function() {
    var spreadsheet = SocialCalc.GetSpreadsheetControlObject();
    var idp = spreadsheet.idPrefix + "htmlmultiline-";

    var selectorType = document.getElementById(idp + "selector-combobox").value;
    var placeholder;
    var data;
    switch (selectorType) {
        case "xpath":
            placeholder = "//div/p[@id='t']";
            data = SocialCalc.SpreadsheetControl.HTMLMultiline.XPathPredefinedSelectors;
        break;
        case "css":
            placeholder = "div > p#t";
            data = SocialCalc.SpreadsheetControl.HTMLMultiline.CSSPredefinedSelectors;
        break;
        case "root":
            placeholder = "N/A";
            data = [];
        break;
        default:
            placeholder = "Selector";
            data = [];
        break;
    }
    document.getElementById(idp + "selector-textbox").placeholder = placeholder;
    SocialCalc.SpreadsheetControl.HTMLMultiline.UpdatePreview();

    SocialCalc.SpreadsheetControl.HTMLMultiline.SelectedPredefinedSelectors = data;
}

SocialCalc.SpreadsheetControl.HTMLMultiline.SelectedPredefinedSelectors = [];

SocialCalc.SpreadsheetControl.HTMLMultiline.XPathPredefinedSelectors = [
    { category: "Twitter", label: "Tweets",         value: "//article" },
    { category: "Twitter", label: "Tweet Text",     value: "//article/div/div/div/div[2]/div[2]/div[2]/div[1]/div" },
    { category: "Twitter", label: "Username",       value: "//article/div/div/div/div[2]/div[2]/div[1]/div/div/div[1]/div[1]/a/div/div[1]/div[1]/span/span/text()" },
    { category: "Twitter", label: "Handle",         value: "//article/div/div/div/div[2]/div[2]/div[1]/div/div/div[1]/div[1]/a/div/div[2]/div/span/text()" },
    { category: "Twitter", label: "Profile Image",  value: "//article/div/div/div/div[2]/div[1]/div/div/a/div[1]/div[2]/div/img" },
    { category: "Twitter", label: "Replies",        value: "//article/div/div/div/div[2]/div[2]/div[2]/div[3]/div[1]/div/div/div[2]/span/span/text()" },
    { category: "Twitter", label: "Retweets",       value: "//article/div/div/div/div[2]/div[2]/div[2]/div[3]/div[2]/div/div/div[2]/span/span/text()" },
    { category: "Twitter", label: "Likes",          value: "//article/div/div/div/div[2]/div[2]/div[2]/div[3]/div[3]/div/div/div[2]/span/span/text()" },
    { category: "Twitter", label: "Hashtags",       value: "//article/div/div/div/div[2]/div[2]/div[2]/div[1]/div/span/a/text()" },
    { category: "Twitter", label: "Mentions",       value: "//article/div/div/div/div[2]/div[2]/div[2]/div[1]/div/div/span/a/text()" },

    { category: "Wikipedia", label: "Text", value: "//p" },
    { category: "Wikipedia", label: "Links", value: "//p/a" },
    { category: "Wikipedia", label: "URLs", value: "//p/a/@href" },
    { category: "Wikipedia", label: "Page Title", value: "//h1/text()" },
    { category: "Wikipedia", label: "Images", value: "//img[@class='thumbimage']" },
];

SocialCalc.SpreadsheetControl.HTMLMultiline.CSSPredefinedSelectors = [

];
},{}],12:[function(require,module,exports){
//Init
if (!SocialCalc.SpreadsheetControl.Preview) SocialCalc.SpreadsheetControl.Preview = {}

SocialCalc.SpreadsheetControl.Preview.ShowDialog = function (sheet, coord, callback, autoUpdated) {

    var SCLocSS = SocialCalc.LocalizeSubstrings;

    var str, ele;

    var spreadsheet = SocialCalc.GetSpreadsheetControlObject();
    var editor = spreadsheet.editor;

    var idp = spreadsheet.idPrefix + "preview-";

    ele = document.getElementById(idp + "dialog");
    if (!ele) {

        editor.inputBox.element.disabled = true;

        str = "";

        str += '<div id="' + idp + 'display-pane" style="width:680px;height:120px;margin:0px 10px 10px 10px; background-color: white; resize: both; overflow: auto;"></div>' +
            '<div id="' + idp + 'controls" style="width:680px;text-align:right;padding:6px 0px 4px 6px;font-size:small;"></div>';

        if (!SocialCalc.SpreadsheetControl.Preview.ControlElements) {

            var controlhtml =
                SCLocSS(
                    '<input type="button" id="' + idp + 'apply" value="%loc!Apply!" style="font-size:smaller;">&nbsp;' +
                    '<input type="button" id="' + idp + 'done" value="%loc!Cancel!" style="font-size:smaller;" onclick="SocialCalc.SpreadsheetControl.Preview.HideDialog();"></div>');

            var cediv = document.createElement("div");
            cediv.innerHTML = controlhtml;

            SocialCalc.SpreadsheetControl.Preview.ControlElements = [];
            for (var i = 0; i < cediv.children.length; i++) {
                var child = cediv.children[i];
                SocialCalc.SpreadsheetControl.Preview.ControlElements.push(child);
            }

        }

        var main = document.createElement("div");
        main.id = idp + "dialog";

        main.style.position = "absolute";

        var vp = SocialCalc.GetViewportInfo();
        var pos = SocialCalc.GetElementPositionWithScroll(spreadsheet.spreadsheetDiv);

        main.style.top = ((vp.height / 3) - pos.top) + "px";
        main.style.left = ((vp.width / 3) - pos.left) + "px";
        main.style.zIndex = 100;
        main.style.backgroundColor = "#FFF";
        main.style.border = "1px solid black";

        //TODO Make nice
        main.innerHTML = '<table cellspacing="0" cellpadding="0" style="border-bottom:1px solid black;"><tr>' +
            '<td style="font-size:10px;cursor:default;width:100%;background-color:#999;color:#FFF;">' +
            SCLocSS("&nbsp;%loc!Preview!") + '</td>' +
            '<td style="font-size:10px;cursor:default;color:#666;" onclick="SocialCalc.SpreadsheetControl.Preview.HideDialog();">&nbsp;X&nbsp;</td></tr></table>' +
            '<div style="background-color:#DDD;">' + str + '</div>';


        SocialCalc.DragRegister(main.firstChild.firstChild.firstChild.firstChild, true, true,
            {
                MouseDown: SocialCalc.DragFunctionStart,
                MouseMove: SocialCalc.DragFunctionPosition,
                MouseUp: SocialCalc.DragFunctionPosition,
                Disabled: null, positionobj: main
            },
            spreadsheet.spreadsheetDiv);

        spreadsheet.spreadsheetDiv.appendChild(main);

    }

    //Show preview
    var displayPane = document.getElementById(idp + "display-pane");
    SocialCalc.SpreadsheetControl.Preview.PreviewSheet(displayPane, sheet, coord);

    //Set up controls
    var controlElement = document.getElementById(idp + "controls");
    for (var i = 0; i < SocialCalc.SpreadsheetControl.Preview.ControlElements.length; i++) {
        controlElement.appendChild(SocialCalc.SpreadsheetControl.Preview.ControlElements[i]);
    }

    ele = document.getElementById(idp + "apply");
    if (callback) {
        ele.onclick = function() {
            SocialCalc.SpreadsheetControl.Preview.HideDialog();
            callback();
        }
    }
    else {
        controlElement.removeChild(ele);
        ele = document.getElementById(idp + "done");
    }
    if (!autoUpdated) {
        ele.focus();
        SocialCalc.CmdGotFocus(ele);
    }
    //!!! need to do keyboard handling: if esc, hide?

}

SocialCalc.SpreadsheetControl.Preview.HideDialog = function () {

    var spreadsheet = SocialCalc.GetSpreadsheetControlObject();
    var idp = spreadsheet.idPrefix + "preview-";
    var ele = document.getElementById(idp + "dialog");
    if (ele) {
        ele.innerHTML = "";

        SocialCalc.DragUnregister(ele);

        SocialCalc.KeyboardFocus();

        if (ele.parentNode) {
            ele.parentNode.removeChild(ele);
        }
    }

}


SocialCalc.SpreadsheetControl.Preview.PreviewSheet = function (displayPane, sheet, baseCoord) {

    sheet.attribs.ignorerowheights = true;

    SocialCalc.ExecuteSheetCommand(sheet, new SocialCalc.Parse("set sheet defaulttextvalueformat text-wiki"), false);

    displayPane.innerHTML = "";
    
    var cr = SocialCalc.coordToCr(baseCoord);

    var context = new SocialCalc.RenderContext(sheet);
    context.rowpanes = [{first: cr.row, last: sheet.attribs.lastrow}]
    context.colpanes = [{first: cr.col, last: sheet.attribs.lastcol}]
    context.showRCHeaders = true;
    context.showGrid = true;
    
    var displayTable = context.RenderSheet(null, null);

    //Remove sizing row added by - tbodyobj.appendChild(context.RenderSizingRow());
    var tbody = displayTable.children[1];
    tbody.removeChild(tbody.firstChild);

    displayPane.appendChild(displayTable);

}
},{}],13:[function(require,module,exports){
//Init
if (!SocialCalc.SpreadsheetControl.SelectorBuilder) SocialCalc.SpreadsheetControl.SelectorBuilder = {}

SocialCalc.SpreadsheetControl.SelectorBuilder.ShowDialog = function () {

    var SCLocSS = SocialCalc.LocalizeSubstrings;

    var str, ele;

    var spreadsheet = SocialCalc.GetSpreadsheetControlObject();
    var editor = spreadsheet.editor;

    var idp = spreadsheet.idPrefix + "selectorbuilder-";

    ele = document.getElementById(idp + "dialog");
    if (!ele) {

        editor.inputBox.element.disabled = true;

        str = "";

        str += '<textarea id="' + idp + 'textarea" style="width:680px;height:120px;margin:0px 10px 10px 10px; background-color: white; resize: both; overflow: auto;" wrap="off"></textarea>' +
            '<div id="' + idp + 'controls" style="width:680px;text-align:right;padding:6px 0px 4px 6px;font-size:small;"></div>';

        if (!SocialCalc.SpreadsheetControl.SelectorBuilder.ControlElements) {

            var controlhtml =
                SCLocSS(
                    '<label for="' + idp + 'output-textbox">%loc!Output!</label> '+
                    '<input type="text" id="' + idp + 'output-textbox" style="font-size:smaller;">&nbsp;' +

                    '<input type="checkbox" id="' + idp + 'update-selector-checkbox">'+
                    '<label for="' + idp + 'update-selector-checkbox">%loc!Update Selector!</label> '+

                    '<select id="' + idp + 'branches-combobox" value="0" style="font-size:smaller;">' +
                    '<option value="0">%loc!No branches!</option>' +
                    '<option value="1">%loc!1 branch!</option>' +
                    '<option value="2">%loc!2 branches!</option>' +
                    '<option value="3">%loc!3 branches!</option>' +
                    '</select>' +

                    '<select id="' + idp + 'selector-combobox" value="xpath" style="font-size:smaller;">' +
                    '<option value="xpath">%loc!XPATH!</option>' +
                    '<option value="css">%loc!CSS!</option>' +
                    '</select>' +
                    
                    '<input type="button" value="%loc!Combine!" style="font-size:smaller;" onclick="SocialCalc.SpreadsheetControl.SelectorBuilder.Combine();">&nbsp;' +
                    
                    '<br>' +
                    '<input type="button" value="%loc!Cancel!" style="font-size:smaller;" onclick="SocialCalc.SpreadsheetControl.SelectorBuilder.HideDialog();"></div>' +
                    '<input type="button" value="%loc!Clear!" style="font-size:smaller;" onclick="SocialCalc.SpreadsheetControl.SelectorBuilder.Clear();">&nbsp;' +
                    '<input type="button" value="%loc!Add!" style="font-size:smaller;" onclick="SocialCalc.SpreadsheetControl.SelectorBuilder.AddSelector();">&nbsp;');

            var cediv = document.createElement("div");
            cediv.innerHTML = controlhtml;

            SocialCalc.SpreadsheetControl.SelectorBuilder.ControlElements = [];
            for (var i = 0; i < cediv.children.length; i++) {
                var child = cediv.children[i];
                SocialCalc.SpreadsheetControl.SelectorBuilder.ControlElements.push(child);
            }

        }

        var main = document.createElement("div");
        main.id = idp + "dialog";

        main.style.position = "absolute";

        var vp = SocialCalc.GetViewportInfo();
        var pos = SocialCalc.GetElementPositionWithScroll(spreadsheet.spreadsheetDiv);

        main.style.top = ((vp.height / 3) - pos.top) + "px";
        main.style.left = ((vp.width / 3) - pos.left) + "px";
        main.style.zIndex = 100;
        main.style.backgroundColor = "#FFF";
        main.style.border = "1px solid black";

        //TODO Make nice
        main.innerHTML = '<table cellspacing="0" cellpadding="0" style="border-bottom:1px solid black;"><tr>' +
            '<td style="font-size:10px;cursor:default;width:100%;background-color:#999;color:#FFF;">' +
            SCLocSS("&nbsp;%loc!Selector Builder!") + '</td>' +
            '<td style="font-size:10px;cursor:default;color:#666;" onclick="SocialCalc.SpreadsheetControl.SelectorBuilder.HideDialog();">&nbsp;X&nbsp;</td></tr></table>' +
            '<div style="background-color:#DDD;">' + str + '</div>';


        SocialCalc.DragRegister(main.firstChild.firstChild.firstChild.firstChild, true, true,
            {
                MouseDown: SocialCalc.DragFunctionStart,
                MouseMove: SocialCalc.DragFunctionPosition,
                MouseUp: SocialCalc.DragFunctionPosition,
                Disabled: null, positionobj: main
            },
            spreadsheet.spreadsheetDiv);

        spreadsheet.spreadsheetDiv.appendChild(main);

    }

    //Set up controls
    var controlElement = document.getElementById(idp + "controls");
    for (var i = 0; i < SocialCalc.SpreadsheetControl.SelectorBuilder.ControlElements.length; i++) {
        controlElement.appendChild(SocialCalc.SpreadsheetControl.SelectorBuilder.ControlElements[i]);
    }

    // ele = document.getElementById(idp + "apply");
    // if (callback) {
    //     ele.onclick = function() {
    //         SocialCalc.SpreadsheetControl.SelectorBuilder.HideDialog();
    //         callback();
    //     }
    // }
    // else {
    //     controlElement.removeChild(ele);
    //     ele = document.getElementById(idp + "done");
    // }
    // if (!autoUpdated) {
    //     ele.focus();
    //     SocialCalc.CmdGotFocus(ele);
    // }
    //!!! need to do keyboard handling: if esc, hide?

}

SocialCalc.SpreadsheetControl.SelectorBuilder.HideDialog = function () {

    var spreadsheet = SocialCalc.GetSpreadsheetControlObject();
    var idp = spreadsheet.idPrefix + "selectorbuilder-";
    var ele = document.getElementById(idp + "dialog");
    if (ele) {
        ele.innerHTML = "";

        SocialCalc.DragUnregister(ele);

        SocialCalc.KeyboardFocus();

        if (ele.parentNode) {
            ele.parentNode.removeChild(ele);
        }
    }

}

//SocialCalc.SpreadsheetControl.SelectorBuilder.Selectors = [];
SocialCalc.SpreadsheetControl.SelectorBuilder.SelectionSelector = {};

SocialCalc.SpreadsheetControl.SelectorBuilder.AddSelector = function() {

    var spreadsheet = SocialCalc.GetSpreadsheetControlObject();
    var idp = spreadsheet.idPrefix + "selectorbuilder-";

    var textarea = document.getElementById(idp + "textarea");

    //var selector = SocialCalc.SpreadsheetControl.SelectorBuilder.SelectionSelector["xpath"];
    var selector = SocialCalc.SpreadsheetControl.SelectorBuilder.GetCurrentSelection();

    if (selector) {

        var value = textarea.value;
        if (value && !value.endsWith("\n")) value += "\n";
        value += selector + "\n";
        textarea.value = value;
        
    }

}

SocialCalc.SpreadsheetControl.SelectorBuilder.GetCurrentSelection = function() {

    var spreadsheet = SocialCalc.GetSpreadsheetControlObject();

    var rootNode = document.getElementById(spreadsheet.idPrefix + "htmlmultiline-textarea").shadowRoot.firstChild;

    var selection = getSelection();

    var selectors = "";
    for (var i = 0; i < selection.rangeCount; i++) {

        var range = selection.getRangeAt(i);

        var node = range.commonAncestorContainer;
        var nodes = [];
        while (node) {
            if (node == rootNode) {
                break;
            }
            nodes.unshift(node);

            node = node.parentNode;
        }
        if (!node) {
            return "";
        }
        else {
            var selector = "";
            var possibilities = [];
            for (node of nodes) {
                //TODO Is XPath needed???
                selector += "/" + (node.nodeName == "#text" ? "text()" : node.nodeName.toLowerCase());
                var xpathResult = document.evaluate("." + selector, rootNode, null, XPathResult.UNORDERED_NODE_ITERATOR_TYPE, null);

                var xpathNode;
                var count = 0;
                var start = 0;
                while (xpathNode = xpathResult.iterateNext()) {
                    count++;
                    if (xpathNode == node) {
                        start = count;
                    }
                }

                var end = start == 0 ? 0 : count - start + 1;
                var all = start == 0 || count != 1 ? 0 : 1;
                possibilities.push({
                    start: start,
                    end: end,
                    all: all
                });

                var predicate = "";
                if (start && end) {
                    predicate += "position()=" + start;
                    if (end) {
                        predicate += " or position()=last()";
                        if (end > 1) predicate += "-" + (end-1);
                    }
                }
                else if (!start && end) {
                    predicate += "last()";
                    if (end > 1) predicate += "-" + (end-1);
                }
                else predicate += start;
                // if (all) predicate += " or true()";
                selector += "[" + predicate + "]";
            }
            selectors += (selectors ? "\n" : "") + selector;
        }
    }

    if (selection.rangeCount) {
        return selectors;
    }

}



SocialCalc.SpreadsheetControl.SelectorBuilder.Parse = function(selector) {

    var spreadsheet = SocialCalc.GetSpreadsheetControlObject();
    var idp = spreadsheet.idPrefix + "selectorbuilder-";


    var steps = selector.substring(1).toLowerCase().split("/");
    var result = [];
    for (var step of steps) {
        var name = "";
        var start = 0;
        var end = 0;
        var all = 0;

        var match = step.match(/^(.*)\[(.*)\]$/);
        if (match) {
            name = match[1];
            var predicates = match[2].split(" or ");
            for (var predicate of predicates) {
                if (predicate.startsWith("position()=")) {
                    if (predicate.startsWith("position()=last()")) {
                        if (predicate.length == 17) {
                            end = 1;
                        }
                        else {
                            end = predicate.substring(18) - 0 + 1;
                        }
                    }
                    else {
                        start = predicate.substring(11) - 0;
                    }
                }
                else if (predicates.length == 1) {
                    if (predicate.startsWith("last()")) {
                        if (predicate.length == 6) {
                            end = 1;
                        }
                        else {
                            end = predicate.substring(7) - 0 + 1;
                        }
                    }
                    else start = predicate - 0;
                }
            }
        }
        else {
            name = step;
            //TODO ?
            all = 1;
            start = 1;
            end = 1;
            // }
        }

        result.push({
            name: name,
            start: start,
            end: end,
            all: all
        });
    }

    return result;

}

SocialCalc.SpreadsheetControl.SelectorBuilder.Clear = function() {
    var spreadsheet = SocialCalc.GetSpreadsheetControlObject();
    var idp = spreadsheet.idPrefix + "selectorbuilder-";

    var textarea = document.getElementById(idp + "textarea");
    textarea.value = "";
}

SocialCalc.SpreadsheetControl.SelectorBuilder.Combine = function() {

    var spreadsheet = SocialCalc.GetSpreadsheetControlObject();
    var idp = spreadsheet.idPrefix + "selectorbuilder-";

    var textarea = document.getElementById(idp + "textarea");
    var value = textarea.value;

    var selectorType = document.getElementById(idp + "selector-combobox").value;
    
    var parses = [];
    var minParseLength = 1000;
    for (var line of value.split("\n")) {
        if (line) {
            var parse = SocialCalc.SpreadsheetControl.SelectorBuilder.Parse(line);
            if (parse.length < minParseLength) {
                minParseLength = parse.length;
            }
            parses.push(parse)
        }
    }

    var outputTextbox = document.getElementById(idp + "output-textbox");

    if (parses.length != 0) {

        var intersections = [];
        
        for (var i = 0; i < minParseLength; i++) {

            var intersection = {
                name: "",
                start: -1,
                end: -1,
                all: 1,
            };

            for (var p in parses) {

                var nodeParse = parses[p][i];

                //Start
                if (intersection.start == nodeParse.start) {}
                else if (intersection.start == -1) intersection.start = nodeParse.start;
                else {
                    intersection.start = 0;
                    all = 0;
                }

                //End
                if (intersection.end == nodeParse.end) {}
                else if (intersection.end == -1) intersection.end = nodeParse.end;
                else {
                    intersection.end = 0;
                    all = 0;
                }

                //Name
                if (intersection.name == nodeParse.name) {}
                else if (intersection.name == "") intersection.name = nodeParse.name;
                else intersection.name = null;

            }

            if (intersection.name == null) break;

            intersections.push(intersection);

        }

        var branches = document.getElementById(idp + "branches-combobox").value-0;

        var result = SocialCalc.SpreadsheetControl.SelectorBuilder.Write(selectorType, intersections, branches);

        outputTextbox.value = result;

        var updateSelector = document.getElementById(idp + "update-selector-checkbox").checked;
        if (updateSelector) {
            var selectorTextbox = document.getElementById(spreadsheet.idPrefix + "htmlmultiline-selector-textbox");
            if (selectorTextbox) selectorTextbox.value = result;
            else return;
            var selectorCombobox = document.getElementById(spreadsheet.idPrefix + "htmlmultiline-selector-combobox");
            if (selectorCombobox.value != selectorType) selectorCombobox.value = selectorType;
            SocialCalc.SpreadsheetControl.HTMLMultiline.UpdatePreview();
        }

    }
    else outputTextbox.value = "";

}

SocialCalc.SpreadsheetControl.SelectorBuilder.Write = function(selectorType, selectorParse, branches) {

    var selector = "";

    switch (selectorType) {

        case "css":

            for (var step of selectorParse) {
                var name = step.name;
                var addition = (selector ? ">" : "") + name;
                if (step.any || (step.start == 1 && step.end == 1)) {
                    //No predicate
                }
                else {
                    if (step.start) addition += ":nth-child(" + step.start + ")";
                    else if (step.end) {
                        if (step.end == 1) addition += ":nth-last-child(" + (step.end - 1) + ")";
                        else addition += ":nth-last-child(" + (step.end - 1) + ")";
                    }
                    else if (branches > 0) {
                        branches--;
                    }
                    else break;
                }
                selector += addition;
            }

        break;

        case "xpath":

            for (var step of selectorParse) {
                var name = step.name;
                var addition = "/" + name;
                if (step.any || (step.start == 1 && step.end == 1)) {
                    //No predicate
                }
                else {
                    if (step.start) addition += "[" + step.start + "]";
                    else if (step.end) {
                        if (step.end == 1) addition += "[last()]";
                        else addition += "[last()-" + (step.end - 1) + "]";
                    }
                    else if (branches > 0) {
                        branches--;
                    }
                    else break;
                }
                selector += addition;
            }

        break;

    }

    return selector;

}
},{}],14:[function(require,module,exports){
var oldSettingsControlInitializePanel = SocialCalc.SettingsControlInitializePanel;
SocialCalc.SettingsControlInitializePanel = function(panel) {

    var s = SocialCalc.GetSpreadsheetControlObject();
    var scc = SocialCalc.Constants;

    //Note sheetpanel name is not specified
    if (panel.name != "cell") {
        
        panel["rowheighthtml"] = {
            setting: "rowheighthtml",
            type: "PopupList",
            id: s.idPrefix+"rowheighthtml",
            initialdata: scc.SCFormatColwidth
        };
        panel["rowheightjson"] = {
            setting: "rowheightjson",
            type: "PopupList",
            id: s.idPrefix+"rowheightjson",
            initialdata: scc.SCFormatColwidth
        };
        panel["rowheightwiki"] = {
            setting: "rowheightwiki",
            type: "PopupList",
            id: s.idPrefix+"rowheightwiki",
            initialdata: scc.SCFormatColwidth
        };

    }

    oldSettingsControlInitializePanel(panel);
}



var oldInitializeSpreadsheetControl = SocialCalc.InitializeSpreadsheetControl;
SocialCalc.InitializeSpreadsheetControl = function(spreadsheet, node, height, width, spacebelow) {

    var newHtml = `
    <tr>
        <td %itemtitle.><br>%loc!Data Cell Row Height!:</td>
        <td %itembody.>
            <table cellspacing="0" cellpadding="0">
                <tr>
                    <td %bodypart.>
                        <div %parttitle.>%loc!HTML!</div> <span id="%id.rowheighthtml"></span>
                    </td>
                    <td %bodypart.>
                        <div %parttitle.>%loc!JSON!</div> <span id="%id.rowheightjson"></span>
                    </td>
                    <td %bodypart.>
                        <div %parttitle.>%loc!Wikitext!</div> <span id="%id.rowheightwiki"></span>
                    </td>
                </tr>
            </table>
        </td>
    </tr>
    `;

    var html = spreadsheet.views.settings.html;

    var splitPos = html.indexOf('</table><table id="%id.cellsettingstable"');

    html =  html.substring(0, splitPos) +
            newHtml +
            html.substring(splitPos);

    spreadsheet.views.settings.html = html;

    oldInitializeSpreadsheetControl(spreadsheet, node, height, width, spacebelow);
}



// var oldParseSheetSave = SocialCalc.ParseSheetSave;
// SocialCalc.ParseSheetSave = function (savedsheet, sheetobj) {

//     if (!sheet.attribs.rowheight) sheet.attribs.rowheight = {};

//     var lines = savedsheet.split(/\r\n|\n/);
//     var parts = [];
//     var line;
//     var i;

//     for (i = 0; i < lines.length; i++) {
//         line = lines[i];
//         parts = line.split(":");
//         switch (parts[0]) {
//             case "sheet":
//                 attribs=sheetobj.attribs;
//                 j=1;
//                 while (t=parts[j++]) {
//                     switch (t) {
//                         case "rowheighthtml":
//                             sheet.attribs.rowheight["html"] = parts[j++]-0;
//                         break;
//                         case "rowheightjson":
//                             sheet.attribs.rowheight["json"] = parts[j++]-0;
//                         break;
//                     }
//                 }
//             break;
//         }
//         parts = null;
//     }

//     oldParseSheetSave(lines.join("\n"), sheetobj);

//     // sheetobj.sci.CmdExtensionCallbacks["setrowheight"] = {
//     //     func: function(cmdname, data, sheet, cmd, saveundo) {
//     //         var type = cmd.NextToken();
//     //         var size = cmd.NextToken()-0;
//     //         if (!sheet.attribs.rowheight) sheet.attribs.rowheight = {}
//     //         sheet.attribs.rowheight[type] = size;
//     //         sheet.attribs.needsrecalc = "yes";
//     //     },
//     //     data: ""
//     // };

// }



var oldParseSheetSave = SocialCalc.ParseSheetSave;
SocialCalc.ParseSheetSave = function (savedsheet, sheetobj) {

    var lines = savedsheet.split(/\r\n|\n/);
    var parts = [];
    var line;
    var i;

    var cmds = [];

    for (i = 0; i < lines.length; i++) {
        line = lines[i];
        parts = line.split(":");
        switch (parts[0]) {
            case "rowheights":
                for (var p = 2; p < parts.length; p += 2) {
                    var type = parts[p-1];
                    var size = parts[p]-0;
                    var cmd = "startcmdextension setrowheight " + type + " " + size;
                    cmds.push(cmd);
                }
                lines[i] = "";
                break;
            default:
                break;
        }
        parts = null;
    }

    oldParseSheetSave(lines.join("\n"), sheetobj);


    sheetobj.sci.CmdExtensionCallbacks["setrowheight"] = {
        func: function(cmdname, data, sheet, cmd, saveundo) {
            var type = cmd.NextToken();
            var size = cmd.RestOfString()-0;
            console.log("Setting row height of " + type + " to " + size)
            if (!sheet.attribs.rowheight) sheet.attribs.rowheight = {};
            var oldSize = sheet.attribs.rowheight[type];
            if (size > 0) {
                sheet.attribs.rowheight[type] = size;
            }
            else {
                delete sheet.attribs.rowheight[type];
            }
            sheet.attribs.needsrecalc = "yes";
            if (saveundo) {
                sheet.changes.AddUndo("startcmdextension setrowheight " + type, oldSize ? " " + oldSize : "");
            }
        },
        data: ""
    };

    for (var cmd of cmds) {
        var parsedCmd = new SocialCalc.Parse(cmd);
        SocialCalc.ExecuteSheetCommand(sheetobj, parsedCmd, true);
    }

    //cmd:startcmdextension userfunction set _ADDONE(x)={x}+1

}


var oldCreateSheetSave = SocialCalc.CreateSheetSave;
SocialCalc.CreateSheetSave = function(sheetobj, range, canonicalize) {
    if (!sheetobj.attribs.rowheight) sheetobj.attribs.rowheight = {};
    var result = oldCreateSheetSave(sheetobj, range, canonicalize);
    var data = "";
    for (var type in sheetobj.attribs.rowheight) {
        data += ":" + type + ":" + sheetobj.attribs.rowheight[type];
    }
    if (data) result += "rowheights" + data + "\n";
    return result;
}



var oldDecodeSheetAttributes = SocialCalc.DecodeSheetAttributes;
SocialCalc.DecodeSheetAttributes = function(sheet, newattribs) {
    if (!sheet.attribs.rowheight) sheet.attribs.rowheight = {};

    cmdstr = oldDecodeSheetAttributes(sheet, newattribs);

    var attribs = sheet.attribs;
    var changed = cmdstr ? true : false;
    var cmdstr = cmdstr || "";

    console.log(newattribs)

    var CheckChanges = function(attribname, oldval, cmdname) {
        console.log(attribname, oldval, cmdname)
        var val;
        if (newattribs[attribname]) {
            console.log("exists")
            if (newattribs[attribname].def) {
                val = "";
                console.log("blank")
                }
            else {
                val = newattribs[attribname].val;
                console.log("set")
            }
            if (val != (oldval || "")) {
                DoCmd(cmdname+" "+val);
                console.log("cmd")
            }
        }
    }

    var DoCmd = function(str) {
        if (cmdstr) cmdstr += "\n";
        cmdstr += "startcmdextension setrowheight "+str;
        changed = true;
    }

    CheckChanges("rowheighthtml", attribs.rowheight["html"], "html");
    CheckChanges("rowheightjson", attribs.rowheight["json"], "json");
    CheckChanges("rowheightwiki", attribs.rowheight["wiki"], "wiki");

    if (changed) {
        sheet.needsrecalc = true;
        return cmdstr;
    }
    else {
       return null;
    }

}



var oldEncodeSheetAttributes = SocialCalc.EncodeSheetAttributes;
SocialCalc.EncodeSheetAttributes = function(sheet) {
    if (!sheet.attribs.rowheight) sheet.attribs.rowheight = {};

    var result = oldEncodeSheetAttributes(sheet);

    var value;
    var attribs = sheet.attribs;

    var SetAttrib = function(name, v) {
        result[name].def = false;
        result[name].val = v || value;
    }

    result["rowheighthtml"] = {def: true, val: ""};
    if (attribs.rowheight["html"]) {
       SetAttrib("rowheighthtml", attribs.rowheight["html"]);
    }

    result["rowheightjson"] = {def: true, val: ""};
    if (attribs.rowheight["json"]) {
       SetAttrib("rowheightjson", attribs.rowheight["json"]);
    }

    result["rowheightwiki"] = {def: true, val: ""};
    if (attribs.rowheight["wiki"]) {
       SetAttrib("rowheightwiki", attribs.rowheight["wiki"]);
    }

    return result;

}
},{}],15:[function(require,module,exports){
[
    {
        topics: 0,
        documents: [
            {
                id: '1',
                text: 'I love doing topic modelling! It helps me find //qualitative data from my text much faster',
                score: 0.2
            }
        ],
        documentVocab: [
            {
                word: 'love',
                count: 1,
                stopword: 'no',
                specificity: 1
            },
            {
                word: 'topic',
                count: 2,
                stopword: 'no',
                specificity: 0
            }
        ]
    },
    {
        topics: 1,
        documents: [
            {
                id: '2',
                text: 'You should really try LDA topic modelling to save time and do work for you',
                score: 0.21
            }
        ],
        documentVocab: [
            {
                word: 'try',
                count: 1,
                stopword: 'no',
                specificity: 1
            },
            {
                word: 'topic',
                count: 2,
                stopword: 'no',
                specificity: 0
            }
        ]
    }
]
},{}],16:[function(require,module,exports){
// ###############  HTML WIDGET   ###############


var oldProto = SocialCalc.SpreadsheetControl.prototype.InitializeSpreadsheetControl;
SocialCalc.SpreadsheetControl.prototype.InitializeSpreadsheetControl = function (node, height, width, spacebelow) {

    //PRE-INIT

    this.formulabuttons["html-widget"] = {
        image: "addons/html/images/html-icon.png",
        skipImagePrefix: true,
        tooltip: "HTML", // tooltips are localized when set below
        command: SocialCalc.SpreadsheetControl.HTMLMultiline.ShowDialog
    }

    this.formulabuttons["coerce-widget"] = {
        image: "addons/html/images/coerce-icon.png",
        skipImagePrefix: true,
        tooltip: "Coerce data types", // tooltips are localized when set below
        command: SocialCalc.SpreadsheetControl.Coerce.ShowDialog
    }



    var returnValue = oldProto.bind(this)(node, height, width, spacebelow);

    //POST-INIT




    return returnValue;

}

},{}],17:[function(require,module,exports){
const { Container } = require('@nlpjs/core');
const { SentimentAnalyzer } = require('@nlpjs/sentiment');
const { Language } = require('@nlpjs/language')

const lang = {

    // "ar": require('@nlpjs/lang-ar'),
    // "bn": require('@nlpjs/lang-bn'),
    // "ca": require('@nlpjs/lang-ca'),
    // "cs": require('@nlpjs/lang-cs'),
    // "da": require('@nlpjs/lang-da'),
    // "de": require('@nlpjs/lang-de'),
    // "el": require('@nlpjs/lang-el'),
    "en": require('@nlpjs/lang-en'),
    "es": require('@nlpjs/lang-es'),
    // "eu": require('@nlpjs/lang-eu'),

    // "fa": require('@nlpjs/lang-fa'),
    // "fi": require('@nlpjs/lang-fi'),
    "fr": require('@nlpjs/lang-fr'),
    // "ga": require('@nlpjs/lang-ga'),
    // "gl": require('@nlpjs/lang-fl'),
    // "hi": require('@nlpjs/lang-hi'),
    // "hu": require('@nlpjs/lang-hu'),
    // "hy": require('@nlpjs/lang-hy'),
    // "id": require('@nlpjs/lang-id'),
    // "it": require('@nlpjs/lang-it'),

    // "ja": require('@nlpjs/lang-ja'),
    // "ko": require('@nlpjs/lang-ko'),
    // "lt": require('@nlpjs/lang-lt'),
    // "ms": require('@nlpjs/lang-ms'),
    // "ne": require('@nlpjs/lang-ne'),
    // "nl": require('@nlpjs/lang-nl'),
    // "no": require('@nlpjs/lang-no'),
    // "pl": require('@nlpjs/lang-pl'),
    // "pt": require('@nlpjs/lang-pt'),
    // "ro": require('@nlpjs/lang-ro'),

    // "ru": require('@nlpjs/lang-ru'),
    // "sl": require('@nlpjs/lang-sl'),
    // "sr": require('@nlpjs/lang-sr'),
    // "sv": require('@nlpjs/lang-sv'),
    // "ta": require('@nlpjs/lang-ta'),
    // "th": require('@nlpjs/lang-th'),
    // "tl": require('@nlpjs/lang-tl'),
    // "tr": require('@nlpjs/lang-tr'),
    // "uk": require('@nlpjs/lang-uk'),
    // "zh": require('@nlpjs/lang-zh'),

}
//const langAll = require('@nlpjs/lang-all');
const LangEn = lang["en"]["LangEn"];
const { leven } = require('@nlpjs/similarity');

window.nlp = {}
window.nlp.sentiment = function(text) {
    (async () => {
        const container = new Container();
        container.use(LangEn);
        const sentiment = new SentimentAnalyzer({ container });
        const result = await sentiment.process({ locale: 'en', text: text});
        console.log(result.sentiment);
      })();
}

SocialCalc.Formula.NLPSEPARATORREGEX = /[ ,]+/g;

SocialCalc.Formula.NLPSentimentFunction = function (fname, operand, foperand, sheet) {

    var numargs = foperand.length;

    //Check args
    if (numargs < 2 || numargs > 3) {
        SocialCalc.Formula.FunctionArgsError(fname, operand);
        return;
    }

    var value = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t = value.type.charAt(0);
    var locale = value.value;

    var value2 = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t2 = value2.type.charAt(0);
    var text = value2.value;

    var value3 = numargs == 3 ? SocialCalc.Formula.OperandValueAndType(sheet, foperand) : {value: "vote", type: "t"};
    var t3 = value3.type.charAt(0);
    var option = value3.value;

    var result = 0;
    var resulttype = "e#VALUE!";

    if (t == "t" && t2 == "t" && t3 == "t") {


        (async () => {

            const container = new Container();
            container.use(LangEn);
            const sentiment = new SentimentAnalyzer({ container });

            const s = await sentiment.process({ locale: locale, text: text});
            const r = s.sentiment;
 
            //ct { score: 0.5, numWords: 3, numHits: 1, average: 0.16666666666666666, type: "senticon", locale: "en", vote: "positive" }
            switch (option) {
                case "score":
                case "s":
                    result = r.score;
                    resulttype = "n";
                break;
                case "numWords":
                case "n":
                    result = r.numWords;
                    resulttype = "w";
                break;
                case "numHits":
                case "n":
                    result = r.numHits;
                    resulttype = "h";
                break;
                case "average":
                case "a":
                    result = r.average;
                    resulttype = "n";
                break;
                case "type":
                case "t":
                    result = r.type;
                    resulttype = "t";
                break;
                case "vote":
                case "v":
                    result = r.vote;
                    resulttype = "t";
                break;
                    
            }

            SocialCalc.Formula.PushOperand(operand, resulttype, result);

        })();
        
    }
    else SocialCalc.Formula.PushOperand(operand, resulttype, result);

}


SocialCalc.Formula.NLPLevenshteinFunction = function(fname, operand, foperand, sheet) {

    var numargs = foperand.length;

    //Check args
    if (numargs != 2) {
        SocialCalc.Formula.FunctionArgsError(fname, operand);
        return;
    }

    var value = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t = value.type.charAt(0);
    var text1 = value.value;

    var value2 = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t2 = value2.type.charAt(0);
    var text2 = value2.value;

    var result = 0;
    var resulttype = "e#VALUE!";

    if (t == "t" && t2 == "t") {
        result = leven(text1, text2);
        resulttype = "n";
    }

    SocialCalc.Formula.PushOperand(operand, resulttype, result);

}



SocialCalc.Formula.NLPGetClassLang = function(rootClass, locale) {
    var localeModule = /*langAll;*/lang[locale];
    if (localeModule) {
        rootClass = rootClass.charAt(0).toUpperCase() + rootClass.slice(1);
        var langX = rootClass + locale.charAt(0).toUpperCase() + locale.slice(1);
        return localeModule[langX];
    }
    else return undefined;
}



SocialCalc.Formula.NLPNormalizeFunction = function(fname, operand, foperand, sheet) {

    var numargs = foperand.length;

    //Check args
    if (numargs != 2) {
        SocialCalc.Formula.FunctionArgsError(fname, operand);
        return;
    }

    var value = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t = value.type.charAt(0);
    var locale = value.value;

    var value2 = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t2 = value2.type.charAt(0);
    var text = value2.value;

    var result = 0;
    var resulttype = "e#VALUE!";

    var Normalizer = SocialCalc.Formula.NLPGetClassLang("normalizer", locale);
    if (t == "t" && t2 == "t" && Normalizer) {
        var normalizer = new Normalizer();
        var result = normalizer.normalize(text);
        resulttype = "t";
    }

    SocialCalc.Formula.PushOperand(operand, resulttype, result);

}



SocialCalc.Formula.NLPTokenizeFunctions = function(fname, operand, foperand, sheet) {

    var numargs = foperand.length;

    //Check args
    if (numargs != 2) {
        SocialCalc.Formula.FunctionArgsError(fname, operand);
        return;
    }

    var value = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t = value.type.charAt(0);
    var locale = value.value;

    var value2 = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t2 = value2.type.charAt(0);
    var text = value2.value;

    var result = 0;
    var resulttype = "e#VALUE!";

    var Tokenizer = SocialCalc.Formula.NLPGetClassLang("tokenizer", locale);
    if (t == "t" && t2 == "t" && Tokenizer) {
        var tokenizer = new Tokenizer();
        var tokens = tokenizer.tokenize(text, fname.toUpperCase() == "NLPTOKENIZENORM");
        result = "";
        for (var t = 0; t < tokens.length; t++) {
            if (t != 0) result += " " + tokens[t];
            else result += tokens[t];
        }
        resulttype = "t";
    }

    SocialCalc.Formula.PushOperand(operand, resulttype, result);

}



SocialCalc.Formula.NLPIsStopwordFunction = function(fname, operand, foperand, sheet) {
    var numargs = foperand.length;

    //Check args
    if (numargs != 2) {
        SocialCalc.Formula.FunctionArgsError(fname, operand);
        return;
    }

    var value = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t = value.type.charAt(0);
    var locale = value.value;

    var value2 = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t2 = value2.type.charAt(0);
    var text = value2.value;

    var result = 0;
    var resulttype = "e#VALUE!";
    var Stopwords = SocialCalc.Formula.NLPGetClassLang("stopwords", locale);
    if (t == "t" && t2 == "t" && Stopwords) {
        var stopwords = new Stopwords();
        result = stopwords.isStopword(text) ? 1 : 0;
        resulttype = "n";
    }

    SocialCalc.Formula.PushOperand(operand, resulttype, result);

}



SocialCalc.Formula.NLPStopwordsFunction = function(fname, operand, foperand, sheet) {

    var numargs = foperand.length;

    //Check args
    if (numargs < 2 || numargs > 3) {
        SocialCalc.Formula.FunctionArgsError(fname, operand);
        return;
    }

    var value = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t = value.type.charAt(0);
    var locale = value.value;

    var value2 = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t2 = value2.type.charAt(0);
    var text = value2.value;

    var t3 = "t";
    var stopwordsList;
    if (numargs == 3) {
        var value3 = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
        t3 = value3.type.charAt(0);
        stopwordsList = value3.value;
    }

    var result = 0;
    var resulttype = "e#VALUE!";

    var Stopwords = SocialCalc.Formula.NLPGetClassLang("stopwords", locale);
    if (t == "t" && t2 == "t" && t3 == "t" && Stopwords) {
        var stopwords = new Stopwords();
        if (stopwordsList) {
            stopwords.dictionary = {};
            stopwords.build(stopwordsList.split(SocialCalc.Formula.NLPSEPARATORREGEX));
        }
        var tokens = stopwords.removeStopwords(text.split(SocialCalc.Formula.NLPSEPARATORREGEX));
        result = "";
        for (var t = 0; t < tokens.length; t++) {
            if (t != 0) result += " " + tokens[t];
            else result += tokens[t];
        }
        resulttype = "t";
    }

    SocialCalc.Formula.PushOperand(operand, resulttype, result);

}



SocialCalc.Formula.NLPStemFunction = function(fname, operand, foperand, sheet) {

    var numargs = foperand.length;

    //Check args
    if (numargs != 2) {
        SocialCalc.Formula.FunctionArgsError(fname, operand);
        return;
    }

    var value = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t = value.type.charAt(0);
    var locale = value.value;

    var value2 = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t2 = value2.type.charAt(0);
    var text = value2.value;

    var result = 0;
    var resulttype = "e#VALUE!";

    var Stemmer = SocialCalc.Formula.NLPGetClassLang("stemmer", locale);
    if (t == "t" && t2 == "t" && Stemmer) {
        var stemmer = new Stemmer();
        var tokens = stemmer.stem(text.split(SocialCalc.Formula.NLPSEPARATORREGEX));
        result = "";
        for (var t = 0; t < tokens.length; t++) {
            if (t != 0) result += " " + tokens[t];
            else result += tokens[t];
        }
        resulttype = "t";
    }

    SocialCalc.Formula.PushOperand(operand, resulttype, result);

}



SocialCalc.Formula.NLPGuessLanguageFunction = function(fname, operand, foperand, sheet) {

    var numargs = foperand.length;

    //Check args
    if (numargs < 2 || numargs > 3) {
        SocialCalc.Formula.FunctionArgsError(fname, operand);
        return;
    }

    var value = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t = value.type.charAt(0);
    var text = value.value;

    var value2 = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t2 = value2.type.charAt(0);
    var format = value2.value;

    var t3 = "t";
    var allowList;
    if (numargs == 3) {
        var value3 = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
        t3 = value3.type.charAt(0);
        allowList = value3.value;
    }

    var result = 0;
    var resulttype = "e#VALUE!";

    if (t == "t" && t2 == "t") {
        var language = new Language();
        var guess;
        if (allowList) {
            guess = language.guessBest(text, allowList.split(SocialCalc.Formula.NLPSEPARATORREGEX));
        } else {
            guess = language.guessBest(text);
        }
        switch (format) {
            case "xx":
                result = guess.alpha2;
                resulttype = "t";
            break;
            case "xxx":
                result = guess.alpha3;
                resulttype = "t";
            break;
            case "lang":
                result = guess.language;
                resulttype = "t";
            break;
            case "score":
                result = guess.score;
                resulttype = "n";
            break;
        }
    }

    SocialCalc.Formula.PushOperand(operand, resulttype, result);

}



SocialCalc.Formula.FunctionList["NLPSENTIMENT"] = [SocialCalc.Formula.NLPSentimentFunction, -1, "nlpsentiment", "", "nlp"];
SocialCalc.Formula.FunctionList["NLPLEVENSHTEIN"] = [SocialCalc.Formula.NLPLevenshteinFunction, 2, "nlplevenshtein", "", "nlp"];
SocialCalc.Formula.FunctionList["NLPNORMALIZE"] = [SocialCalc.Formula.NLPNormalizeFunction, 2, "nlpnormalize", "", "nlp"];
SocialCalc.Formula.FunctionList["NLPTOKENIZE"] = [SocialCalc.Formula.NLPTokenizeFunctions, 2, "nlptokenize", "", "nlp"];
SocialCalc.Formula.FunctionList["NLPTOKENIZENORM"] = [SocialCalc.Formula.NLPTokenizeFunctions, 2, "nlptokenizenorm", "", "nlp"];
SocialCalc.Formula.FunctionList["NLPISSTOPWORD"] = [SocialCalc.Formula.NLPIsStopwordFunction, 2, "nlpisstopword", "", "nlp"];
SocialCalc.Formula.FunctionList["NLPSTOPWORDS"] = [SocialCalc.Formula.NLPStopwordsFunction, -1, "nlpstopwords", "", "nlp"];
SocialCalc.Formula.FunctionList["NLPSTEM"] = [SocialCalc.Formula.NLPStemFunction, 2, "nlpstem", "", "nlp"];
SocialCalc.Formula.FunctionList["NLPGUESSLANGUAGE"] = [SocialCalc.Formula.NLPGuessLanguageFunction, -1, "nlpguesslanguage", "", "nlp"];



SocialCalc.Formula.NLPPreprocessFunction = function(fname, operand, foperand, sheet) {

    var numargs = foperand.length;

    //Check args
    if (numargs != 2) {
        SocialCalc.Formula.FunctionArgsError(fname, operand);
        return;
    }

    var value = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t = value.type.charAt(0);
    var locale = value.value;

    var value2 = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t2 = value2.type.charAt(0);
    var text = value2.value;

    var result = 0;
    var resulttype = "e#VALUE!";

    var Tokenizer = SocialCalc.Formula.NLPGetClassLang("tokenizer", locale);
    var Stemmer = SocialCalc.Formula.NLPGetClassLang("stemmer", locale);
    if (t == "t" && t2 == "t" && Tokenizer && Stemmer) {
        text = text.replace(/[#–—]/g, " ");
        if (locale == "en") {
            text = text.replace(/&/g, " and ");
        }
        var tokenizer = new Tokenizer();
        var stemmer = new Stemmer();
        var tokens = tokenizer.tokenize(text, true);
        // tokens = stemmer.stem(tokens);
        result = "";
        for (var t = 0; t < tokens.length; t++) {
            if (t != 0) result += ", " + tokens[t];
            else result += tokens[t];
        }
        resulttype = "t";
    }

    SocialCalc.Formula.PushOperand(operand, resulttype, result);

}



SocialCalc.Formula.FunctionList["NLPPREPROCESS"] = [SocialCalc.Formula.NLPPreprocessFunction, 2, "", "", "nlp"];



SocialCalc.Formula.LDA1Function = function (fname, operand, foperand, sheet) {

    var result = 0;
    var resulttype = "e#VALUE!";

    var docs = [];
    var docWords = [];
    for (var i = 0; foperand.length > 0; i++) {
        var value = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
        var t = value.type.charAt(0);
        var text = value.value;
        if (t == "t") {
            docs.push({
                id: i,
                text: text
            });
            docWords.push({});
        }
        else {
            docs = null;
            break;
        }
    }
    
    if (docs) {

        //https://stackoverflow.com/a/47593316
        function mulberry32(a) {
            return function() {
              var t = a += 0x6D2B79F5;
              t = Math.imul(t ^ t >>> 15, t | 1);
              t ^= t + Math.imul(t ^ t >>> 7, t | 61);
              return ((t ^ t >>> 14) >>> 0) / 4294967296;
            }
        }

        var oldRandom = Math.random;
        Math.random = mulberry32(0);
        var lda = new SocialCalc.SpreadsheetControl.Lda(null, docs, null);
        Math.random = oldRandom;

        var topicWordsList = [];
        for (var topic of lda.getTopicWords()) {
            topicWordsList[topic.id] = topic.topicText;
        }
        result = ".json\n\n" + JSON.stringify(topicWordsList) + "\n\n.json\n";

        resulttype = "t";
    }

    SocialCalc.Formula.PushOperand(operand, resulttype, result);
}



SocialCalc.Formula.LDA2Function = function (fname, operand, foperand, sheet) {

    var result = 0;
    var resulttype = "e#VALUE!";

    var docs = [];
    var docWords = [];
    for (var i = 0; foperand.length > 0; i++) {
        var value = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
        var t = value.type.charAt(0);
        var text = value.value;
        if (t == "t") {
            docs.push({
                id: i,
                text: text
            });
            docWords.push({});
        }
        else {
            docs = null;
            break;
        }
    }
    
    if (docs) {

        //https://stackoverflow.com/a/47593316
        function mulberry32(a) {
            return function() {
              var t = a += 0x6D2B79F5;
              t = Math.imul(t ^ t >>> 15, t | 1);
              t ^= t + Math.imul(t ^ t >>> 7, t | 61);
              return ((t ^ t >>> 14) >>> 0) / 4294967296;
            }
        }

        var oldRandom = Math.random;
        Math.random = mulberry32(0);
        var lda = new SocialCalc.SpreadsheetControl.Lda(null, docs, null);
        Math.random = oldRandom;

        var topicWordsList = [];
        for (var topic of lda.getTopicWords()) topicWordsList[topic.id] = topic.topicText;
        for (var topic of lda.getDocuments()) {
            var topicWords = topicWordsList[topic.topic].split(" ");
            for (var d in topic.documents) {
                for (var word of topicWords) {
                    docWords[topic.documents[d].id][word] = true;
                }
            }
        }
        for (var d in docWords) {
            var document = docWords[d];
            var s = "";
            for (var w in document) s += (s ? " " : "") + w;
            docWords[d] = s;
        }
        result = ".json\n\n" + JSON.stringify(docWords) + "\n\n.json\n";

        resulttype = "t";
    }

    SocialCalc.Formula.PushOperand(operand, resulttype, result);
}

SocialCalc.Formula.LDA3Function = function (fname, operand, foperand, sheet) {

    var result = 0;
    var resulttype = "e#VALUE!";

    var docs = [];
    var docWords = [];
    for (var i = 0; foperand.length > 0; i++) {
        var value = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
        var t = value.type.charAt(0);
        var text = value.value;
        if (t == "t") {
            docs.push({
                id: i,
                text: text
            });
            docWords.push({});
        }
        else {
            docs = null;
            break;
        }
    }
    
    if (docs) {

        //https://stackoverflow.com/a/47593316
        function mulberry32(a) {
            return function() {
              var t = a += 0x6D2B79F5;
              t = Math.imul(t ^ t >>> 15, t | 1);
              t ^= t + Math.imul(t ^ t >>> 7, t | 61);
              return ((t ^ t >>> 14) >>> 0) / 4294967296;
            }
        }

        var oldRandom = Math.random;
        Math.random = mulberry32(0);
        var lda = new SocialCalc.SpreadsheetControl.Lda(null, docs, null);
        Math.random = oldRandom;

        var docScores = {};
        for (var topic of lda.getDocuments()) {
            docScores[topic.topic+1] = {};
            for (var d in topic.documents) {
                docScores[topic.topic+1][topic.documents[d].id+1] = topic.documents[d].score;
            }
        }
        result = ".json\n\n" + JSON.stringify(docScores) + "\n\n.json\n";

        resulttype = "t";
    }

    SocialCalc.Formula.PushOperand(operand, resulttype, result);
}



SocialCalc.Formula.LDAFunction = function (fname, operand, foperand, sheet) {

    var result = 0;
    var resulttype = "e#VALUE!";

    var docs = [];
    var docWords = [];
    for (var i = 0; foperand.length > 0; i++) {
        var value = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
        var t = value.type.charAt(0);
        var text = value.value;
        if (t == "t") {
            docs.push({
                id: i,
                text: text
            });
            docWords.push({});
        }
        else {
            docs = null;
            break;
        }
    }
    
    if (docs) {

        //https://stackoverflow.com/a/47593316
        function mulberry32(a) {
            return function() {
              var t = a += 0x6D2B79F5;
              t = Math.imul(t ^ t >>> 15, t | 1);
              t ^= t + Math.imul(t ^ t >>> 7, t | 61);
              return ((t ^ t >>> 14) >>> 0) / 4294967296;
            }
        }

        var oldRandom = Math.random;
        Math.random = mulberry32(0);
        var lda = new SocialCalc.SpreadsheetControl.Lda(null, docs, null);
        Math.random = oldRandom;

        var topicWordsList = {};
        for (var topic of lda.getTopicWords()) {
            topicWordsList[topic.id+1] = topic.topicText;
        }

        var docScores = {};
        for (var topic of lda.getDocuments()) {
            docScores[topic.topic+1] = {};
            for (var d in topic.documents) {
                docScores[topic.topic+1][topic.documents[d].id+1] = topic.documents[d].score;
            }
        }

        var combinedResult = {
            scores: docScores,
            words: topicWordsList
        }

        result = ".json\n\n" + JSON.stringify(combinedResult) + "\n\n.json\n";

        resulttype = "t";
    }

    SocialCalc.Formula.PushOperand(operand, resulttype, result);
}




// SocialCalc.Formula.FunctionList["LDA1"] = [SocialCalc.Formula.LDA1Function, -1, "lda", "", "nlp"];
// SocialCalc.Formula.FunctionList["LDA2"] = [SocialCalc.Formula.LDA2Function, -1, "lda", "", "nlp"];
// SocialCalc.Formula.FunctionList["LDA3"] = [SocialCalc.Formula.LDA3Function, -1, "lda", "", "nlp"];
SocialCalc.Formula.FunctionList["LDA"] = [SocialCalc.Formula.LDAFunction, -1, "lda", "", "nlp"];



SocialCalc.Formula.JSONGetFunction = function (fname, operand, foperand, sheet) {

    var value = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t = value.type.charAt(0);
    var text = value.value;

    var value2 = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var defaultValue = value2.value;

    var result = 0;
    var resulttype = "e#VALUE!";

    if (t == "t") {

        try {
            var json = SocialCalc.SpreadsheetControl.GetJSONContent(text);
            if (json) {

                obj = JSON.parse(json);

                for (var i = 0; foperand.length > 0; i++) {
                    var argValue = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
                    var arg = argValue.value;
                    obj = obj[arg];
                }

            }

        } catch (error) {
            console.error(error)
            obj = defaultValue;
        }
        if (obj == undefined) {
            obj = defaultValue;
        }

        if (typeof obj == "object") {
            result = ".json\n\n" + JSON.stringify(obj) + "\n\n.json\n";
            resulttype = "t";
        }
        else if (typeof obj == "number") {
            result = obj;
            resulttype = "n";
        }
        else {
            result = obj+"";
            resulttype = "t";
        }

    }    


    SocialCalc.Formula.PushOperand(operand, resulttype, result);
}


SocialCalc.Formula.FunctionList["JSONGET"] = [SocialCalc.Formula.JSONGetFunction, -1, "", "", "nlp"];
},{"@nlpjs/core":59,"@nlpjs/lang-en":78,"@nlpjs/lang-es":84,"@nlpjs/lang-fr":95,"@nlpjs/language":106,"@nlpjs/sentiment":109,"@nlpjs/similarity":112}],18:[function(require,module,exports){
SocialCalc.Formula.LiteralNotationRegex = /^\/(.*)\/([a-z]*)$/;

SocialCalc.Formula.IsRegexFormatFunction = function(fname, operand, foperand, sheet) {

    if (foperand.length != 1) {
        SocialCalc.Formula.FunctionArgsError(fname, operand);
        return;
    }

    var value = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t = value.type.charAt(0);
    var v = value.value;

    result = 0;
    if (t == "t") {
        if (SocialCalc.Formula.LiteralNotationRegex.test(v)) result = 1;
    }

    SocialCalc.Formula.PushOperand(operand, "nl", result);
}

SocialCalc.Formula.IsValidRegexFunction = function(fname, operand, foperand, sheet) {

    if (foperand.length != 1) {
        SocialCalc.Formula.FunctionArgsError(fname, operand);
        return;
    }

    var value = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    var t = value.type.charAt(0);
    var v = value.value;
    
    result = 0;
    if (t == "t") {
        if (v.startsWith('/')) {
            var matches = v.match(SocialCalc.Formula.LiteralNotationRegex);
            if (matches != null) {
                try {
                    new RegExp(matches[1], matches[2]);
                    result = 1;
                } catch (error) {}
            }
        }
        else {
            try {
                new RegExp(v);
                result = 1;
            } catch (error) {}
        }
    }
    
    SocialCalc.Formula.PushOperand(operand, "nl", result);
}

SocialCalc.Formula.RegexFunction = function(fname, operand, foperand, sheet) {

    var numargs = foperand.length;

    if (numargs < 1 || numargs > 2) {
        SocialCalc.Formula.FunctionArgsError(fname, operand);
        return;
    }

    var value = SocialCalc.Formula.OperandAsText(sheet, foperand);
    if (value.type.charAt(0) == "e") {
        SocialCalc.Formula.PushOperand(operand, value.type, result);
        return;
    }

    var value2 = numargs == 2 ? SocialCalc.Formula.OperandAsText(sheet, foperand) : {value: "", type: "t"};
    if (value2.type.charAt(0) == "e") {
        SocialCalc.Formula.PushOperand(operand, value2.type, result);
        return;
    }

    var result;
    var resulttype;
    try {
        new RegExp(value.value, value2.value);
        result = "/" + value.value.replace("/", "\\/") + "/" + value2.value;
        resulttype = "t";
    } catch (error) {
        resulttype = "e#VALUE!";
        result = "Invalid regex";
    }

    SocialCalc.Formula.PushOperand(operand, resulttype, result);
}

SocialCalc.Formula.OccursFunction = function(fname, operand, foperand, sheet) {

    var numargs = foperand.length;

    if (numargs < 1 || numargs > 2) {
        SocialCalc.Formula.FunctionArgsError(fname, operand);
        return;
    }

    var regex = SocialCalc.Formula.OperandAsText(sheet, foperand);
    if (regex.type.charAt(0) == "e") {
        SocialCalc.Formula.PushOperand(operand, regex.type, result);
        return;
    }

    var text = SocialCalc.Formula.OperandAsText(sheet, foperand);
    if (text.type.charAt(0) == "e") {
        SocialCalc.Formula.PushOperand(operand, text.type, result);
        return;
    }

    var result = 0;
    var resulttype = "n";
    try {
        var matches = regex.value.match(SocialCalc.Formula.LiteralNotationRegex);
        if (matches != null) {
            var regexp = new RegExp(matches[1], matches[2]);
            result = (text.value.match(regexp) || []).length;
            resulttype = "n";
        }
    } catch (error) {
        resulttype = "e#VALUE!";
        result = "Invalid regex";
    }

    SocialCalc.Formula.PushOperand(operand, resulttype, result);
}



SocialCalc.Formula.MatchFunction = function(fname, operand, foperand, sheet) {

    var regex = SocialCalc.Formula.OperandAsText(sheet, foperand);
    if (regex.type.charAt(0) == "e") {
        SocialCalc.Formula.PushOperand(operand, regex.type, result);
        return;
    }

    var text = SocialCalc.Formula.OperandAsText(sheet, foperand);
    if (text.type.charAt(0) == "e") {
        SocialCalc.Formula.PushOperand(operand, text.type, result);
        return;
    }

    //TODO Check type?
    var index = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
    if (index.type.charAt(0) == "e") {
        SocialCalc.Formula.PushOperand(operand, index.type, result);
        return;
    }

    var resulttype = "e#VALUE!";
    var result = "Invalid regex";

    try {
        var matches = regex.value.match(SocialCalc.Formula.LiteralNotationRegex);
        if (matches != null) {
            var regexp = new RegExp(matches[1], matches[2]);
            var match = text.value.match(regexp);
            if (match[index.value]) {
                result = match[index.value];
                resulttype = "t";
            }
        }
    } catch (error) {}

    SocialCalc.Formula.PushOperand(operand, resulttype, result);
}



SocialCalc.Formula.FunctionList["ISREGEXFORMAT"] = [SocialCalc.Formula.IsRegexFormatFunction, 1, "v", "", "test"];
SocialCalc.Formula.FunctionList["ISVALIDREGEX"] = [SocialCalc.Formula.IsValidRegexFunction, 1, "v", "", "test"];

SocialCalc.Formula.FunctionList["REGEX"] = [SocialCalc.Formula.RegexFunction, -1, "regex", "", "text"];

SocialCalc.Formula.FunctionList["OCCURS"] = [SocialCalc.Formula.OccursFunction, 2, "occurs", "", "text"];

SocialCalc.Formula.FunctionList["MATCH"] = [SocialCalc.Formula.MatchFunction, 3, "", "", "text"];
},{}],19:[function(require,module,exports){
//Example: _ADDONE(x)={x}+1

SocialCalc.Formula.UserDefinedFunctionList = [];

SocialCalc.Formula.UserDefinedFunction = function (fname, operand, foperand, sheet) {

    var udf = SocialCalc.Formula.UserDefinedFunctionList[fname];

    var result = 0;
    var resulttype = "e#VALUE!";


    var equalsPos = udf.indexOf(':=');
    var functionArgText = udf.substring(0, equalsPos).trim();
    var functionText = udf.substring(equalsPos + 2).trim();

    var openBracketPos = functionArgText.indexOf('(');
    var closeBracketPos = functionArgText.indexOf(')');
    var args = functionArgText.substring(openBracketPos + 1, closeBracketPos).split(/, */);

    //TODO Handle expansion
    var numArgs = foperand.length;
    for (var i = 0; i < numArgs; i++) {
        var value = SocialCalc.Formula.OperandValueAndType(sheet, foperand);
        var t = value.type.charAt(0);
        var argParts = args[i].split(":");
        if (argParts.length > 2 || (argParts.length == 2 && t != argParts[1])) {
            SocialCalc.Formula.FunctionArgsError(fname, operand);
            return;
        }
        var argValue = value.value;
        var argText;
        if (t == "n") argText = "" + argValue;
        else argText = '"' + argValue.replace(/"/g, '""') + '"';
        functionText = functionText.replace(new RegExp("{" + argParts[0] + "}", "g"), argText);
    }

    var parseinfo = SocialCalc.Formula.ParseFormulaIntoTokens(functionText);

    //TODO ???
    var allowrangereturn = true;
    var resultValue = SocialCalc.Formula.evaluate_parsed_formula(parseinfo, sheet, allowrangereturn);

    result = resultValue.value;
    resulttype = resultValue.type;

    SocialCalc.Formula.PushOperand(operand, resulttype, result);
}

SocialCalc.Formula.AddUserDefinedFunction = function (ftext) {
    var openBracketPos = ftext.indexOf('(');
    var fname = ftext.substring(0, openBracketPos).toUpperCase();
    SocialCalc.Formula.UserDefinedFunctionList[fname] = ftext;
    var fdescid = "";
    SocialCalc.Formula.FunctionList[fname] = [SocialCalc.Formula.UserDefinedFunction, -1, fdescid, "", ""];
}



var oldParseSheetSave = SocialCalc.ParseSheetSave;
SocialCalc.ParseSheetSave = function (savedsheet, sheetobj) {

    var lines = savedsheet.split(/\r\n|\n/);
    var parts = [];
    var line;
    var i;

    var ftexts = null;

    for (i = 0; i < lines.length; i++) {
        line = lines[i];
        parts = line.split(":");
        switch (parts[0]) {
            case "userfunctions":
                var encodedftexts = parts[1];
                ftexts = SocialCalc.decodeFromSave(encodedftexts).split("\n");
                lines[i] = "";
                break;
            default:
                break;
        }
        parts = null;
    }

    oldParseSheetSave(lines.join("\n"), sheetobj);


    sheetobj.sci.CmdExtensionCallbacks["userfunction"] = {
        func: function(cmdname, data, sheet, cmd, saveundo) {
            //TODO undo
            switch (cmd.NextToken()) {
                case "set":
                    var rest = cmd.RestOfString();
                    var ftext = SocialCalc.decodeFromSave(rest);
                    SocialCalc.Formula.AddUserDefinedFunction(ftext);
                    sheet.attribs.needsrecalc = "yes";
                    break;
                case "delete":
                    //TODO
                    break;
                case "deleteall":
                    //TODO Breaks currently, remove from SocialCalc.Formula.FunctionList
                    SocialCalc.Formula.UserDefinedFunctionList = [];
                    sheet.attribs.needsrecalc = "yes";
                    break;

            }
        },
        data: ""
    };

    if (ftexts) {
        for (var ftext of ftexts) {
            //SocialCalc.Formula.AddUserDefinedFunction(ftext);
            var cmd = "startcmdextension userfunction set " + SocialCalc.encodeForSave(ftext);
            var parsedCmd = new SocialCalc.Parse(cmd);
            SocialCalc.ExecuteSheetCommand(sheetobj, parsedCmd, true);
        }
    }

    //cmd:startcmdextension userfunction set _ADDONE(x)={x}+1

}


var oldCreateSheetSave = SocialCalc.CreateSheetSave;
SocialCalc.CreateSheetSave = function(sheetobj, range, canonicalize) {
    var result = oldCreateSheetSave(sheetobj, range, canonicalize);
    var udfs = "";
    for (var name in SocialCalc.Formula.UserDefinedFunctionList) {
        udfs += (udfs ? "\n" : "") + SocialCalc.Formula.UserDefinedFunctionList[name];
    }
    if (udfs) result += "userfunctions:" + SocialCalc.encodeForSave(udfs) + "\n";
    return result;
}

//SocialCalc.CurrentSpreadsheetControlObject.sheet.sci.CmdExtensionCallbacks
},{}],20:[function(require,module,exports){
module.exports = require("core-js-pure/stable/array/from");
},{"core-js-pure/stable/array/from":286}],21:[function(require,module,exports){
module.exports = require("core-js-pure/stable/array/is-array");
},{"core-js-pure/stable/array/is-array":287}],22:[function(require,module,exports){
module.exports = require("core-js-pure/stable/instance/concat");
},{"core-js-pure/stable/instance/concat":289}],23:[function(require,module,exports){
module.exports = require("core-js-pure/stable/instance/flags");
},{"core-js-pure/stable/instance/flags":290}],24:[function(require,module,exports){
module.exports = require("core-js-pure/stable/instance/for-each");
},{"core-js-pure/stable/instance/for-each":291}],25:[function(require,module,exports){
module.exports = require("core-js-pure/stable/instance/includes");
},{"core-js-pure/stable/instance/includes":292}],26:[function(require,module,exports){
module.exports = require("core-js-pure/stable/instance/index-of");
},{"core-js-pure/stable/instance/index-of":293}],27:[function(require,module,exports){
module.exports = require("core-js-pure/stable/instance/map");
},{"core-js-pure/stable/instance/map":294}],28:[function(require,module,exports){
module.exports = require("core-js-pure/stable/instance/reduce");
},{"core-js-pure/stable/instance/reduce":295}],29:[function(require,module,exports){
module.exports = require("core-js-pure/stable/instance/slice");
},{"core-js-pure/stable/instance/slice":296}],30:[function(require,module,exports){
module.exports = require("core-js-pure/stable/instance/sort");
},{"core-js-pure/stable/instance/sort":297}],31:[function(require,module,exports){
module.exports = require("core-js-pure/stable/object/create");
},{"core-js-pure/stable/object/create":298}],32:[function(require,module,exports){
module.exports = require("core-js-pure/stable/object/define-property");
},{"core-js-pure/stable/object/define-property":299}],33:[function(require,module,exports){
module.exports = require("core-js-pure/stable/parse-int");
},{"core-js-pure/stable/parse-int":300}],34:[function(require,module,exports){
module.exports = require("core-js-pure/stable/symbol");
},{"core-js-pure/stable/symbol":301}],35:[function(require,module,exports){
module.exports = require("core-js-pure/features/array/from");
},{"core-js-pure/features/array/from":140}],36:[function(require,module,exports){
module.exports = require("core-js-pure/features/array/is-array");
},{"core-js-pure/features/array/is-array":141}],37:[function(require,module,exports){
module.exports = require("core-js-pure/features/get-iterator-method");
},{"core-js-pure/features/get-iterator-method":142}],38:[function(require,module,exports){
module.exports = require("core-js-pure/features/get-iterator");
},{"core-js-pure/features/get-iterator":143}],39:[function(require,module,exports){
module.exports = require("core-js-pure/features/instance/slice");
},{"core-js-pure/features/instance/slice":144}],40:[function(require,module,exports){
module.exports = require("core-js-pure/features/is-iterable");
},{"core-js-pure/features/is-iterable":145}],41:[function(require,module,exports){
module.exports = require("core-js-pure/features/symbol");
},{"core-js-pure/features/symbol":146}],42:[function(require,module,exports){
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray;
},{}],43:[function(require,module,exports){
var _Array$isArray = require("@babel/runtime-corejs3/core-js/array/is-array");

function _arrayWithHoles(arr) {
  if (_Array$isArray(arr)) return arr;
}

module.exports = _arrayWithHoles;
},{"@babel/runtime-corejs3/core-js/array/is-array":36}],44:[function(require,module,exports){
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;
},{}],45:[function(require,module,exports){
var _getIterator = require("@babel/runtime-corejs3/core-js/get-iterator");

var _isIterable = require("@babel/runtime-corejs3/core-js/is-iterable");

var _Symbol = require("@babel/runtime-corejs3/core-js/symbol");

function _iterableToArrayLimit(arr, i) {
  if (typeof _Symbol === "undefined" || !_isIterable(Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = _getIterator(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

module.exports = _iterableToArrayLimit;
},{"@babel/runtime-corejs3/core-js/get-iterator":38,"@babel/runtime-corejs3/core-js/is-iterable":40,"@babel/runtime-corejs3/core-js/symbol":41}],46:[function(require,module,exports){
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableRest;
},{}],47:[function(require,module,exports){
var arrayWithHoles = require("./arrayWithHoles");

var iterableToArrayLimit = require("./iterableToArrayLimit");

var unsupportedIterableToArray = require("./unsupportedIterableToArray");

var nonIterableRest = require("./nonIterableRest");

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}

module.exports = _slicedToArray;
},{"./arrayWithHoles":43,"./iterableToArrayLimit":45,"./nonIterableRest":46,"./unsupportedIterableToArray":48}],48:[function(require,module,exports){
var _Array$from = require("@babel/runtime-corejs3/core-js/array/from");

var _sliceInstanceProperty = require("@babel/runtime-corejs3/core-js/instance/slice");

var arrayLikeToArray = require("./arrayLikeToArray");

function _unsupportedIterableToArray(o, minLen) {
  var _context;

  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);

  var n = _sliceInstanceProperty(_context = Object.prototype.toString.call(o)).call(_context, 8, -1);

  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return _Array$from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

module.exports = _unsupportedIterableToArray;
},{"./arrayLikeToArray":42,"@babel/runtime-corejs3/core-js/array/from":35,"@babel/runtime-corejs3/core-js/instance/slice":39}],49:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Class for an Among of a Stemmer
 */
class Among {
  constructor(s, sub, result, method, instance) {
    this.s_size = s.length;
    this.s = s;
    this.substring_i = sub;
    this.result = result;
    this.method = method;
    this.instance = instance;
  }
}

module.exports = Among;

},{}],50:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
const { defaultContainer } = require('./container');

/**
 * Plugin to convert an array to a hashmap where every item existing in the
 * array is mapped to a 1.
 */
class ArrToObj {
  /**
   * Constructor of the class
   * @param {object} container Parent container, if not defined then the
   *    default container is used.
   */
  constructor(container = defaultContainer) {
    this.container = container.container || container;
    this.name = 'arrToObj';
  }

  /**
   * Static method to convert an array to a hashmap object.
   * @param {object[]} arr Input array.
   * @returns {object} Output object.
   */
  static arrToObj(arr) {
    const result = {};
    for (let i = 0; i < arr.length; i += 1) {
      result[arr[i]] = 1;
    }
    return result;
  }

  run(input) {
    if (Array.isArray(input)) {
      return ArrToObj.arrToObj(input);
    }
    input.tokens = ArrToObj.arrToObj(input.tokens);
    return input;
  }
}

module.exports = ArrToObj;

},{"./container":54}],51:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
const { defaultContainer } = require('./container');
const Tokenizer = require('./tokenizer');

/* eslint-disable */
class BaseStemmer {
  constructor(container = defaultContainer, dictionary) {
    this.container = container.container || container;
    this.cache = {};
    this.setCurrent("");
    this.dictionary = dictionary || { before: {}, after: {}};
  }

  setCurrent(value) {
    this.current = value;
    this.cursor = 0;
    this.limit = this.current.length;
    this.limit_backward = 0;
    this.bra = this.cursor;
    this.ket = this.limit;
  }

  getCurrent() {
    return this.current;
  }

  bc(s, ch) {
    if ((s[ch >>> 3] & (0x1 << (ch & 0x7))) == 0) {
      return true;
    }
    return false;
  }

  in_grouping(s, min, max) {
    if (this.cursor >= this.limit) return false;
    let ch = this.current.charCodeAt(this.cursor);
    if (ch > max || ch < min) return false;
    ch -= min;
    if (this.bc(s, ch)) return false;
    this.cursor++;
    return true;
  }

  in_grouping_b(s, min, max) {
    if (this.cursor <= this.limit_backward) return false;
    let ch = this.current.charCodeAt(this.cursor - 1);
    if (ch > max || ch < min) return false;
    ch -= min;
    if (this.bc(s, ch)) return false;
    this.cursor--;
    return true;
  }

  out_grouping(s, min, max) {
    if (this.cursor >= this.limit) return false;
    let ch = this.current.charCodeAt(this.cursor);
    if (ch > max || ch < min) {
      this.cursor++;
      return true;
    }
    ch -= min;
    if (this.bc(s, ch)) {
      this.cursor++;
      return true;
    }
    return false;
  }

  out_grouping_b(s, min, max) {
    if (this.cursor <= this.limit_backward) return false;
    let ch = this.current.charCodeAt(this.cursor - 1);
    if (ch > max || ch < min) {
      this.cursor--;
      return true;
    }
    ch -= min;
    if (this.bc(s, ch)) {
      this.cursor--;
      return true;
    }
    return false;
  }

  eq_s(s_size, s) {
    if (typeof s_size === 'string') {
      s = s_size;
      s_size = s.length;
    }
    if ((this.limit - this.cursor < s_size) || (this.current.slice(this.cursor, this.cursor + s_size) != s)) {
      return false;
    }
    this.cursor += s_size;
    return true;
  }

  eq_s_b(s_size, s) {
    if (typeof s_size === 'string') {
      s = s_size;
      s_size = s.length;
    }
    if ((this.cursor - this.limit_backward < s_size) || (this.current.slice(this.cursor - s_size, this.cursor) != s)) {
      return false;
    }
    this.cursor -= s_size;
    return true;
  }

  find_among(v, v_size) {
    let i = 0;
    let j = v_size || v.length;

    const c = this.cursor;
    const l = this.limit;

    let common_i = 0;
    let common_j = 0;

    let first_key_inspected = false;

    while (true) {
      const k = i + ((j - i) >>> 1);
      let diff = 0;
      let common = common_i < common_j ? common_i : common_j; // smaller
      var w = v[k];
      var i2;
      for (i2 = common; i2 < w.s_size; i2++) {
        if (c + common == l) {
          diff = -1;
          break;
        }
        diff = this.current.charCodeAt(c + common) - w.s.charCodeAt(i2);
        if (diff != 0) break;
        common++;
      }
      if (diff < 0) {
        j = k;
        common_j = common;
      } else {
        i = k;
        common_i = common;
      }
      if (j - i <= 1) {
        if (i > 0) break; // v->s has been inspected
        if (j == i) break; // only one item in v

        // - but now we need to go round once more to get
        // v->s inspected. This looks messy, but is actually
        // the optimal approach.

        if (first_key_inspected) break;
        first_key_inspected = true;
      }
    }
    while (true) {
      var w = v[i];
      if (common_i >= w.s_size) {
        this.cursor = c + w.s_size;
        if (w.method == null) {
          return w.result;
        }
        const res = w.method(w.instance);
        this.cursor = c + w.s_size;
        if (res) {
          return w.result;
        }
      }
      i = w.substring_i;
      if (i < 0) return 0;
    }
    return -1; // not reachable
  }

  // find_among_b is for backwards processing. Same comments apply
  find_among_b(v, v_size) {
    let i = 0;
    let j = v_size || v.length;

    const c = this.cursor;
    const lb = this.limit_backward;

    let common_i = 0;
    let common_j = 0;

    let first_key_inspected = false;

    while (true) {
      const k = i + ((j - i) >> 1);
      let diff = 0;
      let common = common_i < common_j ? common_i : common_j;
      var w = v[k];
      var i2;
      for (i2 = w.s_size - 1 - common; i2 >= 0; i2--) {
        if (c - common == lb) {
          diff = -1;
          break;
        }
        diff = this.current.charCodeAt(c - 1 - common) - w.s.charCodeAt(i2);
        if (diff != 0) break;
        common++;
      }
      if (diff < 0) {
        j = k;
        common_j = common;
      } else {
        i = k;
        common_i = common;
      }
      if (j - i <= 1) {
        if (i > 0) break;
        if (j == i) break;
        if (first_key_inspected) break;
        first_key_inspected = true;
      }
    }
    while (true) {
      var w = v[i];
      if (common_i >= w.s_size) {
        this.cursor = c - w.s_size;
        if (w.method == null) return w.result;
        const res = w.method(this);
        this.cursor = c - w.s_size;
        if (res) return w.result;
      }
      i = w.substring_i;
      if (i < 0) return 0;
    }
    return -1; // not reachable
  }

  /* to replace chars between c_bra and c_ket in this.current by the
   * chars in s.
   */
  replace_s(c_bra, c_ket, s) {
    const adjustment = s.length - (c_ket - c_bra);
    this.current = this.current.slice(0, c_bra) + s + this.current.slice(c_ket);
    this.limit += adjustment;
    if (this.cursor >= c_ket) this.cursor += adjustment;
    else if (this.cursor > c_bra) this.cursor = c_bra;
    return adjustment;
  }

  slice_check() {
    if (
      this.bra < 0 ||
      this.bra > this.ket ||
      this.ket > this.limit ||
      this.limit > this.current.length
    ) {
      return false;
    }
    return true;
  }

  slice_from(s) {
    if (this.slice_check()) {
      this.replace_s(this.bra, this.ket, s);
      return true;
    }
    return false;
  }

  slice_del() {
    return this.slice_from("");
  }

  insert(c_bra, c_ket, s) {
    const adjustment = this.replace_s(c_bra, c_ket, s);
    if (c_bra <= this.bra) this.bra += adjustment;
    if (c_bra <= this.ket) this.ket += adjustment;
  }

  /* Copy the slice into the supplied StringBuffer */
  slice_to(s) {
    let result = "";
    if (this.slice_check()) {
      result = this.current.slice(this.bra, this.ket);
    }
    return result;
  }

  stemWord(word) {
    let result = this.cache[`.${word}`];
    if (result == null) {
      if (this.dictionary.before[word]) {
        result = this.dictionary.before[word];
      } else {
        this.setCurrent(word);
        this.innerStem();
        result = this.getCurrent();
        if (this.dictionary.after[result]) {
          result = this.dictionary.after[result];
        }
      }
      this.cache[`.${word}`] = result;
    }
    return result;
  }

  stemWords(words) {
    const results = [];
    for (let i = 0; i < words.length; i++) {
      const stemmed = this.stemWord(words[i]).trim();
      if (stemmed) {
        results.push(stemmed);
      }
    }
    return results;
  }

  stem(tokens) {
    return this.stemWords(tokens);
  }

  getTokenizer() {
    if (!this.tokenizer) {
      this.tokenizer =
        this.container.get(`tokenizer-${this.name.slice(-2)}`) ||
        new Tokenizer();
    }
    return this.tokenizer;
  }

  getStopwords() {
    if (!this.stopwords) {
      this.stopwords = this.container.get(`tokenizer-${this.name.slice(-2)}`);
    }
    return this.stopwords;
  }

  tokenizeAndStem(text, keepStops = true) {
    const tokenizer = this.getTokenizer();
    let tokens = tokenizer.tokenize(text, true);
    if (!keepStops) {
      const stopwords = this.getStopwords();
      if (stopwords) {
        tokens = stopwords.removeStopwords(tokens);
      }
    }
    return this.stemWords(tokens);
  }
}

module.exports = BaseStemmer;

},{"./container":54,"./tokenizer":68}],52:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
const { defaultContainer } = require('./container');

class Clonable {
  /**
   * Constructor of the class
   * @param {object} settings
   */
  constructor(settings = {}, container = defaultContainer) {
    this.container = settings.container || container;
    this.applySettings(this, settings);
  }

  get logger() {
    return this.container.get('logger');
  }

  /**
   * Apply default settings to an object.
   * @param {object} obj Target object.
   * @param {object} settings Input settings.
   */
  applySettings(srcobj, settings = {}) {
    const obj = srcobj || {};
    Object.keys(settings).forEach((key) => {
      if (obj[key] === undefined) {
        obj[key] = settings[key];
      }
    });
    return obj;
  }

  toJSON() {
    const settings = this.jsonExport || {};
    const result = {};
    const keys = Object.keys(this);
    for (let i = 0; i < keys.length; i += 1) {
      const key = keys[i];
      if (
        key !== 'jsonExport' &&
        key !== 'jsonImport' &&
        key !== 'container' &&
        !key.startsWith('pipeline')
      ) {
        const fn = settings[key] === undefined ? true : settings[key];
        if (typeof fn === 'function') {
          const value = fn.bind(this)(result, this, key, this[key]);
          if (value) {
            result[key] = value;
          }
        } else if (typeof fn === 'boolean') {
          if (fn) {
            result[key] = this[key];
            if (key === 'settings') {
              delete result[key].container;
            }
          }
        } else if (typeof fn === 'string') {
          result[fn] = this[key];
        }
      }
    }
    return result;
  }

  fromJSON(json) {
    const settings = this.jsonImport || {};
    const keys = Object.keys(json);
    for (let i = 0; i < keys.length; i += 1) {
      const key = keys[i];
      const fn = settings[key] === undefined ? true : settings[key];
      if (typeof fn === 'function') {
        const value = fn.bind(this)(this, json, key, json[key]);
        if (value) {
          this[key] = value;
        }
      } else if (typeof fn === 'boolean') {
        if (fn) {
          this[key] = json[key];
        }
      } else if (typeof fn === 'string') {
        this[fn] = json[key];
      }
    }
  }

  objToValues(obj, srcKeys) {
    const keys = srcKeys || Object.keys(obj);
    const result = [];
    for (let i = 0; i < keys.length; i += 1) {
      result.push(obj[keys[i]]);
    }
    return result;
  }

  valuesToObj(values, keys) {
    const result = {};
    for (let i = 0; i < values.length; i += 1) {
      result[keys[i]] = values[i];
    }
    return result;
  }

  getPipeline(tag) {
    return this.container.getPipeline(tag);
  }

  async runPipeline(input, pipeline) {
    return this.container.runPipeline(pipeline || this.pipeline, input, this);
  }

  use(item) {
    this.container.use(item);
  }
}

module.exports = Clonable;

},{"./container":54}],53:[function(require,module,exports){
(function (process){(function (){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const ArrToObj = require('./arr-to-obj');
const { Container } = require('./container');
const Normalizer = require('./normalizer');
const ObjToArr = require('./obj-to-arr');
const { loadEnvFromJson } = require('./helper');
const Stemmer = require('./stemmer');
const Stopwords = require('./stopwords');
const Tokenizer = require('./tokenizer');
const Timer = require('./timer');
const logger = require('./logger');
const MemoryStorage = require('./memory-storage');
const fs = require('./mock-fs');

function loadPipelinesStr(instance, pipelines) {
  instance.loadPipelinesFromString(pipelines);
}

function traverse(obj, preffix) {
  if (typeof obj === 'string') {
    if (obj.startsWith('$')) {
      return (
        process.env[`${preffix}${obj.slice(1)}`] || process.env[obj.slice(1)]
      );
    }
    return obj;
  }
  if (Array.isArray(obj)) {
    return obj.map((x) => traverse(x, preffix));
  }
  if (typeof obj === 'object') {
    const keys = Object.keys(obj);
    const result = {};
    for (let i = 0; i < keys.length; i += 1) {
      result[keys[i]] = traverse(obj[keys[i]], preffix);
    }
    return result;
  }
  return obj;
}

function containerBootstrap(
  inputSettings,
  mustLoadEnv,
  container,
  preffix,
  pipelines,
  parent
) {
  const srcSettings = inputSettings || {};
  const instance = container || new Container(preffix);
  instance.parent = parent;
  if (!preffix) {
    instance.register('fs', fs);
    instance.use(ArrToObj);
    instance.use(Normalizer);
    instance.use(ObjToArr);
    instance.use(Stemmer);
    instance.use(Stopwords);
    instance.use(Tokenizer);
    instance.use(Timer);
    instance.use(logger);
    instance.use(MemoryStorage);
  }
  const settings = srcSettings;
  if (srcSettings.env) {
    loadEnvFromJson(preffix, srcSettings.env);
  }
  let configuration;
  configuration = settings;
  configuration = traverse(configuration, preffix ? `${preffix}_` : '');
  if (configuration.settings) {
    const keys = Object.keys(configuration.settings);
    for (let i = 0; i < keys.length; i += 1) {
      instance.registerConfiguration(
        keys[i],
        configuration.settings[keys[i]],
        true
      );
    }
  }
  if (configuration.use) {
    for (let i = 0; i < configuration.use.length; i += 1) {
      const item = configuration.use[i];
      if (Array.isArray(item)) {
        instance.register(item[0], item[1]);
      } else {
        instance.use(item);
      }
    }
  }
  if (configuration.terraform) {
    for (let i = 0; i < configuration.terraform.length; i += 1) {
      const current = configuration.terraform[i];
      const terra = instance.get(current.className);
      instance.register(current.name, terra, true);
    }
  }
  if (configuration.childs) {
    instance.childs = configuration.childs;
  }
  if (pipelines) {
    for (let i = 0; i < pipelines.length; i += 1) {
      const pipeline = pipelines[i];
      instance.registerPipeline(
        pipeline.tag,
        pipeline.pipeline,
        pipeline.overwrite
      );
    }
  }
  if (configuration.pipelines) {
    loadPipelinesStr(instance, configuration.pipelines);
  }
  return instance;
}

module.exports = containerBootstrap;

}).call(this)}).call(this,require('_process'))
},{"./arr-to-obj":50,"./container":54,"./helper":58,"./logger":60,"./memory-storage":61,"./mock-fs":62,"./normalizer":63,"./obj-to-arr":64,"./stemmer":65,"./stopwords":66,"./timer":67,"./tokenizer":68,"_process":304}],54:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const { compareWildcars } = require('./helper');
const DefaultCompiler = require('./default-compiler');
const logger = require('./logger');

/**
 * Container class
 */
class Container {
  /**
   * Constructor of the class.
   */
  constructor(hasPreffix = false) {
    this.classes = {};
    this.factory = {};
    this.pipelines = {};
    this.configurations = {};
    this.compilers = {};
    this.cache = {
      bestKeys: {},
      pipelines: {},
    };
    this.registerCompiler(DefaultCompiler);
    if (!hasPreffix) {
      this.use(logger);
    }
  }

  registerCompiler(Compiler, name) {
    const instance = new Compiler(this);
    this.compilers[name || instance.name] = instance;
  }

  addClass(clazz, name) {
    this.classes[name || clazz.name] = clazz;
  }

  toJSON(instance) {
    const result = instance.toJSON ? instance.toJSON() : { ...instance };
    result.className = instance.constructor.name;
    return result;
  }

  fromJSON(obj, settings) {
    const Clazz = this.classes[obj.className];
    let instance;
    if (Clazz) {
      instance = new Clazz(settings);
      if (instance.fromJSON) {
        instance.fromJSON(obj);
      } else {
        Object.assign(instance, obj);
      }
    } else {
      instance = { ...obj };
    }
    delete instance.className;
    return instance;
  }

  register(name, Clazz, isSingleton = true) {
    this.cache.bestKeys = {};
    const isClass = typeof Clazz === 'function';
    const item = { name, isSingleton };
    if (isSingleton) {
      item.instance = isClass ? new Clazz() : Clazz;
    } else {
      item.instance = isClass ? Clazz : Clazz.constructor;
    }
    this.factory[name] = item;
  }

  getBestKey(name) {
    if (this.cache.bestKeys[name] !== undefined) {
      return this.cache.bestKeys[name];
    }
    const keys = Object.keys(this.factory);
    for (let i = 0; i < keys.length; i += 1) {
      if (compareWildcars(name, keys[i])) {
        this.cache.bestKeys[name] = keys[i];
        return keys[i];
      }
    }
    this.cache.bestKeys[name] = null;
    return undefined;
  }

  get(name, settings) {
    let item = this.factory[name];
    if (!item) {
      if (this.parent) {
        return this.parent.get(name, settings);
      }
      const key = this.getBestKey(name);
      if (key) {
        item = this.factory[key];
      }
      if (!item) {
        return undefined;
      }
    }
    if (item.isSingleton) {
      if (item.instance && item.instance.applySettings) {
        item.instance.applySettings(item.instance.settings, settings);
      }
      return item.instance;
    }
    const Clazz = item.instance;
    return new Clazz(settings, this);
  }

  buildLiteral(subtype, step, value, context) {
    return {
      type: 'literal',
      subtype,
      src: step,
      value,
      context,
      container: this,
    };
  }

  resolvePathWithType(step, context, input, srcObject) {
    const tokens = step.split('.');
    let token = tokens[0].trim();
    if (!token) {
      token = step.startsWith('.') ? 'this' : 'context';
    }
    const isnum = /^\d+$/.test(token);
    if (isnum) {
      return this.buildLiteral('number', step, parseFloat(token), context);
    }
    if (token.startsWith('"')) {
      return this.buildLiteral(
        'string',
        step,
        token.replace(/^"(.+(?="$))"$/, '$1'),
        context
      );
    }
    if (token.startsWith("'")) {
      return this.buildLiteral(
        'string',
        step,
        token.replace(/^'(.+(?='$))'$/, '$1'),
        context
      );
    }
    if (token === 'true') {
      return this.buildLiteral('boolean', step, true, context);
    }
    if (token === 'false') {
      return this.buildLiteral('boolean', step, false, context);
    }
    let currentObject = context;
    if (token === 'input' || token === 'output') {
      currentObject = input;
    } else if (token && token !== 'context' && token !== 'this') {
      currentObject = this.get(token) || currentObject[token];
    } else if (token === 'this') {
      currentObject = srcObject;
    }
    for (let i = 1; i < tokens.length; i += 1) {
      const currentToken = tokens[i];
      if (!currentObject || !currentObject[currentToken]) {
        if (i < tokens.length - 1) {
          throw Error(`Path not found in pipeline "${step}"`);
        }
      }
      const prevCurrentObject = currentObject;
      currentObject = currentObject[currentToken];
      if (typeof currentObject === 'function') {
        currentObject = currentObject.bind(prevCurrentObject);
      }
    }
    if (typeof currentObject === 'function') {
      return {
        type: 'function',
        src: step,
        value: currentObject,
        context,
        container: this,
      };
    }
    return {
      type: 'reference',
      src: step,
      value: currentObject,
      context,
      container: this,
    };
  }

  resolvePath(step, context, input, srcObject) {
    const result = this.resolvePathWithType(step, context, input, srcObject);
    return result ? result.value : result;
  }

  setValue(path, valuePath, context, input, srcObject) {
    const value = this.resolvePath(valuePath, context, input, srcObject);
    const tokens = path.split('.');
    const newPath = tokens.slice(0, -1).join('.');
    const currentObject = this.resolvePath(newPath, context, input, srcObject);
    currentObject[tokens[tokens.length - 1]] = value;
  }

  incValue(path, valuePath, context, input, srcObject) {
    const value = this.resolvePath(valuePath, context, input, srcObject);
    const tokens = path.split('.');
    if (path.startsWith('.')) {
      tokens.push('this');
    }
    const newPath = tokens.slice(0, -1).join('.');
    const currentObject = this.resolvePath(newPath, context, input, srcObject);
    currentObject[tokens[tokens.length - 1]] += value;
  }

  decValue(path, valuePath, context, input, srcObject) {
    const value = this.resolvePath(valuePath, context, input, srcObject);
    const tokens = path.split('.');
    const newPath = tokens.slice(0, -1).join('.');
    const currentObject = this.resolvePath(newPath, context, input, srcObject);
    currentObject[tokens[tokens.length - 1]] -= value;
  }

  eqValue(pathA, pathB, srcContext, input, srcObject) {
    const context = srcContext;
    const valueA = this.resolvePath(pathA, context, input, srcObject);
    const valueB = this.resolvePath(pathB, context, input, srcObject);
    context.floating = valueA === valueB;
  }

  neqValue(pathA, pathB, srcContext, input, srcObject) {
    const context = srcContext;
    const valueA = this.resolvePath(pathA, context, input, srcObject);
    const valueB = this.resolvePath(pathB, context, input, srcObject);
    context.floating = valueA !== valueB;
  }

  gtValue(pathA, pathB, srcContext, input, srcObject) {
    const context = srcContext;
    const valueA = this.resolvePath(pathA, context, input, srcObject);
    const valueB = this.resolvePath(pathB, context, input, srcObject);
    context.floating = valueA > valueB;
  }

  geValue(pathA, pathB, srcContext, input, srcObject) {
    const context = srcContext;
    const valueA = this.resolvePath(pathA, context, input, srcObject);
    const valueB = this.resolvePath(pathB, context, input, srcObject);
    context.floating = valueA >= valueB;
  }

  ltValue(pathA, pathB, srcContext, input, srcObject) {
    const context = srcContext;
    const valueA = this.resolvePath(pathA, context, input, srcObject);
    const valueB = this.resolvePath(pathB, context, input, srcObject);
    context.floating = valueA < valueB;
  }

  leValue(pathA, pathB, srcContext, input, srcObject) {
    const context = srcContext;
    const valueA = this.resolvePath(pathA, context, input, srcObject);
    const valueB = this.resolvePath(pathB, context, input, srcObject);
    context.floating = valueA <= valueB;
  }

  deleteValue(path, context, input, srcObject) {
    const tokens = path.split('.');
    const newPath = tokens.slice(0, -1).join('.');
    const currentObject = this.resolvePath(newPath, context, input, srcObject);
    delete currentObject[tokens[tokens.length - 1]];
  }

  getValue(srcPath, context, input, srcObject) {
    const path = srcPath || 'floating';
    const tokens = path.split('.');
    const newPath = tokens.slice(0, -1).join('.');
    const currentObject = this.resolvePath(newPath, context, input, srcObject);
    return currentObject[tokens[tokens.length - 1]];
  }

  async runPipeline(srcPipeline, input, srcObject, depth = 0) {
    if (depth > 10) {
      throw new Error(
        'Pipeline depth is too high: perhaps you are using recursive pipelines?'
      );
    }
    const pipeline =
      typeof srcPipeline === 'string'
        ? this.getPipeline(srcPipeline)
        : srcPipeline;
    if (!pipeline) {
      throw new Error(`Pipeline not found ${srcPipeline}`);
    }
    if (!pipeline.compiler) {
      const tag = JSON.stringify(pipeline);
      this.registerPipeline(tag, pipeline, false);
      const built = this.getPipeline(tag);
      return built.compiler.execute(built.compiled, input, srcObject, depth);
    }
    return pipeline.compiler.execute(
      pipeline.compiled,
      input,
      srcObject,
      depth
    );
  }

  use(item, name, isSingleton, onlyIfNotExists = false) {
    let instance;
    if (typeof item === 'function') {
      if (item.name.endsWith('Compiler')) {
        this.registerCompiler(item);
        return item.name;
      }
      const Clazz = item;
      instance = new Clazz({ container: this });
    } else {
      instance = item;
    }
    if (instance.register) {
      instance.register(this);
    }
    const tag = instance.settings ? instance.settings.tag : undefined;
    const itemName =
      name || instance.name || tag || item.name || instance.constructor.name;
    if (!onlyIfNotExists || !this.get(itemName)) {
      this.register(itemName, instance, isSingleton);
    }
    return itemName;
  }

  getCompiler(name) {
    const compiler = this.compilers[name];
    if (compiler) {
      return compiler;
    }
    if (this.parent) {
      return this.parent.getCompiler(name);
    }
    return this.compilers.default;
  }

  buildPipeline(srcPipeline, prevPipeline = []) {
    const pipeline = [];
    if (srcPipeline && srcPipeline.length > 0) {
      for (let i = 0; i < srcPipeline.length; i += 1) {
        const line = srcPipeline[i];
        if (line.trim() === '$super') {
          for (let j = 0; j < prevPipeline.length; j += 1) {
            const s = prevPipeline[j].trim();
            if (!s.startsWith('->')) {
              pipeline.push(prevPipeline[j]);
            }
          }
        } else {
          pipeline.push(line);
        }
      }
    }
    const compilerName =
      !pipeline.length || !pipeline[0].startsWith('// compiler=')
        ? 'default'
        : pipeline[0].slice(12);
    const compiler = this.getCompiler(compilerName);
    const compiled = compiler.compile(pipeline);
    return {
      pipeline,
      compiler,
      compiled,
    };
  }

  registerPipeline(tag, pipeline, overwrite = true) {
    if (overwrite || !this.pipelines[tag]) {
      this.cache.pipelines = {};
      const prev = this.getPipeline(tag);
      this.pipelines[tag] = this.buildPipeline(
        pipeline,
        prev ? prev.pipeline : []
      );
    }
  }

  registerPipelineForChilds(childName, tag, pipeline, overwrite = true) {
    if (!this.childPipelines) {
      this.childPipelines = {};
    }
    if (!this.childPipelines[childName]) {
      this.childPipelines[childName] = [];
    }
    this.childPipelines[childName].push({ tag, pipeline, overwrite });
  }

  getPipeline(tag) {
    if (this.pipelines[tag]) {
      return this.pipelines[tag];
    }
    if (this.cache.pipelines[tag] !== undefined) {
      return this.cache.pipelines[tag] || undefined;
    }
    const keys = Object.keys(this.pipelines);
    for (let i = 0; i < keys.length; i += 1) {
      if (compareWildcars(tag, keys[i])) {
        this.cache.pipelines[tag] = this.pipelines[keys[i]];
        return this.pipelines[keys[i]];
      }
    }
    this.cache.pipelines[tag] = null;
    return undefined;
  }

  registerConfiguration(tag, configuration, overwrite = true) {
    if (overwrite || !this.configurations[tag]) {
      this.configurations[tag] = configuration;
    }
  }

  getConfiguration(tag) {
    if (this.configurations[tag]) {
      return this.configurations[tag];
    }
    const keys = Object.keys(this.configurations);
    for (let i = 0; i < keys.length; i += 1) {
      if (compareWildcars(tag, keys[i])) {
        return this.configurations[keys[i]];
      }
    }
    return undefined;
  }

  loadPipelinesFromString(str = '') {
    const lines = str.split(/\n|\r|\r\n/);
    let currentName = '';
    let currentPipeline = [];
    let currentTitle = '';
    for (let i = 0; i < lines.length; i += 1) {
      const line = lines[i];
      if (line !== '') {
        if (line.startsWith('# ')) {
          if (currentName) {
            if (
              currentTitle &&
              !['default', 'pipelines'].includes(currentTitle.toLowerCase())
            ) {
              this.registerPipelineForChilds(
                currentTitle,
                currentName,
                currentPipeline
              );
            } else {
              this.registerPipeline(currentName, currentPipeline);
            }
          }
          currentTitle = line.slice(1).trim();
          currentName = '';
          currentPipeline = [];
        } else if (line.startsWith('## ')) {
          if (currentName) {
            if (
              currentTitle &&
              !['default', 'pipelines'].includes(currentTitle.toLowerCase())
            ) {
              this.registerPipelineForChilds(
                currentTitle,
                currentName,
                currentPipeline
              );
            } else {
              this.registerPipeline(currentName, currentPipeline);
            }
          }
          currentName = line.slice(2).trim();
          currentPipeline = [];
        } else if (currentName) {
          currentPipeline.push(line);
        }
      }
    }
    if (currentName) {
      if (
        currentTitle &&
        !['default', 'pipelines'].includes(currentTitle.toLowerCase())
      ) {
        this.registerPipelineForChilds(
          currentTitle,
          currentName,
          currentPipeline
        );
      } else {
        this.registerPipeline(currentName, currentPipeline);
      }
    }
  }

  async start(pipelineName = 'main') {
    const keys = Object.keys(this.factory);
    for (let i = 0; i < keys.length; i += 1) {
      const current = this.factory[keys[i]];
      if (current.isSingleton && current.instance && current.instance.start) {
        await current.instance.start();
      }
    }
    if (this.getPipeline(pipelineName)) {
      await this.runPipeline(pipelineName, {}, this);
    }
  }
}

const defaultContainer = new Container();

module.exports = {
  Container,
  defaultContainer,
};

},{"./default-compiler":56,"./helper":58,"./logger":60}],55:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const { defaultContainer } = require('./container');
const Clonable = require('./clonable');

class Context extends Clonable {
  constructor(settings = {}, container = undefined) {
    super(
      {
        settings: {},
        container: settings.container || container || defaultContainer,
      },
      container
    );
    this.applySettings(this.settings, settings);
    if (!this.settings.tag) {
      this.settings.tag = 'context';
    }
    this.applySettings(
      this.settings,
      this.container.getConfiguration(this.settings.tag)
    );
  }

  getStorage() {
    const storage = this.container.get(this.settings.storageName || 'storage');
    if (!storage) {
      throw new Error('Storage not found');
    }
    return storage;
  }

  getContext(key) {
    const storage = this.getStorage();
    return storage.read(`${this.settings.tag}-${key}`);
  }

  setContext(key, value) {
    const storage = this.getStorage();
    const change = {
      [key]: value,
    };
    return storage.write(change);
  }

  async getContextValue(key, valueName) {
    const context = await this.getContext(key);
    return context ? context[valueName] : undefined;
  }

  async setContextValue(key, valueName, value) {
    let context = await this.getContext(key);
    if (!context) {
      context = {};
    }
    context[valueName] = value;
    return this.setContext(key, context);
  }
}

module.exports = Context;

},{"./clonable":52,"./container":54}],56:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

class DefaultCompiler {
  constructor(container) {
    this.container = container.container || container;
    this.name = 'default';
  }

  getTokenFromWord(word) {
    if (word.startsWith('//')) {
      return {
        type: 'comment',
        value: word,
      };
    }
    if (
      [
        'set',
        'delete',
        'get',
        'inc',
        'dec',
        'eq',
        'neq',
        'gt',
        'ge',
        'lt',
        'le',
        'label',
        'goto',
        'jne',
        'je',
      ].includes(word)
    ) {
      return {
        type: word,
        arguments: [],
      };
    }
    if (word.startsWith('$')) {
      return {
        type: 'call',
        value: word.slice(1),
      };
    }
    return {
      type: 'reference',
      value: word,
    };
  }

  compile(pipeline) {
    const result = [];
    for (let i = 0; i < pipeline.length; i += 1) {
      const line = pipeline[i].trim();
      const words = line.split(' ');
      const tokens = [];
      let currentString = '';
      let currentQuote;
      for (let j = 0; j < words.length; j += 1) {
        const word = words[j];
        let processed = false;
        if (!currentQuote) {
          if (word.startsWith('"')) {
            currentString = word;
            processed = true;
            currentQuote = '"';
            if (word.endsWith('"')) {
              currentQuote = undefined;
              tokens.push(this.getTokenFromWord(currentString));
            }
          } else if (word.startsWith("'")) {
            currentString = word;
            processed = true;
            currentQuote = "'";
            if (word.endsWith("'")) {
              currentQuote = undefined;
              tokens.push(this.getTokenFromWord(currentString));
            }
          }
        } else {
          currentString = `${currentString} ${word}`;
          processed = true;
          if (word.endsWith(currentQuote)) {
            currentQuote = undefined;
            tokens.push(this.getTokenFromWord(currentString));
          }
        }
        if (!processed) {
          tokens.push(this.getTokenFromWord(word));
        }
      }
      result.push(tokens);
    }
    return result;
  }

  executeCall(firstToken, context, input, srcObject, depth) {
    const pipeline = this.container.getPipeline(firstToken.value);
    if (!pipeline) {
      throw new Error(`Pipeline $${firstToken.value} not found.`);
    }
    return this.container.runPipeline(pipeline, input, srcObject, depth + 1);
  }

  executeReference(step, firstToken, context, input, srcObject) {
    const currentObject = this.container.resolvePath(
      firstToken.value,
      context,
      input,
      srcObject
    );
    const args = [];
    for (let i = 1; i < step.length; i += 1) {
      args.push(
        this.container.resolvePathWithType(
          step[i].value,
          context,
          input,
          srcObject
        )
      );
    }
    if (!currentObject) {
      throw new Error(`Method not found for step ${JSON.stringify(step)}`);
    }
    const method = currentObject.run || currentObject;
    if (typeof method === 'function') {
      return typeof currentObject === 'function'
        ? method(input, ...args)
        : method.bind(currentObject)(input, ...args);
    }
    return method;
  }

  doGoto(label, srcContext) {
    const context = srcContext;
    const index = context.labels[label];
    context.cursor = index;
  }

  async executeAction(step, context, input, srcObject, depth) {
    let firstToken = step[0];
    if (firstToken && firstToken.value && firstToken.value.startsWith('->')) {
      if (depth > 0) {
        return input;
      }
      firstToken = { ...firstToken };
      firstToken.value = firstToken.value.slice(2);
    }
    switch (firstToken.type) {
      case 'set':
        this.container.setValue(
          step[1].value,
          step[2] ? step[2].value : undefined,
          context,
          input,
          srcObject
        );
        break;
      case 'delete':
        this.container.deleteValue(step[1].value, context, input, srcObject);
        break;
      case 'get':
        return this.container.getValue(
          step[1] ? step[1].value : undefined,
          context,
          input,
          srcObject
        );
      case 'inc':
        this.container.incValue(
          step[1] ? step[1].value : undefined,
          step[2] ? step[2].value : '1',
          context,
          input,
          srcObject
        );
        break;
      case 'dec':
        this.container.decValue(
          step[1] ? step[1].value : undefined,
          step[2] ? step[2].value : '1',
          context,
          input,
          srcObject
        );
        break;
      case 'eq':
        this.container.eqValue(
          step[1] ? step[1].value : undefined,
          step[2] ? step[2].value : undefined,
          context,
          input,
          srcObject
        );
        break;
      case 'neq':
        this.container.neqValue(
          step[1] ? step[1].value : undefined,
          step[2] ? step[2].value : undefined,
          context,
          input,
          srcObject
        );
        break;
      case 'gt':
        this.container.gtValue(
          step[1] ? step[1].value : undefined,
          step[2] ? step[2].value : undefined,
          context,
          input,
          srcObject
        );
        break;
      case 'ge':
        this.container.geValue(
          step[1] ? step[1].value : undefined,
          step[2] ? step[2].value : undefined,
          context,
          input,
          srcObject
        );
        break;
      case 'lt':
        this.container.ltValue(
          step[1] ? step[1].value : undefined,
          step[2] ? step[2].value : undefined,
          context,
          input,
          srcObject
        );
        break;
      case 'le':
        this.container.leValue(
          step[1] ? step[1].value : undefined,
          step[2] ? step[2].value : undefined,
          context,
          input,
          srcObject
        );
        break;
      case 'goto':
        this.doGoto(step[1].value, context);
        break;
      case 'jne':
        if (!context.floating) {
          this.doGoto(step[1].value, context);
        }
        break;
      case 'je':
        if (context.floating) {
          this.doGoto(step[1].value, context);
        }
        break;
      case 'call':
        return this.executeCall(firstToken, context, input, srcObject, depth);
      case 'reference':
        return this.executeReference(
          step,
          firstToken,
          context,
          input,
          srcObject
        );
      default:
        break;
    }
    return input;
  }

  findLabels(compiled, srcLabels) {
    const labels = srcLabels;
    for (let i = 0; i < compiled.length; i += 1) {
      const current = compiled[i];
      if (current[0].type === 'label') {
        labels[current[1].value] = i;
      }
    }
  }

  async execute(compiled, srcInput, srcObject, depth) {
    let input = srcInput;
    const context = { cursor: 0, labels: {} };
    this.findLabels(compiled, context.labels);
    while (context.cursor < compiled.length) {
      input = await this.executeAction(
        compiled[context.cursor],
        context,
        input,
        srcObject,
        depth
      );
      context.cursor += 1;
    }
    return input;
  }
}

module.exports = DefaultCompiler;

},{}],57:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const containerBootstrap = require('./container-bootstrap');

class Dock {
  constructor() {
    this.containers = {};
  }

  getContainer(name) {
    return this.containers[name || 'default'];
  }

  async createContainer(
    name,
    settings,
    srcMustLoadEnv,
    preffix,
    parent,
    pipelines
  ) {
    const mustLoadEnv = srcMustLoadEnv === undefined ? true : srcMustLoadEnv;
    if (typeof name !== 'string') {
      settings = name;
      name = '';
    }
    if (!settings) {
      if (name === 'default' || name === '') {
        settings = 'conf.json';
      }
    }
    if (!this.containers[name]) {
      const container = containerBootstrap(
        settings,
        mustLoadEnv,
        undefined,
        preffix,
        pipelines
      );
      container.name = name;
      this.containers[name] = container;
      container.dock = this;
      container.parent = parent;
      await container.start();
      if (container.childs) {
        await this.buildChilds(container);
      }
    }
    return this.containers[name];
  }

  async buildChilds(container) {
    if (container && container.childs) {
      const keys = Object.keys(container.childs);
      const childs = {};
      for (let i = 0; i < keys.length; i += 1) {
        const settings = container.childs[keys[i]];
        settings.isChild = true;
        if (!settings.pathPipeline) {
          settings.pathPipeline = `${keys[i]}_pipeline.md`;
        }
        childs[keys[i]] = await this.createContainer(
          keys[i],
          settings,
          false,
          keys[i],
          container,
          container.childPipelines
            ? container.childPipelines[keys[i]]
            : undefined
        );
      }
      container.childs = childs;
    }
  }

  async terraform(settings, mustLoadEnv = true) {
    const defaultContainer = await this.createContainer(
      'default',
      settings,
      mustLoadEnv,
      ''
    );
    return defaultContainer;
  }

  start(settings, mustLoadEnv = true) {
    return this.terraform(settings, mustLoadEnv);
  }
}

const dock = new Dock();

module.exports = dock;

},{"./container-bootstrap":53}],58:[function(require,module,exports){
(function (process){(function (){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const rsAstralRange = '\\ud800-\\udfff';
const rsComboMarksRange = '\\u0300-\\u036f';
const reComboHalfMarksRange = '\\ufe20-\\ufe2f';
const rsComboSymbolsRange = '\\u20d0-\\u20ff';
const rsComboMarksExtendedRange = '\\u1ab0-\\u1aff';
const rsComboMarksSupplementRange = '\\u1dc0-\\u1dff';
const rsComboRange =
  rsComboMarksRange +
  reComboHalfMarksRange +
  rsComboSymbolsRange +
  rsComboMarksExtendedRange +
  rsComboMarksSupplementRange;
const rsVarRange = '\\ufe0e\\ufe0f';
const rsAstral = `[${rsAstralRange}]`;
const rsCombo = `[${rsComboRange}]`;
const rsFitz = '\\ud83c[\\udffb-\\udfff]';
const rsModifier = `(?:${rsCombo}|${rsFitz})`;
const rsNonAstral = `[^${rsAstralRange}]`;
const rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}';
const rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]';
const rsZWJ = '\\u200d';
const reOptMod = `${rsModifier}?`;
const rsOptVar = `[${rsVarRange}]?`;
const rsOptJoin = `(?:${rsZWJ}(?:${[rsNonAstral, rsRegional, rsSurrPair].join(
  '|'
)})${rsOptVar + reOptMod})*`;
const rsSeq = rsOptVar + reOptMod + rsOptJoin;
const rsNonAstralCombo = `${rsNonAstral}${rsCombo}?`;
const rsSymbol = `(?:${[
  rsNonAstralCombo,
  rsCombo,
  rsRegional,
  rsSurrPair,
  rsAstral,
].join('|')})`;

/* eslint-disable no-misleading-character-class */
const reHasUnicode = RegExp(
  `[${rsZWJ + rsAstralRange + rsComboRange + rsVarRange}]`
);
const reUnicode = RegExp(`${rsFitz}(?=${rsFitz})|${rsSymbol + rsSeq}`, 'g');
/* eslint-enable no-misleading-character-class */

const hasUnicode = (str) => reHasUnicode.test(str);
const unicodeToArray = (str) => str.match(reUnicode) || [];
const asciiToArray = (str) => str.split('');
const stringToArray = (str) =>
  hasUnicode(str) ? unicodeToArray(str) : asciiToArray(str);

function compareWildcars(text, rule) {
  const escapeRegex = (str) => str.replace(/([.*+^=!:${}()|[\]/\\])/g, '\\$1');
  const regexRule = `^${rule.split('*').map(escapeRegex).join('.*')}$`.replace(
    /\?/g,
    '.'
  );
  return new RegExp(regexRule).test(text);
}

function loadEnvFromJson(preffix, json = {}) {
  const keys = Object.keys(json);
  preffix = preffix ? `${preffix}_` : '';
  for (let i = 0; i < keys.length; i += 1) {
    const key = `${preffix}${keys[i]}`;
    process.env[key] = json[keys[i]];
  }
}

module.exports = {
  hasUnicode,
  unicodeToArray,
  asciiToArray,
  stringToArray,
  compareWildcars,
  loadEnvFromJson,
};

}).call(this)}).call(this,require('_process'))
},{"_process":304}],59:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const Among = require('./among');
const ArrToObj = require('./arr-to-obj');
const BaseStemmer = require('./base-stemmer');
const containerBootstrap = require('./container-bootstrap');
const Clonable = require('./clonable');
const { Container, defaultContainer } = require('./container');
const Normalizer = require('./normalizer');
const ObjToArr = require('./obj-to-arr');
const Stemmer = require('./stemmer');
const Stopwords = require('./stopwords');
const Tokenizer = require('./tokenizer');
const Timer = require('./timer');
const logger = require('./logger');
const {
  hasUnicode,
  unicodeToArray,
  asciiToArray,
  stringToArray,
  compareWildcars,
  loadEnv,
} = require('./helper');
const MemoryStorage = require('./memory-storage');
const uuid = require('./uuid');
const dock = require('./dock');
const Context = require('./context');

async function dockStart(settings, mustLoadEnv) {
  await dock.start(settings, mustLoadEnv);
  return dock;
}

module.exports = {
  Among,
  ArrToObj,
  BaseStemmer,
  containerBootstrap,
  Clonable,
  Container,
  defaultContainer,
  hasUnicode,
  unicodeToArray,
  asciiToArray,
  stringToArray,
  compareWildcars,
  loadEnv,
  Normalizer,
  ObjToArr,
  Stemmer,
  Stopwords,
  Tokenizer,
  Timer,
  logger,
  MemoryStorage,
  uuid,
  dock,
  Context,
  dockStart,
};

},{"./among":49,"./arr-to-obj":50,"./base-stemmer":51,"./clonable":52,"./container":54,"./container-bootstrap":53,"./context":55,"./dock":57,"./helper":58,"./logger":60,"./memory-storage":61,"./normalizer":63,"./obj-to-arr":64,"./stemmer":65,"./stopwords":66,"./timer":67,"./tokenizer":68,"./uuid":69}],60:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

class Logger {
  constructor() {
    this.name = 'logger';
  }

  debug(...args) {
    // eslint-disable-next-line no-console
    console.debug(...args);
  }

  info(...args) {
    // eslint-disable-next-line no-console
    console.info(...args);
  }

  warn(...args) {
    // eslint-disable-next-line no-console
    console.warn(...args);
  }

  error(...args) {
    // eslint-disable-next-line no-console
    console.error(...args);
  }

  log(...args) {
    // eslint-disable-next-line no-console
    console.log(...args);
  }

  trace(...args) {
    // eslint-disable-next-line no-console
    console.trace(...args);
  }

  fatal(...args) {
    // eslint-disable-next-line no-console
    console.error(...args);
  }
}

const logger = new Logger();

module.exports = logger;

},{}],61:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const { defaultContainer } = require('./container');
const Clonable = require('./clonable');

class MemoryStorage extends Clonable {
  constructor(settings = {}, container = undefined) {
    super(
      {
        settings: {},
        container: settings.container || container || defaultContainer,
      },
      container
    );
    this.applySettings(this.settings, settings);
    this.applySettings(this.settings, { etag: 1, memory: {} });
    if (!this.settings.tag) {
      this.settings.tag = 'storage';
    }
    this.applySettings(
      this.settings,
      this.container.getConfiguration(this.settings.tag)
    );
  }

  read(keys) {
    return new Promise((resolve) => {
      const data = {};
      if (!Array.isArray(keys)) {
        keys = [keys];
      }
      keys.forEach((key) => {
        const item = this.settings.memory[key];
        if (item) {
          data[key] = JSON.parse(item);
        }
      });
      resolve(data);
    });
  }

  saveItem(key, item) {
    const clone = { ...item };
    clone.eTag = this.settings.etag.toString();
    this.settings.etag += 1;
    this.settings.memory[key] = JSON.stringify(clone);
    return clone;
  }

  write(changes) {
    return new Promise((resolve, reject) => {
      Object.keys(changes).forEach((key) => {
        const newItem = changes[key];
        const oldStr = this.settings.memory[key];
        if (!oldStr || newItem.eTag === '*') {
          return resolve(this.saveItem(key, newItem));
        }
        const oldItem = JSON.parse(oldStr);
        if (newItem.eTag !== oldItem.eTag) {
          return reject(
            new Error(`Error writing "${key}" due to eTag conflict.`)
          );
        }
        return resolve(this.saveItem(key, newItem));
      });
    });
  }

  delete(keys) {
    return new Promise((resolve) => {
      keys.forEach((key) => delete this.settings.memory[key]);
      resolve();
    });
  }
}

module.exports = MemoryStorage;

},{"./clonable":52,"./container":54}],62:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

function readFile() {
  return new Promise((resolve) => {
    resolve(undefined);
  });
}

function writeFile() {
  return new Promise((resolve, reject) => {
    reject(new Error('File cannot be written in web'));
  });
}

function existsSync() {
  return false;
}

function lstatSync() {
  return undefined;
}

function readFileSync() {
  return undefined;
}

module.exports = {
  readFile,
  writeFile,
  existsSync,
  lstatSync,
  readFileSync,
  name: 'fs',
};

},{}],63:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const { defaultContainer } = require('./container');

class Normalizer {
  constructor(container = defaultContainer) {
    this.container = container.container || container;
    this.name = 'normalize';
  }

  normalize(text) {
    return text
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .toLowerCase();
  }

  run(srcInput) {
    const input = srcInput;
    const locale = input.locale || 'en';
    const normalizer = this.container.get(`normalizer-${locale}`) || this;
    input.text = normalizer.normalize(input.text, input);
    return input;
  }
}

module.exports = Normalizer;

},{"./container":54}],64:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
const { defaultContainer } = require('./container');

class ObjToArr {
  constructor(container = defaultContainer) {
    this.container = container.container || container;
    this.name = 'objToArr';
  }

  static objToArr(obj) {
    return Object.keys(obj);
  }

  run(input) {
    if (!input.tokens) {
      return ObjToArr.objToArr(input);
    }
    input.tokens = ObjToArr.objToArr(input.tokens);
    return input;
  }
}

module.exports = ObjToArr;

},{"./container":54}],65:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
const { defaultContainer } = require('./container');

class Stemmer {
  constructor(container = defaultContainer) {
    this.container = container.container || container;
    this.name = 'stem';
  }

  stem(tokens) {
    return tokens;
  }

  getStemmer(srcInput) {
    const input = srcInput;
    const locale =
      input.locale || input.settings ? input.settings.locale || 'en' : 'en';
    let stemmer = this.container.get(`stemmer-${locale}`);
    if (!stemmer) {
      const stemmerBert = this.container.get(`stemmer-bert`);
      if (stemmerBert && stemmerBert.activeFor(locale)) {
        stemmer = stemmerBert;
      } else {
        stemmer = this;
      }
    }
    return stemmer;
  }

  async addForTraining(srcInput) {
    const stemmer = this.getStemmer(srcInput);
    if (stemmer.addUtterance) {
      await stemmer.addUtterance(srcInput.utterance, srcInput.intent);
    }
    return srcInput;
  }

  async train(srcInput) {
    const stemmer = this.getStemmer(srcInput);
    if (stemmer.innerTrain) {
      await stemmer.innerTrain();
    }
    return srcInput;
  }

  async run(srcInput) {
    const input = srcInput;
    const stemmer = this.getStemmer(input);
    input.tokens = await stemmer.stem(input.tokens, input);
    return input;
  }
}

module.exports = Stemmer;

},{"./container":54}],66:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
const { defaultContainer } = require('./container');

class Stopwords {
  constructor(container = defaultContainer) {
    this.container = container.container || container;
    this.name = 'removeStopwords';
    this.dictionary = {};
  }

  build(list) {
    for (let i = 0; i < list.length; i += 1) {
      this.dictionary[list[i]] = true;
    }
  }

  isNotStopword(token) {
    return !this.dictionary[token];
  }

  isStopword(token) {
    return !!this.dictionary[token];
  }

  removeStopwords(tokens) {
    return tokens.filter((x) => this.isNotStopword(x));
  }

  run(srcInput) {
    if (srcInput.settings && srcInput.settings.keepStopwords === false) {
      const input = srcInput;
      const locale = input.locale || 'en';
      const remover = this.container.get(`stopwords-${locale}`) || this;
      input.tokens = remover
        .removeStopwords(input.tokens, input)
        .filter((x) => x);
      return input;
    }
    return srcInput;
  }
}

module.exports = Stopwords;

},{"./container":54}],67:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const { defaultContainer } = require('./container');

/**
 * Class for a simple timer
 */
class Timer {
  /**
   * Constructor of the class
   * @param {object} container Parent container
   */
  constructor(container = defaultContainer) {
    this.container = container.container || container;
    this.name = 'timer';
  }

  /**
   * Starts the timer
   * @param {object} input
   */
  start(input) {
    if (input) {
      input.hrstart = new Date();
    }
    return input;
  }

  /**
   * Stops the timer
   * @param {object} srcInput
   */
  stop(srcInput) {
    const input = srcInput;
    if (input && input.hrstart) {
      const hrend = new Date();
      input.elapsed = hrend.getTime() - input.hrstart.getTime();
      delete input.hrstart;
    }
    return input;
  }

  run(srcInput) {
    this.start(srcInput);
  }
}

module.exports = Timer;

},{"./container":54}],68:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const { defaultContainer } = require('./container');
const Normalizer = require('./normalizer');

class Tokenizer {
  constructor(container = defaultContainer, shouldNormalize = false) {
    this.container = container.container || container;

    this.name = 'tokenize';
    this.shouldNormalize = shouldNormalize;
  }

  getNormalizer() {
    if (!this.normalizer) {
      this.normalizer =
        this.container.get(`normalizer-${this.name.slice(-2)}`) ||
        new Normalizer();
    }
    return this.normalizer;
  }

  normalize(text, force) {
    if ((force === undefined && this.shouldNormalize) || force === true) {
      const normalizer = this.getNormalizer();
      return normalizer.normalize(text);
    }
    return text;
  }

  innerTokenize(text) {
    return text.split(/[\s,.!?;:([\]'"¡¿)/]+/).filter((x) => x);
  }

  tokenize(text, normalize) {
    let result;
    if (this.cache) {
      const now = new Date();
      const diff = Math.abs(now.getTime() - this.cache.created) / 3600000;
      if (diff > 1) {
        this.cache = undefined;
      }
    }
    if (!this.cache) {
      this.cache = {
        created: new Date().getTime(),
        normalized: {},
        nonNormalized: {},
      };
    } else {
      if (normalize) {
        result = this.cache.normalized[text];
      } else {
        result = this.cache.nonNormalized[text];
      }
      if (result) {
        return result;
      }
    }
    result = this.innerTokenize(this.normalize(text, normalize), normalize);
    if (normalize) {
      this.cache.normalized[text] = result;
    } else {
      this.cache.nonNormalized[text] = result;
    }
    return result;
  }

  async run(srcInput) {
    const input = srcInput;
    const locale = input.locale || 'en';
    let tokenizer = this.container.get(`tokenizer-${locale}`);
    if (!tokenizer) {
      const tokenizerBert = this.container.get(`tokenizer-bert`);
      if (tokenizerBert && tokenizerBert.activeFor(locale)) {
        tokenizer = tokenizerBert;
      } else {
        tokenizer = this;
      }
    }
    const tokens = await tokenizer.tokenize(input.text, input);
    input.tokens = tokens.filter((x) => x);
    return input;
  }
}

module.exports = Tokenizer;

},{"./container":54,"./normalizer":63}],69:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

function uuid() {
  function s4() {
    return Math.floor((1 + Math.random()) * 0x10000)
      .toString(16)
      .substring(1);
  }
  return `${s4() + s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;
}

module.exports = uuid;

},{}],70:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const LangEn = require('./lang-en');
const TokenizerEn = require('./tokenizer-en');
const StemmerEn = require('./stemmer-en');
const StopwordsEn = require('./stopwords-en');
const NormalizerEn = require('./normalizer-en');
const SentimentEn = require('./sentiment/sentiment_en');
const registerTrigrams = require('./trigrams');

module.exports = {
  LangEn,
  StemmerEn,
  StopwordsEn,
  TokenizerEn,
  NormalizerEn,
  SentimentEn,
  registerTrigrams,
};

},{"./lang-en":71,"./normalizer-en":72,"./sentiment/sentiment_en":73,"./stemmer-en":74,"./stopwords-en":75,"./tokenizer-en":76,"./trigrams":77}],71:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const TokenizerEn = require('./tokenizer-en');
const StemmerEn = require('./stemmer-en');
const StopwordsEn = require('./stopwords-en');
const NormalizerEn = require('./normalizer-en');
const SentimentEn = require('./sentiment/sentiment_en');
const registerTrigrams = require('./trigrams');

class LangEn {
  register(container) {
    container.use(TokenizerEn);
    container.use(StemmerEn);
    container.use(StopwordsEn);
    container.use(NormalizerEn);
    container.register('sentiment-en', SentimentEn);
    registerTrigrams(container);
  }
}

module.exports = LangEn;

},{"./normalizer-en":72,"./sentiment/sentiment_en":73,"./stemmer-en":74,"./stopwords-en":75,"./tokenizer-en":76,"./trigrams":77}],72:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const { Normalizer } = require('@nlpjs/core');

class NormalizerEn extends Normalizer {
  constructor(container) {
    super(container);
    this.name = 'normalizer-en';
  }

  normalize(text) {
    return text
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .toLowerCase();
  }

  run(srcInput) {
    const input = srcInput;
    input.text = this.normalize(input.text, input);
    return input;
  }
}

module.exports = NormalizerEn;

},{"@nlpjs/core":59}],73:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module.exports = {
  senticon: undefined,
  afinn: undefined,
  pattern: undefined,
  negations: { words: [] },
};

},{}],74:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const { Among, BaseStemmer } = require('@nlpjs/core');

/**
 * This class was automatically generated by a Snowball to JSX compiler
 * It implements the stemming algorithm defined by a snowball script.
 */
/* eslint-disable */
class StemmerEn extends BaseStemmer {
  constructor(container) {
    super(container);
    this.name = 'stemmer-en';
    this.B_Y_found = false;
    this.I_p2 = 0;
    this.I_p1 = 0;
  }

  r_prelude() {
    let v_1;
    let v_2;
    let v_3;
    let v_4;
    let v_5;
    // (, line 25
    // unset Y_found, line 26
    this.B_Y_found = false;
    // do, line 27
    v_1 = this.cursor;
    let lab0 = true;
    while (lab0 == true) {
      lab0 = false;
      // (, line 27
      // [, line 27
      this.bra = this.cursor;
      // literal, line 27
      if (!this.eq_s("'")) {
        break;
      }
      // ], line 27
      this.ket = this.cursor;
      // delete, line 27
      if (!this.slice_del()) {
        return false;
      }
    }
    this.cursor = v_1;
    // do, line 28
    v_2 = this.cursor;
    let lab1 = true;
    while (lab1 == true) {
      lab1 = false;
      // (, line 28
      // [, line 28
      this.bra = this.cursor;
      // literal, line 28
      if (!this.eq_s('y')) {
        break;
      }
      // ], line 28
      this.ket = this.cursor;
      // <-, line 28
      if (!this.slice_from('Y')) {
        return false;
      }
      // set Y_found, line 28
      this.B_Y_found = true;
    }
    this.cursor = v_2;
    // do, line 29
    v_3 = this.cursor;
    let lab2 = true;
    while (lab2 == true) {
      lab2 = false;
      // repeat, line 29
      replab3: while (true) {
        v_4 = this.cursor;
        let lab4 = true;
        lab4: while (lab4 == true) {
          lab4 = false;
          // (, line 29
          // goto, line 29
          golab5: while (true) {
            v_5 = this.cursor;
            let lab6 = true;
            while (lab6 == true) {
              lab6 = false;
              // (, line 29
              if (!this.in_grouping(StemmerEn.g_v, 97, 121)) {
                break;
              }
              // [, line 29
              this.bra = this.cursor;
              // literal, line 29
              if (!this.eq_s('y')) {
                break;
              }
              // ], line 29
              this.ket = this.cursor;
              this.cursor = v_5;
              break golab5;
            }
            this.cursor = v_5;
            if (this.cursor >= this.limit) {
              break lab4;
            }
            this.cursor++;
          }
          // <-, line 29
          if (!this.slice_from('Y')) {
            return false;
          }
          // set Y_found, line 29
          this.B_Y_found = true;
          continue replab3;
        }
        this.cursor = v_4;
        break;
      }
    }
    this.cursor = v_3;
    return true;
  }

  r_mark_regions() {
    let v_1;
    let v_2;
    // (, line 32
    this.I_p1 = this.limit;
    this.I_p2 = this.limit;
    // do, line 35
    v_1 = this.cursor;
    let lab0 = true;
    lab0: while (lab0 == true) {
      lab0 = false;
      // (, line 35
      // or, line 41
      let lab1 = true;
      lab1: while (lab1 == true) {
        lab1 = false;
        v_2 = this.cursor;
        let lab2 = true;
        while (lab2 == true) {
          lab2 = false;
          // among, line 36
          if (this.find_among(StemmerEn.a_0, 3) == 0) {
            break;
          }
          break lab1;
        }
        this.cursor = v_2;
        // (, line 41
        // gopast, line 41
        golab3: while (true) {
          let lab4 = true;
          while (lab4 == true) {
            lab4 = false;
            if (!this.in_grouping(StemmerEn.g_v, 97, 121)) {
              break;
            }
            break golab3;
          }
          if (this.cursor >= this.limit) {
            break lab0;
          }
          this.cursor++;
        }
        // gopast, line 41
        golab5: while (true) {
          let lab6 = true;
          while (lab6 == true) {
            lab6 = false;
            if (!this.out_grouping(StemmerEn.g_v, 97, 121)) {
              break;
            }
            break golab5;
          }
          if (this.cursor >= this.limit) {
            break lab0;
          }
          this.cursor++;
        }
      }
      // setmark p1, line 42
      this.I_p1 = this.cursor;
      // gopast, line 43
      golab7: while (true) {
        let lab8 = true;
        while (lab8 == true) {
          lab8 = false;
          if (!this.in_grouping(StemmerEn.g_v, 97, 121)) {
            break;
          }
          break golab7;
        }
        if (this.cursor >= this.limit) {
          break lab0;
        }
        this.cursor++;
      }
      // gopast, line 43
      golab9: while (true) {
        let lab10 = true;
        while (lab10 == true) {
          lab10 = false;
          if (!this.out_grouping(StemmerEn.g_v, 97, 121)) {
            break;
          }
          break golab9;
        }
        if (this.cursor >= this.limit) {
          break lab0;
        }
        this.cursor++;
      }
      // setmark p2, line 43
      this.I_p2 = this.cursor;
    }
    this.cursor = v_1;
    return true;
  }

  r_shortv() {
    let v_1;
    // (, line 49
    // or, line 51
    let lab0 = true;
    lab0: while (lab0 == true) {
      lab0 = false;
      v_1 = this.limit - this.cursor;
      let lab1 = true;
      while (lab1 == true) {
        lab1 = false;
        // (, line 50
        if (!this.out_grouping_b(StemmerEn.g_v_WXY, 89, 121)) {
          break;
        }
        if (!this.in_grouping_b(StemmerEn.g_v, 97, 121)) {
          break;
        }
        if (!this.out_grouping_b(StemmerEn.g_v, 97, 121)) {
          break;
        }
        break lab0;
      }
      this.cursor = this.limit - v_1;
      // (, line 52
      if (!this.out_grouping_b(StemmerEn.g_v, 97, 121)) {
        return false;
      }
      if (!this.in_grouping_b(StemmerEn.g_v, 97, 121)) {
        return false;
      }
      // atlimit, line 52
      if (this.cursor > this.limit_backward) {
        return false;
      }
    }
    return true;
  }

  r_R1() {
    if (!(this.I_p1 <= this.cursor)) {
      return false;
    }
    return true;
  }

  r_R2() {
    if (!(this.I_p2 <= this.cursor)) {
      return false;
    }
    return true;
  }

  r_Step_1a() {
    let among_var;
    let v_1;
    let v_2;
    // (, line 58
    // try, line 59
    v_1 = this.limit - this.cursor;
    let lab0 = true;
    lab0: while (lab0 == true) {
      lab0 = false;
      // (, line 59
      // [, line 60
      this.ket = this.cursor;
      // substring, line 60
      among_var = this.find_among_b(StemmerEn.a_1, 3);
      if (among_var == 0) {
        this.cursor = this.limit - v_1;
        break;
      }
      // ], line 60
      this.bra = this.cursor;
      switch (among_var) {
        case 0:
          this.cursor = this.limit - v_1;
          break lab0;
        case 1:
          // (, line 62
          // delete, line 62
          if (!this.slice_del()) {
            return false;
          }
          break;
      }
    }
    // [, line 65
    this.ket = this.cursor;
    // substring, line 65
    among_var = this.find_among_b(StemmerEn.a_2, 6);
    if (among_var == 0) {
      return false;
    }
    // ], line 65
    this.bra = this.cursor;
    switch (among_var) {
      case 0:
        return false;
      case 1:
        // (, line 66
        // <-, line 66
        if (!this.slice_from('ss')) {
          return false;
        }
        break;
      case 2:
        // (, line 68
        // or, line 68
        var lab1 = true;
        lab1: while (lab1 == true) {
          lab1 = false;
          v_2 = this.limit - this.cursor;
          let lab2 = true;
          while (lab2 == true) {
            lab2 = false;
            // (, line 68
            // hop, line 68
            {
              const c = this.cursor - 2;
              if (this.limit_backward > c || c > this.limit) {
                break;
              }
              this.cursor = c;
            }
            // <-, line 68
            if (!this.slice_from('i')) {
              return false;
            }
            break lab1;
          }
          this.cursor = this.limit - v_2;
          // <-, line 68
          if (!this.slice_from('ie')) {
            return false;
          }
        }
        break;
      case 3:
        // (, line 69
        // next, line 69
        if (this.cursor <= this.limit_backward) {
          return false;
        }
        this.cursor--;
        // gopast, line 69
        golab3: while (true) {
          let lab4 = true;
          while (lab4 == true) {
            lab4 = false;
            if (!this.in_grouping_b(StemmerEn.g_v, 97, 121)) {
              break;
            }
            break golab3;
          }
          if (this.cursor <= this.limit_backward) {
            return false;
          }
          this.cursor--;
        }
        // delete, line 69
        if (!this.slice_del()) {
          return false;
        }
        break;
    }
    return true;
  }

  r_Step_1b() {
    let among_var;
    let v_1;
    let v_3;
    let v_4;
    // (, line 74
    // [, line 75
    this.ket = this.cursor;
    // substring, line 75
    among_var = this.find_among_b(StemmerEn.a_4, 6);
    if (among_var == 0) {
      return false;
    }
    // ], line 75
    this.bra = this.cursor;
    switch (among_var) {
      case 0:
        return false;
      case 1:
        // (, line 77
        // call R1, line 77
        if (!this.r_R1()) {
          return false;
        }
        // <-, line 77
        if (!this.slice_from('ee')) {
          return false;
        }
        break;
      case 2:
        // (, line 79
        // test, line 80
        v_1 = this.limit - this.cursor;
        // gopast, line 80
        golab0: while (true) {
          let lab1 = true;
          while (lab1 == true) {
            lab1 = false;
            if (!this.in_grouping_b(StemmerEn.g_v, 97, 121)) {
              break;
            }
            break golab0;
          }
          if (this.cursor <= this.limit_backward) {
            return false;
          }
          this.cursor--;
        }
        this.cursor = this.limit - v_1;
        // delete, line 80
        if (!this.slice_del()) {
          return false;
        }
        // test, line 81
        v_3 = this.limit - this.cursor;
        // substring, line 81
        among_var = this.find_among_b(StemmerEn.a_3, 13);
        if (among_var == 0) {
          return false;
        }
        this.cursor = this.limit - v_3;
        switch (among_var) {
          case 0:
            return false;
          case 1:
            // (, line 83
            // <+, line 83
            {
              var c = this.cursor;
              this.insert(this.cursor, this.cursor, 'e');
              this.cursor = c;
            }
            break;
          case 2:
            // (, line 86
            // [, line 86
            this.ket = this.cursor;
            // next, line 86
            if (this.cursor <= this.limit_backward) {
              return false;
            }
            this.cursor--;
            // ], line 86
            this.bra = this.cursor;
            // delete, line 86
            if (!this.slice_del()) {
              return false;
            }
            break;
          case 3:
            // (, line 87
            // atmark, line 87
            if (this.cursor != this.I_p1) {
              return false;
            }
            // test, line 87
            v_4 = this.limit - this.cursor;
            // call shortv, line 87
            if (!this.r_shortv()) {
              return false;
            }
            this.cursor = this.limit - v_4;
            // <+, line 87
            {
              var c = this.cursor;
              this.insert(this.cursor, this.cursor, 'e');
              this.cursor = c;
            }
            break;
        }
        break;
    }
    return true;
  }

  r_Step_1c() {
    let v_1;
    let v_2;
    // (, line 93
    // [, line 94
    this.ket = this.cursor;
    // or, line 94
    let lab0 = true;
    lab0: while (lab0 == true) {
      lab0 = false;
      v_1 = this.limit - this.cursor;
      let lab1 = true;
      while (lab1 == true) {
        lab1 = false;
        // literal, line 94
        if (!this.eq_s_b('y')) {
          break;
        }
        break lab0;
      }
      this.cursor = this.limit - v_1;
      // literal, line 94
      if (!this.eq_s_b('Y')) {
        return false;
      }
    }
    // ], line 94
    this.bra = this.cursor;
    if (!this.out_grouping_b(StemmerEn.g_v, 97, 121)) {
      return false;
    }
    // not, line 95
    {
      v_2 = this.limit - this.cursor;
      let lab2 = true;
      while (lab2 == true) {
        lab2 = false;
        // atlimit, line 95
        if (this.cursor > this.limit_backward) {
          break;
        }
        return false;
      }
      this.cursor = this.limit - v_2;
    }
    // <-, line 96
    if (!this.slice_from('i')) {
      return false;
    }
    return true;
  }

  r_Step_2() {
    let among_var;
    // (, line 99
    // [, line 100
    this.ket = this.cursor;
    // substring, line 100
    among_var = this.find_among_b(StemmerEn.a_5, 24);
    if (among_var == 0) {
      return false;
    }
    // ], line 100
    this.bra = this.cursor;
    // call R1, line 100
    if (!this.r_R1()) {
      return false;
    }
    switch (among_var) {
      case 0:
        return false;
      case 1:
        // (, line 101
        // <-, line 101
        if (!this.slice_from('tion')) {
          return false;
        }
        break;
      case 2:
        // (, line 102
        // <-, line 102
        if (!this.slice_from('ence')) {
          return false;
        }
        break;
      case 3:
        // (, line 103
        // <-, line 103
        if (!this.slice_from('ance')) {
          return false;
        }
        break;
      case 4:
        // (, line 104
        // <-, line 104
        if (!this.slice_from('able')) {
          return false;
        }
        break;
      case 5:
        // (, line 105
        // <-, line 105
        if (!this.slice_from('ent')) {
          return false;
        }
        break;
      case 6:
        // (, line 107
        // <-, line 107
        if (!this.slice_from('ize')) {
          return false;
        }
        break;
      case 7:
        // (, line 109
        // <-, line 109
        if (!this.slice_from('ate')) {
          return false;
        }
        break;
      case 8:
        // (, line 111
        // <-, line 111
        if (!this.slice_from('al')) {
          return false;
        }
        break;
      case 9:
        // (, line 112
        // <-, line 112
        if (!this.slice_from('ful')) {
          return false;
        }
        break;
      case 10:
        // (, line 114
        // <-, line 114
        if (!this.slice_from('ous')) {
          return false;
        }
        break;
      case 11:
        // (, line 116
        // <-, line 116
        if (!this.slice_from('ive')) {
          return false;
        }
        break;
      case 12:
        // (, line 118
        // <-, line 118
        if (!this.slice_from('ble')) {
          return false;
        }
        break;
      case 13:
        // (, line 119
        // literal, line 119
        if (!this.eq_s_b('l')) {
          return false;
        }
        // <-, line 119
        if (!this.slice_from('og')) {
          return false;
        }
        break;
      case 14:
        // (, line 120
        // <-, line 120
        if (!this.slice_from('ful')) {
          return false;
        }
        break;
      case 15:
        // (, line 121
        // <-, line 121
        if (!this.slice_from('less')) {
          return false;
        }
        break;
      case 16:
        // (, line 122
        if (!this.in_grouping_b(StemmerEn.g_valid_LI, 99, 116)) {
          return false;
        }
        // delete, line 122
        if (!this.slice_del()) {
          return false;
        }
        break;
    }
    return true;
  }

  r_Step_3() {
    let among_var;
    // (, line 126
    // [, line 127
    this.ket = this.cursor;
    // substring, line 127
    among_var = this.find_among_b(StemmerEn.a_6, 9);
    if (among_var == 0) {
      return false;
    }
    // ], line 127
    this.bra = this.cursor;
    // call R1, line 127
    if (!this.r_R1()) {
      return false;
    }
    switch (among_var) {
      case 0:
        return false;
      case 1:
        // (, line 128
        // <-, line 128
        if (!this.slice_from('tion')) {
          return false;
        }
        break;
      case 2:
        // (, line 129
        // <-, line 129
        if (!this.slice_from('ate')) {
          return false;
        }
        break;
      case 3:
        // (, line 130
        // <-, line 130
        if (!this.slice_from('al')) {
          return false;
        }
        break;
      case 4:
        // (, line 132
        // <-, line 132
        if (!this.slice_from('ic')) {
          return false;
        }
        break;
      case 5:
        // (, line 134
        // delete, line 134
        if (!this.slice_del()) {
          return false;
        }
        break;
      case 6:
        // (, line 136
        // call R2, line 136
        if (!this.r_R2()) {
          return false;
        }
        // delete, line 136
        if (!this.slice_del()) {
          return false;
        }
        break;
    }
    return true;
  }

  r_Step_4() {
    let among_var;
    let v_1;
    // (, line 140
    // [, line 141
    this.ket = this.cursor;
    // substring, line 141
    among_var = this.find_among_b(StemmerEn.a_7, 18);
    if (among_var == 0) {
      return false;
    }
    // ], line 141
    this.bra = this.cursor;
    // call R2, line 141
    if (!this.r_R2()) {
      return false;
    }
    switch (among_var) {
      case 0:
        return false;
      case 1:
        // (, line 144
        // delete, line 144
        if (!this.slice_del()) {
          return false;
        }
        break;
      case 2:
        // (, line 145
        // or, line 145
        var lab0 = true;
        lab0: while (lab0 == true) {
          lab0 = false;
          v_1 = this.limit - this.cursor;
          let lab1 = true;
          while (lab1 == true) {
            lab1 = false;
            // literal, line 145
            if (!this.eq_s_b('s')) {
              break;
            }
            break lab0;
          }
          this.cursor = this.limit - v_1;
          // literal, line 145
          if (!this.eq_s_b('t')) {
            return false;
          }
        }
        // delete, line 145
        if (!this.slice_del()) {
          return false;
        }
        break;
    }
    return true;
  }

  r_Step_5() {
    let among_var;
    let v_1;
    let v_2;
    // (, line 149
    // [, line 150
    this.ket = this.cursor;
    // substring, line 150
    among_var = this.find_among_b(StemmerEn.a_8, 2);
    if (among_var == 0) {
      return false;
    }
    // ], line 150
    this.bra = this.cursor;
    switch (among_var) {
      case 0:
        return false;
      case 1:
        // (, line 151
        // or, line 151
        var lab0 = true;
        lab0: while (lab0 == true) {
          lab0 = false;
          v_1 = this.limit - this.cursor;
          let lab1 = true;
          while (lab1 == true) {
            lab1 = false;
            // call R2, line 151
            if (!this.r_R2()) {
              break;
            }
            break lab0;
          }
          this.cursor = this.limit - v_1;
          // (, line 151
          // call R1, line 151
          if (!this.r_R1()) {
            return false;
          }
          // not, line 151
          {
            v_2 = this.limit - this.cursor;
            let lab2 = true;
            while (lab2 == true) {
              lab2 = false;
              // call shortv, line 151
              if (!this.r_shortv()) {
                break;
              }
              return false;
            }
            this.cursor = this.limit - v_2;
          }
        }
        // delete, line 151
        if (!this.slice_del()) {
          return false;
        }
        break;
      case 2:
        // (, line 152
        // call R2, line 152
        if (!this.r_R2()) {
          return false;
        }
        // literal, line 152
        if (!this.eq_s_b('l')) {
          return false;
        }
        // delete, line 152
        if (!this.slice_del()) {
          return false;
        }
        break;
    }
    return true;
  }

  r_exception2() {
    // (, line 156
    // [, line 158
    this.ket = this.cursor;
    // substring, line 158
    if (this.find_among_b(StemmerEn.a_9, 8) == 0) {
      return false;
    }
    // ], line 158
    this.bra = this.cursor;
    // atlimit, line 158
    if (this.cursor > this.limit_backward) {
      return false;
    }
    return true;
  }

  r_exception1() {
    let among_var;
    // (, line 168
    // [, line 170
    this.bra = this.cursor;
    // substring, line 170
    among_var = this.find_among(StemmerEn.a_10, 18);
    if (among_var == 0) {
      return false;
    }
    // ], line 170
    this.ket = this.cursor;
    // atlimit, line 170
    if (this.cursor < this.limit) {
      return false;
    }
    switch (among_var) {
      case 0:
        return false;
      case 1:
        // (, line 174
        // <-, line 174
        if (!this.slice_from('ski')) {
          return false;
        }
        break;
      case 2:
        // (, line 175
        // <-, line 175
        if (!this.slice_from('sky')) {
          return false;
        }
        break;
      case 3:
        // (, line 176
        // <-, line 176
        if (!this.slice_from('die')) {
          return false;
        }
        break;
      case 4:
        // (, line 177
        // <-, line 177
        if (!this.slice_from('lie')) {
          return false;
        }
        break;
      case 5:
        // (, line 178
        // <-, line 178
        if (!this.slice_from('tie')) {
          return false;
        }
        break;
      case 6:
        // (, line 182
        // <-, line 182
        if (!this.slice_from('idl')) {
          return false;
        }
        break;
      case 7:
        // (, line 183
        // <-, line 183
        if (!this.slice_from('gentl')) {
          return false;
        }
        break;
      case 8:
        // (, line 184
        // <-, line 184
        if (!this.slice_from('ugli')) {
          return false;
        }
        break;
      case 9:
        // (, line 185
        // <-, line 185
        if (!this.slice_from('earli')) {
          return false;
        }
        break;
      case 10:
        // (, line 186
        // <-, line 186
        if (!this.slice_from('onli')) {
          return false;
        }
        break;
      case 11:
        // (, line 187
        // <-, line 187
        if (!this.slice_from('singl')) {
          return false;
        }
        break;
    }
    return true;
  }

  r_postlude() {
    let v_1;
    let v_2;
    // (, line 203
    // Boolean test Y_found, line 203
    if (!this.B_Y_found) {
      return false;
    }
    // repeat, line 203
    replab0: while (true) {
      v_1 = this.cursor;
      let lab1 = true;
      lab1: while (lab1 == true) {
        lab1 = false;
        // (, line 203
        // goto, line 203
        golab2: while (true) {
          v_2 = this.cursor;
          let lab3 = true;
          while (lab3 == true) {
            lab3 = false;
            // (, line 203
            // [, line 203
            this.bra = this.cursor;
            // literal, line 203
            if (!this.eq_s('Y')) {
              break;
            }
            // ], line 203
            this.ket = this.cursor;
            this.cursor = v_2;
            break golab2;
          }
          this.cursor = v_2;
          if (this.cursor >= this.limit) {
            break lab1;
          }
          this.cursor++;
        }
        // <-, line 203
        if (!this.slice_from('y')) {
          return false;
        }
        continue replab0;
      }
      this.cursor = v_1;
      break;
    }
    return true;
  }

  innerStem() {
    let v_1;
    let v_2;
    let v_3;
    let v_4;
    let v_5;
    let v_6;
    let v_7;
    let v_8;
    let v_9;
    let v_10;
    let v_11;
    let v_12;
    let v_13;
    // (, line 205
    // or, line 207
    let lab0 = true;
    lab0: while (lab0 == true) {
      lab0 = false;
      v_1 = this.cursor;
      let lab1 = true;
      while (lab1 == true) {
        lab1 = false;
        // call exception1, line 207
        if (!this.r_exception1()) {
          break;
        }
        break lab0;
      }
      this.cursor = v_1;
      let lab2 = true;
      lab2: while (lab2 == true) {
        lab2 = false;
        // not, line 208
        {
          v_2 = this.cursor;
          let lab3 = true;
          while (lab3 == true) {
            lab3 = false;
            // hop, line 208
            {
              const c = this.cursor + 3;
              if (c < 0 || c > this.limit) {
                break;
              }
              this.cursor = c;
            }
            break lab2;
          }
          this.cursor = v_2;
        }
        break lab0;
      }
      this.cursor = v_1;
      // (, line 208
      // do, line 209
      v_3 = this.cursor;
      let lab4 = true;
      while (lab4 == true) {
        lab4 = false;
        // call prelude, line 209
        if (!this.r_prelude()) {
          break;
        }
      }
      this.cursor = v_3;
      // do, line 210
      v_4 = this.cursor;
      let lab5 = true;
      while (lab5 == true) {
        lab5 = false;
        // call mark_regions, line 210
        if (!this.r_mark_regions()) {
          break;
        }
      }
      this.cursor = v_4;
      // backwards, line 211
      this.limit_backward = this.cursor;
      this.cursor = this.limit;
      // (, line 211
      // do, line 213
      v_5 = this.limit - this.cursor;
      let lab6 = true;
      while (lab6 == true) {
        lab6 = false;
        // call Step_1a, line 213
        if (!this.r_Step_1a()) {
          break;
        }
      }
      this.cursor = this.limit - v_5;
      // or, line 215
      let lab7 = true;
      lab7: while (lab7 == true) {
        lab7 = false;
        v_6 = this.limit - this.cursor;
        let lab8 = true;
        while (lab8 == true) {
          lab8 = false;
          // call exception2, line 215
          if (!this.r_exception2()) {
            break;
          }
          break lab7;
        }
        this.cursor = this.limit - v_6;
        // (, line 215
        // do, line 217
        v_7 = this.limit - this.cursor;
        let lab9 = true;
        while (lab9 == true) {
          lab9 = false;
          // call Step_1b, line 217
          if (!this.r_Step_1b()) {
            break;
          }
        }
        this.cursor = this.limit - v_7;
        // do, line 218
        v_8 = this.limit - this.cursor;
        let lab10 = true;
        while (lab10 == true) {
          lab10 = false;
          // call Step_1c, line 218
          if (!this.r_Step_1c()) {
            break;
          }
        }
        this.cursor = this.limit - v_8;
        // do, line 220
        v_9 = this.limit - this.cursor;
        let lab11 = true;
        while (lab11 == true) {
          lab11 = false;
          // call Step_2, line 220
          if (!this.r_Step_2()) {
            break;
          }
        }
        this.cursor = this.limit - v_9;
        // do, line 221
        v_10 = this.limit - this.cursor;
        let lab12 = true;
        while (lab12 == true) {
          lab12 = false;
          // call Step_3, line 221
          if (!this.r_Step_3()) {
            break;
          }
        }
        this.cursor = this.limit - v_10;
        // do, line 222
        v_11 = this.limit - this.cursor;
        let lab13 = true;
        while (lab13 == true) {
          lab13 = false;
          // call Step_4, line 222
          if (!this.r_Step_4()) {
            break;
          }
        }
        this.cursor = this.limit - v_11;
        // do, line 224
        v_12 = this.limit - this.cursor;
        let lab14 = true;
        while (lab14 == true) {
          lab14 = false;
          // call Step_5, line 224
          if (!this.r_Step_5()) {
            break;
          }
        }
        this.cursor = this.limit - v_12;
      }
      this.cursor = this.limit_backward; // do, line 227
      v_13 = this.cursor;
      let lab15 = true;
      while (lab15 == true) {
        lab15 = false;
        // call postlude, line 227
        if (!this.r_postlude()) {
          break;
        }
      }
      this.cursor = v_13;
    }
    return true;
  }
}

StemmerEn.methodObject = new StemmerEn();

StemmerEn.a_0 = [
  new Among('arsen', -1, -1),
  new Among('commun', -1, -1),
  new Among('gener', -1, -1)
];

StemmerEn.a_1 = [
  new Among("'", -1, 1),
  new Among("'s'", 0, 1),
  new Among("'s", -1, 1)
];

StemmerEn.a_2 = [
  new Among('ied', -1, 2),
  new Among('s', -1, 3),
  new Among('ies', 1, 2),
  new Among('sses', 1, 1),
  new Among('ss', 1, -1),
  new Among('us', 1, -1)
];

StemmerEn.a_3 = [
  new Among('', -1, 3),
  new Among('bb', 0, 2),
  new Among('dd', 0, 2),
  new Among('ff', 0, 2),
  new Among('gg', 0, 2),
  new Among('bl', 0, 1),
  new Among('mm', 0, 2),
  new Among('nn', 0, 2),
  new Among('pp', 0, 2),
  new Among('rr', 0, 2),
  new Among('at', 0, 1),
  new Among('tt', 0, 2),
  new Among('iz', 0, 1)
];

StemmerEn.a_4 = [
  new Among('ed', -1, 2),
  new Among('eed', 0, 1),
  new Among('ing', -1, 2),
  new Among('edly', -1, 2),
  new Among('eedly', 3, 1),
  new Among('ingly', -1, 2)
];

StemmerEn.a_5 = [
  new Among('anci', -1, 3),
  new Among('enci', -1, 2),
  new Among('ogi', -1, 13),
  new Among('li', -1, 16),
  new Among('bli', 3, 12),
  new Among('abli', 4, 4),
  new Among('alli', 3, 8),
  new Among('fulli', 3, 14),
  new Among('lessli', 3, 15),
  new Among('ousli', 3, 10),
  new Among('entli', 3, 5),
  new Among('aliti', -1, 8),
  new Among('biliti', -1, 12),
  new Among('iviti', -1, 11),
  new Among('tional', -1, 1),
  new Among('ational', 14, 7),
  new Among('alism', -1, 8),
  new Among('ation', -1, 7),
  new Among('ization', 17, 6),
  new Among('izer', -1, 6),
  new Among('ator', -1, 7),
  new Among('iveness', -1, 11),
  new Among('fulness', -1, 9),
  new Among('ousness', -1, 10)
];

StemmerEn.a_6 = [
  new Among('icate', -1, 4),
  new Among('ative', -1, 6),
  new Among('alize', -1, 3),
  new Among('iciti', -1, 4),
  new Among('ical', -1, 4),
  new Among('tional', -1, 1),
  new Among('ational', 5, 2),
  new Among('ful', -1, 5),
  new Among('ness', -1, 5)
];

StemmerEn.a_7 = [
  new Among('ic', -1, 1),
  new Among('ance', -1, 1),
  new Among('ence', -1, 1),
  new Among('able', -1, 1),
  new Among('ible', -1, 1),
  new Among('ate', -1, 1),
  new Among('ive', -1, 1),
  new Among('ize', -1, 1),
  new Among('iti', -1, 1),
  new Among('al', -1, 1),
  new Among('ism', -1, 1),
  new Among('ion', -1, 2),
  new Among('er', -1, 1),
  new Among('ous', -1, 1),
  new Among('ant', -1, 1),
  new Among('ent', -1, 1),
  new Among('ment', 15, 1),
  new Among('ement', 16, 1)
];

StemmerEn.a_8 = [new Among('e', -1, 1), new Among('l', -1, 2)];

StemmerEn.a_9 = [
  new Among('succeed', -1, -1),
  new Among('proceed', -1, -1),
  new Among('exceed', -1, -1),
  new Among('canning', -1, -1),
  new Among('inning', -1, -1),
  new Among('earring', -1, -1),
  new Among('herring', -1, -1),
  new Among('outing', -1, -1)
];

StemmerEn.a_10 = [
  new Among('andes', -1, -1),
  new Among('atlas', -1, -1),
  new Among('bias', -1, -1),
  new Among('cosmos', -1, -1),
  new Among('dying', -1, 3),
  new Among('early', -1, 9),
  new Among('gently', -1, 7),
  new Among('howe', -1, -1),
  new Among('idly', -1, 6),
  new Among('lying', -1, 4),
  new Among('news', -1, -1),
  new Among('only', -1, 10),
  new Among('singly', -1, 11),
  new Among('skies', -1, 2),
  new Among('skis', -1, 1),
  new Among('sky', -1, -1),
  new Among('tying', -1, 5),
  new Among('ugly', -1, 8)
];

StemmerEn.g_v = [17, 65, 16, 1];

StemmerEn.g_v_WXY = [1, 17, 65, 208, 1];

StemmerEn.g_valid_LI = [55, 141, 2];

module.exports = StemmerEn;

},{"@nlpjs/core":59}],75:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const { Stopwords } = require('@nlpjs/core');

class StopwordsEn extends Stopwords {
  constructor(container, words) {
    super(container);
    this.name = 'stopwords-en';
    this.dictionary = {};
    const list = words || [
      'about',
      'above',
      'after',
      'again',
      'all',
      'also',
      'am',
      'an',
      'and',
      'another',
      'any',
      'are',
      'as',
      'at',
      'be',
      'because',
      'been',
      'before',
      'being',
      'below',
      'between',
      'both',
      'but',
      'by',
      'came',
      'can',
      'cannot',
      'come',
      'could',
      'did',
      'do',
      'does',
      'doing',
      'during',
      'each',
      'few',
      'for',
      'from',
      'further',
      'get',
      'got',
      'has',
      'had',
      'he',
      'have',
      'her',
      'here',
      'him',
      'himself',
      'his',
      'how',
      'if',
      'in',
      'into',
      'is',
      'it',
      'its',
      'itself',
      'like',
      'make',
      'many',
      'me',
      'might',
      'more',
      'most',
      'much',
      'must',
      'my',
      'myself',
      'never',
      'now',
      'of',
      'on',
      'only',
      'or',
      'other',
      'our',
      'ours',
      'ourselves',
      'out',
      'over',
      'own',
      'said',
      'same',
      'see',
      'should',
      'since',
      'so',
      'some',
      'still',
      'such',
      'take',
      'than',
      'that',
      'the',
      'their',
      'theirs',
      'them',
      'themselves',
      'then',
      'there',
      'these',
      'they',
      'this',
      'those',
      'through',
      'to',
      'too',
      'under',
      'until',
      'up',
      'very',
      'was',
      'way',
      'we',
      'well',
      'were',
      'what',
      'where',
      'when',
      'which',
      'while',
      'who',
      'whom',
      'with',
      'would',
      'why',
      'you',
      'your',
      'yours',
      'yourself',
      'a',
      'b',
      'c',
      'd',
      'e',
      'f',
      'g',
      'h',
      'i',
      'j',
      'k',
      'l',
      'm',
      'n',
      'o',
      'p',
      'q',
      'r',
      's',
      't',
      'u',
      'v',
      'w',
      'x',
      'y',
      'z',
      '$',
      '1',
      '2',
      '3',
      '4',
      '5',
      '6',
      '7',
      '8',
      '9',
      '0',
      '_',
    ];
    this.build(list);
  }
}

module.exports = StopwordsEn;

},{"@nlpjs/core":59}],76:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const { Tokenizer } = require('@nlpjs/core');

class TokenizerEn extends Tokenizer {
  constructor(container, shouldNormalize) {
    super(container, shouldNormalize);
    this.name = 'tokenizer-en';
  }

  replace(text) {
    let result = text.replace(/n't([ ,:;.!?]|$)/gi, ' not ');
    result = result.replace(/can't([ ,:;.!?]|$)/gi, 'can not ');
    result = result.replace(/'ll([ ,:;.!?]|$)/gi, ' will ');
    result = result.replace(/'s([ ,:;.!?]|$)/gi, ' is ');
    result = result.replace(/'re([ ,:;.!?]|$)/gi, ' are ');
    result = result.replace(/'ve([ ,:;.!?]|$)/gi, ' have ');
    result = result.replace(/'m([ ,:;.!?]|$)/gi, ' am ');
    result = result.replace(/'d([ ,:;.!?]|$)/gi, ' had ');
    return result;
  }

  replaceContractions(arr) {
    const contractionsBase = {
      cannot: ['can', 'not'],
      gonna: ['going', 'to'],
      wanna: ['want', 'to'],
    };

    const result = [];
    arr.forEach((item) => {
      const lowitem = item.toLowerCase();
      if (contractionsBase[lowitem]) {
        result.push(...contractionsBase[lowitem]);
      } else {
        result.push(item);
      }
    });
    return result;
  }

  innerTokenize(text) {
    const replaced = this.replace(text);
    const arr = replaced.split(/[\s,.!?;:([\]'"¡¿)/]+/).filter((x) => x);
    return this.replaceContractions(arr, text);
  }
}

module.exports = TokenizerEn;

},{"@nlpjs/core":59}],77:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

function registerTrigrams(container) {
  const language = container.get('Language');
  if (language) {
    language.addModel(
      'Latin',
      'eng',
      ' ththe anhe nd andion ofof tio toto on  inal atiighghtrig rior entas ed is ll in  bee rne oneveralls tevet t frs a ha rety ery ord t prht  co eve he ang ts hisingbe yon shce reefreryon thermennatshapronaly ahases for hihalf tn an ont  pes o fod inceer onsrese sectityly l bry e eerse ian e o dectidomedoeedhtsteronare  no wh a  und f asny l ae pere en na winitnted aanyted dins stath perithe tst e cy tom soc arch t od ontis eequve ociman fuoteothess al acwitial mauni serea so onlitintr ty oencthiualt a eqtatquaive stalie wl oaref hconte led isundciae fle  lay iumaby  byhumf aic  huavege r a woo ams com meeass dtec lin een rattitplewheateo ts rt frot chciedisagearyo oancelino  fa susonincat ndahouwort inderomoms otg temetleitignis witlducd wwhiacthicaw law heichminimiorto sse e bntrtraeduountane dnstl pd nld ntas iblen p pun s atilyrththofulssidero ecatucauntien edo ph aeraindpensecn wommr s'
    );
  }
}

module.exports = registerTrigrams;

},{}],78:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const {
  TokenizerEn,
  StemmerEn,
  StopwordsEn,
  NormalizerEn,
} = require('@nlpjs/lang-en-min');

const LangEn = require('./lang-en');
const SentimentEn = require('./sentiment/sentiment_en');

module.exports = {
  LangEn,
  StemmerEn,
  StopwordsEn,
  TokenizerEn,
  NormalizerEn,
  SentimentEn,
};

},{"./lang-en":79,"./sentiment/sentiment_en":82,"@nlpjs/lang-en-min":70}],79:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const {
  TokenizerEn,
  StemmerEn,
  StopwordsEn,
  NormalizerEn,
  registerTrigrams,
} = require('@nlpjs/lang-en-min');
const SentimentEn = require('./sentiment/sentiment_en');

class LangEn {
  register(container) {
    container.use(TokenizerEn);
    container.use(StemmerEn);
    container.use(StopwordsEn);
    container.use(NormalizerEn);
    container.register('sentiment-en', SentimentEn);
    registerTrigrams(container);
  }
}

module.exports = LangEn;

},{"./sentiment/sentiment_en":82,"@nlpjs/lang-en-min":70}],80:[function(require,module,exports){
module.exports={
  "words": ["not", "no", "never", "neither"]
}

},{}],81:[function(require,module,exports){
module.exports={"admir":0.25,"amor":-0.625,"approv":0.25,"assur":0.5,"benevol":0.375,"calm":0.313,"captiv":0.5,"charm":0.5,"cheer":0.375,"comfort":0.375,"confid":0.375,"congratul":0.375,"content":0.5,"correct":-0.25,"decent":0.375,"depend":0.375,"eas":-0.375,"easi":0.292,"elat":0.313,"enjoy":0.333,"exhilar":0.625,"favor":0.375,"favour":0.875,"fond":0.375,"friend":0.25,"gay":0.25,"glad":0.375,"gladden":0.625,"golden":0.583,"good":0.25,"gracious":0.5,"happi":0.813,"honor":0.625,"hope":0.5,"joy":0.625,"jubil":0.375,"just":0.313,"love":0.5,"nice":0.25,"posit":-0.25,"prefer":0.25,"reassur":0.375,"recreat":0.313,"regard":0.625,"rejoic":0.438,"respect":0.25,"right":0.344,"ripe":0.25,"rosi":0.719,"safe":0.25,"smooth":0.25,"sound":0.313,"still":0.281,"superior":0.344,"tranquil":0.375,"triumph":0.438,"warm":0.25,"warmhearted":0.5,"well":0.625,"afraid":-0.437,"aggress":-0.25,"alarm":-0.375,"anger":-0.25,"annoy":-0.25,"apprehens":0.25,"awkward":-0.3,"bitter":-0.25,"black":0.25,"bother":-0.25,"brood":0.375,"chafe":-0.375,"contempt":-0.25,"dark":-0.292,"depress":-0.25,"desol":-0.25,"desper":-0.437,"disapprov":-0.625,"discourag":-0.25,"disgrac":-0.375,"disgust":-0.5,"dismay":-0.375,"distress":-0.5,"disturb":-0.25,"down":-0.292,"drab":-0.625,"embarrass":-0.625,"fear":-0.25,"foul":-0.281,"frighten":-0.25,"gall":-0.625,"gloomi":-0.25,"griev":-0.5,"grievous":-0.344,"grim":-0.25,"hideous":-0.375,"hopeless":-0.417,"horrif":-0.75,"hostil":-0.25,"insecur":-0.25,"irrit":-0.25,"jealous":-0.25,"loathsom":-0.25,"loom":-0.281,"low":-0.312,"malevol":-0.375,"misanthrop":-0.875,"mortifi":-0.375,"mourn":-0.687,"nauseat":-0.25,"nauseous":-0.25,"offend":-0.25,"offens":-0.5,"outrag":-0.375,"panic":-0.25,"pestifer":-0.25,"queasi":-0.375,"rag":-0.25,"regret":-0.5,"repel":-0.25,"shame":-0.375,"sorrow":-0.5,"sorri":-0.5,"temper":-0.25,"torment":-0.437,"troubl":-0.687,"ugli":-1,"uneasi":-0.35,"unfriend":-0.281,"unhappi":-0.75,"unsound":0.25,"vex":-0.437,"vexat":-0.469,"wick":-0.25,"woeful":-1,"worri":-0.75,"wretch":-0.4,"adept":0.25,"ador":0.25,"affect":0.25,"affection":0.625,"affirm":0.25,"amat":0.625,"amatori":0.25,"amic":0.625,"appreci":0.25,"approb":0.5,"approbatori":1,"ardor":0.25,"ardour":0.25,"avid":0.375,"beam":0.5,"beguil":0.375,"belong":0.5,"benef":0.875,"benefic":0.938,"benefici":0.375,"bewitch":0.25,"blith":0.625,"brotherlik":0.375,"brother":0.375,"care":0.4,"charit":0.25,"commend":0.325,"complac":0.875,"consol":0.25,"convinc":0.25,"courteous":0.875,"delight":0.25,"devot":0.25,"dreami":0.25,"eager":0.25,"elan":0.292,"embolden":-0.25,"emot":0.25,"enamor":0.375,"enamored":0.25,"enamour":0.375,"enchant":-0.375,"encourag":0.375,"enthral":-0.375,"enthusiasm":0.5,"enthusiast":0.25,"entranc":0.375,"esteem":0.875,"estim":0.25,"euphoria":0.75,"euphori":0.75,"euphor":1,"excel":0.25,"excit":0.25,"expert":0.375,"exuber":0.813,"exult":0.625,"fantabul":0.75,"fascin":0.5,"fortun":0.875,"friendli":0.688,"fulfil":0.375,"gayli":0.625,"gladsom":0.375,"gleeful":0.375,"gleefulli":0.5,"grate":-0.375,"gratifi":0.25,"gratitud":0.75,"gusto":1,"happili":0.5,"hearten":0.625,"hilari":0.625,"hilar":0.375,"insouci":-0.25,"intimaci":0.25,"jocular":0.375,"jocund":0.5,"jolli":-0.375,"jolliti":0.625,"jovial":0.438,"joyous":0.625,"keen":-0.375,"kind":0.542,"laudabl":0.375,"lighthearted":0.375,"likabl":0.563,"likeabl":0.563,"like":0.344,"lovesom":0.875,"merrili":0.625,"merri":0.583,"mirth":0.375,"openheart":0.25,"optim":1,"optimist":0.625,"peaceabl":0.792,"penchant":0.375,"philia":0.625,"placid":0.25,"plausiv":1,"pleas":0.375,"plus":0.688,"practic":0.25,"praiseworthili":0.25,"predilect":0.375,"profici":0.25,"proud":0.688,"quiet":0.313,"quieten":0.375,"quietud":0.25,"relish":-0.375,"salutari":1,"sanction":0.5,"sanguin":-0.25,"satiabl":0.625,"satisfactorili":0.5,"satisfactori":0.75,"satisfi":0.375,"scream":0.292,"seren":0.313,"skil":0.5,"skill":0.438,"solac":-0.375,"sooth":0.313,"splendid":0.25,"stimul":0.25,"superordin":0.25,"teas":0.25,"thank":0.375,"titil":0.625,"togeth":1,"tranc":0.375,"tranquillis":0.375,"triumphal":0.375,"triumphant":0.563,"unafraid":0.375,"undecompos":1,"unruffl":0.5,"unspoil":0.563,"unspoilt":1,"uplift":0.5,"upright":0.25,"uproari":0.375,"warmheart":0.625,"worship":0.5,"zealous":0.75,"zest":0.625,"abas":-0.25,"abash":-0.25,"abhor":-0.25,"abhorr":-0.25,"abomin":-0.375,"aggrav":-0.625,"aggriev":-0.312,"alert":0.25,"amok":-0.25,"amuck":-0.25,"angrili":-0.75,"angri":-0.375,"antipathi":-0.312,"antsi":-0.25,"anxieti":-0.375,"anxious":-0.5,"appal":-0.375,"asham":-0.25,"atroci":-0.25,"avers":-0.25,"bedaz":-0.25,"begrudg":-0.312,"belliger":-0.375,"bereav":-0.375,"bereft":-0.375,"bode":-0.25,"bothersom":-1,"brokenhearted":-0.625,"chagrin":-0.25,"cheerless":-0.75,"chevvi":-0.375,"chevi":-0.375,"chill":-0.625,"chivvi":-0.375,"chivi":-0.375,"choler":-0.5,"commiser":-0.625,"compass":-0.625,"compassion":-0.25,"compunct":-0.375,"confus":0.5,"connipt":-0.625,"constern":-0.375,"contemn":-1,"contrit":-0.25,"covet":0.375,"creep":-0.312,"cring":0.5,"cruelli":-0.312,"cruelti":-0.458,"cynic":0.25,"damag":-0.625,"daze":-0.312,"defeat":-0.625,"defici":-0.437,"deject":-0.875,"dejected":-0.25,"demean":-0.75,"demoralis":0.25,"demor":0.25,"deplor":-0.312,"despair":-0.5,"despis":-0.75,"despit":-0.5,"despond":-0.5,"detest":-0.75,"devil":-0.25,"diffid":-1,"dingi":-0.625,"dire":-0.75,"disappoint":-0.25,"discomfit":-0.5,"discomfitur":-0.25,"discomposur":-0.25,"disconcert":-0.25,"disconsol":-0.25,"discredit":-0.5,"disdain":-0.375,"dishonor":-0.25,"disinclin":-0.5,"dislik":-1,"dismal":-1,"disord":-0.458,"dispirit":-0.25,"dispirited":-0.25,"displeas":-0.25,"displeasur":-0.25,"disquiet":-0.25,"disquietud":-0.375,"distast":-0.25,"dole":-0.875,"dolor":-0.5,"dolour":-0.5,"downcast":-0.312,"downheart":-0.5,"downhearted":-0.25,"dread":-0.667,"drear":-1,"dreari":-0.25,"dysphoria":-0.75,"dysphor":-0.75,"edgi":-0.375,"enrag":-1,"evil":-0.25,"exacerb":-0.375,"exasper":-0.25,"execr":-0.458,"faulti":-0.25,"fearsom":-0.75,"fidgeti":-0.25,"filthi":-0.292,"foil":-0.5,"forebod":-0.25,"forlorn":-0.375,"fret":-0.375,"fright":-0.25,"frustrat":-0.25,"furious":-0.75,"furi":-0.417,"gloom":-1,"gloomili":-0.375,"glum":-0.312,"gravel":-0.458,"grief":-0.437,"grudg":-0.25,"guilt":-1,"guilti":-1,"hackl":-0.375,"harass":-0.375,"harri":-0.25,"hassl":-0.562,"hate":-0.75,"hatr":-0.375,"heartach":-0.625,"heartbreak":-0.5,"heartburn":-0.5,"heartrend":-0.5,"heartsick":-0.375,"heavyheart":-0.5,"heavyhearted":-0.25,"horrend":-0.75,"horribl":-1,"horrid":-0.312,"horrifi":-0.25,"horror":-0.5,"huffi":-0.25,"huffish":-0.375,"humbl":0.375,"humili":-0.75,"hysteria":-0.375,"hyster":-0.25,"ignomini":-0.375,"impati":-0.333,"improp":-1,"inadequ":-0.75,"inauspici":-0.375,"incens":-0.5,"indign":-0.25,"infuri":-0.25,"inglori":-0.625,"ingratitud":-1,"inim":-0.375,"inquietud":-0.375,"intimid":-0.5,"irasc":-0.625,"itchi":-0.375,"jealousi":-0.25,"joyless":-0.25,"lachrymos":-0.5,"lament":-0.5,"livid":-0.75,"loath":-0.5,"madden":-0.75,"malef":-0.875,"malefic":-0.5,"malic":-0.625,"malici":-0.875,"malign":-0.25,"melanchol":-0.25,"melancholi":-0.375,"mif":-0.75,"misanthropi":-0.437,"miser":-0.5,"miseri":-0.437,"misogyn":-1,"misogyni":-0.625,"misolog":-0.25,"mison":-0.25,"molest":-0.25,"murder":-0.5,"nark":-0.312,"nervi":-0.5,"nettl":-0.75,"nettlesom":-0.875,"noisom":-0.625,"odious":-0.5,"odium":-0.437,"oppress":-0.312,"opprobri":-0.75,"overjeal":-0.5,"pain":-0.437,"panick":-0.25,"panicki":-0.25,"pathet":-0.437,"peev":-0.625,"penit":-0.25,"penitenti":-0.25,"perturb":-0.25,"peski":-1,"pessim":-0.375,"pessimist":-0.375,"pester":-0.25,"piqu":-0.625,"piss":-0.437,"pitiless":-0.375,"piti":-0.25,"plagu":-0.312,"plaguey":-0.5,"plaguy":-1,"plaintiv":-0.375,"pout":-0.562,"premonit":-0.25,"presenti":-0.25,"provok":-0.25,"rancor":-0.75,"rancour":-0.375,"remors":-0.5,"repent":-0.25,"repugn":-0.25,"repuls":-0.25,"resent":-0.562,"revolt":-0.5,"revuls":-0.625,"rile":-0.75,"riski":-0.5,"roil":-0.25,"rue":-0.375,"rueful":-0.625,"ruth":-0.625,"ruthless":-0.25,"sad":-0.708,"sadden":-0.562,"scare":-0.25,"scarey":-0.625,"scarili":-0.25,"scari":-0.625,"scorn":-0.25,"shiveri":-0.562,"shudderi":-0.625,"shyness":-0.25,"sicken":-0.25,"sickish":-0.25,"skanki":-0.5,"sore":-0.312,"spite":-0.937,"spoil":-0.437,"spoilt":-0.25,"steam":-0.375,"stung":-0.75,"stupid":-0.25,"suffer":-0.25,"sulk":-0.625,"sulki":-0.625,"tantrum":-0.625,"tear":0.375,"terrifi":-0.5,"thwart":-0.25,"timid":-0.333,"timor":-0.25,"trepid":-0.25,"tumult":-0.292,"turmoil":-0.458,"umbrag":-0.375,"uncheer":-0.25,"uncollect":-0.25,"uneasili":-0.5,"unenvi":-0.625,"unfriendli":-0.5,"ungrat":-0.375,"unhop":-0.5,"unkind":-0.375,"unquiet":-0.375,"unsur":-0.437,"veng":-0.25,"venom":-0.25,"vexati":-1,"vile":-0.25,"vindict":-0.25,"warpath":-0.375,"weepi":-0.5,"weep":-0.875,"woe":-1,"woebegon":-0.687,"woefulli":-0.25,"worrisom":-0.5,"wrath":-0.5,"wrong":-0.292,"wroth":-0.5,"yucki":-0.5,"adroit":0.25,"affabl":0.25,"affluenc":1,"agreeabl":0.5,"allevi":-0.25,"amen":0.375,"amiabl":0.25,"applaud":0.25,"assoil":0.875,"auspici":0.25,"bankabl":0.813,"banner":0.875,"beamish":1,"beauteous":0.5,"beauti":0.333,"becom":0.813,"benign":0.313,"best":0.313,"bliss":0.25,"blithesom":0.875,"bonni":1,"boss":0.875,"bounc":0.25,"brag":0.875,"brillianc":0.875,"bulli":-0.25,"celebr":0.25,"cheeri":1,"cherub":0.25,"chipper":1,"come":0.875,"commonsens":0.875,"congratulatori":0.875,"congruous":0.75,"consum":0.25,"cork":1,"correctitud":1,"cosi":0.25,"couthi":0.875,"crack":-0.25,"credit":0.375,"dandi":1,"decor":0.25,"deliver":0.5,"desir":0.313,"diplomat":0.375,"dulcet":0.813,"eleemosynari":1,"especi":0.875,"eudaemonia":1,"eudaimonia":1,"exculp":0.375,"exoner":-0.375,"fab":1,"fame":0.5,"famous":1,"fetch":1,"finer":0.875,"fortuit":0.25,"further":0.25,"gaieti":0.875,"gift":0.313,"glorious":0.792,"gorgeous":0.25,"gratulatori":0.875,"groundbreak":0.875,"hale":0.5,"heroism":1,"highbrow":0.875,"idealis":0.25,"ideal":0.25,"ingeni":0.875,"innov":0.25,"jest":0.438,"jocos":0.25,"joke":0.438,"judici":0.375,"justifi":0.375,"laugh":0.25,"laureat":0.875,"levelhead":0.875,"lightheart":0.875,"logic":0.25,"luckili":0.875,"manner":0.875,"marvel":0.25,"master":0.375,"melliflu":0.875,"mellison":0.875,"merit":0.438,"meritori":0.25,"model":0.375,"nifti":1,"notabl":1,"note":0.875,"noteworthi":0.875,"obey":0.875,"okay":0.375,"opportun":0.375,"optimum":0.375,"pastim":0.875,"peac":0.875,"person":-0.25,"philogyni":0.875,"pluperfect":0.875,"pollyannaish":0.875,"prais":0.75,"praiseworthi":0.375,"precis":0.25,"preferenti":0.875,"present":0.25,"primo":0.25,"profus":0.375,"prolificaci":0.875,"proper":0.313,"proprieti":1,"prosper":0.688,"quotabl":0.375,"reanim":0.625,"renown":0.375,"reput":0.375,"rescu":1,"resplend":0.25,"reverenti":0.375,"revivifi":1,"riant":1,"saint":0.333,"saintlik":0.875,"sensibl":0.406,"sight":0.25,"sincer":0.438,"smash":1,"smile":0.375,"spif":0.875,"splendifer":1,"success":0.25,"suitabl":0.25,"sunni":1,"superb":0.938,"sweet":0.25,"swell":1,"take":1,"talent":0.875,"thrive":0.75,"top":0.25,"trust":0.375,"twink":1,"unfeign":0.375,"upbeat":0.438,"upstand":1,"valianc":1,"valor":1,"valour":1,"vener":0.25,"virtuoso":0.25,"wellb":1,"win":0.375,"wonder":0.25,"wondrous":0.25,"worth":0.313,"worthi":1,"worthwhil":0.875,"adynamia":-0.875,"afflict":-1,"anguish":-0.75,"animadvers":-0.875,"assum":-0.75,"asymmetri":-0.875,"atrophi":-0.625,"backward":0.313,"bale":-0.25,"bastard":-0.25,"berat":-0.75,"betray":-0.25,"bitchi":-0.25,"blamabl":-1,"blameabl":-1,"blame":-0.562,"blameworthi":-0.25,"blemish":-0.875,"blockhead":-0.25,"bloodguilti":-0.875,"bogus":-1,"bonehead":-0.25,"cabbag":-0.875,"caddish":-0.875,"caligin":-1,"callow":-0.625,"calumniatori":-1,"calumni":-0.25,"carnag":-1,"castig":-0.437,"catti":-0.25,"censur":-0.25,"charcoal":-0.281,"charnel":-0.875,"chinchi":-1,"churlish":-0.875,"clammi":-0.875,"cloddish":-1,"condemn":-0.35,"condemnatori":-1,"condol":-0.25,"contemptu":-0.25,"contrabandist":-1,"convict":-0.25,"crappi":-1,"crass":-0.25,"cuckold":-0.875,"culpabl":-0.25,"curmudgeon":-0.25,"dank":-0.875,"darken":-0.5,"darkish":-0.875,"decay":-0.333,"deceiv":-0.625,"defamatori":-1,"defect":-0.25,"delud":-0.875,"demot":0.25,"denigr":-0.333,"denigratori":-1,"desecr":-1,"despic":-0.75,"despoil":-0.25,"dickhead":-1,"difficult":-0.312,"disadvantag":0.375,"disagre":-0.25,"discontinu":-0.875,"disesteem":0.375,"disfluenc":-1,"disharmoni":-0.875,"dishearten":0.25,"dishonour":-0.25,"disregard":-0.812,"dissimul":-0.375,"dissymmetri":-0.875,"doltish":-0.25,"duncic":-1,"duncish":-1,"egregi":-0.875,"eyesor":-0.875,"fathead":-0.25,"fetid":-0.5,"filch":-0.875,"flagrant":-0.875,"flaw":-0.5,"foetid":-1,"foolish":-0.875,"forsak":-1,"frigid":-0.417,"frostili":-0.875,"frown":-0.5,"gammi":-0.875,"gaumless":-1,"ghoulish":-0.875,"gloat":-0.875,"godforsaken":-1,"gormless":-1,"harm":-0.25,"hell":-0.937,"hellhol":-1,"humbug":-0.333,"hypochondriac":-1,"illegitim":-1,"immoder":-0.75,"impass":0.25,"impugn":-0.875,"inadmiss":-0.25,"inan":0.25,"inaptitud":-1,"incapac":-1,"incompet":-0.35,"incomprehens":-0.437,"incoordin":-1,"indecor":-0.5,"inefficaci":-0.375,"ineffici":-0.25,"inelast":-0.625,"inexperienc":-1,"inexperi":-1,"inflex":-0.25,"inharmoni":-0.312,"involuntari":-1,"irrecover":-0.875,"liar":-1,"libel":-0.25,"loggerhead":-1,"loveless":-1,"malodor":-0.5,"malodour":-0.75,"manki":-1,"mar":-0.625,"massacr":-1,"menac":-0.25,"minaci":-1,"minatori":-1,"misappli":-0.875,"misbegot":-1,"misbegotten":-1,"misbehavior":-1,"misbehaviour":-1,"miscarri":-0.812,"mischiev":-0.875,"misde":-1,"misogynist":-0.25,"misus":-0.5,"motherfuck":-1,"nag":-1,"nasti":-0.792,"netherworld":-0.875,"nitwit":-0.375,"noncomprehens":0.375,"nondigest":-1,"nonliv":-0.875,"off":-1,"overpow":-0.875,"overwhelm":-0.375,"parsimoni":-0.312,"perplex":-0.25,"phobic":-1,"phoney":-0.375,"phoni":-0.375,"pilfer":-0.25,"pointless":-0.875,"presumptu":-1,"prevar":-0.25,"protest":-0.292,"psychopath":-0.375,"psychopatholog":-0.25,"purloin":-0.875,"putrefi":-0.375,"putresc":-0.375,"quack":-0.875,"rampag":-0.25,"rape":-0.875,"raucous":-0.875,"ravag":-0.312,"reprehens":-0.25,"roofi":-1,"rophi":-1,"rot":-0.25,"rotten":-0.25,"rubbishi":-0.875,"sack":-0.875,"scowl":-0.75,"scurril":-0.25,"selfish":-1,"senseless":-0.281,"shirti":-1,"shitti":-1,"shortcom":-1,"showdown":-0.875,"shrewish":-1,"slander":-0.25,"slay":-1,"slayer":-1,"smelli":-1,"smuggl":-0.25,"smuggler":-1,"snarf":-0.875,"snorti":-1,"spoilabl":-0.25,"spurn":-0.25,"static":-0.875,"stink":-0.75,"stinki":-0.5,"strife":-0.812,"suicid":-0.875,"sur":-1,"tactless":-0.25,"talentless":-0.75,"tempest":-0.875,"tenebrif":-1,"tenebri":-1,"tenebr":-1,"thickhead":-1,"unanim":0.375,"unappreci":-0.25,"unbend":0.375,"unchivalr":-0.375,"uncleanli":-1,"unconnected":-0.875,"unconstruct":-1,"uncoop":-0.812,"uncouth":-0.625,"uncreat":-0.75,"undeserv":-0.5,"undignifi":-0.875,"unenlighten":-0.25,"unfavor":-0.5,"unfavour":-0.5,"ungal":-0.875,"unknow":-0.375,"unknowledg":-1,"unmall":-1,"unmerit":-1,"unmitig":0.375,"unnavig":-0.875,"unoblig":-0.5,"unpass":-1,"unpercept":-0.312,"unpleasing":-1,"unrecover":-0.875,"unseemli":-1,"unsight":-1,"untravers":-0.875,"untrustworthi":-0.25,"untrusti":-0.25,"unwilling":-1,"unwis":0.375,"unworthi":-0.625,"vilif":-0.812,"wast":-0.437,"whoreson":-1,"wither":-0.25,"witless":-1,"accur":0.75,"admitt":0.75,"adopt":0.25,"advantag":0.5,"agog":0.75,"alter":0.25,"amend":0.25,"amus":0.25,"ancillari":0.75,"apposit":0.625,"appropri":-0.25,"assenti":0.75,"blest":0.75,"boffo":0.75,"bullish":0.75,"charismat":0.75,"cherish":0.375,"cognis":0.625,"cogniz":0.292,"cognosc":0.75,"compet":0.25,"compliant":0.75,"confirm":0.25,"confirmatori":0.75,"conform":0.25,"congruenc":0.75,"congruiti":0.75,"consider":0.25,"copacet":0.75,"copaset":0.75,"copeset":0.75,"copesett":0.75,"corrig":0.75,"corrobor":0.25,"corroboratori":0.75,"counten":0.75,"court":0.292,"courtship":0.75,"creditworthi":0.25,"cun":0.75,"curat":0.25,"debonair":0.75,"decid":0.375,"decorum":0.75,"deft":0.25,"dexter":0.25,"dextrous":0.75,"divert":0.25,"earnest":0.542,"ebulli":-0.25,"ecstat":0.75,"elast":0.625,"elig":0.25,"encomiast":0.75,"endear":0.25,"engag":0.75,"enliven":0.375,"enraptur":-0.375,"erot":0.25,"eulogist":0.375,"exalt":0.375,"experienc":0.75,"experi":0.333,"export":0.75,"felicit":0.375,"fertiliz":0.75,"festal":0.75,"festiv":0.5,"fever":-0.375,"fitting":0.75,"flatter":0.375,"flourish":0.542,"gain":0.281,"guard":-0.281,"halcyon":0.75,"handi":0.313,"harmon":0.375,"harmoni":0.25,"harmonis":0.75,"heal":0.375,"hedon":0.313,"hedonist":0.75,"honorif":0.75,"honour":0.625,"humor":0.25,"humour":0.25,"illustri":0.25,"impecc":0.375,"inspir":0.25,"iren":0.75,"jaunti":0.25,"knowabl":0.75,"laudatori":0.75,"livabl":0.75,"liveabl":0.75,"magnific":0.25,"majest":0.75,"malleabl":0.5,"manipul":0.25,"mesmer":0.5,"ok":0.75,"opportunist":0.75,"palmi":0.75,"panegyr":0.75,"pat":0.25,"peppi":0.25,"perfect":0.333,"perki":0.75,"photogen":0.75,"pious":0.625,"placat":0.375,"plastic":0.542,"pleasant":0.5,"pleasur":0.275,"polit":0.25,"practis":0.75,"prepossess":0.75,"prestigi":0.375,"prize":0.25,"profit":0.25,"promis":0.25,"promot":0.375,"prudent":0.5,"pulchritudin":0.75,"rapt":0.75,"raptur":0.75,"ratiocin":0.75,"rattl":-0.25,"ravish":0.25,"reconstruct":0.75,"reliabl":0.375,"rhapsod":0.75,"righteous":0.688,"roar":0.25,"rubicund":0.75,"sanat":0.75,"satiat":0.75,"scalabl":0.75,"seemli":0.75,"seem":0.25,"sensuous":0.25,"sinless":-0.25,"sociabl":0.25,"spellbind":0.75,"staid":0.75,"staunch":-0.5,"suav":0.75,"substanti":0.375,"symphoni":0.75,"tenabl":0.375,"timeserv":0.25,"toler":0.375,"treasur":0.313,"trusti":0.375,"underst":0.75,"unexception":0.75,"valid":0.375,"validatori":0.75,"valu":0.75,"verificatori":0.75,"verifi":0.25,"vers":0.75,"veteran":0.75,"voluntarili":0.75,"waggish":0.25,"welcom":0.5,"wholesom":0.75,"willing":0.75,"winsom":0.375,"woo":0.313,"workmanlik":0.75,"aboul":-0.75,"abul":-0.75,"achromasia":-0.75,"achromat":-0.375,"acidul":-0.25,"agonis":-0.5,"agon":0.25,"ala":-0.75,"algid":-0.375,"algophob":-0.75,"amateurish":-0.5,"asshol":-0.75,"atrabili":-0.75,"base":-0.304,"betis":-0.75,"blind":0.25,"brainish":-0.75,"brash":-0.25,"brokenheart":-0.75,"brusk":-0.75,"brusqu":-0.75,"bypass":-0.75,"cataclysm":-0.312,"ceciti":-0.75,"chargeabl":-0.75,"chastis":-0.25,"cheeki":-0.5,"chide":-0.375,"closefist":-0.75,"conscienceless":-0.75,"contum":-0.75,"crab":-0.75,"crabbi":-0.5,"craze":-0.75,"cruel":-0.5,"cussed":-0.75,"damnatori":-0.75,"damn":-0.25,"danger":-0.25,"darkl":-0.75,"deaf":-0.5,"derang":-0.25,"derid":-0.75,"deris":-0.437,"destruct":-0.25,"disapprob":-0.75,"disequilibrium":-0.75,"disingenu":-0.25,"disproport":-0.25,"dumbfound":0.25,"dustup":-0.75,"dyspept":-0.75,"empurpl":-0.75,"ersatz":-0.625,"exception":-0.75,"fallout":-0.75,"feebleminded":-0.75,"feign":-0.562,"feral":-0.75,"ferin":-0.75,"feroc":-0.75,"fetor":-0.75,"fierc":-0.75,"flightless":-0.75,"flummox":-0.75,"foetor":-0.75,"forceless":-0.75,"fragil":-0.25,"fraudul":-0.25,"gibelik":-0.75,"godless":-0.312,"gross":-0.75,"grotti":-0.75,"grouchi":-0.75,"grumpi":-0.25,"hardfist":-0.75,"hazard":-0.375,"heartbroken":-0.75,"hellish":0.25,"hex":-0.25,"hothead":-0.312,"hypochondria":-0.75,"hypochondriasi":-0.75,"hypopigment":-0.75,"ignor":-0.5,"imperfect":-0.25,"impetu":-0.25,"impieti":-0.75,"impious":-0.562,"impish":-0.25,"implac":-0.75,"implik":-0.75,"imprecis":-0.375,"improvid":-0.437,"imprud":-0.25,"inaccur":-0.75,"inadvis":0.25,"inauthent":-0.75,"incogniz":-0.5,"incompress":-0.75,"inconsol":-0.75,"indict":-0.25,"indigest":-0.25,"ineffect":-0.583,"ineffectu":-0.292,"inequit":-0.75,"inexpi":-0.75,"inextirp":-0.75,"inextric":-0.75,"infertil":-0.375,"inflict":-0.75,"inhospit":-0.25,"inopportun":-0.375,"insolv":-0.25,"insult":-0.5,"irk":-0.75,"irrevers":-0.25,"jeer":-0.625,"jinx":-0.312,"killer":-0.75,"kvetch":-0.312,"liverish":-0.75,"liveri":-0.75,"lynch":-0.375,"madcap":-0.375,"mephit":-0.75,"miserli":-0.75,"mislead":-0.625,"mobbish":-0.75,"moblik":-0.75,"mulish":-0.25,"mysophob":-0.75,"naiv":-0.75,"naivet":-0.75,"naiveti":-0.75,"nescienc":-0.75,"niff":-0.75,"niffi":-0.75,"nonintellectu":-0.75,"nonplus":-0.25,"objection":-0.75,"obnoxi":-0.75,"obtund":-0.75,"orneri":-0.5,"ostentati":-0.25,"pallid":-0.25,"pallor":-0.75,"peevish":-0.5,"penalis":-0.25,"penal":-0.25,"pernici":-0.437,"pettish":-0.625,"petul":-0.375,"pine":-0.75,"plain":-0.25,"pompos":-0.75,"pompous":-0.75,"pong":-0.75,"prankish":-0.75,"pretend":-0.25,"primit":-0.75,"puckish":-0.25,"punish":-0.25,"pusillanim":-0.625,"quetch":-0.75,"raunch":-0.75,"rebuk":-0.625,"reek":-0.75,"regrett":-0.25,"resourceless":-0.75,"revil":-0.75,"roughhous":-0.75,"rowdi":-0.25,"rude":-0.75,"satanophobia":-0.75,"schizophren":-0.25,"sham":-0.437,"sightless":-0.25,"sirrah":-0.75,"sneer":-0.562,"snide":-0.75,"spavin":-0.75,"splashi":-0.75,"springless":-0.75,"starv":-0.75,"stench":-0.75,"struggl":-0.75,"styleless":-0.75,"taunt":-0.375,"tearaway":-0.25,"techi":0.375,"testi":-0.75,"tetchi":-0.75,"throe":-0.687,"tightfist":-0.75,"tinpot":-0.75,"tortur":-0.375,"tragic":-0.437,"trashi":-0.75,"traumatis":-0.75,"traumat":-0.5,"trifl":-0.75,"troublesom":-0.25,"unadvis":-0.75,"unalert":-0.75,"unauthent":-0.75,"unawar":-0.5,"uncharit":-0.75,"unchast":-0.75,"uncivil":-0.75,"unclimb":-0.75,"unconsecr":-0.75,"unconsol":-0.75,"uncordi":-0.75,"uncorrect":-0.75,"undepend":-0.5,"undiplomat":-0.75,"undiscern":-0.75,"unedifi":-0.75,"unfertil":-0.75,"unfertilis":-0.75,"unforc":-0.75,"unforese":-0.75,"unforgiv":-0.5,"unfortun":-0.25,"unglamor":-0.75,"unglamour":-0.75,"ungodli":-0.75,"ungrac":-0.25,"ungraci":-0.375,"ungratifi":-0.5,"unhallow":-0.25,"unluckili":-0.75,"unmeritori":-0.75,"unpatriot":-0.75,"unpeac":-0.375,"unpermiss":-0.75,"unpopular":-0.25,"unpropiti":-0.375,"unrestraint":-0.75,"unrip":-0.75,"unripen":-0.75,"unsanctifi":-0.75,"unsightli":-0.75,"unsubstanti":-0.75,"untal":-0.75,"untoward":-0.75,"unvigil":-0.75,"unwatch":-0.75,"upbraid":-0.5,"vermin":-0.75,"vulgar":-0.562,"wan":-0.583,"whimper":-0.25,"whine":-0.75,"wimpish":-0.75,"wimpi":-0.75,"wist":-0.5,"worriment":-0.75,"worthless":-0.75,"wreck":-0.375,"xenophob":-0.75,"yen":-0.75,"abl":0.688,"abund":0.375,"accept":0.313,"accessari":0.625,"access":0.438,"accessori":0.688,"acclaim":0.5,"accommod":0.25,"accord":0.25,"accredit":0.25,"ace":0.625,"adequ":0.625,"adjuv":0.688,"administr":-0.25,"admiss":0.25,"adorn":0.625,"advis":0.25,"aesthet":0.25,"affirmatori":0.625,"aliment":0.375,"alimentari":0.625,"allegi":0.625,"allur":0.625,"angel":0.25,"anim":0.25,"anthelminth":0.625,"anthelmint":0.625,"antifertil":0.625,"antimicrobi":0.625,"antimicrob":0.625,"appeas":0.5,"apprais":-0.25,"approach":0.583,"aptitud":0.625,"ascrib":0.625,"assidu":0.625,"assist":0.25,"astut":0.625,"attir":0.375,"attract":0.25,"autoerot":0.625,"awar":0.375,"awesom":0.625,"awe":0.375,"bankrupt":0.625,"banter":-0.375,"baroni":0.625,"beatif":0.375,"beatifi":0.625,"benefit":0.688,"blanket":0.625,"blate":0.625,"bless":0.313,"bonzer":0.625,"bounci":0.625,"bow":0.625,"brace":0.625,"brilliant":0.521,"cagey":0.563,"cagi":0.563,"cantabil":0.625,"canti":0.625,"capabl":0.375,"carpetbag":0.375,"cathol":0.625,"celib":0.625,"certificatori":0.625,"champion":-0.375,"chari":0.375,"chast":-0.25,"chewabl":0.625,"chic":0.25,"chirpi":0.5,"chivalr":0.25,"choic":0.5,"christian":0.5,"christlik":0.625,"christ":-0.25,"circumspect":0.625,"cleanli":0.625,"clever":0.25,"closelip":0.625,"closemouth":0.625,"comest":0.625,"comfi":0.625,"companion":0.25,"compat":0.313,"complais":0.625,"comrad":0.625,"concept":0.375,"concili":0.625,"concupisc":0.625,"condit":0.25,"congeni":0.688,"consecr":0.625,"consensu":0.625,"consent":0.625,"consist":0.281,"conson":0.25,"construct":0.375,"consumm":0.375,"contracept":0.625,"control":0.25,"convivi":0.25,"cordial":0.667,"countywid":0.625,"craftsmanship":0.625,"crafti":0.625,"creativ":0.625,"cure":-0.25,"cute":0.25,"cuttabl":0.625,"danceabl":0.625,"dash":0.25,"dear":0.333,"dedic":0.25,"deduct":0.625,"defer":0.25,"deferenti":0.625,"delici":0.563,"democrat":0.25,"describ":0.625,"deserv":0.5,"design":0.25,"detail":0.25,"dilig":0.563,"discrimin":0.25,"dishi":0.625,"dispos":0.375,"docil":0.25,"dose":0.625,"drinkabl":0.375,"eatabl":0.625,"edibl":0.25,"edifi":0.5,"educ":0.25,"efficaci":0.25,"elabor":0.438,"enabl":0.5,"encyclopaed":0.625,"encycloped":0.625,"entertain":0.375,"entic":0.292,"enwrap":0.625,"epicurean":0.375,"epoch":0.625,"equit":0.625,"errorless":0.625,"esthet":0.25,"ethic":0.25,"eudaemon":0.625,"eudemon":0.25,"euphoni":0.5,"euphon":0.375,"evalu":0.625,"exact":0.25,"execut":0.25,"expans":0.25,"expedi":0.25,"explain":0.625,"explic":0.625,"explod":0.625,"express":0.25,"faceti":0.375,"faith":0.375,"fancifi":0.625,"farcic":0.625,"feasibl":0.25,"fecund":0.563,"feel":0.625,"felic":0.625,"fertil":0.25,"finespun":0.563,"fit":0.375,"fitter":0.625,"forese":0.625,"format":0.625,"foster":0.438,"foxi":0.625,"friski":0.625,"fruit":0.25,"gallant":0.25,"gentlemanlik":0.625,"gentleman":0.625,"getat":0.625,"goodish":0.625,"govern":0.625,"grace":0.313,"grand":0.375,"greatest":0.625,"groovi":0.625,"guil":0.625,"habit":0.25,"halal":0.563,"hallow":0.5,"handsom":0.688,"harmoniz":0.625,"health":0.375,"healthier":0.625,"healthi":0.675,"heartfelt":0.625,"helminth":0.625,"help":0.25,"histori":0.625,"homelik":0.625,"homey":0.625,"homi":0.625,"hospit":0.25,"hygien":0.25,"identifi":0.25,"idyl":0.688,"imagin":0.25,"implement":-0.25,"impos":-0.25,"improv":0.25,"incis":0.25,"indulg":0.667,"inform":0.25,"ingrati":0.563,"inhabit":0.625,"inspirit":0.25,"intellig":0.25,"intent":0.25,"interesting":0.625,"interpret":-0.25,"intim":0.625,"invent":0.625,"iter":0.625,"jape":0.625,"kill":-0.25,"kittenish":0.625,"knavish":0.625,"know":0.25,"knowledg":0.25,"kosher":0.563,"ladylik":0.25,"lamblik":0.625,"laurel":0.625,"leal":0.625,"learn":0.542,"letter":0.625,"licenc":0.25,"licens":0.25,"licit":0.25,"lieg":0.313,"lifelik":0.563,"lightsom":0.688,"liven":0.625,"lofti":0.313,"lovabl":0.625,"loveabl":0.625,"loyal":0.25,"lucki":0.708,"lucrat":0.5,"lustrous":0.542,"lusti":0.375,"luxuri":0.25,"lyric":0.5,"maintain":0.375,"manag":0.25,"matey":0.625,"maxim":0.25,"maximum":0.625,"mean":-0.312,"meaning":0.25,"meek":0.542,"meet":0.625,"melodi":0.25,"merriment":0.625,"meticul":0.688,"metier":0.563,"mirrorlik":0.625,"mitig":-0.5,"moralist":0.625,"moral":0.25,"neighbor":0.25,"neighbour":0.25,"nonneg":0.625,"nourish":0.25,"nutrient":0.625,"nutriti":0.375,"nutrit":0.375,"oblig":0.25,"observ":0.25,"olympian":0.688,"oper":0.25,"opul":0.25,"origin":0.313,"overabund":0.625,"overcauti":0.625,"overcredul":-0.25,"overjoy":0.375,"overrid":0.625,"overrip":0.625,"pacif":0.25,"painter":0.625,"palli":0.625,"paramount":0.625,"parasiticid":0.625,"passabl":0.375,"passion":0.375,"peachi":0.688,"percipi":0.625,"perfum":0.625,"permut":-0.25,"perspicaci":0.25,"pertin":0.375,"picturesqu":0.563,"pieti":0.625,"playabl":0.625,"pleasing":0.625,"pledg":0.625,"plenari":0.625,"plenteous":0.625,"plenti":-0.5,"plethor":0.625,"polish":0.25,"popular":-0.25,"potabl":0.375,"precaut":-0.25,"precious":0.25,"precook":0.625,"predomin":0.375,"premium":0.625,"prepar":0.542,"preponder":0.625,"prescient":0.625,"preserv":0.25,"prettifi":0.625,"priggish":0.625,"prim":0.563,"prime":0.3,"prizewin":0.625,"product":0.25,"prolif":0.563,"pronounc":0.375,"prophylact":0.542,"propiti":0.25,"prudish":-0.25,"punctur":0.25,"purpos":0.25,"pursuant":0.625,"ralli":0.625,"randi":0.625,"ration":0.375,"readi":0.525,"reason":0.25,"recherch":0.625,"reclaim":0.625,"recollect":0.5,"reconcil":0.5,"recup":0.625,"recycl":0.625,"redeem":0.5,"refer":0.625,"refresh":0.375,"rehabilit":0.375,"reinforc":0.563,"reiter":0.625,"releas":0.625,"remedi":0.25,"repeat":0.25,"resolut":0.438,"restor":0.563,"reusabl":0.625,"rever":-0.25,"reverend":0.625,"rich":0.385,"rous":0.563,"ruddi":0.375,"ruttish":0.625,"sacr":0.575,"sagaci":0.625,"salubri":0.688,"sanctifi":0.438,"sane":0.625,"saniti":0.625,"scintil":0.5,"season":0.25,"secret":-0.312,"sedat":0.25,"sedul":0.625,"select":0.25,"semiconduct":0.625,"serendipit":0.625,"seriocom":0.625,"servic":0.25,"shape":0.25,"shine":0.25,"sidesplit":0.625,"simplifi":0.25,"sing":0.625,"sinkabl":0.625,"slavelik":0.625,"sli":0.625,"snazzi":0.625,"solemn":0.375,"solvenc":0.625,"sophist":-0.375,"spaciotempor":0.625,"spark":0.563,"speakabl":0.625,"specifi":0.375,"splendor":0.563,"splendour":0.563,"stabl":0.25,"stalwart":0.375,"standardis":0.625,"standard":0.425,"state":0.5,"statewid":0.625,"steadfast":0.25,"sterl":0.625,"stir":0.25,"straightarrow":0.625,"straightlac":0.625,"strengthen":0.25,"stud":0.625,"sublim":0.25,"suffici":0.375,"sumptuous":0.625,"super":0.375,"superabund":0.25,"superl":0.625,"support":-0.25,"suprem":0.531,"surpass":0.25,"suscept":0.25,"sworn":0.563,"sybarit":0.625,"synerget":0.625,"systemat":0.625,"tact":0.375,"tamabl":0.625,"tameabl":0.625,"tast":0.25,"teachabl":0.625,"tempt":0.625,"test":0.563,"therapeut":0.313,"thorough":0.313,"thrifti":0.563,"tightlip":0.625,"time":0.375,"tiptop":0.625,"topnotch":0.625,"tractabl":0.375,"transpos":0.625,"tremend":0.25,"tricksi":0.625,"tri":0.25,"true":0.25,"trueheart":0.625,"truth":0.438,"unalarm":0.625,"unalloy":0.625,"unbeaten":0.625,"unburi":0.625,"unconqu":0.625,"uncoupl":0.25,"undef":0.625,"unharm":0.625,"uninfect":0.625,"unscath":0.625,"unswerv":0.563,"unvanquish":0.625,"upgrad":0.525,"upscal":0.625,"utter":0.313,"valuabl":0.375,"verdant":0.625,"verv":0.625,"viabl":0.563,"victorian":0.625,"victori":0.625,"viewabl":0.625,"vim":0.625,"virtuous":0.375,"vital":0.25,"vivifi":0.688,"voguish":0.563,"voluptuari":0.625,"voluptu":0.25,"votiv":0.625,"vowellik":0.625,"whip":-0.271,"wili":0.625,"wise":0.5,"workabl":0.625,"workmanship":0.625,"zippi":0.625,"abetalipoproteinemia":-0.625,"abus":-0.25,"acerb":-0.417,"ach":-0.25,"achi":-0.625,"acn":-0.625,"acrimoni":-0.25,"adam":-0.375,"addl":-0.562,"ail":-0.5,"alien":-0.375,"ambuscad":-0.5,"ambush":-0.375,"amnesiac":-0.375,"amyotonia":-0.625,"anaemia":-0.562,"anemia":-0.562,"apathi":-0.687,"apocalypt":-0.437,"assassin":-0.375,"atonia":-0.625,"aton":0.25,"atoni":-0.625,"attaint":-0.562,"badinag":-0.625,"ballup":-0.625,"bane":-0.25,"barbar":-0.25,"battl":-0.625,"bedlam":-0.625,"beneath":-0.625,"bilious":-0.625,"bittersweet":-0.562,"blackguard":-0.25,"blain":-0.625,"boo":-0.5,"boorish":-0.25,"bounderish":-0.625,"brattish":-0.625,"bratti":-0.625,"brawler":-0.625,"brazen":-0.25,"breakabl":0.25,"broke":-0.625,"brook":-0.625,"buffalo":-0.625,"burdensom":-0.625,"buri":-0.625,"bust":-0.625,"cacographi":-0.625,"caitiff":-0.5,"canard":-0.625,"catcal":-0.25,"chicaneri":-0.625,"chintzi":-0.625,"clash":-0.5,"clavus":-0.625,"coars":-0.25,"cockup":-0.625,"combat":-0.25,"complex":-0.625,"conceited":-0.625,"condescend":-0.625,"cozen":-0.625,"crackbrain":-0.625,"crazi":-0.25,"creepi":-0.562,"crepuscular":-0.625,"criminalis":-0.625,"cruditi":-0.562,"daimon":-0.625,"dare":-0.417,"dastardli":-0.625,"decept":-0.25,"decri":-0.625,"desert":0.25,"desperado":-0.625,"detriment":-0.5,"difficulti":-0.719,"dim":-0.25,"ding":0.25,"discord":-0.375,"discourt":-0.625,"disinterest":-0.625,"disjointed":-0.625,"disobey":-0.625,"disoblig":-0.625,"disproportion":-0.687,"disqualifi":-0.25,"disrespect":-0.25,"dissembl":-0.375,"dissenti":-0.312,"disun":-0.625,"divis":-0.625,"dogsbodi":-0.625,"doom":-0.625,"dork":-0.625,"dowdi":-0.375,"downspin":-0.625,"downstair":-0.625,"drudg":-0.25,"dupe":-0.25,"duski":-0.25,"dysmenorrhea":-0.625,"elegi":-0.625,"element":-0.625,"endang":-0.375,"enjoin":-0.625,"erythroderma":-0.625,"excori":-0.5,"excruci":-0.375,"factious":-0.625,"faint":-0.25,"faithless":-0.625,"fake":-0.292,"fallen":-0.531,"falsifi":-0.25,"famin":-0.562,"fickl":-0.625,"fitch":-0.625,"flash":-0.625,"flinch":-0.375,"fob":-0.625,"forbid":-0.375,"foulmart":-0.625,"foumart":-0.625,"frangibl":-0.625,"fray":-0.5,"frivol":-0.25,"frowsti":-0.625,"frump":-0.625,"funk":-0.625,"fusillad":-0.625,"garish":-0.437,"gauch":-0.375,"ghast":-0.687,"gimcrack":-0.625,"gouti":-0.625,"graceless":-0.5,"grizzl":-0.25,"gruff":-0.625,"haphazard":0.313,"hardship":-0.583,"harsh":-0.406,"hueless":-0.625,"huff":-0.25,"humdrum":-0.562,"hurt":-0.625,"hypognath":-0.625,"hypothyroid":-0.625,"ill":-0.375,"illegalis":-0.625,"illeg":-0.25,"illog":-0.312,"illogic":-0.625,"imaginari":-0.625,"imbal":-0.562,"immor":-0.25,"immunodefici":-0.5,"immut":-0.625,"imperson":-0.562,"imprec":-0.25,"inadequaci":-0.583,"inanim":-0.542,"inanit":-0.687,"inargu":-0.625,"incrimin":-0.5,"inculp":0.375,"inelig":-0.25,"inexor":-0.562,"inexpress":-0.625,"inexpugn":-0.625,"inferno":-0.625,"inhum":-0.25,"insenti":-0.625,"insubstanti":-0.375,"inter":-0.25,"intoler":-0.375,"intransig":-0.375,"invect":-0.625,"irrat":-0.25,"irreduc":-0.625,"jejun":-0.437,"jumbl":-0.625,"kaput":-0.625,"labor":-0.625,"labour":-0.625,"languish":-0.583,"licenti":-0.625,"listless":-0.312,"looney":-0.625,"looni":-0.25,"lordosi":-0.625,"lose":-0.625,"loss":-0.625,"lousi":-0.25,"loutish":-0.625,"lowbr":-0.625,"maladroit":-0.625,"mangey":-0.625,"mangi":-0.375,"maraud":0.25,"mephiti":-0.562,"meritless":-0.625,"meshuga":-0.625,"meshugga":-0.625,"meshugg":-0.625,"meshuggeneh":-0.375,"meshuggen":-0.375,"miff":-0.625,"misgovern":-0.375,"misrul":-0.625,"mongrel":-0.625,"mongrelis":-0.625,"moros":-0.5,"murk":-0.625,"neandert":-0.625,"neanderth":-0.625,"nemesi":-0.625,"nerv":-0.292,"nonchal":-0.25,"nonconform":-0.25,"nutcas":-0.625,"oafish":-0.625,"object":0.25,"objurg":-0.375,"obscur":-0.5,"odynophagia":-0.625,"omin":-0.687,"oner":-0.625,"ordeal":-0.562,"osteophyt":-0.625,"outlaw":-0.25,"palsi":-0.625,"pandemonium":-0.625,"paranoid":-0.375,"paraplegia":-0.625,"parapleg":-0.625,"paroxysm":-0.625,"patronis":0.25,"patron":0.25,"penuri":-0.25,"perdit":-0.625,"perish":-0.25,"pimpl":-0.25,"pimpli":-0.625,"pittanc":-0.625,"poor":-0.5,"precursori":-0.625,"predica":-0.625,"premonitori":-0.625,"pretenti":-0.562,"prognath":-0.625,"psychoneurot":-0.375,"puffi":-0.562,"pustul":-0.625,"puzzl":-0.25,"quail":0.25,"quarrelsom":-0.25,"rage":-0.458,"razz":-0.625,"reneg":0.25,"reprehend":-0.625,"reprimand":-0.5,"reproach":-0.5,"reproof":-0.625,"reprov":-0.5,"revok":0.375,"roughish":-0.625,"rubbish":-0.625,"safehold":-0.625,"scandalis":-0.312,"scandal":-0.312,"scarc":-0.625,"scarciti":-0.625,"schmo":-0.625,"schmuck":-0.625,"scoff":-0.5,"scof":-0.625,"scold":-0.375,"scoundrelli":-0.625,"scrambl":-0.25,"scrawl":-0.25,"scruffi":-0.625,"shiftless":-0.25,"shmo":-0.625,"shmuck":-0.625,"shoddi":-0.25,"skint":-0.625,"sleaz":-0.625,"smart":-0.625,"snappish":-0.5,"somber":-0.562,"sombr":-0.562,"sordid":-0.281,"speechless":-0.25,"spiritless":-0.625,"spurious":-0.625,"squandermania":-0.625,"sterilis":-0.625,"steril":-0.25,"stochast":-0.625,"stomach":-0.25,"storm":-0.4,"strictur":-0.625,"subnorm":-0.562,"subpoena":-0.375,"succor":-0.375,"succour":-0.375,"sullen":-0.437,"surli":-0.625,"swart":-0.625,"swarthi":-0.25,"swearword":-0.625,"swoon":-0.375,"tart":-0.25,"tasteless":-0.625,"tat":-0.625,"tawdri":-0.375,"threaten":-0.25,"thumb":-0.625,"tired":-0.625,"toil":-0.625,"treacher":-0.562,"trick":-0.625,"tsk":-0.625,"tsori":-0.625,"tut":-0.625,"tyrannicid":-0.625,"unaccept":-0.25,"unaccommod":-0.562,"unalien":-0.625,"unappetis":-0.625,"unappet":-0.625,"unargu":-0.25,"unattack":-0.625,"unattract":-0.25,"unauthoris":-0.687,"unauthor":-0.687,"unbear":-0.625,"unbeat":-0.625,"unbless":-0.625,"unceremoni":-0.5,"uncheck":-0.625,"unconcern":-0.562,"unconsci":-0.375,"uncultur":-0.625,"underworld":-0.687,"unendur":-0.625,"unenliven":-0.625,"unentitl":-0.625,"unexpress":0.25,"unfail":-0.625,"unflatt":-0.625,"ungener":-0.625,"unguard":-0.625,"unhappili":-0.625,"unhealthi":-0.25,"unholi":-0.25,"unknowing":-0.625,"unmodifi":-0.625,"unpersuad":-0.625,"unpleas":-0.25,"unprofit":-0.25,"unqualifi":-0.25,"unrecept":-0.625,"unreform":0.375,"unregular":-0.625,"unreli":-0.5,"unremun":-0.625,"unright":-0.625,"unsaf":-0.625,"unsanctif":-0.625,"unsatisfactori":-0.25,"unsatisfi":-0.25,"unscholar":-0.625,"unscrupul":-0.5,"unstatesmanlik":-0.625,"unsuas":-0.625,"unsuccess":-0.625,"untempt":-0.625,"unthink":-0.625,"untrac":-0.625,"unverifi":-0.625,"unwit":-0.375,"vinegarish":-0.562,"vinegari":-0.562,"vituper":0.25,"volatil":-0.562,"wail":-0.25,"wangl":-0.625,"war":-0.625,"weari":0.25,"weirdo":-0.562,"wile":-0.625,"wrangl":-0.375,"yokelish":-0.625,"abli":0.5,"abound":0.5,"aboveboard":0.5,"abreast":-0.25,"absorb":0.25,"acceler":0.5,"acclam":0.5,"accliv":0.5,"accolad":0.5,"accomplish":0.333,"achiev":-0.25,"acquiesc":0.5,"action":0.5,"adapt":0.25,"addict":-0.25,"address":0.375,"adequaci":0.5,"adjust":0.25,"adrenocorticotroph":0.5,"adrenocorticotrop":0.5,"advanc":0.333,"advert":0.25,"affluent":0.5,"agap":0.5,"agglomer":0.5,"agglom":0.5,"agil":0.25,"aglitt":0.5,"airworthi":0.5,"alright":0.5,"amalgam":0.25,"amendatori":0.5,"amentac":0.5,"amentifer":0.5,"anchorit":0.375,"answer":-0.25,"antimonopoli":0.5,"antitrust":0.5,"apart":0.5,"aplanat":0.5,"apocryph":0.5,"apodeict":0.5,"apodict":0.5,"appetis":0.5,"appet":-0.25,"applaus":0.5,"applic":0.25,"applicatori":0.5,"appos":0.5,"apropo":0.25,"apt":0.25,"arabl":0.5,"arbitrari":0.5,"aright":0.5,"artistri":0.5,"ascend":0.25,"ascens":0.5,"ascertain":0.375,"asept":0.5,"aspir":0.25,"assent":0.25,"assert":-0.375,"assess":0.5,"associ":0.25,"assuag":0.5,"attach":0.406,"attun":0.5,"autofluoresc":0.5,"autogam":0.5,"auxiliari":0.5,"avert":0.5,"avoid":0.25,"avouch":0.5,"avow":0.375,"aweari":0.5,"axen":0.5,"azur":0.25,"babelik":0.5,"beadlik":0.5,"beadi":0.5,"befit":0.375,"being":0.5,"belov":0.5,"betroth":0.25,"better":0.417,"bet":-0.25,"biddabl":0.5,"bigheart":0.5,"bimanu":0.5,"bindabl":0.5,"bookish":0.5,"boom":0.5,"border":0.5,"born":0.5,"bosomi":0.5,"bounden":0.5,"bounteous":0.25,"bounti":0.25,"bravura":0.5,"breathtak":0.5,"bridgeabl":0.5,"buffoonish":0.5,"built":0.5,"bullocki":0.5,"bunc":0.5,"buoyant":0.5,"busti":0.5,"buttonlik":0.5,"buttoni":0.5,"cadenc":0.5,"cadent":0.5,"callipygian":0.5,"callipyg":0.5,"canni":0.5,"canor":0.5,"casebook":0.5,"catch":0.5,"cathart":0.5,"causal":0.5,"cautious":0.5,"centralis":0.375,"central":0.375,"certif":0.281,"cerulean":0.25,"chain":0.5,"champlev":0.5,"characterist":0.5,"cheerili":0.5,"chief":0.5,"childlik":0.5,"chisel":0.5,"chubbi":0.5,"circumstanti":0.375,"citywid":0.5,"civil":0.25,"clabber":0.5,"clap":0.5,"cleanabl":0.5,"clink":0.375,"cloisonn":0.5,"cloistral":0.5,"cloudless":0.5,"clownish":0.5,"clownlik":0.5,"coalesc":0.375,"coax":0.5,"cocksur":0.25,"cogit":0.5,"color":-0.25,"colour":0.313,"combust":-0.25,"comeli":0.5,"commit":0.25,"complement":0.375,"complet":0.313,"compliment":0.5,"comprehend":0.375,"comprehens":0.313,"conciliatori":0.5,"condign":0.5,"conduct":0.5,"confeder":0.5,"confed":0.5,"confin":0.292,"conscion":0.5,"conscious":0.5,"consentan":0.5,"consenti":0.5,"consid":0.5,"constrain":0.5,"contract":0.25,"conventu":0.5,"convers":0.25,"copious":0.375,"copybook":0.5,"copyedit":0.5,"copyread":0.5,"coquettish":0.5,"corrupt":0.25,"corusc":0.5,"cosher":0.5,"countrywid":0.5,"crackerjack":0.5,"credibl":0.25,"cultiv":0.275,"cultivat":0.5,"curabl":0.375,"curvac":0.5,"dapper":0.5,"darl":0.375,"daytim":0.5,"debonnair":0.5,"declar":0.438,"defin":0.5,"definit":0.25,"deliber":0.5,"delux":0.5,"denazifi":0.5,"derestrict":0.5,"desegreg":0.25,"destabilis":-0.375,"detach":0.5,"determin":0.25,"diagnos":0.5,"dianoet":0.5,"didactic":0.5,"digest":0.5,"dignifi":0.375,"direct":0.375,"dirig":0.5,"disabus":0.5,"disavow":0.5,"discern":0.406,"disciplin":0.438,"discover":0.5,"discret":0.375,"disinfl":0.5,"disjoin":0.25,"distinguish":0.375,"distrust":-0.25,"doabl":0.5,"donat":0.5,"dress":0.313,"drill":0.5,"droll":0.5,"ducal":0.5,"ductil":0.5,"eclect":0.25,"ecumen":0.25,"edit":0.25,"effect":0.313,"effectu":0.438,"elasticis":0.5,"elastic":0.5,"elder":0.5,"elit":0.25,"eloqu":0.5,"emancip":-0.25,"embonpoint":0.25,"emend":0.25,"empathet":0.375,"empath":0.25,"enchain":0.5,"encompass":0.5,"endergon":0.5,"engross":0.438,"enhanc":0.375,"enough":0.5,"enur":0.5,"epideict":0.5,"epigrammat":0.5,"ergod":0.5,"erudit":0.5,"eugen":0.25,"evid":-0.25,"evidenti":0.5,"evit":0.5,"exchang":0.375,"exhaust":0.25,"exhort":0.5,"exhortatori":0.5,"exoter":0.5,"expediti":0.25,"explicit":0.5,"extant":0.5,"exterior":0.5,"extol":0.5,"extraordinair":0.5,"extravers":0.5,"extrovers":0.5,"face":0.5,"facilitatori":0.5,"factual":0.25,"fain":0.5,"familiaris":0.25,"familiar":0.25,"famish":-0.375,"fatherlik":0.5,"father":0.5,"featur":0.313,"fervenc":0.5,"fervid":-0.25,"fettl":0.5,"filmabl":0.5,"fission":0.5,"flirtati":0.5,"foldabl":0.5,"foldaway":0.5,"fold":0.5,"freebe":0.5,"freebi":0.5,"freeheart":0.5,"freewil":0.5,"fulgid":0.5,"fuse":0.5,"galvanis":0.5,"galvan":0.25,"gape":0.5,"gem":0.5,"gentlefolk":0.5,"germfre":0.5,"germin":0.5,"getabl":0.5,"gettabl":0.5,"ginger":0.5,"give":0.5,"glamoris":0.375,"glamour":0.25,"glint":0.5,"glister":0.5,"glitter":0.25,"glitteri":0.5,"glossi":0.25,"glow":0.5,"go":0.5,"godsend":0.5,"grandeur":0.5,"greater":0.5,"greatheart":0.5,"grip":0.5,"grovel":0.5,"gushi":0.5,"hammi":0.5,"handclap":0.5,"hear":0.5,"heartwarm":0.5,"hearti":0.5,"heed":0.375,"hermit":0.5,"histrion":0.5,"homeopathi":0.5,"homoeopathi":0.5,"honest":0.313,"honey":0.375,"hortat":0.5,"hortatori":0.5,"huge":0.25,"hurri":0.25,"hypnotis":0.25,"hypnot":0.25,"idolis":0.5,"idol":0.5,"ignesc":0.5,"immens":0.5,"immunocompet":0.375,"impel":0.375,"importun":0.5,"impress":0.25,"impression":0.5,"incorrupt":-0.375,"indefatig":0.25,"inebri":-0.25,"inflat":0.5,"influenti":0.5,"inlaid":0.5,"inpati":0.5,"insight":0.25,"integr":-0.25,"intellectu":0.25,"intend":0.5,"interact":0.375,"interest":0.375,"introvers":0.5,"introvert":0.25,"inur":0.25,"invalu":0.375,"invigor":0.313,"inviol":-0.281,"invitatori":0.5,"invit":0.25,"inwrought":0.5,"irremedi":0.5,"jewel":0.5,"jimdandi":0.5,"jimhickey":0.5,"judic":0.5,"key":0.25,"kindheart":0.5,"knockout":0.5,"kudo":0.5,"laborsav":0.5,"laboursav":0.5,"laden":0.5,"landscap":0.5,"laud":0.5,"laudat":0.5,"lauder":0.5,"law":0.375,"legal":0.25,"leg":0.5,"legibl":0.5,"limb":0.5,"loan":0.5,"loungewear":0.5,"loveli":0.5,"lucid":0.25,"lucullan":0.5,"lust":0.5,"macro":0.5,"maestro":0.5,"magniloqu":0.5,"maneuver":0.5,"manoeuvr":0.5,"marksmanship":0.5,"marriag":0.5,"match":-0.25,"matur":0.375,"medic":0.25,"medicin":0.375,"mesmeris":0.5,"minc":0.5,"mind":0.25,"ministr":-0.375,"mint":0.5,"miscibl":0.5,"mismat":0.5,"mistak":-0.25,"mistrust":-0.25,"mixabl":0.5,"modernis":0.5,"modern":0.25,"monast":0.5,"motil":0.5,"motiv":0.25,"moveabl":0.5,"muggin":0.5,"must":0.5,"myopia":0.5,"narcism":0.5,"narciss":0.5,"nationwid":0.5,"natti":0.5,"nearsighted":0.5,"neighborli":0.5,"neighbourli":0.5,"neutralis":-0.344,"neutral":-0.25,"newsworthi":0.5,"nightlong":0.5,"nimbl":0.25,"nonbelliger":0.5,"nonpartisan":0.375,"nonpartizan":0.375,"nose":0.5,"notic":0.25,"novel":0.5,"nubil":0.5,"numer":0.5,"obedi":0.375,"obtain":0.5,"oecumen":0.375,"omiss":0.25,"openhand":0.5,"oppos":0.5,"orient":0.25,"orthotrop":0.5,"otherworldli":0.5,"outdoorsi":0.5,"overambiti":0.5,"overconfid":0.25,"overdress":0.5,"overf":0.5,"overindulg":0.5,"overlook":0.25,"overnight":0.5,"overprais":0.5,"overr":0.5,"overt":0.5,"owlish":0.5,"palat":-0.25,"panel":0.5,"panopt":0.375,"paperboard":0.5,"participatori":0.5,"particularis":0.5,"particular":0.5,"patriot":0.25,"pawki":0.5,"pay":0.5,"pension":0.5,"pent":0.5,"permiss":0.438,"persev":-0.375,"persuas":0.25,"philanthrop":0.5,"pinkish":0.5,"piquant":0.5,"pithi":0.5,"placatori":0.5,"plaudit":0.5,"plausibl":0.25,"play":0.417,"pleasantri":0.5,"pleaser":0.5,"pliant":0.5,"plump":0.25,"plush":0.5,"pomad":0.5,"pornograph":0.25,"power":0.25,"praisworthi":0.5,"prayer":0.5,"preachi":0.5,"presumpt":0.5,"priceless":0.375,"prima":0.5,"princ":0.5,"princip":0.5,"principl":0.5,"prissi":0.5,"probat":0.375,"probatori":0.5,"procur":0.5,"propel":0.5,"protrus":0.5,"protrusil":0.5,"prove":0.5,"proven":0.5,"provid":0.5,"prowess":0.5,"proxim":0.5,"prudenti":0.5,"prurient":0.5,"publish":0.5,"pucka":0.5,"pukka":0.5,"qualiti":0.5,"quantifi":0.5,"raci":0.5,"raisabl":0.5,"raiseabl":0.5,"rapid":0.25,"ratifi":0.25,"reachabl":0.5,"recharg":0.5,"recogniz":0.25,"recover":-0.375,"rectifi":0.271,"rectitud":0.5,"reflect":0.375,"reform":0.25,"reformatori":0.25,"refreshen":0.5,"refurbish":0.5,"regent":0.5,"regul":0.25,"reinvigor":0.25,"remun":0.5,"renew":0.25,"rentabl":0.5,"repar":0.5,"repetiti":0.5,"replet":0.375,"represent":0.5,"rest":0.375,"restrict":0.25,"retain":0.5,"retract":0.5,"retrouss":0.5,"revitalis":0.5,"revit":0.25,"reviv":0.25,"reward":0.417,"rim":0.5,"ripen":0.5,"rivalri":0.5,"rivet":0.5,"rotat":0.5,"sacrosanct":0.5,"sage":0.375,"salabl":0.5,"saleabl":0.5,"saphead":0.5,"sapient":0.5,"sapienti":0.5,"save":0.5,"scholar":0.5,"schoolwid":0.5,"seamanlik":0.5,"seaman":0.5,"seamanship":0.5,"seeabl":0.5,"semipreci":0.5,"septicem":0.5,"sequin":0.5,"seraph":0.5,"sex":0.5,"shameless":-0.25,"sheath":0.25,"shew":0.5,"shockabl":0.5,"shrinkabl":0.5,"signal":0.5,"singabl":0.5,"slapstick":0.5,"slash":0.292,"slumberi":0.5,"soign":0.5,"soigne":0.5,"sold":0.5,"solvabl":0.25,"somat":0.5,"somnol":0.25,"song":0.5,"sonsi":0.5,"soul":0.375,"spangl":0.5,"spang":-0.25,"spank":0.25,"speak":0.5,"specialis":0.375,"special":0.25,"specif":0.25,"spellbound":0.5,"spendabl":0.5,"spiffi":0.5,"spirit":0.25,"sportsmanlik":0.5,"spright":0.5,"springi":0.5,"spruce":0.25,"spri":0.5,"sr":0.5,"stabilis":0.25,"stabil":0.25,"stapl":0.5,"star":0.375,"statesmanlik":0.5,"statesman":0.5,"steerabl":0.5,"stout":0.25,"stretchabl":0.5,"stretchi":0.5,"studious":0.375,"suasion":0.5,"subedit":0.5,"subject":0.25,"submerg":0.5,"submers":0.5,"submiss":0.5,"subsidis":0.25,"subsid":0.25,"subsist":0.5,"sunnili":0.5,"suprasegment":0.5,"sweetish":0.5,"swordsmanship":0.5,"symmetric":0.5,"sync":0.5,"tapestri":0.5,"telltal":0.5,"tendenci":0.5,"tendenti":0.25,"textbook":0.5,"think":0.25,"tickl":0.5,"tightfit":0.5,"tillabl":0.5,"timeli":0.5,"tingl":0.5,"tomfool":0.5,"tonic":0.5,"tonus":0.5,"topknot":0.5,"tourist":0.375,"touristi":0.5,"transfix":0.5,"transit":0.5,"transmitt":0.5,"transplant":0.5,"transport":0.5,"trendi":0.5,"tune":0.25,"twee":0.5,"twinkl":0.5,"ultramarin":0.5,"umbrella":0.5,"unambigu":0.25,"unblush":0.5,"unco":0.5,"uncompress":0.5,"unconstrain":0.5,"undamag":0.5,"unequivoc":0.375,"unfasten":0.5,"unhesit":0.5,"unimpass":0.5,"unimprison":0.5,"unknot":0.5,"unlax":0.5,"unpollut":0.5,"unprejud":0.5,"unsleep":0.5,"unstilt":0.5,"unstrain":0.5,"unusu":0.5,"unweari":0.375,"urban":0.375,"usabl":0.417,"useabl":0.417,"use":0.25,"util":0.25,"utilis":0.25,"utilitarian":0.438,"utiliz":0.5,"utopia":0.5,"uxori":0.25,"varied":0.5,"vast":0.5,"veraci":0.5,"vigor":0.5,"visibl":0.5,"visor":0.5,"vitrifi":0.5,"vivaci":0.375,"volubl":-0.375,"volunt":0.375,"wainscot":0.5,"wait":0.5,"wakeless":0.5,"wealthi":0.375,"weedless":0.5,"welfar":0.5,"whir":0.375,"wieldi":0.5,"wit":0.25,"wormlik":0.5,"youth":0.25,"abnorm":-0.5,"abras":-0.25,"abreact":-0.5,"accurs":-0.5,"accurst":-0.5,"adipos":-0.375,"admonish":-0.25,"advers":-0.437,"afebril":-0.5,"aftertast":-0.5,"aghast":-0.5,"agit":-0.5,"agnail":-0.5,"agranulocyt":-0.5,"aimless":-0.5,"airhead":-0.5,"alarum":-0.5,"albuminuria":-0.5,"algomet":-0.5,"alkalemia":-0.5,"alopec":-0.5,"ambul":0.375,"anaesthesia":-0.5,"analphabet":-0.25,"anarchi":-0.5,"anathematis":-0.5,"anathemat":-0.5,"anchylosi":-0.5,"anergi":-0.5,"anesthesia":-0.5,"angin":-0.5,"anginos":-0.5,"ankylosi":-0.5,"annihil":-0.25,"antemortem":-0.5,"antineoplast":0.25,"anxiolyt":-0.5,"aphak":-0.5,"aphonia":-0.5,"apocalyps":-0.5,"appel":-0.5,"armlet":-0.5,"arsehol":-0.5,"arthralgia":-0.5,"assail":-0.25,"assault":-0.25,"asthenospher":-0.5,"astraphobia":-0.5,"attack":-0.25,"attrit":-0.5,"autocrat":-0.5,"awol":-0.5,"aztreonam":-0.5,"backhand":0.25,"backswimm":-0.5,"bafflement":-0.5,"bariton":-0.5,"batrachomyomachia":-0.5,"beastli":-0.5,"beef":-0.5,"befuddl":-0.5,"begrim":-0.5,"behind":-0.5,"bellyach":-0.25,"bemus":-0.5,"beriberi":-0.5,"berserk":-0.5,"besieg":-0.25,"bewilder":-0.5,"biff":-0.375,"biserr":-0.5,"blare":-0.5,"blench":-0.5,"blitz":-0.437,"blitzkrieg":-0.5,"blush":-0.5,"bluster":-0.25,"bobbl":-0.5,"bodg":-0.5,"bollix":-0.5,"bollock":-0.5,"bolshi":-0.5,"boor":-0.5,"botch":-0.5,"boxershort":-0.5,"brackish":-0.5,"bronchit":-0.5,"bronchospasm":-0.5,"bruis":-0.5,"brunet":-0.375,"bullhead":-0.5,"bungl":-0.437,"burgundi":-0.5,"cacophon":-0.5,"cacophoni":-0.5,"cadaverin":-0.5,"caffer":-0.5,"caffr":-0.5,"calorif":-0.5,"cantanker":-0.375,"cari":-0.5,"catastroph":-0.375,"cavali":-0.5,"censori":-0.5,"chanc":-0.5,"characterless":-0.5,"cheapjack":-0.25,"chevali":-0.5,"chilli":-0.417,"christless":-0.5,"clumsi":-0.25,"coarsen":-0.5,"cod":-0.5,"coldcock":-0.5,"coldheart":-0.5,"cold":-0.25,"collid":-0.5,"comedown":-0.5,"commin":-0.375,"complain":-0.25,"complaint":-0.275,"complic":-0.25,"complicated":-0.5,"constabulari":-0.5,"contractur":-0.5,"copout":-0.5,"coronach":-0.5,"counterfeit":0.25,"countermov":-0.5,"crabbed":-0.5,"craven":-0.375,"cretin":-0.25,"crimin":-0.25,"criminatori":-0.5,"crinkl":-0.5,"crink":-0.5,"crippl":-0.25,"croak":-0.5,"crone":-0.5,"crookback":-0.5,"crossbon":-0.5,"crotcheti":-0.25,"cumulonimbus":-0.5,"cur":-0.5,"curs":-0.375,"daredevil":-0.375,"dastard":-0.5,"daunt":-0.25,"dauntless":-0.25,"debilit":-0.25,"default":-0.5,"defenceless":-0.312,"defenseless":-0.5,"deleteri":-0.5,"demon":-0.375,"depigment":-0.5,"deprec":-0.25,"dermatosi":-0.5,"despot":-0.25,"diatrib":-0.5,"dicey":-0.5,"dilapid":-0.5,"dip":-0.5,"dirg":-0.5,"disarray":-0.5,"discourtesi":-0.5,"disentangl":-0.275,"disfavor":0.313,"disfavour":0.313,"disgruntl":-0.25,"dislogist":-0.5,"disreput":-0.25,"dissatisfi":-0.25,"disson":-0.375,"distressing":-0.5,"dizzi":-0.5,"drawer":-0.5,"dyslogist":-0.5,"dysuria":-0.5,"eboni":-0.5,"edentul":-0.5,"elegist":-0.5,"embolus":-0.5,"endanger":-0.5,"enerv":-0.25,"enmesh":-0.5,"ensnarl":-0.5,"entangl":-0.5,"erythema":-0.5,"essenti":0.25,"evas":-0.437,"extremist":-0.5,"eyeless":-0.5,"facer":-0.5,"fals":-0.337,"fantasist":-0.5,"fantod":-0.5,"fardel":-0.5,"featherbrain":-0.5,"fell":-0.5,"feroci":0.25,"fiasco":-0.5,"fiendish":-0.25,"filagre":-0.5,"filigre":-0.5,"fillagre":-0.5,"finabl":-0.5,"fineabl":-0.5,"finic":-0.5,"finicki":-0.5,"firebomb":0.25,"flagiti":-0.5,"flimsi":-0.5,"flout":-0.5,"flouter":-0.5,"flub":-0.375,"fluster":-0.25,"folli":-0.5,"foolhardi":-0.5,"foothil":-0.5,"footsor":-0.5,"foredoom":-0.5,"fossilis":-0.5,"fossil":-0.5,"fractious":-0.333,"frenet":-0.25,"frore":-0.5,"fudg":-0.5,"fugaci":-0.25,"fug":-0.25,"fulmin":-0.25,"fuschia":-0.5,"futureless":-0.5,"gainless":-0.5,"gangdom":-0.5,"gangland":-0.5,"gangren":-0.25,"gauderi":-0.5,"gawk":-0.25,"gawker":-0.5,"gawp":-0.5,"gemfibrozil":-0.5,"giddi":-0.5,"glibli":-0.5,"glossalgia":-0.5,"glossodynia":-0.5,"glower":-0.375,"goblin":-0.5,"goggl":-0.25,"graffiti":-0.5,"graffito":-0.5,"granitelik":-0.5,"greenhorn":-0.5,"gridlock":-0.5,"griever":-0.5,"grimi":-0.375,"gripe":-0.25,"grisli":-0.5,"groan":-0.5,"gruesom":-0.25,"grungi":-0.5,"guanaco":-0.5,"guerilla":-0.5,"guerrilla":-0.5,"gynophobia":-0.5,"haemosiderosi":-0.5,"halfheart":-0.5,"hangnail":-0.5,"hapli":-0.5,"hardihood":-0.5,"harrow":-0.5,"heinous":-0.25,"hemosiderosi":-0.5,"hepatomegali":-0.5,"heterogen":-0.5,"heterolog":-0.5,"hisser":-0.5,"homeli":-0.5,"honkey":-0.5,"honki":-0.5,"hoodlum":-0.5,"hoodoo":-0.5,"hooligan":-0.25,"hoydenish":-0.5,"hullabaloo":-0.5,"humorless":-0.25,"humourless":-0.25,"humpback":-0.25,"hump":-0.5,"hunchback":-0.437,"hyperadrenocortic":-0.5,"hypermetropia":-0.5,"hypermetropi":-0.5,"hyperopia":-0.5,"hypoglycaemia":-0.5,"hypoglycemia":-0.5,"hypotens":-0.375,"iconoclasm":-0.5,"illiteraci":-0.5,"imbecil":0.25,"immol":-0.375,"immort":-0.312,"immunis":-0.5,"immun":-0.5,"impenetr":-0.25,"imperil":-0.5,"impolit":-0.5,"improprieti":-0.5,"impuiss":-0.375,"impun":-0.5,"inabl":-0.5,"inaesthet":-0.5,"inalien":-0.5,"inapplic":-0.25,"inapposit":-0.5,"inapt":-0.375,"inartist":-0.5,"inattent":-0.437,"incap":-0.312,"incertain":-0.5,"incognosc":-0.5,"incommodi":-0.5,"incompat":-0.5,"incomplet":-0.5,"inconsist":-0.25,"inconveni":-0.375,"incorrig":-0.5,"incredul":-0.5,"incriminatori":-0.5,"inculpatori":-0.5,"incurs":-0.5,"indecorum":-0.5,"indefens":-0.5,"indestruct":-0.5,"indig":-0.25,"indiscreet":-0.5,"indiscrimin":-0.5,"ineleg":-0.5,"inexcus":-0.25,"inexpedi":-0.5,"inexpert":-0.5,"inexplic":-0.5,"inexplicit":-0.5,"inframaxillari":-0.5,"infrequ":0.25,"inhuman":-0.25,"injuri":-0.275,"inquest":-0.5,"inquisit":-0.25,"insanitari":-0.5,"insincer":-0.375,"instabl":-0.5,"insuscept":-0.5,"intrepid":-0.25,"invad":-0.375,"invulner":-0.312,"irrelev":-0.5,"irresolut":-0.5,"jackanap":-0.5,"jeerer":-0.5,"jeopardis":-0.5,"jeopardi":-0.5,"jeremiad":-0.5,"jerki":-0.5,"jotter":-0.5,"kafir":-0.5,"keratalgia":-0.5,"keratectasia":-0.5,"keratonosi":-0.5,"kerfuffl":-0.5,"kleptomaniac":-0.5,"knotti":-0.5,"kyphot":-0.5,"lair":-0.5,"languid":-0.5,"languor":-0.5,"laryngopharynx":-0.5,"lassitud":-0.5,"leeri":-0.5,"legless":-0.5,"lepidot":-0.5,"lepros":-0.5,"livedo":-0.5,"locoism":-0.5,"loggi":-0.5,"logi":-0.5,"longsighted":-0.5,"loosen":-0.5,"lordot":-0.5,"lower":-0.375,"luckless":-0.5,"lugubri":-0.25,"lurid":-0.5,"lycopen":-0.5,"macabr":-0.5,"machilid":-0.5,"madhous":-0.5,"magnifi":-0.5,"maledict":-0.375,"maling":-0.25,"mandibular":-0.5,"mandibulofaci":-0.5,"mang":-0.5,"manslay":-0.5,"mastalgia":-0.5,"maxillomandibular":-0.5,"megacolon":-0.5,"megalohepatia":-0.5,"megalomaniac":-0.375,"megaloman":-0.5,"melanoderma":-0.5,"mele":-0.5,"messi":-0.375,"metralgia":-0.5,"mettl":-0.5,"mirthless":-0.5,"miscreat":-0.5,"misquot":-0.5,"misrepres":-0.5,"misspel":-0.5,"mistransl":-0.5,"moan":-0.5,"moonless":-0.5,"mourner":-0.5,"mug":-0.25,"mujahadeen":-0.5,"mujahadein":-0.5,"mujahadin":-0.5,"mujahedeen":-0.5,"mujahedin":-0.5,"mujahideen":-0.5,"mujahidin":-0.5,"murdere":-0.5,"mussi":-0.25,"mutil":-0.25,"mutism":-0.5,"mysophilia":-0.5,"mysophobia":-0.5,"name":0.375,"narcosi":-0.5,"nastili":-0.5,"necessari":-0.5,"necessit":-0.5,"needless":-0.25,"nephralgia":-0.5,"neurotrop":-0.5,"nightshirt":-0.5,"nocicept":-0.5,"nonchristian":-0.5,"nondescript":-0.5,"nonenterpris":-0.5,"noninflammatori":-0.5,"nonnatur":-0.5,"nonrhythm":-0.5,"nonslipperi":-0.5,"nontechn":-0.5,"nontradit":-0.5,"nosi":-0.25,"notepap":-0.5,"nubbl":-0.5,"nubbi":-0.25,"numb":-0.417,"nuthous":-0.5,"nyctalopia":-0.5,"nyctophobia":-0.5,"nympho":-0.5,"nymphomaniac":-0.375,"obstreper":-0.437,"offish":-0.5,"oospher":-0.5,"ophthalmia":-0.5,"ophthalm":-0.5,"ossifi":-0.5,"osteoporosi":-0.5,"osteosclerosi":-0.5,"outcri":-0.5,"overanxieti":-0.5,"overanxi":-0.5,"overbit":-0.5,"overbold":-0.5,"overmuch":0.25,"overreach":-0.5,"oversuspici":-0.5,"overtoler":-0.5,"pale":-0.375,"pant":-0.5,"paralog":-0.5,"paramnesia":-0.5,"paraphilia":-0.5,"parlous":-0.5,"patchi":-0.5,"pejor":-0.5,"peril":-0.375,"philistin":-0.5,"phrenet":-0.5,"picki":-0.5,"pighead":-0.5,"playlet":-0.5,"podalgia":-0.5,"poignanc":-0.375,"polic":0.25,"poltergeist":-0.5,"poss":-0.5,"posthum":-0.5,"powerless":-0.5,"prodrom":-0.375,"profan":-0.312,"profitless":-0.5,"prophet":-0.5,"proteinuria":-0.5,"provision":-0.5,"pri":-0.25,"pudg":-0.5,"pulseless":-0.5,"punctureless":-0.5,"punit":-0.5,"punitori":-0.5,"purposeless":-0.5,"puzzlement":-0.5,"pyromania":-0.5,"pyrosi":-0.5,"quash":-0.5,"quaver":-0.5,"querul":-0.375,"quietus":-0.5,"quixot":-0.25,"radioprotect":-0.5,"rancid":-0.25,"rare":-0.5,"rash":-0.312,"rasp":-0.25,"refractur":-0.5,"requiem":-0.5,"requiescat":-0.5,"requisit":0.375,"retch":-0.375,"rigid":-0.5,"rigor":-0.292,"rigour":-0.292,"riskless":0.25,"rockbound":-0.5,"rocklik":-0.5,"rooki":-0.5,"rope":-0.5,"roughneck":-0.5,"ruffian":-0.25,"ruin":-0.333,"ruinous":-0.5,"rumbl":-0.292,"sabotag":-0.375,"sacrilegi":-0.5,"samsara":-0.5,"sassi":-0.5,"satan":-0.5,"saturnin":-0.5,"savag":-0.25,"scapegrac":-0.5,"scath":-0.375,"scorner":-0.5,"scratch":-0.5,"screwi":-0.5,"sear":-0.5,"secondo":-0.5,"semidark":-0.5,"settl":-0.5,"sever":-0.344,"shambol":-0.5,"shatter":-0.375,"shelter":-0.5,"shibah":-0.5,"shit":-0.292,"shiva":-0.5,"shivah":-0.5,"shock":-0.339,"shopsoil":-0.5,"shout":-0.5,"sic":-0.5,"sigmoidoscopi":-0.5,"simmpl":-0.5,"simpleton":-0.5,"sin":-0.275,"skreigh":-0.5,"slick":0.25,"slub":-0.5,"slyboot":-0.5,"smother":-0.5,"sneerer":-0.5,"sneezi":-0.5,"snitch":-0.5,"snoopi":-0.25,"sociopath":-0.375,"somatosens":-0.5,"sour":-0.25,"spars":-0.5,"sparsiti":-0.5,"speakeasi":-0.5,"specious":-0.5,"spermicid":-0.5,"spondyl":-0.5,"sporad":-0.5,"sprain":-0.5,"spurner":-0.5,"squab":-0.5,"squabbi":-0.5,"squawk":-0.437,"stagger":0.25,"standoffish":-0.5,"stereotyp":-0.5,"stickpin":-0.5,"sting":-0.35,"stingi":-0.25,"stodgi":-0.5,"stogi":-0.5,"strafer":-0.5,"strait":-0.312,"stratus":-0.5,"stress":-0.437,"stroppi":-0.5,"sub":-0.5,"subjug":-0.25,"succuss":-0.5,"suffoc":-0.5,"supercili":-0.375,"superfat":-0.5,"superstit":-0.5,"swayback":-0.5,"swipe":-0.5,"synov":-0.5,"tatter":-0.25,"tatti":-0.5,"tearga":-0.5,"technophobia":-0.5,"temerari":-0.5,"tenesmus":-0.5,"terror":-0.25,"thanatophobia":-0.5,"thankless":-0.5,"thermalgesia":-0.5,"threnodi":-0.5,"thug":-0.5,"thugge":-0.5,"thundercloud":-0.5,"token":-0.5,"tokenish":-0.5,"tomboyish":-0.5,"torch":-0.5,"torpedo":-0.5,"torpid":-0.312,"torturesom":-0.5,"toxic":0.25,"traduc":-0.25,"tremul":-0.5,"triskaidekaphob":-0.5,"truant":-0.5,"trucul":-0.5,"tussl":-0.375,"twilight":-0.5,"twilit":-0.5,"uglifi":-0.5,"ultra":-0.5,"unaccredit":-0.5,"unaesthet":-0.5,"unag":-0.5,"unapologet":-0.5,"unappar":-0.5,"unappeas":-0.5,"unapprehens":-0.5,"unartist":-0.5,"unavail":-0.25,"unbecom":-0.5,"unbigot":-0.5,"unbrac":-0.5,"unbrand":-0.5,"unbridg":-0.5,"unchristian":-0.25,"uncom":-0.5,"uncompens":-0.5,"uncomprehend":-0.5,"unconstitut":-0.5,"undeferenti":-0.5,"underbr":-0.5,"underdevelop":-0.312,"underdraw":-0.5,"underf":-0.5,"underlip":-0.5,"underman":-0.5,"undernourish":-0.5,"underproduct":-0.5,"undersid":-0.5,"understaf":-0.5,"undersurfac":-0.5,"undiscrimin":-0.5,"undistinguish":-0.25,"undisturb":-0.5,"undramat":-0.5,"unduti":-0.5,"uneag":-0.5,"uneffect":-0.5,"unemploy":-0.375,"unendow":-0.5,"unenterpris":-0.5,"unenthusiast":-0.5,"unexcit":-0.5,"unexplain":-0.312,"unfear":-0.5,"unfeminin":-0.5,"unfirm":-0.5,"unflinch":-0.5,"unforbear":-0.5,"unhazard":-0.5,"unhear":-0.5,"unheat":-0.5,"unhelp":-0.25,"unhumor":-0.5,"uniform":-0.25,"unillumin":0.25,"unimpos":-0.5,"unintellig":-0.5,"unintend":-0.5,"unintimid":-0.5,"uninvent":-0.5,"unjustifi":-0.25,"unlett":-0.5,"unlicenc":-0.5,"unlicens":-0.5,"unloc":-0.5,"unlov":-0.5,"unmalici":-0.5,"unmechan":-0.5,"unmelod":-0.5,"unmethod":-0.5,"unmind":-0.5,"unobtain":-0.5,"unobtrus":-0.5,"unoffici":-0.375,"unoppos":-0.5,"unorigin":-0.25,"unpalat":-0.312,"unparliamentari":-0.5,"unpersuas":-0.25,"unpicturesqu":-0.5,"unplay":-0.5,"unpolish":-0.5,"unprincipl":-0.5,"unprocur":-0.5,"unproduct":-0.312,"unprotected":-0.5,"unprov":-0.25,"unproven":-0.5,"unreason":-0.25,"unredeem":-0.25,"unrefin":-0.5,"unregener":-0.25,"unrepair":-0.5,"unrespect":-0.5,"unruli":-0.292,"unsalari":-0.5,"unsanct":-0.5,"unsanitari":-0.25,"unsat":-0.5,"unsati":-0.5,"unsav":-0.5,"unschool":-0.5,"unseem":-0.5,"unselect":-0.25,"unsexi":-0.5,"unshap":-0.25,"unskil":-0.5,"unsnarl":-0.5,"unstabl":-0.5,"unsterilis":-0.5,"unsteril":-0.5,"unstimul":-0.5,"unstylish":-0.5,"unsurmount":-0.5,"unsymmetr":-0.5,"untact":-0.5,"untam":-0.5,"untaught":-0.5,"untechn":-0.5,"untend":-0.5,"unthank":-0.5,"untidi":-0.375,"untradit":-0.5,"untrust":-0.5,"untutor":-0.5,"unwarm":-0.5,"unwel":-0.5,"unwil":-0.375,"unwoman":-0.5,"upset":-0.5,"uratemia":-0.5,"uricaciduria":-0.5,"urodynia":-0.5,"vaniti":-0.5,"vault":-0.5,"verruca":-0.5,"vertigin":-0.5,"vicious":-0.25,"violat":-0.5,"vitup":-0.5,"vixenish":-0.5,"vocifer":-0.5,"wanton":-0.5,"waspish":-0.5,"wavelik":-0.5,"waylay":-0.5,"weather":-0.5,"weatherworn":-0.5,"weed":-0.5,"weirdi":-0.5,"wheez":-0.5,"whelm":-0.5,"whiney":-0.5,"whini":-0.5,"whippersnapp":-0.5,"whitey":-0.5,"wil":0.313,"will":0.25,"witchlik":-0.5,"woozi":-0.5,"wretched":-0.5,"xanthosi":-0.5,"yob":-0.5,"yobbo":-0.5,"yobo":-0.5,"aah":0.375,"abandon":-0.3,"abat":-0.25,"abbess":0.375,"abbot":0.375,"abdic":0.375,"abil":0.375,"abloom":0.375,"about":0.375,"abov":0.25,"absolv":0.375,"abuzz":0.375,"accent":0.375,"acclivit":0.375,"accumul":0.375,"accuraci":0.313,"accustom":0.313,"acetifi":0.313,"acidifi":0.313,"acknowledg":0.375,"acoust":-0.25,"acquaint":0.25,"acquir":-0.25,"acquit":0.375,"acrobat":0.25,"actinomorph":0.375,"activ":0.25,"activist":0.375,"actual":0.25,"actuat":0.25,"addabl":0.375,"addibl":0.375,"addit":0.375,"adher":0.375,"adienc":0.375,"adjunct":0.375,"adoxographi":0.375,"adscript":0.375,"adulatori":0.375,"adult":0.438,"advertis":0.25,"advisor":0.375,"aerob":0.25,"aerophil":0.25,"affianc":0.375,"affin":0.375,"afford":0.375,"aflutt":0.375,"agglutin":0.375,"aggrandis":0.375,"aggrandiz":0.375,"agre":0.375,"aid":0.375,"airborn":0.375,"alacrit":0.375,"align":0.375,"alik":0.375,"alimoni":0.375,"aliquot":0.375,"aliv":0.411,"all":0.375,"allegro":0.375,"alli":0.25,"allov":0.375,"allow":0.458,"aloof":0.375,"altruist":0.25,"amaz":0.25,"ambidexter":0.375,"ambidextr":0.25,"ambient":0.375,"ambiti":0.25,"ambival":-0.25,"ambrosi":0.438,"ambrosian":0.438,"amelior":0.25,"amethyst":0.375,"amphipod":0.375,"amphiprostylar":0.375,"amphiprostyl":0.375,"amphiprot":0.375,"amphistylar":0.313,"amphoter":0.375,"ampl":0.375,"ampli":0.438,"anaerobiot":0.375,"analept":0.375,"analog":0.313,"analyt":0.313,"anastigmat":0.375,"angwantibo":0.375,"animis":0.375,"announc":0.375,"anoint":0.375,"anomalist":0.375,"antacid":0.375,"anther":0.375,"antiaircraft":-0.375,"antiblack":0.375,"antic":0.375,"anticip":0.375,"antithet":0.375,"antitox":0.375,"anymor":0.375,"apic":0.375,"apocarp":0.375,"apophat":0.375,"apothegmat":0.313,"apparel":0.375,"appar":0.313,"appeal":0.25,"appetising":0.375,"appetizing":0.375,"appli":0.375,"apprehend":0.375,"arbitr":0.25,"arcanum":0.375,"archimandrit":0.375,"architectur":0.375,"ardent":0.417,"arguabl":-0.25,"aristocrat":0.375,"arithmet":0.25,"armor":0.333,"armour":0.313,"arous":0.417,"array":0.375,"arrest":0.375,"arriv":0.313,"artefact":0.375,"artifact":0.375,"artist":0.417,"art":0.375,"ascent":0.333,"asset":0.375,"assimil":0.25,"associatori":0.375,"asterisk":0.375,"astern":0.375,"astir":0.375,"asund":0.375,"asymptomat":0.375,"ataract":0.375,"atarax":0.375,"atavist":0.375,"athlet":0.292,"atrip":0.375,"attain":0.25,"attent":-0.25,"attest":0.313,"attractor":0.292,"attribut":0.375,"audibl":0.25,"august":0.375,"auspic":0.375,"autogen":0.375,"autoload":0.375,"autom":0.25,"autonom":0.375,"award":-0.25,"aweigh":0.313,"awestricken":0.375,"awestruck":0.375,"baccifer":0.375,"back":0.333,"backslid":0.375,"backstag":0.375,"bactericid":0.375,"balanc":0.375,"ballet":0.375,"balli":0.375,"bandag":-0.375,"bang":-0.25,"bankrol":0.375,"bargain":0.25,"bar":0.375,"barricad":0.375,"bash":-0.25,"beami":0.313,"beardown":0.375,"beatitud":0.375,"beautif":0.375,"beautifi":0.417,"bedder":0.375,"beefi":0.375,"befog":-0.25,"behalf":0.313,"be":0.313,"belief":0.375,"believ":0.25,"berri":0.375,"betim":0.375,"beverag":0.375,"bhakti":0.375,"biannual":0.375,"bibul":0.375,"bigger":0.375,"biggish":0.375,"bigmouth":0.375,"bimestri":0.313,"bimonth":0.375,"biochemist":0.375,"biolog":0.25,"bioluminesc":0.375,"bipartisan":0.375,"bipartizan":0.375,"biweek":0.375,"biyear":0.375,"blabbi":0.375,"blackbal":0.375,"blameless":0.375,"blandish":0.375,"blessed":0.375,"blockad":0.25,"bloodi":0.25,"bloom":0.375,"blueish":0.375,"bluff":-0.437,"bluish":0.375,"boatmanship":0.375,"bodi":0.375,"bodybuild":0.375,"bombast":0.375,"bombil":0.25,"bombin":0.25,"bonanza":0.313,"bondabl":0.438,"boon":0.375,"boost":0.275,"boozi":0.375,"boyish":0.375,"boylik":0.375,"braini":0.375,"braw":0.375,"brawni":0.25,"breadlin":0.375,"breadwinn":0.375,"breakaway":0.375,"breastfe":0.375,"breath":-0.25,"breed":0.25,"breezi":0.313,"brief":0.375,"bright":-0.25,"brim":0.25,"brimful":0.375,"brisk":0.25,"broad":0.375,"brocad":0.375,"broodi":0.25,"brownish":0.375,"brumous":0.375,"bubbl":-0.312,"buff":0.375,"buffooneri":0.375,"buird":0.375,"bulki":0.375,"bumpkin":-0.25,"burgeon":0.375,"burlesqu":0.313,"bur":0.375,"burnabl":0.375,"bushel":0.375,"businesslik":0.313,"butyrac":0.375,"buxom":0.25,"buzz":0.375,"cabalist":0.375,"cackel":0.375,"cadg":0.375,"cairn":0.375,"calcul":0.25,"calend":0.375,"caller":0.313,"calligraphi":0.375,"callous":0.375,"campestr":0.375,"canari":0.375,"candent":0.375,"cannib":0.375,"canonis":0.25,"canon":0.25,"capaci":0.375,"cardin":0.313,"carmin":0.375,"carnat":0.375,"caroch":0.375,"carol":0.375,"carpet":0.375,"cashabl":0.375,"cash":0.375,"cataphat":0.375,"catechesi":0.375,"categoremat":0.375,"caucus":0.375,"cautionari":0.313,"caw":0.375,"centrex":0.375,"centrist":0.375,"centrosymmetr":0.375,"ceram":0.375,"cerebr":0.375,"ceremoni":0.25,"ceris":0.375,"cert":0.375,"certain":0.375,"challeng":-0.25,"chang":-0.25,"charisma":0.375,"chariti":0.275,"chartreus":0.375,"cheeselik":0.375,"cherri":0.375,"chichi":0.25,"childbear":0.375,"childcar":0.375,"child":0.375,"chiliast":0.375,"chin":-0.375,"china":0.313,"chinawar":0.375,"chirographi":0.375,"chockablock":0.375,"chock":0.25,"chronic":0.333,"chummi":0.25,"church":0.25,"cinnabar":0.375,"circumfer":0.375,"cissi":0.375,"citizen":0.375,"claimant":0.375,"clandestin":0.375,"clarifi":0.375,"clariti":0.438,"classic":0.375,"classi":0.375,"clastic":0.438,"clean":0.25,"cleans":0.25,"clear":0.438,"clearcut":0.375,"clement":0.438,"climbabl":0.438,"clinquant":0.375,"clown":0.313,"cloy":0.25,"cloze":0.375,"clubabl":0.375,"clubbabl":0.375,"clubbish":0.375,"cluck":0.375,"cluster":0.438,"coagul":0.375,"cockamami":0.375,"coerciv":0.375,"coexist":0.375,"coextens":0.375,"cognit":0.375,"cognoscent":0.375,"coher":0.406,"coincid":0.25,"collaps":0.375,"collater":0.375,"collect":-0.25,"coloss":0.375,"column":0.375,"combin":0.375,"combur":0.375,"comedi":0.375,"comic":0.25,"commemor":0.25,"commensur":0.25,"commiss":0.313,"commonw":0.375,"communic":0.313,"commut":0.375,"compar":-0.25,"compartment":0.375,"compartmentalis":0.375,"compendi":0.375,"compens":0.292,"compli":0.375,"compos":0.375,"compress":0.25,"compulsori":0.375,"concertis":0.375,"concert":0.25,"concis":0.375,"concord":0.375,"confer":0.375,"conferr":0.375,"confidenti":0.469,"configur":0.375,"confluent":0.375,"conformist":0.375,"congest":0.25,"congruent":0.438,"conjectur":0.375,"conjoin":0.375,"conjoint":0.375,"connected":0.313,"connect":0.375,"conniv":0.375,"connoisseur":0.375,"conquer":-0.25,"conscienti":0.375,"conscript":0.25,"consequenti":0.25,"conservatoir":0.375,"consolid":0.25,"conspicu":0.313,"constanc":0.292,"constant":0.292,"constitu":0.375,"constitut":0.375,"constrict":0.25,"consult":0.25,"contagi":0.438,"contempl":0.25,"contermin":0.333,"contigu":0.333,"contin":0.313,"contradistinguish":0.375,"controversi":-0.25,"controversialist":0.375,"conveni":0.438,"convent":0.25,"convert":0.25,"coolhead":0.375,"cooper":0.313,"coordin":0.25,"copul":0.375,"copyright":0.375,"cordat":0.375,"cordiform":0.375,"corefer":0.375,"cornucopia":0.438,"corpor":0.375,"correspond":0.375,"cosmet":0.25,"cotermin":0.375,"cotton":0.375,"countervail":0.313,"coupl":0.375,"courtesi":0.375,"couth":0.375,"cozi":0.25,"craft":0.25,"crank":0.375,"crash":0.375,"creak":0.375,"credenti":0.375,"credential":0.375,"crepit":0.25,"crest":0.375,"crisp":0.271,"criteri":0.375,"criterion":0.25,"crocket":0.375,"crosshair":0.375,"cruis":0.375,"cuddlesom":0.375,"cudd":0.375,"cultur":0.25,"cumul":0.375,"cuneat":0.375,"curios":0.375,"curvi":0.375,"cushion":0.25,"cushioni":0.375,"custodi":0.375,"customari":0.375,"daedal":0.375,"dainti":0.438,"dandifi":0.375,"dandyish":0.375,"daughter":0.375,"daylight":0.313,"dazzl":0.313,"deari":0.375,"decenc":0.438,"decentralis":0.375,"decentr":0.375,"declamatori":0.375,"declassifi":0.375,"decompress":0.313,"decriminalis":0.375,"decrimin":0.375,"deduc":0.375,"deed":0.375,"defog":0.375,"defrost":0.375,"degener":0.375,"dehumanis":0.375,"dehuman":0.375,"deign":0.375,"delect":0.375,"delib":0.375,"delibl":0.375,"delin":0.375,"delous":0.375,"deltoid":0.375,"demagog":0.375,"demagogu":0.375,"demist":0.375,"demonstr":0.25,"demur":-0.312,"demythologis":0.375,"demytholog":0.375,"deniabl":0.375,"denomin":0.375,"depict":0.375,"deplet":0.375,"depreci":-0.375,"depriv":0.375,"deriv":0.25,"descend":-0.25,"destalinis":0.25,"destalin":0.25,"detect":-0.25,"determinist":0.375,"detick":0.375,"develop":-0.375,"deviant":-0.25,"deviat":-0.25,"devitalis":-0.25,"devit":-0.25,"devout":0.438,"diabat":0.375,"diachron":0.375,"diagonaliz":0.375,"dialysi":0.375,"dicynodont":0.375,"didact":0.25,"differenti":0.25,"dimens":0.375,"diminish":0.375,"disclos":0.375,"discov":0.375,"discreet":0.333,"discriminatori":0.375,"discurs":0.438,"disembodi":0.375,"disench":0.375,"disengag":0.292,"disinfect":-0.25,"disjunct":0.25,"dismiss":-0.375,"disput":-0.375,"dissoci":0.375,"dissolubl":0.375,"dissolv":0.25,"distant":0.275,"distens":0.375,"distich":0.375,"distinct":0.425,"distort":0.375,"distraint":0.375,"diverg":0.375,"divin":0.25,"divorc":0.25,"dodder":-0.25,"dodderi":0.375,"doglik":0.375,"domest":0.25,"done":0.375,"doula":0.375,"downmarket":0.375,"downright":0.375,"downsiz":0.375,"dramat":0.25,"drench":0.375,"dripless":0.375,"drive":0.438,"drolleri":0.313,"dromaeosaur":0.375,"drunk":-0.25,"drunken":0.375,"duad":0.375,"ducki":0.375,"due":0.25,"duplic":0.25,"duplicat":0.375,"durabl":-0.375,"dustlik":0.375,"duteous":0.375,"duti":0.375,"dyad":0.375,"dynam":0.25,"earn":0.25,"earthlik":0.313,"eater":0.313,"eccrin":0.375,"echo":0.375,"eclat":0.375,"edutain":0.375,"effac":0.375,"effemin":0.375,"effici":0.375,"effloresc":0.375,"effulg":0.375,"eightpenni":0.375,"either":0.375,"electrifi":0.375,"eleg":-0.375,"elev":0.333,"elitist":0.375,"elong":0.313,"elucid":0.25,"emascul":0.375,"embellish":0.344,"embodi":0.375,"emboss":0.375,"emerg":0.313,"emin":0.438,"emmetrop":0.375,"empathi":0.375,"emphas":0.25,"emphat":0.292,"employ":0.25,"empow":0.25,"empyr":0.375,"empyrean":0.375,"encloth":0.375,"encomium":0.375,"endermat":0.375,"enderm":0.375,"endogam":0.313,"endogami":0.375,"endors":0.375,"endow":0.375,"endu":0.375,"energet":0.313,"energi":0.271,"enfeoff":0.25,"enforc":-0.25,"engorg":0.375,"enlighten":0.313,"ennobl":0.438,"enorm":0.25,"enrich":0.313,"enski":0.375,"entitl":0.375,"envious":0.375,"epic":0.375,"epicur":0.375,"epizoot":0.375,"equal":0.25,"equat":0.375,"equidist":0.375,"equip":0.25,"equiprob":0.375,"equipt":0.375,"eras":0.375,"erectil":0.313,"eremit":0.375,"establish":0.275,"estrous":0.375,"ethnic":0.375,"etiquett":0.375,"eucaryot":0.375,"eukaryot":0.375,"eulogis":0.375,"eulogium":0.375,"eulog":0.375,"eupneic":0.375,"eupnoeic":0.375,"euthen":0.375,"even":0.375,"evidentiari":0.313,"evoc":0.375,"exactitud":0.375,"exaugur":0.375,"exceed":0.375,"except":0.375,"excursionist":0.375,"excurs":0.375,"exemplari":0.458,"exemplifi":0.375,"exist":0.333,"expansil":0.375,"expend":0.438,"experienti":0.375,"expertis":0.375,"expiabl":0.375,"explanatori":0.375,"exploit":0.375,"exposit":0.375,"expositori":0.375,"exquisit":0.25,"extend":0.25,"extens":0.25,"extensil":0.375,"extravert":0.375,"extrovert":0.375,"fabul":0.333,"facil":0.375,"facilit":-0.25,"fail":-0.261,"fair":0.344,"fancier":0.375,"farandol":0.375,"faraway":0.375,"farther":0.313,"fashion":0.375,"fathom":0.438,"fatten":0.25,"faultless":0.375,"favorit":0.438,"favourit":0.438,"feat":0.375,"feder":0.375,"fee":0.25,"fetter":0.375,"fictil":0.333,"fiduci":0.333,"fill":0.25,"fine":-0.375,"finess":0.375,"fissil":0.375,"flammabl":0.375,"flawless":0.25,"fleet":0.375,"flexibl":0.313,"floodlight":0.375,"floodlit":0.375,"flow":0.375,"fluent":0.438,"fluid":0.35,"flush":0.375,"focus":0.375,"focuss":0.375,"foodi":0.375,"fool":0.292,"footfal":0.375,"footloos":0.375,"foppish":0.375,"forbear":0.313,"forc":-0.281,"fored":0.375,"foremost":0.292,"forens":0.313,"forethought":0.375,"formal":0.25,"formalis":0.25,"formid":-0.25,"forthcom":0.292,"forthright":0.375,"fortifi":0.313,"fortnight":0.375,"fosterag":0.438,"fourhand":0.375,"fourpenni":0.375,"foursquar":0.375,"frank":0.313,"franklin":0.375,"free":-0.25,"freeborn":0.375,"freehand":0.25,"freeload":0.375,"freeli":0.375,"freemail":0.375,"freshen":0.458,"freshman":0.375,"friendless":0.375,"frier":0.375,"frothi":0.375,"fuck":0.375,"fugit":0.375,"fulgur":0.375,"full":0.375,"function":0.25,"fundament":0.417,"fungibl":0.375,"funrun":0.375,"furnish":0.313,"gag":0.375,"gallantri":0.458,"galor":0.375,"garb":0.375,"gardant":0.375,"garment":0.375,"gastronom":0.375,"geld":0.375,"genealogist":0.375,"generat":0.313,"generos":0.375,"generous":0.375,"genial":0.25,"genius":0.35,"germicid":0.375,"get":0.375,"gigot":0.375,"gild":0.25,"gilt":0.375,"gimbal":0.25,"girlish":0.375,"glamor":0.25,"glamouris":0.25,"glanc":0.375,"glass":-0.25,"glib":0.375,"glimmeri":0.375,"glisten":0.25,"glorif":0.292,"glorifi":0.281,"glori":0.333,"gluey":0.375,"glutin":0.375,"glut":0.375,"gnostic":0.375,"gobbl":0.375,"gobsmack":0.375,"godlik":0.313,"god":0.313,"gold":0.375,"gong":0.375,"gooey":0.375,"goofi":0.375,"gourmet":0.375,"gracil":0.375,"grandmast":0.375,"grassroot":0.375,"great":0.375,"greenish":0.375,"gregari":-0.375,"grin":0.375,"groom":0.375,"grown":0.375,"grownup":0.375,"gruntl":0.375,"guardant":0.375,"guid":0.438,"guiltless":0.375,"gumption":0.313,"habili":-0.25,"habitu":0.25,"hand":0.375,"handicraft":0.313,"handmad":0.375,"handrest":0.375,"handsewn":0.375,"handstamp":0.25,"handstitch":0.375,"hardcor":0.375,"harlequinad":0.375,"harpoon":0.375,"hastat":0.375,"head":0.281,"headi":0.333,"heat":0.313,"heaven":0.375,"hebdomad":0.375,"hebdomadari":0.375,"hefti":0.333,"heighten":0.375,"hep":0.375,"hermet":0.375,"heroic":0.25,"het":0.375,"heterosi":0.375,"heyday":0.375,"hick":-0.25,"hike":0.375,"hip":0.375,"hobbyist":0.375,"holidaymak":0.375,"holometabol":0.375,"holi":0.25,"homemad":0.375,"homer":0.375,"homeward":0.25,"hominin":0.375,"homocerc":0.375,"homogen":0.25,"homophob":0.375,"honorarium":0.375,"hoodwink":0.313,"horn":0.375,"horni":0.292,"horsemanship":0.375,"hosanna":0.375,"hotshot":0.375,"hour":0.375,"housebroken":0.375,"housecraft":0.375,"hulk":0.375,"hulki":0.375,"human":-0.25,"humding":0.375,"humil":0.313,"humong":0.375,"husband":0.313,"hydric":0.375,"hydrolyz":0.375,"hygrophyt":0.375,"hymn":0.25,"hyperact":0.375,"hyperpigment":0.375,"hyperthyroid":0.375,"hyperton":0.313,"hypothet":0.375,"idealist":0.25,"ignit":0.375,"ilk":0.375,"illustr":0.438,"imit":0.333,"imman":0.438,"imparti":0.375,"imperturb":0.375,"import":0.25,"imprimatur":0.375,"in":0.333,"inbuilt":0.375,"incandesc":0.438,"incarn":0.313,"inclus":0.375,"incommun":0.375,"incorpor":0.25,"incred":0.375,"increment":0.375,"independ":0.375,"indicatori":0.375,"individu":0.25,"individualist":0.313,"indors":0.375,"indrawn":0.375,"indu":0.375,"industrialis":0.375,"industrialist":0.375,"industri":0.25,"infatu":0.375,"inflamm":0.375,"inflationari":0.375,"inflect":0.25,"influenc":0.333,"informatori":0.375,"infrason":0.375,"ingest":0.313,"ingratiatori":0.438,"inhibitori":0.375,"inject":0.375,"inmarriag":0.375,"inning":0.375,"inquir":0.375,"insinu":0.375,"instantan":-0.25,"instinct":-0.375,"institutionalis":0.375,"institution":0.375,"instruct":0.25,"instrument":0.25,"insur":0.25,"intact":0.344,"intellect":0.375,"intension":0.375,"interchang":0.375,"interchurch":0.375,"interdenomin":0.375,"interfaith":0.375,"intermedi":0.375,"intermolecular":0.375,"interoper":0.375,"interperson":0.375,"intersexu":0.313,"intox":0.25,"intragroup":0.375,"intrigu":0.438,"intrins":0.25,"introductori":0.292,"investig":0.375,"investigatori":0.375,"ionic":0.375,"irrepress":0.375,"irreproach":0.375,"isol":0.271,"isotrop":0.375,"jade":0.375,"jail":0.375,"jangl":0.375,"japeri":0.375,"jaunt":0.25,"jazzi":0.375,"jingl":0.375,"jing":0.375,"jitter":0.375,"join":0.375,"joint":0.292,"joyrid":0.375,"jubile":0.375,"juici":0.344,"junket":0.375,"kabbalist":0.25,"kempt":0.375,"ki":0.375,"killjoy":0.375,"kinaesthesi":0.375,"kinesthesi":0.375,"kinesthet":0.375,"kinglik":0.375,"king":0.375,"knack":0.375,"knight":0.313,"knockdown":0.375,"knock":0.375,"knowing":0.438,"known":0.375,"lacon":0.375,"lactat":0.375,"lamplit":0.375,"larg":0.411,"larger":0.375,"largish":0.375,"lascivi":0.375,"late":0.375,"latest":0.375,"lavend":0.375,"lavish":0.375,"lead":0.344,"lefti":0.313,"legalis":0.25,"legitim":0.375,"legitimatis":0.375,"legitimat":0.375,"legitimis":0.375,"leglik":0.375,"leisur":0.375,"lend":0.333,"lengthen":0.375,"lengthi":0.375,"lenient":0.292,"lenifi":0.375,"lenten":0.375,"ley":0.375,"liber":0.25,"liberalist":0.25,"libertarian":0.25,"libidin":0.375,"lighten":0.396,"lilac":0.375,"lilt":0.375,"limber":0.333,"limit":0.438,"limnolog":0.25,"link":0.375,"lionheart":0.375,"liquid":-0.281,"lissom":0.375,"literaci":0.375,"liter":0.333,"lith":0.375,"lithesom":0.375,"liturg":0.375,"liturgiolog":0.375,"live":0.479,"liveborn":0.375,"livelong":0.375,"long":0.264,"longish":0.375,"look":0.375,"lope":0.375,"loverlik":0.375,"lover":0.375,"lubrici":0.313,"lucul":0.375,"ludicr":0.313,"luscious":0.438,"lush":0.375,"lustili":0.375,"lux":0.375,"made":0.333,"magenta":-0.25,"maggoti":0.375,"magnanim":0.25,"magnetis":0.375,"magnet":0.375,"maidenlik":0.375,"maiden":0.25,"main":0.375,"major":0.25,"makeov":0.375,"mandatori":0.375,"man":0.25,"manicur":0.375,"manifest":-0.25,"manqu":0.375,"manumit":0.375,"mark":0.417,"market":0.375,"marri":0.25,"masochist":0.25,"massiv":0.281,"masterstrok":0.375,"mate":0.25,"matern":0.313,"mathemat":0.375,"matron":0.375,"mauv":0.375,"maven":0.375,"mavin":0.375,"maximis":0.25,"measur":0.25,"mechan":0.375,"mediat":0.25,"medit":0.25,"meed":0.375,"megahit":0.375,"megalomania":0.375,"megascop":0.375,"melior":0.25,"mellow":-0.375,"melod":0.25,"melodramat":0.438,"memor":0.375,"memorialis":0.375,"memori":0.375,"mendic":0.375,"mensch":0.375,"mensh":0.375,"mentat":0.375,"meow":0.375,"merceris":0.375,"mercer":0.375,"merchant":0.375,"merci":0.438,"merg":0.375,"meridian":0.313,"meritocraci":0.313,"mesomorph":0.375,"metal":0.375,"metalwork":0.375,"method":0.375,"metric":0.25,"miaou":0.25,"miaow":0.25,"miaul":0.375,"microphon":0.375,"middl":-0.25,"midweek":0.375,"mighti":0.25,"milch":0.375,"mild":0.292,"mill":0.375,"millenarian":0.375,"mimet":0.313,"mimic":0.375,"miracul":0.375,"mismarri":0.375,"mixolog":0.375,"mobil":0.25,"mock":-0.25,"moder":0.25,"moderation":0.375,"modest":0.313,"modesti":0.313,"modifi":0.375,"modish":0.25,"modular":0.375,"moldabl":0.375,"mollif":0.375,"momentan":0.375,"momentari":0.375,"moment":-0.25,"monarch":0.25,"money":0.438,"moneygrubb":0.375,"moneymak":0.438,"moni":0.375,"monitric":0.375,"monosem":0.375,"month":0.375,"moo":0.375,"mooch":-0.25,"moonlit":0.375,"mooni":0.313,"moralis":0.375,"mortic":0.375,"mortis":0.375,"motherlik":0.375,"mother":0.375,"motortruck":0.375,"mountain":0.375,"mount":0.438,"mouselik":0.375,"movabl":0.25,"mown":0.375,"much":0.375,"mucilagin":0.375,"mudra":0.375,"multiform":0.375,"multipot":0.375,"musclebuild":0.375,"music":0.469,"musicolog":0.375,"muse":0.375,"muski":0.375,"mutabl":0.25,"mutin":0.313,"myrmecophil":0.375,"mystifi":-0.25,"narrat":0.25,"naughti":0.375,"nay":0.375,"neat":0.25,"nectar":0.375,"need":0.25,"neoclass":0.375,"neoliber":0.375,"nestl":0.25,"net":0.25,"nett":0.375,"neuter":0.375,"newborn":0.313,"newfangl":0.375,"nightlif":0.313,"night":-0.25,"ninepenni":0.375,"nobl":0.375,"noctiluc":0.375,"noiseless":-0.25,"nonesuch":0.375,"nonjudgment":0.375,"nonliter":0.25,"nonpartisanship":0.375,"nonprogress":0.375,"nonpurul":0.375,"nonresist":0.313,"nonsectarian":0.375,"nonsegment":0.375,"nonstick":0.375,"nonsubject":0.375,"nonsuch":0.375,"nonsynthet":0.375,"nontox":0.313,"nonviol":0.313,"normal":0.438,"normalci":0.313,"nude":0.375,"nuditi":0.375,"numeraci":0.375,"nunneri":0.375,"nutrifi":0.375,"oarsmanship":0.375,"oblanceol":0.375,"obvious":-0.25,"occas":0.375,"occidentalis":0.375,"occident":0.375,"occurr":0.375,"ocher":0.375,"ochr":0.375,"offertori":0.375,"offici":0.25,"okeh":0.375,"okey":0.375,"older":0.417,"oliv":0.375,"omnibus":0.375,"onomatopoeia":0.375,"onomatopo":0.25,"ooh":0.375,"openmouth":0.375,"orang":0.375,"orangish":0.375,"orator":0.375,"ordain":0.375,"order":0.333,"orderli":0.313,"ordin":0.25,"organ":0.292,"organiz":-0.25,"orotund":0.313,"orthodox":0.375,"outcast":0.375,"outfit":0.313,"outlin":0.375,"outrun":0.375,"outspoken":0.375,"outstand":0.313,"overachiev":0.25,"overact":0.375,"overag":0.375,"overarm":0.375,"overaw":0.375,"overbid":0.313,"overcar":0.375,"overcast":0.375,"overcloth":0.375,"overestim":0.375,"overexcit":0.375,"overexploit":0.375,"overfond":0.375,"overhand":0.25,"overladen":0.375,"overlarg":0.375,"overload":0.375,"overmodest":0.375,"overnic":0.375,"overproud":0.375,"overrefin":0.375,"oversensit":-0.375,"overseri":0.375,"oversubscrib":0.375,"overus":0.375,"overutilis":0.375,"overutil":0.375,"oxid":0.375,"oxidiz":0.375,"packag":0.375,"pact":0.375,"pad":0.25,"paid":0.375,"painstak":0.375,"palati":0.313,"palimoni":0.375,"palliat":-0.25,"panegyrist":0.375,"panopli":0.375,"paperback":0.375,"paradis":0.375,"paragon":0.375,"pardon":0.375,"parev":0.375,"partak":0.333,"partial":-0.25,"particip":0.25,"parv":0.375,"passiv":-0.437,"pastureland":0.375,"patent":-0.25,"patern":0.375,"paternalist":0.375,"patient":0.375,"patrician":0.438,"peak":0.375,"peal":0.375,"peel":-0.375,"pellucid":0.25,"pend":0.375,"penetr":0.25,"penmanship":0.375,"pentecost":0.375,"perambul":0.375,"perceiv":0.313,"percept":0.333,"perige":0.375,"period":0.375,"peripatetic":0.375,"perk":0.375,"permit":0.333,"pernicketi":0.375,"perspicac":0.313,"perspicu":0.25,"persuad":0.25,"pert":-0.25,"pervert":-0.292,"pervious":0.25,"pet":0.375,"phagocyt":0.375,"pharisa":0.375,"phenomenon":0.313,"philanthropist":0.375,"philatel":0.375,"philhellen":0.375,"phlegmi":0.375,"phosphoresc":0.375,"phylogenet":0.375,"physic":-0.25,"physiolog":0.375,"pillar":0.375,"ping":0.375,"pinion":0.375,"placabl":0.375,"placeabl":0.375,"plainspoken":0.375,"playboy":0.375,"pleasanc":0.313,"pliabl":0.469,"plight":-0.25,"plumbabl":0.375,"plummet":0.375,"plummi":0.375,"pocketknif":0.375,"pois":0.313,"politess":0.375,"ponder":0.25,"popey":0.313,"popularis":0.25,"portico":0.375,"portion":0.375,"portray":0.375,"posh":0.375,"positiv":0.375,"positivist":0.375,"possibl":0.25,"postlud":0.375,"postpaid":0.375,"potenc":0.375,"potent":0.281,"potenti":0.375,"pragmat":0.313,"prairi":0.375,"prank":0.375,"preced":0.375,"precedenti":0.375,"preconcert":0.375,"predigest":0.375,"predispos":0.25,"preemin":0.375,"prefab":0.375,"pregnant":0.375,"prejud":0.375,"premedit":0.375,"prepackag":0.375,"prepack":0.375,"prepaid":0.375,"prerequisit":-0.25,"press":0.375,"prestig":0.375,"presum":0.375,"pretti":0.25,"prevail":0.275,"priestlik":0.375,"primal":0.375,"prink":0.313,"printabl":0.375,"prioress":0.375,"prisonlik":0.375,"pristin":0.375,"privat":0.313,"privileg":0.375,"probabl":0.25,"probiti":0.375,"procession":0.375,"proclaim":0.375,"procreat":0.25,"profound":0.417,"progress":0.25,"projectil":0.375,"prolong":0.375,"prone":0.375,"prong":0.313,"proportion":0.25,"prosodion":0.375,"prostyl":0.375,"protract":0.375,"provabl":0.375,"providenti":0.417,"prude":0.375,"psalm":0.375,"pseudoprostyl":0.375,"psychic":0.313,"psychotherapeut":0.313,"public":0.25,"publicis":0.375,"pulchritud":0.375,"punctual":0.25,"punster":0.375,"pure":0.321,"puritan":0.25,"purul":-0.25,"pushov":0.375,"pussi":0.375,"putat":0.375,"puzzler":0.375,"pyrolyt":0.375,"qabalist":0.375,"qi":0.375,"qualifi":0.313,"queenlik":0.375,"queen":0.375,"quick":0.25,"quiesc":0.375,"racist":0.25,"radiant":0.375,"raffish":0.313,"raiment":0.375,"rakish":0.313,"rangeland":0.375,"rangi":0.375,"rank":0.375,"rataplan":0.375,"ratif":0.375,"rationalist":0.375,"raven":-0.25,"reaffirm":0.375,"realis":0.375,"realiz":0.375,"reassert":0.375,"receiv":0.438,"reciproc":0.25,"reciprocatori":0.375,"recognis":0.375,"recogn":0.375,"recommend":0.25,"reconven":0.375,"recurv":0.375,"reddish":0.375,"redefin":0.313,"redempt":0.375,"redoubt":0.313,"redress":0.375,"reduc":0.375,"reduct":0.25,"reecho":0.375,"referendum":0.375,"refin":0.3,"refit":0.375,"reformist":0.25,"refulg":0.375,"regal":0.25,"regener":0.375,"regnant":0.375,"regress":0.25,"regularis":0.375,"regular":0.25,"regulatori":0.375,"reharmonis":0.25,"reharmon":0.25,"reign":0.375,"relat":0.313,"related":0.375,"relax":0.25,"relev":0.375,"reliant":0.375,"reloc":0.375,"reli":0.375,"remark":0.25,"remind":0.375,"reminisc":0.25,"remov":0.313,"renasc":0.375,"rendezv":0.375,"renov":0.25,"repair":0.325,"reparte":0.375,"repetit":0.313,"replac":0.375,"repos":0.375,"repres":0.25,"repress":0.375,"reproduct":0.375,"request":0.375,"requir":-0.333,"research":0.313,"reserv":0.438,"resettl":0.375,"resili":0.313,"resin":0.375,"resolv":0.375,"reson":0.375,"resound":0.375,"resourc":0.375,"respond":0.375,"respons":0.25,"resurg":0.375,"resuscit":0.375,"retent":0.292,"retic":0.292,"retractil":0.375,"retro":0.375,"revamp":0.313,"reveal":0.438,"reverber":0.25,"reverb":0.375,"revers":0.25,"reversionist":0.375,"revert":0.375,"revoc":0.375,"rhythmic":0.375,"rife":0.375,"risibl":0.375,"rise":0.313,"risqu":0.375,"ritz":0.375,"ritzi":0.375,"rivalr":0.375,"robe":0.375,"roomi":0.375,"roughhewn":0.375,"rubberlik":0.375,"rubberstamp":0.375,"rubi":0.375,"rule":0.25,"rumin":0.25,"runaway":0.375,"runni":0.375,"rush":0.375,"rustic":0.292,"saccharin":0.375,"safeguard":0.313,"safeti":0.375,"sanctif":0.375,"sanctimoni":0.375,"sanitari":0.375,"sanit":0.375,"sapphir":0.375,"sate":0.375,"satini":0.375,"savori":0.292,"savouri":0.292,"saw":0.375,"scaffold":0.375,"scalelik":0.375,"scarlet":0.375,"scarper":0.375,"scat":-0.25,"scenic":0.25,"scent":0.281,"scheme":0.438,"schnorr":0.375,"schoolboyish":0.375,"schoolgirlish":0.375,"scienc":0.313,"scrappi":-0.25,"screechi":0.375,"scrub":-0.25,"scrupl":0.375,"scrupul":0.438,"sculptur":0.313,"sculpturesqu":0.375,"seaborn":0.375,"seagirt":0.375,"seamless":0.292,"seami":0.313,"search":0.292,"seaworthi":0.375,"second":0.313,"seduc":0.313,"seduct":0.375,"sellabl":0.375,"semant":0.375,"semestr":0.375,"semestri":0.375,"semiannu":0.375,"semiautomat":0.25,"semimonth":0.375,"seminud":0.375,"semipriv":0.375,"semipubl":0.375,"semivowel":0.375,"semiweek":0.375,"senil":0.375,"sensat":0.375,"sensual":-0.25,"sent":0.375,"separ":0.25,"separatist":0.375,"serendip":0.375,"serious":-0.25,"servil":0.375,"settlor":0.375,"sexual":0.25,"sexi":0.375,"shackl":0.375,"shakabl":0.375,"shakeabl":0.375,"share":0.375,"sharpen":0.25,"shatterproof":0.375,"sheeni":-0.25,"sheeplik":0.375,"shimmeri":0.375,"shini":0.25,"shipshap":0.375,"shnorr":0.375,"shortlist":0.375,"showjump":0.375,"showmanship":0.375,"showplac":0.375,"showi":-0.375,"shrewd":0.25,"sibil":0.25,"sidesplitt":0.375,"sightse":0.375,"sightseer":0.375,"signific":0.292,"signif":0.25,"silken":0.375,"silklik":0.375,"silki":0.375,"silvern":0.438,"similar":0.375,"sissifi":0.375,"sissi":0.375,"sissyish":0.375,"sisterlik":0.375,"sister":0.375,"sizabl":0.313,"sizeabl":0.313,"size":0.25,"skin":0.375,"skirl":0.375,"skittish":0.25,"skulduggeri":0.375,"skullduggeri":0.375,"skydiv":0.375,"slangi":0.375,"sleek":0.417,"slide":0.375,"slip":0.375,"slither":0.375,"slumber":-0.25,"slumbrous":0.438,"smoki":0.375,"snappi":0.3,"snore":-0.25,"snowbound":0.375,"snuff":0.375,"snug":0.25,"snuggl":0.25,"soar":0.438,"social":0.25,"socialis":0.375,"solder":0.375,"solemnis":0.375,"solid":0.281,"solv":0.375,"son":0.375,"sonant":0.375,"sonic":0.375,"soror":0.375,"sottish":-0.312,"soundabl":0.375,"soundless":0.375,"soundproof":-0.25,"southpaw":0.313,"spacious":0.25,"spatiotempor":0.313,"spay":0.375,"specialti":0.458,"speedi":0.438,"spike":0.375,"spinmeist":0.375,"spinnabl":0.25,"spiritualis":0.375,"spiritu":0.25,"spiv":0.375,"splinterless":0.375,"splinterproof":0.375,"spoilsport":0.375,"spooki":0.375,"sporti":0.458,"springlik":0.375,"sprint":0.375,"squar":0.375,"squeak":0.375,"squeaki":0.375,"squeal":0.375,"squeamish":0.375,"squeezabl":0.25,"squishi":0.375,"stagecraft":0.375,"stainless":0.375,"stalinis":0.375,"stalin":0.375,"stamin":0.375,"standbi":0.375,"standpat":0.375,"startl":0.375,"statuesqu":0.438,"steadi":0.25,"steami":0.292,"steepish":0.375,"stellat":0.375,"stereo":0.375,"stereophon":0.375,"stertor":0.375,"stock":0.375,"stoppabl":0.375,"stori":0.313,"stowaway":0.375,"strabotomi":0.375,"straightforward":0.313,"strap":0.375,"strateg":-0.25,"straw":0.375,"streamlin":0.438,"streetwis":0.375,"stretch":0.313,"structur":0.25,"strum":0.375,"stuf":0.313,"stupend":0.375,"sturdi":0.417,"stylish":0.25,"subgross":0.375,"subservi":-0.25,"subson":0.375,"substant":0.333,"substitut":0.375,"subtilis":0.375,"subtract":0.375,"succinct":0.375,"such":0.375,"suchlik":0.375,"suffic":0.375,"suggest":-0.375,"suit":0.313,"sulfacetamid":0.375,"sunless":0.375,"sunlit":0.375,"sunstruck":0.375,"superfin":0.417,"supern":0.375,"supersedur":0.375,"supersess":0.375,"superstar":0.375,"supervis":0.375,"suppl":0.375,"suppos":0.375,"supposit":0.375,"suppositi":0.375,"supposititi":0.375,"supran":0.375,"sure":0.375,"surgic":0.375,"surmis":0.375,"surmount":0.313,"suspect":0.375,"suspens":0.25,"sustain":0.25,"sustentacular":0.375,"sutur":0.375,"svelt":0.375,"swank":0.25,"swanki":0.375,"sweep":0.313,"sweetheart":0.375,"swift":0.375,"swing":0.25,"swingi":0.375,"swish":0.25,"sylphlik":0.375,"symmetr":0.375,"symmetri":0.292,"symphon":0.25,"symptomless":0.375,"synecdoch":0.375,"synonym":0.375,"synopt":0.375,"tail":0.375,"takeout":0.375,"talkat":0.292,"tallgrass":0.375,"tame":0.25,"tannish":0.375,"tantalis":-0.375,"tantal":-0.375,"tarantell":0.375,"tardi":0.375,"tassel":0.375,"teach":0.25,"tearless":0.375,"technic":0.417,"technician":0.313,"technolog":0.313,"technophil":0.375,"teem":0.375,"teeming":0.375,"teetot":0.375,"tekki":0.375,"telescop":-0.312,"tell":0.375,"temporis":0.375,"tempor":0.375,"temptabl":0.375,"tenderis":0.25,"tender":0.25,"tensionless":0.375,"termin":-0.375,"ters":0.375,"tessel":0.313,"testat":0.375,"testimoni":0.313,"tether":0.375,"themat":0.375,"thicken":-0.25,"thoroughgo":0.375,"thought":0.25,"throng":0.25,"through":0.313,"throwaway":0.375,"throwback":0.375,"thrum":0.25,"thump":0.375,"thunder":-0.375,"thyrotoxicosi":0.375,"tine":0.375,"tink":0.375,"tinkl":0.375,"tinsel":0.375,"tinselli":0.375,"tintinnabul":0.375,"tippi":0.375,"tireless":0.25,"titan":0.375,"toccata":0.375,"to":0.375,"tog":0.375,"tone":0.438,"toothsom":0.458,"topic":0.375,"topograph":0.375,"topspin":0.375,"torrenti":0.292,"torrid":0.292,"total":0.25,"toughen":0.438,"tourer":0.313,"tower":0.375,"trabeat":0.375,"traceabl":0.313,"trackabl":0.375,"tractil":0.375,"tradecraft":0.375,"traditionalist":-0.25,"tragicom":0.25,"train":0.25,"tranquilis":0.375,"transcend":0.313,"transfer":0.313,"transferr":0.313,"transform":0.375,"transgend":0.375,"transistoris":0.375,"transistor":0.25,"translat":0.438,"transmiss":0.333,"transmut":0.375,"transon":0.375,"transpar":0.313,"travel":0.25,"travers":0.375,"travesti":0.313,"treac":0.375,"treat":0.25,"treati":0.375,"treeless":0.375,"trenchant":0.417,"triangul":0.375,"triennial":0.375,"trim":0.375,"trip":0.438,"trisect":0.375,"tropism":0.375,"trueness":0.458,"truss":0.375,"trusting":0.375,"trustor":0.375,"trustworthi":0.438,"tuft":0.417,"turban":0.375,"tutelar":0.375,"tutelari":0.375,"twain":0.375,"typic":0.25,"ultramodern":0.375,"ultrason":0.375,"unarmor":0.313,"unarmour":0.313,"unblemish":0.375,"unbow":0.313,"unchurch":0.375,"unclouded":0.375,"uncommun":0.25,"unconfin":0.313,"unconstip":0.375,"uncontamin":0.25,"uncrowd":0.375,"undat":0.25,"underachiev":0.375,"underact":-0.375,"underarm":0.375,"undercharg":0.375,"undercov":0.375,"undereduc":0.375,"understand":0.25,"understock":0.375,"underway":0.375,"undet":0.375,"undevi":0.375,"undiscourag":0.375,"undisguis":0.375,"undismay":0.375,"undivid":0.375,"unequ":0.375,"unequal":0.375,"unfalt":0.375,"unfil":0.375,"unflag":0.375,"unflapp":0.375,"unflaw":0.375,"unflurri":0.375,"unflust":0.375,"unfre":0.313,"unhuman":0.375,"unhurri":0.313,"unhurt":0.375,"unif":0.292,"uninjur":0.375,"uniqu":0.375,"unit":0.25,"univers":-0.25,"univoc":0.375,"unlock":-0.25,"unmar":0.375,"unmistak":0.375,"unmortgag":0.375,"unmov":-0.25,"unmutil":0.375,"unobjection":0.333,"unobstruct":0.375,"unostentati":0.313,"unparallel":0.375,"unpartit":0.375,"unperturb":0.375,"unproblemat":0.375,"unprogress":0.375,"unpunish":0.375,"unpurifi":0.375,"unravel":0.292,"unregret":0.375,"unremors":0.375,"unscrambl":0.375,"unsectarian":0.375,"unseg":0.375,"unselfconsci":0.25,"unshadow":0.375,"unshaken":0.375,"unsoil":0.375,"unspot":0.375,"unsubdu":0.375,"unsulli":0.375,"untaint":0.375,"untalk":0.375,"untarnish":0.375,"unthreaten":0.375,"untir":0.375,"untoughen":0.375,"unwont":0.375,"unwood":0.375,"unworld":0.313,"unwound":0.375,"unzip":0.375,"up":0.344,"upcurv":0.375,"upfront":0.375,"upkeep":0.375,"upmarket":0.375,"upper":0.333,"upstair":0.375,"upward":0.313,"urgent":0.375,"usual":0.375,"usufruct":0.375,"usuri":0.313,"vacation":0.375,"vacationist":0.375,"vantag":0.438,"vehement":0.438,"vendabl":0.375,"vendibl":0.375,"verdanc":0.375,"verif":0.313,"verisimilar":0.375,"veriti":0.375,"vermilion":0.375,"vermillion":0.375,"vernal":0.313,"versatil":0.281,"veri":0.438,"viabil":0.313,"vibrant":0.333,"viewless":0.375,"vindic":0.375,"violabl":0.375,"virgin":0.292,"viril":0.25,"virtual":-0.25,"virtuos":0.375,"visa":0.375,"viscid":0.375,"viscoelast":0.375,"vitalis":0.25,"vivac":0.375,"vivid":0.313,"vivif":0.313,"vocal":0.313,"volit":0.25,"volum":0.375,"volumetr":0.375,"volumin":0.25,"voluntari":0.25,"vow":0.313,"waggeri":0.313,"wake":0.25,"walkaway":0.375,"wallop":-0.25,"warfarin":0.375,"wari":0.375,"warranti":0.375,"washabl":0.375,"wean":0.375,"wed":0.375,"week":0.375,"wellborn":0.375,"westernis":0.375,"western":0.375,"whacker":0.375,"whack":-0.25,"whirr":0.375,"whish":0.313,"whizz":0.375,"whole":0.375,"wholesal":0.375,"wholli":0.375,"whop":-0.25,"wide":0.304,"willowi":0.375,"wing":0.375,"wisdom":0.375,"withdrawn":0.313,"wittic":0.375,"witti":0.375,"wiz":0.375,"woman":-0.25,"wonderwork":0.375,"wont":0.25,"wordless":-0.25,"workflow":0.375,"work":0.275,"world":0.313,"wors":0.375,"worthili":0.375,"wow":0.375,"wrap":0.375,"xanthous":0.375,"yang":0.375,"year":0.375,"yeasti":0.375,"yellowish":0.375,"yield":0.375,"yoga":0.313,"yon":0.375,"yonder":0.375,"zaftig":0.375,"zani":0.438,"zesti":0.438,"zoftig":0.375,"zygomorph":0.375,"aalii":-0.375,"abasia":-0.375,"abid":-0.437,"abienc":-0.375,"abnormalci":-0.375,"abocclus":-0.375,"abstrus":-0.25,"acanthocyt":-0.375,"acanthosi":-0.375,"accid":-0.437,"accusatori":-0.25,"accus":-0.25,"acedia":-0.375,"acetonemia":-0.375,"acetonuria":-0.375,"acetos":-0.375,"acet":-0.375,"achondroplasia":-0.375,"achondroplasti":-0.375,"achromia":-0.375,"achrom":-0.375,"acid":-0.333,"acidemia":-0.375,"acousticophobia":-0.375,"acromegalia":-0.375,"acromegali":-0.375,"acromphalus":-0.375,"adamantin":-0.375,"addlehead":-0.375,"adenomyosi":-0.375,"adenosi":-0.375,"adesit":-0.375,"adulter":-0.375,"adulterin":-0.375,"adumbr":-0.375,"adventur":-0.25,"aerodontalgia":-0.375,"aeri":-0.375,"affray":-0.437,"afterlif":-0.375,"agammaglobulinemia":-0.375,"aggro":-0.375,"agoni":-0.437,"aguish":-0.375,"ailment":-0.375,"airsick":-0.375,"akinesia":-0.375,"akinesi":-0.375,"alexia":-0.375,"algophobia":-0.375,"almost":-0.375,"alterc":-0.375,"amblyopia":-0.375,"amerc":-0.375,"aminoaciduria":-0.375,"amnes":-0.375,"amyloidosi":-0.375,"anaesthet":-0.375,"analbuminemia":-0.375,"analgesia":-0.375,"anathemis":-0.437,"anathem":-0.437,"andesit":-0.375,"anesthet":-0.375,"animadvert":-0.312,"animalis":-0.375,"anomi":-0.312,"anosmat":-0.375,"anosmia":-0.375,"anosm":-0.312,"antagonist":-0.275,"anthracit":-0.25,"anthracosi":-0.375,"anthrax":-0.312,"anticipatori":-0.375,"antiproton":-0.375,"anuret":-0.375,"anur":-0.25,"aphot":-0.375,"apoplexi":-0.375,"apract":-0.375,"aprax":-0.375,"aquaphobia":-0.375,"arch":0.25,"arduous":-0.375,"areflexia":-0.375,"argent":-0.375,"argufi":-0.375,"armband":-0.375,"arrhythmia":-0.375,"ars":-0.312,"arsin":-0.375,"arteriectasia":-0.375,"arteriectasi":-0.375,"arthralg":-0.375,"articul":-0.375,"artific":-0.375,"asbestosi":-0.375,"ashi":-0.375,"asper":-0.437,"assumpt":-0.375,"asthenia":-0.375,"astheni":-0.375,"astylar":-0.375,"asynclit":-0.375,"asystol":-0.375,"ataxia":-0.375,"ataxi":-0.375,"atroc":-0.375,"atyp":-0.25,"audaci":-0.312,"audac":-0.312,"automysophobia":-0.375,"autopsi":-0.375,"azoimid":-0.375,"bacchanalia":-0.375,"bacteriolog":-0.25,"bacteriolysi":-0.375,"bad":0.25,"baffl":-0.25,"bait":-0.292,"baloney":-0.375,"bangl":-0.375,"banshe":-0.375,"banshi":-0.375,"banteng":-0.375,"bant":-0.375,"barf":-0.375,"barki":-0.375,"bass":-0.375,"bastardis":-0.312,"bastill":-0.375,"batter":-0.25,"bayonet":-0.375,"beacon":-0.375,"beast":-0.437,"bedamn":-0.375,"bedazzl":-0.375,"beggar":-0.25,"belabor":-0.333,"belabour":-0.333,"beli":-0.312,"belli":-0.375,"benumb":-0.375,"beshrew":-0.375,"bewild":-0.312,"bilgewat":-0.375,"bilgi":-0.375,"birdbrain":-0.375,"bitch":-0.312,"blackbuck":-0.375,"blackleg":-0.375,"blast":-0.312,"blatanc":-0.375,"bleak":-0.25,"blister":-0.375,"bloat":-0.375,"blockhous":-0.375,"bloodcurdl":-0.375,"bloodguilt":-0.375,"blooper":-0.375,"blot":-0.312,"blunder":-0.25,"bodyless":-0.375,"boloney":-0.375,"bomb":-0.375,"bombproof":-0.375,"boner":-0.375,"boothos":-0.375,"borrow":0.25,"bosh":-0.375,"bourgeoisi":-0.375,"bovin":-0.375,"bowdleris":-0.375,"bowdler":-0.375,"brachydactylia":-0.375,"brachydactyl":-0.375,"brachydactyli":-0.375,"braggadocio":-0.375,"brainless":-0.375,"brambl":-0.375,"brassard":-0.375,"brawl":-0.375,"breastpin":-0.375,"breathless":-0.375,"briefless":-0.375,"brittl":-0.292,"broach":-0.375,"brunett":-0.375,"brunt":-0.375,"brutalis":-0.292,"brutal":-0.25,"buffet":-0.25,"bulg":-0.437,"bulimia":-0.437,"bulk":-0.375,"bulldog":-0.375,"bumptious":-0.375,"bunion":-0.375,"burn":0.25,"butch":-0.375,"butcheri":-0.333,"butterscotch":-0.375,"cacodaemon":-0.25,"cacodemon":-0.25,"cakehol":-0.375,"calcitonin":-0.375,"calvari":-0.375,"camp":-0.375,"campi":-0.375,"canker":-0.25,"cannonad":-0.375,"carbonado":-0.375,"cardiomegali":-0.375,"cardiomyopathi":-0.375,"carib":-0.375,"carious":-0.375,"carrion":-0.375,"carsick":-0.375,"cartilaginif":-0.375,"cartroad":-0.375,"carvedilol":-0.375,"caseous":-0.375,"cassiterit":-0.375,"castrat":0.25,"casuist":-0.375,"catalepsi":-0.375,"cataphasia":-0.375,"causa":-0.375,"causalgia":-0.375,"cefoperazon":-0.375,"celecoxib":-0.375,"cementit":-0.375,"cens":-0.375,"censor":0.25,"cephalalgia":-0.375,"cephal":-0.375,"chaff":-0.375,"chaotic":-0.333,"chapeau":-0.375,"chap":-0.375,"chasten":-0.375,"cheap":-0.437,"cheapen":-0.375,"cheat":-0.344,"cheesepar":-0.375,"cheilosi":-0.375,"chondrodystrophi":-0.375,"choppi":-0.375,"chuff":-0.375,"churl":-0.417,"churn":-0.312,"cinder":-0.375,"clamor":-0.25,"clamp":-0.437,"clatter":-0.375,"clinker":-0.312,"clobber":-0.312,"clueless":-0.375,"clutter":-0.375,"coast":-0.375,"cockad":-0.375,"cocki":-0.375,"cocksuck":-0.437,"collabor":0.25,"collaborationist":-0.375,"colorless":-0.375,"colourless":-0.375,"concuss":-0.437,"confess":-0.292,"confront":-0.25,"confut":-0.25,"conglutin":-0.375,"constat":-0.375,"contrabass":-0.375,"contractu":-0.375,"contravent":-0.375,"contretemp":-0.375,"conundrum":-0.375,"convuls":-0.312,"cool":-0.344,"corni":-0.375,"coron":-0.375,"costalgia":-0.375,"costiasi":-0.375,"counterattack":-0.312,"counterattract":-0.375,"countermin":-0.375,"coveral":-0.375,"coverlet":-0.375,"craw":-0.375,"crazili":-0.375,"cremain":-0.375,"cremat":-0.375,"crick":-0.375,"crime":-0.312,"crisi":-0.312,"criticis":-0.375,"critic":-0.25,"cross":-0.437,"crosspatch":-0.375,"crowberri":-0.375,"crucifixion":-0.312,"crude":-0.458,"crumbl":-0.292,"crusti":-0.437,"cryaesthesia":-0.375,"cryesthesia":-0.375,"cri":-0.375,"cryoanaesthesia":-0.375,"cryoanesthesia":-0.375,"cryogen":-0.25,"cryosurgeri":-0.375,"currish":-0.375,"cuss":-0.25,"cut":-0.375,"cyberphobia":-0.375,"cyclon":-0.25,"cyclothymia":-0.375,"cyprian":-0.375,"cytolysi":-0.375,"cytolyt":-0.375,"dago":-0.375,"ddc":-0.375,"ddi":-0.375,"dead":-0.333,"dearth":-0.312,"deathblow":-0.375,"death":-0.25,"debas":-0.25,"debauch":0.25,"debaucheri":-0.375,"debri":-0.375,"decalcif":-0.375,"deceas":-0.375,"deceit":-0.375,"declin":-0.312,"decontamin":-0.375,"decoy":-0.437,"decrepit":-0.312,"decrescendo":-0.375,"defac":-0.25,"defam":-0.25,"defens":-0.375,"defianc":-0.417,"defi":-0.333,"degrad":-0.417,"degust":-0.25,"delinqu":-0.25,"deliquium":-0.375,"delug":-0.333,"delus":-0.292,"delusion":-0.375,"demand":-0.292,"dement":-0.25,"demijohn":-0.375,"demonis":-0.375,"denud":-0.375,"depolaris":-0.375,"depolar":-0.375,"dermatosclerosi":-0.375,"desertif":-0.375,"desicc":-0.375,"desquam":-0.375,"destabil":-0.375,"destitut":-0.312,"destroy":-0.25,"detritus":-0.312,"devast":-0.475,"devic":-0.375,"devilri":-0.312,"deviltri":-0.312,"devious":-0.375,"dextrocardia":-0.375,"diabet":-0.25,"didanosin":-0.375,"dideoxycytosin":-0.375,"dideoxyinosin":-0.375,"dimwit":-0.375,"diphtheria":-0.375,"dirti":-0.25,"disast":-0.333,"disbeliev":-0.375,"discharg":-0.375,"discolor":-0.437,"discolour":-0.437,"discommod":-0.375,"discont":-0.375,"discounten":-0.312,"disembarrass":-0.375,"disfigur":-0.25,"disharmon":-0.375,"dishonest":-0.312,"dishonesti":-0.312,"disinfest":-0.375,"disinform":-0.375,"disloy":-0.375,"disobedi":-0.375,"disorganis":-0.375,"disorgan":-0.375,"disori":-0.375,"disorient":-0.375,"dispatch":-0.3,"disprov":-0.375,"disrupt":0.25,"dissens":-0.312,"dissent":-0.25,"dissid":-0.375,"distomatosi":-0.375,"distrain":-0.333,"disunion":-0.375,"divag":-0.25,"diversionari":-0.375,"dogfight":-0.25,"doofus":-0.375,"doubt":0.25,"dowerless":-0.375,"downtown":-0.375,"dracunculiasi":-0.375,"dream":-0.375,"dreck":-0.375,"dropsi":-0.375,"drub":-0.375,"dumb":-0.25,"duranc":-0.375,"duress":-0.375,"dysaphia":-0.375,"dyschezia":-0.375,"dyscrasia":-0.375,"dyslect":-0.375,"dysomia":-0.375,"dysphagia":-0.375,"dysphonia":-0.375,"dyssynergia":-0.375,"dystopia":-0.375,"dystopian":-0.312,"eav":-0.375,"ectopia":-0.375,"edema":-0.375,"eeri":-0.25,"egotist":-0.375,"elegiac":-0.312,"elegis":-0.375,"elf":-0.375,"embalm":-0.375,"embitt":-0.375,"embroc":0.25,"embroil":0.25,"emphysema":-0.375,"enceph":-0.375,"encephalopathi":-0.375,"encroach":0.25,"endometriosi":-0.375,"enduring":-0.375,"enemi":-0.281,"enfeebl":-0.25,"enigmat":-0.375,"enshroud":-0.375,"ensnar":-0.437,"enterostenosi":-0.375,"entrain":-0.375,"entrap":-0.437,"enuresi":-0.375,"epicondyl":-0.375,"epidem":-0.375,"epididym":-0.375,"epiglott":-0.375,"epilepsi":-0.375,"equivoc":-0.25,"erad":-0.25,"ergot":-0.375,"erod":-0.375,"erranc":-0.437,"erwinia":-0.375,"erythroblastosi":-0.375,"eunuch":-0.375,"everlast":-0.375,"eviscer":-0.375,"exagger":-0.312,"excursus":-0.375,"exert":-0.375,"exfoli":-0.312,"expens":0.25,"explet":-0.312,"expurg":0.25,"extermin":-0.25,"extraleg":-0.375,"fabl":-0.375,"fairi":-0.312,"faker":-0.375,"fallaci":-0.375,"fallal":-0.375,"fallback":-0.375,"falsetto":-0.375,"falsi":-0.375,"fascioliasi":-0.375,"fasciolosi":-0.375,"fatal":-0.375,"fatti":-0.25,"fault":-0.25,"feebl":-0.437,"feint":-0.375,"fenoprofen":-0.375,"fester":-0.375,"fey":-0.375,"fib":-0.375,"fictiti":-0.312,"fiend":-0.333,"filariasi":-0.375,"filth":-0.406,"finagl":-0.25,"fingerless":-0.375,"fingerstal":-0.375,"fink":-0.312,"firebrand":-0.312,"fire":-0.375,"firetrap":-0.375,"fistfight":-0.25,"fisticuff":-0.312,"flab":-0.375,"flabbi":-0.25,"flaccid":-0.375,"flag":-0.375,"flamboy":-0.375,"flashi":-0.375,"flecainid":-0.375,"flippanc":-0.375,"florid":0.25,"florilegium":-0.375,"flounder":-0.312,"flyaway":-0.312,"flyspeck":0.25,"flytrap":-0.375,"foghorn":-0.312,"fogsign":-0.375,"foolproof":-0.375,"footslog":-0.375,"foray":-0.312,"foreshadow":-0.375,"forget":-0.375,"formaldehyd":-0.375,"forthcoming":-0.375,"fowler":-0.375,"fraca":-0.375,"fractur":-0.292,"frambesia":-0.375,"framboesia":-0.375,"freak":-0.375,"freakish":-0.375,"fuckup":-0.312,"fugu":-0.375,"furlough":-0.375,"furuncl":-0.375,"fussi":-0.25,"gainsay":-0.375,"gale":-0.375,"galoot":-0.375,"game":-0.312,"gamecock":-0.375,"garbl":-0.25,"garboil":-0.375,"gaud":-0.375,"gaudi":0.25,"gawki":-0.25,"gee":-0.375,"gewgaw":-0.375,"ghostli":-0.375,"giardiasi":-0.375,"gimp":-0.375,"ginzo":-0.375,"git":-0.375,"glare":-0.25,"glaucoma":-0.375,"gleet":-0.375,"glitz":-0.375,"glossoptosi":-0.375,"goalless":-0.375,"golliwog":-0.375,"golliwogg":-0.375,"goon":-0.375,"gout":-0.375,"grabber":-0.375,"grasp":-0.312,"gratuit":-0.417,"graylag":-0.375,"greasebal":-0.375,"gremlin":-0.375,"greylag":-0.375,"grist":-0.375,"grotesqu":-0.437,"grouch":-0.375,"grous":-0.312,"grubbi":-0.25,"grumbl":0.25,"grump":-0.375,"gunfight":-0.375,"gunplay":-0.375,"gutless":-0.25,"haematocytopenia":-0.375,"haematuria":-0.375,"haemoglobinemia":-0.375,"haemoglobinopathi":-0.375,"haemorrhoid":-0.375,"hag":-0.312,"haggl":-0.375,"hailstorm":-0.375,"hairi":-0.437,"halitosi":-0.375,"hallucin":-0.25,"haplosporidian":-0.375,"haptic":-0.375,"harshen":-0.375,"hat":-0.312,"hater":-0.375,"haunt":-0.333,"havoc":-0.375,"haze":-0.375,"headach":-0.437,"headband":-0.375,"heavi":-0.25,"heedless":-0.292,"hematocytopenia":-0.375,"hematuria":-0.375,"hemicrania":-0.375,"hemlin":-0.375,"hemoglobinemia":-0.375,"hemoglobinopathi":-0.375,"hemorrhoid":-0.375,"hepatoflavin":-0.375,"hereaft":-0.312,"heterotaxi":-0.375,"hexenbesen":-0.375,"histiocytosi":-0.375,"hobgoblin":-0.312,"homeless":-0.375,"homespun":-0.375,"homicid":-0.375,"homunculus":-0.312,"hoot":-0.292,"horseplay":-0.375,"hotspur":-0.375,"housebreak":-0.375,"hubbub":-0.375,"hurrican":-0.375,"hydremia":-0.375,"hydromorphon":-0.375,"hydrophobia":-0.292,"hydrop":-0.375,"hyperbetalipoproteinemia":-0.375,"hypercalcinuria":-0.375,"hypercalciuria":-0.375,"hypercholesteremia":-0.375,"hypercholesterolemia":-0.375,"hyperemesi":-0.375,"hyperplasia":-0.375,"hypertrophi":0.25,"hyphen":-0.375,"hypoact":-0.375,"hypoadren":-0.375,"hypoadrenocortic":-0.375,"hypocalcaemia":-0.375,"hypocalcemia":-0.375,"hypocrit":-0.25,"hypoglycaem":-0.375,"hypoglycem":-0.375,"hypolipoproteinemia":-0.375,"hyponymi":-0.375,"hypoparathyroid":-0.375,"hypoproteinemia":-0.375,"hypospadia":-0.375,"hypoton":-0.25,"hysterocatalepsi":-0.375,"ici":-0.437,"icki":-0.312,"iconoclast":-0.375,"idempot":-0.375,"ileus":-0.375,"immin":0.25,"immotil":0.25,"immov":-0.25,"immunosuppress":-0.25,"imp":-0.375,"impalp":-0.375,"imped":-0.25,"impend":0.25,"impercept":-0.375,"impermiss":-0.437,"impertin":-0.25,"implaus":-0.375,"impost":-0.375,"impostor":-0.375,"impostur":-0.375,"impot":-0.437,"impregn":-0.375,"improb":-0.375,"impud":-0.25,"impur":-0.312,"inadvert":-0.375,"inappropri":-0.375,"incapacit":-0.25,"inclement":-0.375,"incommensur":0.25,"incommod":-0.375,"inconceiv":-0.375,"incongru":-0.375,"inconsequ":-0.25,"inconspicu":0.25,"inconst":-0.25,"inconvert":-0.375,"incur":-0.25,"indec":-0.375,"indecis":-0.312,"indefin":-0.25,"indefinit":-0.25,"indelicaci":-0.375,"indel":-0.458,"indescrib":-0.375,"indiffer":-0.437,"indiscern":-0.375,"indiscret":-0.312,"indispos":-0.312,"indistinguish":-0.312,"indol":-0.375,"inept":-0.25,"ineptitud":-0.437,"inequ":-0.375,"inertia":-0.375,"inessenti":-0.375,"inexact":-0.375,"infam":-0.375,"infami":-0.312,"infelicit":-0.25,"infern":0.25,"inflam":-0.375,"inhomogen":-0.375,"injur":-0.417,"innumer":0.25,"inoper":-0.437,"inquisitor":-0.375,"inroad":-0.437,"insens":-0.406,"insensit":-0.375,"insidi":-0.25,"insignia":-0.375,"insipid":-0.25,"insol":-0.437,"insolubl":-0.458,"insubordin":-0.375,"insuffici":-0.25,"insuper":-0.312,"insupport":-0.375,"insurg":-0.25,"interfer":-0.437,"interrog":-0.375,"interrupt":-0.25,"intransit":-0.375,"invalid":-0.25,"irregular":-0.281,"irretriev":-0.375,"irrever":-0.312,"itch":-0.375,"jag":-0.375,"jammi":-0.375,"jaundic":-0.375,"jeopard":-0.375,"jerkili":-0.312,"jerk":-0.375,"jiggl":-0.375,"jimmi":-0.375,"jonah":-0.375,"josh":-0.375,"jowli":-0.375,"juiceless":-0.312,"jurisprudenti":-0.375,"juvenil":-0.312,"katharob":-0.375,"katzenjamm":-0.375,"kayo":-0.25,"kerat":-0.375,"keratoderma":-0.375,"keratodermia":-0.375,"kernicterus":-0.375,"ketoaciduria":-0.375,"ketonemia":-0.375,"ketonuria":-0.375,"ketosi":-0.375,"keyless":-0.375,"kinanesthesia":-0.375,"kitsch":-0.375,"klutz":-0.375,"knap":-0.312,"koan":-0.375,"kook":-0.375,"kyphosi":-0.375,"lacer":-0.25,"lackadais":-0.375,"lack":-0.25,"lacklust":-0.437,"lacklustr":-0.437,"lactoflavin":-0.375,"lag":-0.375,"lambast":-0.437,"lame":-0.25,"lancin":-0.375,"landfil":-0.375,"laryng":-0.375,"laryngostenosi":-0.375,"lasting":-0.375,"lawless":-0.25,"lawsuit":-0.375,"lean":-0.25,"least":-0.375,"lectur":-0.312,"lepidophobia":-0.375,"leprosi":-0.375,"lesion":-0.312,"lessen":-0.25,"lethal":-0.25,"leucocytosi":-0.375,"leucopenia":-0.375,"leukocytosi":-0.375,"leukopenia":-0.375,"lever":-0.375,"leviti":-0.437,"lick":-0.375,"lifeless":-0.25,"lighthead":-0.437,"lightheaded":-0.437,"limp":-0.375,"liniment":-0.375,"linkboy":-0.375,"linkman":-0.375,"lipidosi":-0.375,"liposarcoma":-0.375,"litigi":-0.375,"litter":-0.375,"loather":-0.375,"loin":-0.312,"loon":-0.333,"lorica":-0.375,"lour":-0.375,"lovastatin":-0.375,"lowbrow":-0.375,"lowlif":-0.375,"lowli":-0.281,"lowset":-0.375,"lug":-0.312,"lukewarm":-0.312,"lunat":-0.25,"lupus":-0.375,"lusterless":-0.25,"lustreless":-0.25,"lymphadenopathi":-0.375,"lymphocytosi":-0.375,"macroglossia":-0.375,"madman":-0.375,"maim":-0.25,"malabsorpt":-0.375,"malacia":-0.375,"maladjust":0.25,"malapropo":-0.375,"malcont":-0.25,"malform":-0.25,"malfunct":-0.25,"malinger":-0.375,"mallard":-0.375,"maltreat":-0.25,"manana":-0.375,"mangl":-0.437,"mania":-0.375,"maniac":-0.25,"maniclik":-0.375,"manpow":-0.375,"mansard":-0.375,"mantelet":-0.437,"mantlet":-0.375,"marasmus":-0.375,"martyr":-0.25,"martyrdom":-0.375,"masquerad":-0.292,"matricid":-0.312,"mauler":0.25,"maw":-0.375,"mawkish":-0.312,"meanspirit":-0.375,"meddl":-0.375,"megacardia":-0.375,"megadeath":-0.375,"megalocardia":-0.375,"megrim":-0.375,"melaena":-0.375,"melancholia":-0.375,"melena":-0.375,"men":-0.375,"mendac":-0.375,"meralgia":-0.375,"meretrici":-0.25,"methan":-0.25,"microcytosi":-0.375,"midazolam":-0.375,"migrain":-0.375,"mildew":-0.312,"mindless":-0.25,"mire":-0.375,"mirki":-0.437,"mischanc":-0.375,"mischief":-0.312,"misconcept":-0.375,"misdeal":-0.375,"misfir":-0.375,"misfortun":-0.375,"misfunct":-0.375,"mishandl":-0.312,"mishap":-0.375,"misinform":-0.375,"mispronunci":-0.375,"misshapen":-0.25,"mistrial":-0.375,"molder":-0.375,"moldi":-0.375,"monorchid":-0.375,"monorch":-0.375,"monstros":-0.312,"monstrous":-0.375,"morbid":-0.25,"morgu":-0.375,"moribund":-0.312,"mortal":-0.25,"mortuari":-0.25,"mothi":-0.375,"moue":-0.375,"moufflon":-0.375,"mouflon":-0.375,"moulder":-0.375,"muddi":-0.375,"muddl":-0.437,"muff":-0.312,"mugge":-0.375,"mulch":-0.25,"mulct":-0.375,"murki":-0.437,"murmur":-0.25,"musophobia":-0.375,"muss":-0.25,"musti":-0.312,"mute":-0.25,"mutini":-0.375,"mutt":-0.375,"mutter":-0.312,"myocardiopathi":-0.375,"nanc":-0.375,"nanophthalmo":-0.375,"narcolept":-0.25,"naupathia":-0.375,"navi":-0.312,"nebul":-0.25,"necess":-0.312,"necklet":-0.375,"necromant":-0.25,"necropsi":-0.375,"neglect":-0.25,"neglig":-0.25,"neoplasm":-0.375,"nephroangiosclerosi":-0.375,"nephrosclerosi":-0.375,"nerveless":-0.375,"neuralgia":-0.375,"neuralgi":-0.375,"neurasthen":-0.25,"neuriti":-0.375,"neurosi":-0.375,"neurot":-0.375,"neurotic":-0.375,"niggard":-0.25,"nightmarish":-0.375,"nighttim":-0.375,"nigrifi":-0.375,"nincompoop":-0.375,"ninni":-0.375,"niqab":-0.375,"nobbl":-0.375,"nocent":-0.375,"nog":-0.375,"noisili":-0.375,"nonaddict":-0.375,"nonappear":-0.375,"nonarbitrari":-0.375,"nonattend":-0.25,"nonconsci":-0.437,"nondisjunct":-0.375,"nonharmon":-0.375,"nonhereditari":-0.375,"nonherit":-0.375,"noninherit":-0.375,"nonleg":-0.375,"nonleth":-0.375,"nonmus":-0.375,"nonobserv":-0.375,"nonresidenti":-0.375,"nonresili":-0.375,"nonreson":-0.375,"nonsens":-0.375,"nonspeak":-0.375,"nonsubmerg":-0.375,"nonsubmers":-0.375,"nonuniform":0.25,"notori":-0.375,"nowher":-0.375,"nuanc":-0.375,"nullifi":-0.292,"number":-0.375,"nutat":-0.375,"nymphomania":-0.375,"obduraci":-0.375,"obliqu":-0.312,"obliter":0.25,"oblivi":-0.375,"obloquy":-0.375,"obsidian":-0.375,"obtus":-0.25,"ochronosi":-0.375,"odor":-0.375,"odouris":-0.375,"oedema":-0.375,"ogr":-0.312,"oink":-0.375,"onus":-0.375,"onychosi":-0.375,"openbil":-0.375,"oppressor":-0.375,"orbital":-0.375,"orchidalgia":-0.375,"orphan":-0.375,"osmium":-0.375,"ostent":-0.458,"osteodystrophi":-0.375,"osteolysi":-0.375,"osteomalacia":-0.375,"osteopetrosi":-0.375,"otosclerosi":-0.375,"outbreak":-0.375,"outclass":-0.25,"outfight":-0.375,"outvi":-0.375,"pachycheilia":-0.375,"pajama":-0.312,"palooka":-0.375,"palter":-0.375,"paltri":-0.375,"pancytopenia":-0.375,"pang":-0.375,"pantsuit":-0.375,"paraesthesia":-0.375,"paralyt":-0.25,"paranoiac":-0.375,"paraparesi":-0.375,"parasit":-0.375,"paresi":-0.375,"paresthesia":-0.375,"pasteuris":-0.25,"pasteur":-0.25,"patka":-0.375,"patronless":-0.375,"peacekeep":-0.375,"peccadillo":-0.375,"pelt":-0.292,"penalti":-0.281,"pepper":-0.312,"pepperi":-0.375,"percuss":-0.375,"perlech":-0.375,"persecut":-0.25,"petrifi":-0.375,"petticoat":-0.375,"petti":-0.375,"phalloplasti":-0.375,"phenylketonuria":-0.375,"phobophobia":-0.375,"phonophobia":-0.375,"phosgen":-0.375,"phreniti":-0.375,"picaninni":-0.375,"piccaninni":-0.375,"pickaninni":-0.375,"picklepuss":-0.375,"pieta":-0.375,"pigeon":-0.375,"pillag":-0.25,"pirana":-0.375,"pisser":-0.437,"pitchston":-0.375,"pitiabl":-0.375,"pixil":-0.437,"plaint":-0.375,"platitudin":-0.375,"pleonasm":-0.375,"pleuralgia":-0.375,"pleurodynia":-0.375,"plod":-0.375,"plonk":-0.25,"pneumoconiosi":-0.375,"pneumonia":-0.375,"pneumonoconiosi":-0.375,"pneumothorax":-0.375,"pockmark":-0.375,"poetis":-0.375,"poetiz":-0.375,"poison":-0.375,"polecat":-0.312,"polemicis":-0.375,"polemic":-0.375,"polemis":-0.375,"polem":-0.25,"poliosi":-0.375,"pollut":-0.375,"polycythemia":-0.375,"polymyos":-0.375,"polyuria":-0.375,"pommel":-0.375,"poniard":-0.375,"poof":-0.375,"poov":-0.375,"poperi":-0.375,"porphyria":-0.375,"portent":-0.292,"postul":-0.312,"postur":-0.375,"pother":-0.375,"precari":-0.312,"pretenc":-0.3,"pretens":-0.333,"pretrial":-0.375,"preveni":-0.375,"prey":-0.312,"priapism":-0.375,"prick":-0.25,"prig":-0.375,"primitiv":-0.312,"problem":-0.292,"proctalgia":-0.375,"prodroma":-0.375,"profess":-0.312,"promiscu":-0.312,"proof":0.25,"prosaic":-0.292,"protect":0.25,"protrud":-0.292,"prurigo":-0.375,"pseud":-0.375,"pseudo":-0.375,"psoriasi":-0.375,"psycho":-0.375,"psychoneurosi":-0.375,"psychosi":-0.375,"psychosomat":-0.375,"psychot":-0.375,"pugnac":-0.375,"puke":-0.375,"pullout":-0.375,"pummel":-0.375,"pungenc":-0.375,"puni":-0.375,"pushi":-0.375,"putrid":-0.25,"pyjama":-0.312,"pyre":-0.375,"pyrect":-0.375,"pyrophobia":-0.375,"quandari":-0.312,"quarantin":0.25,"quarrel":-0.25,"queer":-0.25,"quinsi":-0.375,"quisl":-0.375,"rachit":-0.375,"rachiti":-0.312,"ragged":-0.437,"raid":0.25,"rainstorm":-0.375,"rale":-0.375,"rambuncti":-0.375,"ransom":-0.375,"ranter":-0.375,"rappe":-0.375,"rapscallion":-0.312,"rascal":-0.312,"raspi":-0.375,"rat":-0.25,"rateabl":-0.375,"rattrap":-0.458,"raw":-0.406,"rebut":-0.312,"recondit":-0.375,"recreant":-0.375,"redbug":-0.375,"reef":-0.292,"reflex":-0.25,"refractori":-0.333,"refut":-0.25,"regorg":-0.375,"relaps":-0.375,"relentless":-0.375,"renegad":-0.25,"repin":-0.375,"reprob":-0.312,"rescuer":-0.312,"respit":-0.375,"restless":-0.25,"retrogress":-0.437,"retronym":-0.375,"revel":-0.375,"revelri":-0.375,"rheumat":-0.375,"rhinophyma":-0.375,"rhizotomi":-0.375,"rhodomontad":-0.375,"rhymer":-0.375,"rhymest":-0.375,"ribald":-0.375,"riboflavin":-0.375,"ricket":-0.375,"rid":-0.375,"rigidifi":-0.312,"rimless":-0.375,"riot":-0.375,"robberi":-0.312,"robusti":-0.375,"rocki":-0.281,"rodomontad":-0.375,"rofecoxib":-0.375,"roguish":-0.312,"roister":-0.375,"rosacea":-0.375,"rotter":-0.375,"rough":-0.286,"roughag":-0.375,"roughen":-0.375,"rub":-0.312,"rubbl":-0.375,"rubor":-0.375,"ruinat":-0.406,"rumbusti":-0.375,"ruse":-0.375,"sackcloth":-0.312,"sacrific":-0.375,"salient":-0.375,"salvag":-0.375,"saprob":-0.25,"saprophag":-0.375,"saprophyt":-0.312,"saprozo":-0.375,"sarcoptid":-0.375,"saturnalia":-0.375,"savageri":-0.375,"savor":-0.375,"scabbi":-0.375,"scabrous":-0.312,"scamp":-0.25,"scantili":-0.375,"scanti":-0.25,"scar":-0.437,"scentless":-0.437,"schlock":-0.375,"scleroderma":-0.375,"scoliosi":-0.375,"scorch":-0.312,"scoreless":-0.375,"scour":-0.375,"scourg":-0.292,"scrape":-0.344,"scratchi":-0.25,"scrawler":-0.375,"screak":-0.312,"screech":-0.312,"scrimi":-0.375,"scroful":-0.417,"scroog":-0.375,"scrunch":-0.375,"sculleri":-0.375,"scunner":-0.375,"scupper":-0.375,"scurfi":-0.312,"seasick":-0.375,"seedi":-0.25,"sellout":-0.375,"semblanc":-0.292,"sepulch":-0.375,"sepulchr":-0.375,"sepultur":-0.312,"serolog":-0.25,"setterwort":-0.375,"sexless":-0.25,"shabbili":-0.312,"shabbi":-0.25,"shag":-0.375,"shaki":-0.375,"shammer":-0.375,"shapeless":-0.25,"shark":-0.375,"shellproof":-0.375,"shenanigan":-0.437,"shimmer":-0.375,"shingl":-0.375,"shipwreck":-0.281,"shiver":-0.25,"shlock":-0.375,"shootout":-0.375,"shopworn":-0.375,"shortag":-0.312,"shriek":-0.375,"shuck":-0.312,"shudder":-0.25,"sick":-0.333,"siderocyt":-0.375,"sideropenia":-0.375,"sideswip":-0.375,"silicosi":-0.375,"silverish":-0.375,"simal":-0.375,"sinist":-0.375,"sizzl":-0.375,"sketchi":-0.375,"skinflint":-0.375,"skinless":-0.375,"skreak":-0.312,"slack":-0.333,"slam":-0.375,"slang":-0.375,"slaughter":-0.25,"slimi":-0.437,"slipper":-0.312,"slovenli":-0.437,"slow":-0.458,"slugfest":-0.375,"sluggard":-0.375,"slummi":-0.375,"slurp":-0.375,"smallpox":-0.375,"smear":-0.375,"smirch":-0.312,"smite":-0.333,"smutti":-0.375,"snafu":-0.25,"snarl":-0.458,"sneak":-0.281,"sneez":-0.25,"sneezer":-0.375,"snit":-0.375,"snob":-0.375,"snooker":-0.437,"snort":-0.375,"soil":-0.25,"soilur":-0.375,"sometim":-0.375,"somewher":-0.375,"sooti":-0.25,"sophism":-0.375,"sophistri":-0.375,"sourpuss":-0.375,"spadework":-0.375,"spare":0.25,"spasm":-0.312,"spasmod":-0.375,"spastic":-0.375,"spelter":-0.375,"spherocyt":-0.375,"spinal":-0.375,"splenet":-0.312,"splenomegali":-0.375,"splutter":-0.437,"spoliat":-0.312,"spook":-0.375,"sputter":-0.375,"squabbler":-0.375,"squalid":-0.375,"squall":-0.25,"squalor":-0.375,"squander":-0.375,"squiggl":-0.312,"stab":-0.312,"staghead":-0.375,"stagnant":-0.312,"stain":-0.3,"stale":-0.312,"stammer":-0.375,"stationari":-0.312,"steatopygia":-0.375,"steatorrhea":-0.375,"steel":-0.312,"stenosi":-0.375,"stern":-0.25,"stifl":-0.375,"stinker":-0.375,"stoicism":-0.375,"stolid":-0.25,"stonewal":-0.25,"strabismus":-0.375,"strafe":-0.25,"straightjacket":-0.375,"straiten":-0.375,"strangl":-0.375,"strapless":-0.375,"stratagem":-0.312,"strenuous":0.25,"strikebound":-0.375,"strikebreak":-0.25,"stubborn":-0.25,"stuck":-0.437,"stumbl":-0.312,"stumblebum":-0.312,"stunt":-0.25,"stupefi":-0.333,"stutter":-0.375,"subacid":-0.375,"subdued":-0.375,"subtleti":-0.312,"sunder":-0.375,"superbia":-0.375,"superfici":-0.375,"supernatur":-0.25,"superstiti":-0.375,"surpris":-0.25,"surprising":-0.375,"survivor":-0.375,"sutte":-0.375,"swale":-0.375,"swashbuckl":-0.25,"swat":-0.375,"swellhead":-0.375,"symptomat":-0.375,"tabard":-0.375,"tabe":-0.375,"tacki":-0.437,"tamper":-0.375,"taphephobia":-0.375,"taradiddl":-0.375,"tarant":-0.375,"tarradiddl":-0.375,"taskmast":-0.375,"tatterdemalion":-0.25,"taut":-0.312,"taxpay":-0.375,"temer":-0.375,"tempestu":-0.312,"tenia":-0.375,"tens":-0.312,"tenur":0.25,"tepid":-0.312,"tera":-0.375,"teratogenesi":-0.375,"tergivers":-0.312,"thanatopsi":-0.375,"thanksgiv":-0.375,"thermoset":-0.375,"thorni":-0.375,"thoughtless":-0.312,"threadbar":-0.437,"threat":-0.437,"thrombocytopenia":-0.375,"thrombopenia":-0.375,"thurifi":-0.375,"thwack":-0.375,"thyrocalcitonin":-0.375,"thyroid":-0.312,"timeless":-0.375,"toadstool":-0.375,"toment":-0.375,"tommyrot":-0.375,"toneless":-0.375,"topmast":-0.375,"torpor":-0.312,"tosh":-0.375,"tote":-0.375,"totter":-0.312,"touch":0.25,"tough":-0.333,"toughi":-0.375,"toxoplasmosi":-0.375,"tragedi":-0.312,"transmigr":-0.375,"trap":-0.25,"trauma":-0.312,"treason":-0.292,"trembl":-0.25,"trifurc":-0.375,"trinket":-0.375,"tripinnatifid":-0.375,"trite":-0.25,"trounc":-0.417,"truckl":-0.312,"trudg":-0.25,"tsine":-0.375,"tuff":-0.375,"tumor":-0.375,"tumour":-0.375,"tumultu":-0.375,"turbul":-0.25,"tusheri":-0.375,"tutu":-0.375,"twaddl":-0.375,"twerp":-0.375,"twirp":-0.375,"twit":-0.375,"ulalgia":-0.375,"unabridg":-0.375,"unaccustom":-0.312,"unadapt":-0.375,"unadjust":-0.312,"unadopt":-0.375,"unaid":-0.375,"unalik":-0.375,"unansw":-0.375,"unanticip":-0.375,"unarbitrari":-0.375,"unascertain":-0.375,"unascrib":-0.375,"unask":-0.375,"unassist":-0.312,"unattribut":-0.375,"unband":-0.375,"unbrush":-0.375,"uncar":-0.312,"unchang":0.25,"unclean":-0.375,"unclip":-0.375,"uncomplimentari":-0.312,"uncomprehens":-0.375,"uncondit":-0.312,"unconfirm":-0.375,"uncongeni":-0.25,"unconquer":-0.437,"unconscienti":-0.375,"unconscion":-0.375,"unconsumm":-0.375,"unconvent":-0.375,"unconvert":-0.375,"uncultiv":-0.375,"uncur":-0.375,"unded":-0.375,"undefin":-0.25,"undeni":-0.375,"undepict":-0.375,"underbelli":-0.292,"undercloth":-0.25,"underexposur":-0.375,"underneath":-0.375,"underp":-0.375,"underpopul":-0.375,"underquot":-0.437,"underr":-0.375,"undersel":-0.375,"undershot":-0.375,"undershrub":-0.375,"underskirt":-0.375,"underwear":-0.375,"undetect":-0.25,"undigest":-0.437,"undiscover":-0.375,"undream":-0.375,"undreamt":-0.375,"undu":-0.281,"unenforc":-0.375,"uneth":-0.25,"uneven":-0.25,"unexact":-0.375,"unexchang":-0.25,"unexpected":-0.375,"unexplor":-0.375,"unfaith":-0.312,"unfamiliar":-0.375,"unf":-0.437,"unfit":-0.292,"unfix":-0.375,"unfledg":-0.292,"unforeseen":-0.375,"unforfeit":-0.375,"unfund":-0.375,"ungroom":-0.375,"unheal":-0.375,"unimagin":-0.375,"unimprov":-0.375,"unindustrialis":-0.375,"unindustri":-0.375,"uninfluenti":-0.375,"uninform":-0.375,"uninspir":-0.437,"uninstruct":-0.375,"uninvit":-0.375,"unkempt":-0.375,"unknown":-0.4,"unlearn":-0.458,"unlight":-0.375,"unlit":-0.375,"unmanag":-0.375,"unmark":-0.312,"unmus":-0.417,"unnotch":-0.375,"unnot":-0.25,"unobserv":-0.25,"unpardon":-0.375,"unpatronis":-0.375,"unpatron":-0.375,"unpattern":-0.375,"unperceiv":-0.375,"unpictur":-0.375,"unpillar":-0.375,"unpointed":-0.375,"unpract":-0.375,"unpractis":-0.375,"unquestion":-0.292,"unquot":-0.375,"unratifi":-0.375,"unreact":-0.312,"unreadi":-0.375,"unreal":-0.437,"unrealist":-0.375,"unreciproc":-0.375,"unrecognis":-0.375,"unrecogniz":-0.375,"unrecogn":-0.375,"unreconcil":-0.375,"unrefresh":-0.375,"unrel":-0.375,"unrelated":-0.375,"unrenew":-0.25,"unrent":-0.375,"unrepres":-0.375,"unrequest":-0.375,"unrequit":-0.375,"unreserv":-0.375,"unresolv":-0.437,"unrespons":-0.292,"unrest":-0.375,"unretriev":-0.375,"unreverber":-0.375,"unreviv":-0.375,"unrhythm":-0.375,"unroof":-0.375,"unroug":-0.375,"unsaid":-0.375,"unsavori":-0.312,"unsavouri":-0.312,"unseamanlik":-0.375,"unseason":-0.417,"unservic":-0.375,"unservil":-0.375,"unsharpen":-0.375,"unsheath":-0.375,"unshutt":-0.375,"unsoci":-0.375,"unsoldi":-0.375,"unsolicit":-0.375,"unsolv":-0.25,"unstat":-0.375,"unstopp":0.25,"unstudi":-0.375,"unsubmiss":-0.375,"unsung":-0.375,"unsupervis":-0.375,"unsupport":-0.25,"unsuspect":-0.375,"unsympathet":-0.35,"unsympathis":-0.375,"unsympath":-0.375,"untel":-0.375,"untest":-0.375,"untooth":-0.375,"untransmut":-0.375,"untri":-0.375,"untru":-0.406,"untruth":-0.25,"untuck":-0.375,"unutt":-0.375,"unverbalis":-0.375,"unverb":-0.375,"unvers":-0.375,"unwarrant":-0.375,"unwarr":-0.292,"unwelcom":-0.437,"unwish":-0.375,"unworkmanlik":-0.375,"unyielding":-0.375,"upchuck":-0.375,"upheav":-0.25,"uproar":-0.375,"upsett":-0.375,"urarthr":-0.375,"urethr":-0.375,"urg":-0.312,"urtic":-0.312,"vaccin":-0.25,"vaccine":-0.375,"vaccinum":-0.375,"vacuiti":-0.417,"valdecoxib":-0.375,"valis":-0.375,"variola":-0.375,"varnish":-0.25,"vehem":-0.375,"vermicul":-0.375,"versifi":-0.375,"vesic":-0.375,"vestibular":-0.375,"victim":-0.312,"villain":-0.25,"villaini":-0.437,"violenc":-0.333,"virul":-0.292,"vitiat":-0.437,"vitriol":-0.25,"volvulus":-0.375,"vomer":-0.375,"vomit":-0.25,"vomitus":-0.375,"vulgarian":-0.375,"waistcoat":-0.375,"walkout":-0.437,"walli":-0.375,"wangler":-0.375,"wanker":-0.375,"want":0.25,"ward":-0.375,"warrag":-0.312,"warrig":-0.312,"warrior":-0.375,"wavi":-0.312,"weaken":-0.25,"weak":-0.275,"weasel":-0.312,"weisenheim":-0.375,"whaleboat":-0.375,"whang":-0.333,"whinston":-0.375,"whisker":-0.375,"whoope":-0.375,"wiesenboden":-0.375,"wild":-0.406,"wildcat":-0.292,"wildflow":-0.375,"winc":-0.375,"windburn":-0.375,"windburnt":-0.375,"wingless":-0.375,"wiseacr":-0.375,"wisenheim":-0.375,"witchcraft":-0.375,"witcheri":-0.375,"withstand":-0.375,"wolf":-0.292,"wooden":-0.375,"woofer":-0.375,"wop":-0.375,"workforc":-0.375,"worn":-0.437,"worsen":-0.312,"wound":-0.25,"wrack":-0.375,"wrick":-0.375,"wristlet":-0.375,"xanthomatosi":-0.375,"xeroderma":-0.375,"xerodermia":-0.375,"xeroma":-0.375,"xerophthalmia":-0.375,"xerophthalmus":-0.375,"xerostomia":-0.375,"yap":-0.375,"yashmac":-0.375,"yashmak":-0.375,"yawp":-0.375,"yaw":-0.375,"yell":-0.375,"zalcitabin":-0.375,"zap":-0.281,"zoster":-0.375,"abati":0.25,"abatti":0.25,"abaxi":0.25,"abdomin":0.25,"abet":0.25,"abient":0.25,"ablaz":0.25,"abolish":0.25,"abortifaci":0.25,"abracadabra":0.25,"abscess":0.25,"absentmind":0.25,"absolvitori":0.25,"absorbefaci":0.25,"absorpt":0.25,"abstent":0.25,"abstract":0.25,"abi":0.25,"aby":0.25,"academ":0.25,"acanthion":0.25,"acarp":0.25,"accentu":0.25,"accession":0.25,"account":-0.25,"accout":0.25,"accoutr":0.25,"accretionari":0.25,"achromatin":0.25,"acquaintanceship":0.25,"acquisit":0.25,"acrocarp":0.25,"acromion":0.25,"acronym":0.25,"actinoid":0.25,"actualis":0.25,"acuat":0.25,"acumen":0.25,"acumin":0.25,"acut":0.25,"ad":0.25,"adag":0.25,"adaptor":0.25,"adhes":0.25,"adient":0.25,"adjuratori":0.25,"adolesc":0.25,"adpress":0.25,"adrenalin":0.25,"adsorb":0.25,"adul":0.25,"advertiz":0.25,"advic":0.25,"advisori":0.25,"advocaci":0.25,"aerobiot":0.25,"aesthetician":0.25,"aether":0.25,"affidavit":0.25,"affili":0.25,"affric":0.25,"afoot":0.25,"aftercar":0.25,"afterglow":0.25,"aggrad":0.25,"aggreg":0.25,"agleam":0.25,"aglow":0.25,"agronomist":0.25,"ahead":0.25,"air":0.25,"airmanship":0.25,"ajar":0.25,"alacr":0.25,"alari":0.25,"alat":0.25,"alcalesc":0.25,"alcohol":-0.25,"alendron":0.25,"algorithm":0.25,"alibi":0.25,"aliform":0.25,"aliphat":0.25,"alkalesc":0.25,"alkalot":0.25,"alleg":0.25,"alloc":0.25,"alpenstock":0.25,"altern":0.25,"altitudin":0.25,"ambl":0.25,"ameer":0.25,"amelioratori":0.25,"amethopterin":0.25,"amir":0.25,"amnio":0.25,"amniocentesi":0.25,"amoralist":0.25,"amorist":0.25,"amphictyoni":0.25,"amygdala":0.25,"anabol":0.25,"anaclisi":0.25,"anagog":0.25,"anagram":0.25,"analges":-0.25,"analget":0.25,"analyz":0.25,"anasarc":0.25,"anatom":-0.25,"anatomist":0.25,"anatrop":0.25,"andant":0.25,"anecdot":-0.25,"anel":0.25,"angioscop":0.25,"annual":0.25,"anodyn":-0.25,"anom":0.25,"antapex":0.25,"anted":0.25,"antelop":0.25,"antenat":0.25,"antepartum":0.25,"anthropomorph":0.25,"anthroposophi":0.25,"antiauthoritarian":0.25,"anticanc":0.25,"anticlimact":0.25,"antidiabet":0.25,"antifung":0.25,"antiheret":0.25,"antiphon":0.25,"antiphonari":0.25,"antipsychot":0.25,"antiquarian":0.25,"antiquari":0.25,"antitank":0.25,"antitumor":0.25,"antitumour":0.25,"antler":0.25,"antrors":0.25,"apac":0.25,"aphorist":0.25,"apochromat":0.25,"apocop":0.25,"apologia":0.25,"apostl":0.25,"apotheosi":0.25,"appealing":0.25,"appear":0.25,"append":0.25,"appercept":0.25,"appliqu":0.25,"appoint":0.25,"apport":0.25,"apportion":0.25,"apprentic":0.25,"apprent":0.25,"appress":0.25,"appro":0.25,"approxim":-0.25,"arachnid":0.25,"arbitra":0.25,"arcadian":0.25,"arcan":0.25,"arc":0.25,"archaeorni":0.25,"archer":0.25,"architecton":0.25,"archivist":0.25,"arciform":0.25,"arcuat":0.25,"argentifer":0.25,"arios":0.25,"ariti":0.25,"armchair":0.25,"armguard":0.25,"armrest":0.25,"arrant":0.25,"arrog":0.25,"articl":0.25,"artisan":0.25,"ashram":0.25,"asinin":0.25,"aslant":0.25,"aslop":0.25,"assibil":0.25,"assign":0.25,"assimilatori":0.25,"asson":0.25,"asterion":0.25,"astoni":0.25,"astonish":0.25,"astound":0.25,"ataraxia":0.25,"atorvastatin":0.25,"atox":0.25,"attaind":0.25,"attend":0.25,"auburn":0.25,"audiotap":0.25,"audiovisu":0.25,"augment":0.25,"auricular":0.25,"auteur":0.25,"authent":0.25,"authoris":-0.25,"authorit":0.25,"author":-0.25,"autodidact":0.25,"autoeci":0.25,"autophyt":0.25,"autotel":0.25,"autotroph":0.25,"avail":0.25,"avocado":0.25,"awak":0.25,"awash":0.25,"axial":0.25,"axiolog":0.25,"azithromycin":0.25,"babassu":0.25,"babyish":0.25,"babysitt":0.25,"babysit":0.25,"background":0.25,"backroom":0.25,"balefir":0.25,"balk":-0.25,"balker":0.25,"balletomania":0.25,"ballott":0.25,"balmi":0.25,"bamboozl":0.25,"bankbook":0.25,"bann":0.25,"bantam":0.25,"barb":0.25,"bare":-0.25,"barefac":0.25,"barehead":0.25,"bareleg":0.25,"barndoor":0.25,"barter":0.25,"basic":0.25,"basketmak":0.25,"basketri":0.25,"basketweav":0.25,"basophil":0.25,"bastion":0.25,"bathtub":0.25,"batw":0.25,"baulk":0.25,"baulker":0.25,"beachbal":0.25,"bead":0.25,"bear":0.25,"beaut":0.25,"beautician":0.25,"becalm":0.25,"becoming":0.25,"bedhop":0.25,"beforehand":0.25,"befriend":0.25,"behindhand":0.25,"beig":0.25,"belat":0.25,"belittl":0.25,"bell":0.25,"bellylaugh":0.25,"benchmark":0.25,"benefact":0.25,"berk":0.25,"beseech":0.25,"bespectacl":0.25,"bespoken":0.25,"bestialis":0.25,"bestial":0.25,"bias":0.25,"bibl":0.25,"bibliot":0.25,"bicephal":0.25,"bichrom":0.25,"bicorn":0.25,"bicornu":0.25,"biennial":0.25,"bifid":0.25,"bifurc":0.25,"bigemin":0.25,"bigener":0.25,"bilabi":0.25,"bilinear":0.25,"bilingu":0.25,"billet":0.25,"biloc":0.25,"binderi":0.25,"bind":0.25,"binomin":0.25,"bioassay":0.25,"biodegrad":0.25,"bioethic":0.25,"bipar":0.25,"biradi":0.25,"biram":0.25,"birdsong":0.25,"birr":0.25,"bishopri":0.25,"bitti":0.25,"bitumast":0.25,"blabbermouth":0.25,"blackjack":0.25,"blacklist":0.25,"blanquillo":0.25,"blasphem":0.25,"blaze":-0.25,"bleat":0.25,"bleb":-0.25,"blindfold":0.25,"blink":0.25,"bloc":0.25,"blockbust":0.25,"blurb":0.25,"boast":0.25,"boat":0.25,"bodaci":0.25,"boil":0.25,"bolshevis":0.25,"bolshev":0.25,"bonfir":0.25,"bonhomi":0.25,"bonnethead":0.25,"bookabl":0.25,"book":0.25,"bookend":0.25,"boondoggl":-0.25,"bouffant":0.25,"bouff":0.25,"bound":0.25,"bounded":0.25,"boundless":-0.25,"bowman":0.25,"brainchild":0.25,"brainwash":0.25,"braless":0.25,"brasslik":0.25,"bravo":0.25,"brawn":0.25,"breve":0.25,"breviari":0.25,"brighten":0.25,"bring":0.25,"brio":0.25,"brioch":0.25,"broomstick":0.25,"brushup":0.25,"brut":0.25,"bubblejet":0.25,"buckram":0.25,"buddi":0.25,"bulgi":0.25,"bumblebe":0.25,"bun":0.25,"bunchi":0.25,"bungaloid":0.25,"burdenless":0.25,"burglarproof":0.25,"burin":0.25,"burnish":0.25,"bush":-0.25,"busi":0.25,"busywork":0.25,"butler":0.25,"button":0.25,"buttress":0.25,"buttweld":0.25,"buy":0.25,"bygon":0.25,"bypast":0.25,"byword":0.25,"cabinetri":0.25,"cach":0.25,"cadast":0.25,"cadastr":0.25,"cadenza":0.25,"caespitos":0.25,"cafeteria":0.25,"calc":0.25,"calib":0.25,"calibr":0.25,"calligraph":0.25,"calligraphist":0.25,"calumet":0.25,"camaraderi":0.25,"campfir":0.25,"camphor":0.25,"canal":0.25,"cancel":0.25,"candesc":0.25,"candid":0.25,"candi":0.25,"canonist":0.25,"cantata":0.25,"capacitor":0.25,"caparison":0.25,"capit":0.25,"cap":0.25,"carbin":0.25,"carboy":0.25,"caricatur":0.25,"carioca":0.25,"carnassi":0.25,"carniv":0.25,"cartel":0.25,"carv":0.25,"carven":0.25,"casework":0.25,"cassino":0.25,"catachrest":0.25,"catamit":0.25,"cataphoresi":0.25,"cataton":0.25,"catchpenni":0.25,"categorem":0.25,"cater":0.25,"caterwaul":0.25,"cattleya":0.25,"causat":0.25,"celebratori":0.25,"cellblock":0.25,"cenotaph":0.25,"centrifug":0.25,"centrism":0.25,"cephalopod":0.25,"certainti":0.25,"certifi":0.25,"certitud":0.25,"cespitos":0.25,"chaffinch":0.25,"chambermaid":0.25,"champaign":0.25,"champerti":0.25,"chat":0.25,"chateau":0.25,"chauvinist":0.25,"checker":0.25,"cheerer":0.25,"chequer":0.25,"chestnut":0.25,"chesti":0.25,"chiffoni":0.25,"chiropodist":0.25,"chitchat":0.25,"chivalri":0.25,"choke":0.25,"choral":0.25,"chosen":0.25,"chroma":0.25,"chromatin":0.25,"chronograph":0.25,"chronolog":0.25,"chronomet":0.25,"chump":0.25,"churchgoer":0.25,"churchgo":0.25,"churchman":0.25,"ciceron":0.25,"circumflex":0.25,"circumpolar":0.25,"circumscrib":0.25,"citifi":0.25,"cityfi":0.25,"civilian":0.25,"civilis":0.25,"civilli":0.25,"clampdown":0.25,"clang":-0.25,"clangor":0.25,"clannish":0.25,"clarion":0.25,"claver":0.25,"claxon":0.25,"clearstori":0.25,"cleavabl":0.25,"cleft":0.25,"clerestori":0.25,"cleric":0.25,"clerisi":0.25,"clevi":0.25,"climat":0.25,"climatologist":0.25,"climb":0.25,"clip":0.25,"cliqu":0.25,"cliquish":0.25,"clog":0.25,"clothesless":0.25,"clubbi":0.25,"coatdress":0.25,"coaxal":0.25,"coaxial":0.25,"cocain":0.25,"cockcrow":0.25,"cockl":0.25,"coerc":0.25,"cogent":0.25,"cohes":0.25,"cohun":0.25,"coiff":0.25,"coiffur":0.25,"coincident":0.25,"collim":0.25,"collus":0.25,"columnar":0.25,"columniform":0.25,"columnlik":0.25,"comb":0.25,"combinatori":0.25,"comeback":0.25,"comedian":0.25,"command":-0.25,"commens":0.25,"commercialis":0.25,"commerci":0.25,"committe":0.25,"commodi":0.25,"commonplac":-0.25,"communion":0.25,"comp":0.25,"compani":0.25,"compart":0.25,"compel":0.25,"competitori":0.25,"compound":0.25,"comptrol":0.25,"compuls":-0.25,"comradeli":0.25,"comraderi":0.25,"comradeship":0.25,"conceiv":0.25,"concentr":0.25,"conceptu":0.25,"conclav":0.25,"conclud":0.25,"conclus":-0.25,"concret":0.25,"concur":0.25,"concurr":0.25,"conduc":0.25,"condylion":0.25,"confect":0.25,"conglomer":0.25,"conjunct":0.25,"conjunctur":0.25,"connatur":0.25,"connot":0.25,"consensus":0.25,"conserv":0.25,"conservativist":0.25,"consolatori":0.25,"constru":0.25,"consultatori":0.25,"contain":0.25,"contest":-0.25,"contractil":0.25,"contrast":0.25,"contriv":0.25,"conven":0.25,"conventionalis":0.25,"convention":0.25,"converg":0.25,"conversationalist":0.25,"conversationist":0.25,"coo":0.25,"cooccur":0.25,"copartnership":0.25,"copperi":0.25,"coquetri":0.25,"coreid":0.25,"corn":0.25,"coronion":0.25,"corporat":0.25,"correl":0.25,"cortic":0.25,"cosmetologist":0.25,"cosmopolitan":0.25,"coteri":0.25,"cottonwick":0.25,"cottoni":0.25,"couchant":0.25,"counteract":0.25,"counterbalanc":0.25,"counterexampl":0.25,"counterfactu":0.25,"countermeasur":0.25,"counterpoint":0.25,"counterpois":0.25,"countersign":0.25,"countersubvers":0.25,"countless":0.25,"countrifi":0.25,"countryfi":0.25,"cousin":0.25,"coval":0.25,"covari":0.25,"cowbel":0.25,"cowcatch":0.25,"crackl":0.25,"crampfish":0.25,"craniolog":0.25,"cranni":0.25,"creaseless":0.25,"cred":0.25,"credo":0.25,"credul":0.25,"creed":0.25,"crenat":0.25,"cresson":0.25,"crinion":0.25,"critiqu":0.25,"croni":0.25,"croquet":0.25,"crossti":0.25,"crown":0.25,"cruciat":0.25,"cruciform":0.25,"crusad":0.25,"crux":0.25,"cryptanalyst":0.25,"cryptograph":0.25,"cryptologist":0.25,"cryptomonad":0.25,"cryptophyt":0.25,"crystallin":0.25,"crystallis":0.25,"cuddl":0.25,"cuff":0.25,"cumbersom":0.25,"cupbear":0.25,"cupid":0.25,"curio":0.25,"curli":0.25,"current":0.25,"cursor":0.25,"cursori":0.25,"curtail":0.25,"curtain":0.25,"curv":0.25,"curvey":0.25,"curvilin":0.25,"curvilinear":0.25,"cushi":0.25,"custodian":0.25,"customarili":0.25,"cyan":0.25,"cyanogenet":0.25,"cyanogen":0.25,"cyclic":0.25,"cyclopaedia":0.25,"cyclopedia":0.25,"cyclopia":0.25,"cynosur":0.25,"cyproheptadin":0.25,"cytopathogen":0.25,"cytoplast":0.25,"dabbl":0.25,"dadaism":0.25,"dado":0.25,"dale":0.25,"databl":0.25,"dateabl":0.25,"dawn":0.25,"daybreak":0.25,"daylong":0.25,"dayspr":0.25,"deadbeat":0.25,"deadpan":0.25,"debark":0.25,"debug":0.25,"debugg":0.25,"decad":0.25,"decant":0.25,"decertifi":0.25,"decim":0.25,"decipher":0.25,"decis":0.25,"deco":0.25,"decolonis":0.25,"decolon":0.25,"decommiss":0.25,"decompos":0.25,"decoupl":0.25,"decre":0.25,"defend":0.25,"deflect":0.25,"delimit":0.25,"deliquesc":0.25,"deliveryman":0.25,"deloc":0.25,"demo":0.25,"demobilis":0.25,"demobil":0.25,"demulc":0.25,"denotatum":0.25,"densitometri":0.25,"depil":0.25,"deprav":0.25,"derecognis":0.25,"derecogn":0.25,"descriptiv":0.25,"desegr":0.25,"deserving":0.25,"detaine":0.25,"detox":0.25,"deuc":0.25,"deuteranopia":0.25,"development":0.25,"devour":-0.25,"dextral":0.25,"dextrors":0.25,"diacrit":0.25,"diagrammat":0.25,"dialectician":0.25,"dialectolog":0.25,"dialyz":0.25,"diapir":0.25,"dichotomis":0.25,"dichotom":0.25,"dielectrolysi":0.25,"diestrous":0.25,"diestrual":0.25,"dietician":0.25,"dietitian":0.25,"differentia":0.25,"diffus":0.25,"diffusor":0.25,"diflunis":0.25,"diminuendo":0.25,"diminut":0.25,"dioestrous":0.25,"dioestrual":0.25,"diphthong":0.25,"diploma":0.25,"dirk":0.25,"discard":0.25,"disciplinarian":0.25,"discontented":0.25,"discontent":0.25,"discount":0.25,"discretionari":0.25,"disembark":0.25,"disembroil":0.25,"disinherit":0.25,"disintegr":0.25,"disinterested":0.25,"disinvolv":0.25,"disjoint":0.25,"dispar":0.25,"dispers":0.25,"dissect":0.25,"dissemin":0.25,"dissert":0.25,"dissolut":-0.25,"distaff":0.25,"distribut":0.25,"disyllab":0.25,"divot":0.25,"doc":0.25,"doctrinair":0.25,"doctrin":0.25,"document":0.25,"doddl":0.25,"domin":-0.25,"donnish":0.25,"doorsil":0.25,"doorstep":0.25,"dope":0.25,"dorsiflexion":0.25,"dotard":0.25,"doubl":0.25,"doveki":0.25,"dower":0.25,"downer":0.25,"downlik":0.25,"downsid":0.25,"doxazosin":0.25,"doxolog":0.25,"draft":0.25,"drainag":0.25,"drainboard":0.25,"drain":0.25,"dreamland":0.25,"dreamworld":0.25,"driven":0.25,"driveshaft":0.25,"drowsi":0.25,"drug":0.25,"dubit":0.25,"duli":0.25,"dumbstricken":0.25,"dumbstruck":0.25,"dumfound":0.25,"dumper":0.25,"duodecim":0.25,"dutiabl":0.25,"dwarfish":0.25,"dynamis":0.25,"eardrum":0.25,"earmark":0.25,"earthshak":0.25,"easel":0.25,"ecclesiast":0.25,"echoic":0.25,"eclectic":0.25,"eclecticist":0.25,"ecolog":0.25,"econom":0.25,"ecosystem":0.25,"ecumenic":0.25,"editor":0.25,"educationalist":0.25,"educationist":0.25,"eellik":0.25,"effer":0.25,"effervesc":0.25,"effet":0.25,"effortless":-0.25,"effus":0.25,"eldorado":0.25,"elect":0.25,"electrophoresi":0.25,"electroposit":0.25,"electroretinogram":0.25,"elimin":0.25,"elis":0.25,"ellipt":0.25,"elysian":0.25,"eman":0.25,"emargin":0.25,"emeer":0.25,"emir":0.25,"emolli":0.25,"empathis":0.25,"emphasis":0.25,"empir":0.25,"empower":0.25,"emul":0.25,"encas":0.25,"encircl":-0.25,"encor":0.25,"encycl":0.25,"encyclopaedia":0.25,"encyclopaedist":0.25,"encyclopedia":0.25,"encyclopedist":0.25,"endaemon":0.25,"end":0.25,"endem":0.25,"endoerg":0.25,"endogenet":0.25,"endpoint":0.25,"endur":-0.25,"energis":0.25,"energ":0.25,"enfranchis":0.25,"engrav":0.25,"enolog":0.25,"enquiri":0.25,"ensorcel":0.25,"ensur":0.25,"enterpris":-0.25,"enthron":0.25,"entir":0.25,"entireti":0.25,"entourag":0.25,"entreati":0.25,"entrench":0.25,"envelop":0.25,"eosinophil":0.25,"epicen":0.25,"epigram":0.25,"epikeratophakia":0.25,"epimorph":0.25,"epinephrin":0.25,"epistem":0.25,"epistemolog":0.25,"eq":0.25,"equanim":0.25,"equipot":0.25,"equival":0.25,"eradic":0.25,"ergotrop":0.25,"erotic":0.25,"er":0.25,"escapologist":0.25,"eschaton":0.25,"esoter":0.25,"esprit":0.25,"estazolam":0.25,"esthetician":0.25,"estoppel":0.25,"etch":0.25,"ethnocentr":0.25,"ethnolog":0.25,"ethosuximid":0.25,"eurhythm":0.25,"eurhythmi":0.25,"eurythm":0.25,"eurythmi":0.25,"evanesc":0.25,"evapor":0.25,"event":0.25,"everyday":0.25,"evidenc":0.25,"examen":0.25,"exanim":0.25,"exclaim":0.25,"exclamatori":0.25,"exclus":-0.25,"excogit":0.25,"excus":0.25,"exig":0.25,"existenti":0.25,"exoerg":0.25,"exon":0.25,"expand":0.25,"expati":0.25,"expect":0.25,"expiat":-0.25,"expressionless":0.25,"expressway":0.25,"extenu":0.25,"exterioris":0.25,"extern":0.25,"extinguish":-0.25,"extra":0.25,"extract":0.25,"extracurricular":0.25,"extramarit":0.25,"extraordinarili":0.25,"extravag":0.25,"extric":0.25,"extropi":0.25,"eyebal":0.25,"eye":0.25,"eyedrop":0.25,"eyelid":0.25,"eyelik":0.25,"eyepatch":0.25,"eyeshot":0.25,"facepl":0.25,"facial":0.25,"fad":0.25,"faddish":0.25,"faddi":0.25,"fag":0.25,"fairground":0.25,"falcat":0.25,"falchion":0.25,"falciform":0.25,"falconri":0.25,"falter":0.25,"fanat":0.25,"fantasia":0.25,"fantasm":0.25,"farfetch":0.25,"farrow":0.25,"farse":0.25,"fastidi":0.25,"fatherli":0.25,"fatigu":-0.25,"fat":0.25,"fatuous":0.25,"faultfind":-0.25,"feather":0.25,"featheri":-0.25,"febril":0.25,"fedellin":0.25,"fellat":0.25,"fencer":0.25,"fenestella":0.25,"ferment":0.25,"ferroconcret":0.25,"fertilis":0.25,"fervent":-0.25,"fervor":0.25,"fervour":0.25,"festschrift":0.25,"fete":0.25,"feudal":0.25,"feudatori":0.25,"fibrillos":0.25,"fibrocalcif":0.25,"fiction":0.25,"fight":0.25,"figur":0.25,"filial":0.25,"final":0.25,"financ":0.25,"fineri":0.25,"finit":-0.25,"finitud":0.25,"firebas":0.25,"fireplac":0.25,"firewat":0.25,"firm":0.25,"firsthand":0.25,"flabbergast":0.25,"flagston":0.25,"flail":0.25,"flameproof":0.25,"flan":0.25,"fledgel":0.25,"flee":0.25,"fleeci":0.25,"flesh":0.25,"flexuous":0.25,"flirtat":0.25,"flirt":0.25,"floati":0.25,"floccul":0.25,"flood":0.25,"flossi":0.25,"flouri":0.25,"flower":0.25,"fluffi":-0.25,"fluoresc":0.25,"fli":0.25,"fogbound":0.25,"fogey":0.25,"fogi":0.25,"foliol":0.25,"folktal":0.25,"footbridg":0.25,"footrac":0.25,"footstal":0.25,"forcibl":0.25,"forearm":0.25,"forego":0.25,"foregon":0.25,"foreknowledg":0.25,"foreordain":0.25,"forestal":0.25,"forfic":0.25,"forgett":0.25,"forgiv":0.25,"formula":0.25,"formul":0.25,"fort":0.25,"forum":0.25,"foryml":0.25,"foulard":0.25,"fragranc":0.25,"fragrant":0.25,"fraternis":0.25,"fratern":0.25,"freelanc":0.25,"freestyl":0.25,"freeway":0.25,"fring":0.25,"fringi":0.25,"frolic":0.25,"frugal":0.25,"fulgent":0.25,"fulli":0.25,"fume":0.25,"fund":0.25,"funfair":0.25,"fungicid":0.25,"funni":0.25,"furbish":0.25,"furl":0.25,"fuscous":0.25,"fusibl":0.25,"fusiform":0.25,"fuzz":0.25,"gaga":0.25,"gambol":0.25,"gangl":0.25,"gang":0.25,"garbolog":0.25,"garmentless":0.25,"garnishe":0.25,"gash":0.25,"gatepost":0.25,"gather":0.25,"gauntlet":0.25,"gemmul":0.25,"genetic":0.25,"genteel":0.25,"gentl":0.25,"genuin":0.25,"geograph":0.25,"geolog":0.25,"geometr":0.25,"geopolit":0.25,"geordi":0.25,"gerrymand":0.25,"gesso":0.25,"gesticul":0.25,"gibber":0.25,"gibberish":0.25,"gingerroot":0.25,"girder":0.25,"glabella":0.25,"glabresc":0.25,"glabrous":0.25,"glari":0.25,"gleam":0.25,"glimmer":0.25,"globalis":0.25,"global":0.25,"globos":0.25,"globular":0.25,"gloriol":0.25,"glottochronolog":0.25,"gnarl":0.25,"gnar":0.25,"gnathostom":0.25,"gnosi":0.25,"goddam":0.25,"goddamn":0.25,"godli":0.25,"goldmin":0.25,"golf":0.25,"gradabl":0.25,"gradat":0.25,"gradatori":0.25,"graduat":0.25,"grammat":0.25,"gramophon":0.25,"granitewar":0.25,"graspabl":0.25,"gratif":0.25,"graven":0.25,"grave":-0.25,"green":0.25,"groov":0.25,"ground":0.25,"grow":0.25,"growl":-0.25,"guarantor":0.25,"guardian":0.25,"guardrail":0.25,"guidebook":0.25,"guild":0.25,"guileless":0.25,"gula":0.25,"gummi":0.25,"gunstock":0.25,"gusher":0.25,"gymkhana":0.25,"gymnast":0.25,"gynandromorph":0.25,"haecceiti":0.25,"hallucinogen":0.25,"handbel":0.25,"handbreadth":0.25,"handcraft":0.25,"handcuff":0.25,"handed":0.25,"handheld":0.25,"handicapp":0.25,"handiwork":0.25,"handsbreadth":0.25,"handwork":0.25,"handwoven":0.25,"harlotri":0.25,"har":0.25,"haughti":-0.25,"haul":0.25,"hauteur":0.25,"hawfinch":0.25,"hazan":0.25,"hazi":0.25,"headfirst":0.25,"headlik":0.25,"headlines":0.25,"headlong":0.25,"headquart":0.25,"headstock":0.25,"headwait":0.25,"hearsay":0.25,"heartland":0.25,"heavenward":0.25,"helmet":0.25,"helpdesk":0.25,"hemiparasit":0.25,"hemostat":0.25,"henpeck":0.25,"here":0.25,"hereditarian":0.25,"hereditari":0.25,"heretofor":0.25,"herit":0.25,"heroin":-0.25,"herrerasaur":0.25,"herrerasaurus":0.25,"hesit":-0.25,"heterodactyl":0.25,"heterometabol":0.25,"heterosex":0.25,"heterospor":0.25,"heterotroph":0.25,"heurist":0.25,"hifalutin":0.25,"higher":0.25,"highfalutin":0.25,"highfalut":0.25,"highflier":0.25,"highflyer":0.25,"high":0.25,"hilt":0.25,"hinder":0.25,"hippi":0.25,"hipster":0.25,"hitchhik":0.25,"hitherto":0.25,"hobnail":0.25,"hoggish":0.25,"holist":0.25,"holograph":0.25,"homag":0.25,"home":0.25,"homebound":0.25,"homebrew":0.25,"homemak":0.25,"homeotherm":0.25,"homeown":0.25,"homili":0.25,"homin":0.25,"homocentr":0.25,"homocycl":0.25,"homoeci":0.25,"homoerotic":0.25,"homoiotherm":0.25,"homosexu":0.25,"homotherm":0.25,"honesti":0.25,"honorari":0.25,"hooklik":0.25,"hook":0.25,"hoover":0.25,"horolog":0.25,"hospitalis":0.25,"hostler":0.25,"houri":0.25,"hourlong":0.25,"houseboat":0.25,"housefath":0.25,"household":0.25,"houseman":0.25,"housewif":0.25,"huddl":0.25,"humanis":0.25,"humanitarian":0.25,"humanlik":0.25,"humblebe":0.25,"humid":0.25,"humidifi":0.25,"hungri":0.25,"hyalin":0.25,"hyaloid":0.25,"hydrogen":0.25,"hydrophil":0.25,"hydrophyt":0.25,"hygienis":0.25,"hyoscyamin":0.25,"hypercapnia":0.25,"hypercarbia":0.25,"hypercrit":0.25,"hyperglycaemia":0.25,"hyperglycemia":0.25,"hypnagog":0.25,"hypnogog":0.25,"hypopnea":0.25,"hypothalam":0.25,"iceboat":0.25,"icebreak":0.25,"iconoscop":0.25,"icterogen":0.25,"imag":0.25,"immacul":0.25,"immemori":0.25,"immunofluoresc":0.25,"immunogen":0.25,"impenit":0.25,"imperm":0.25,"implant":0.25,"implic":0.25,"implor":0.25,"imposs":0.25,"impract":0.25,"improvis":0.25,"inamorata":0.25,"inamorato":0.25,"incas":0.25,"incest":0.25,"incit":-0.25,"incognito":0.25,"incomput":0.25,"inconclus":0.25,"inconsider":-0.25,"increas":0.25,"inculc":0.25,"incurv":0.25,"indaba":0.25,"indentur":0.25,"individualis":0.25,"indivis":0.25,"induc":0.25,"indur":0.25,"inerr":-0.25,"inestim":0.25,"infal":0.25,"infect":0.25,"inferenti":0.25,"infirmari":0.25,"infrar":0.25,"ingrain":0.25,"ingroup":0.25,"inherit":0.25,"inhibit":0.25,"inhibitor":0.25,"inion":0.25,"initi":0.25,"initiatori":0.25,"innoc":-0.25,"inoffens":0.25,"inordin":-0.25,"inquiri":0.25,"inquisitori":0.25,"insist":0.25,"instig":-0.25,"instil":0.25,"institut":0.25,"insular":0.25,"intelligentsia":0.25,"intemper":0.25,"intensifi":0.25,"intercalari":0.25,"intercept":-0.25,"interdepend":0.25,"interdisciplinari":0.25,"interested":0.25,"intermarriag":0.25,"intermin":0.25,"intern":0.25,"interrel":0.25,"interrogatori":0.25,"intersect":0.25,"introspect":0.25,"intrust":0.25,"intuit":0.25,"intuition":0.25,"inunct":0.25,"inund":0.25,"inventori":0.25,"inward":0.25,"iodis":0.25,"iodiz":0.25,"iodochlorhydroxyquin":0.25,"ionophoresi":0.25,"ionospher":0.25,"iron":0.25,"ironlik":0.25,"ironman":0.25,"ism":0.25,"isocycl":0.25,"isoniazid":0.25,"isoscel":0.25,"isosmot":0.25,"ital":0.25,"jabber":0.25,"jack":0.25,"jam":0.25,"jampan":0.25,"jawbon":0.25,"jibe":0.25,"jigger":0.25,"jive":0.25,"jollif":0.25,"journeyman":0.25,"justif":0.25,"justificatori":0.25,"juxtapos":0.25,"kaleidoscop":0.25,"karaok":0.25,"keratoplasti":0.25,"killabl":0.25,"kindli":0.25,"kindr":0.25,"klaxon":0.25,"knitwork":0.25,"knob":0.25,"knucklebon":0.25,"koinonia":0.25,"kotow":0.25,"kowtow":0.25,"label":0.25,"lacelik":0.25,"laci":0.25,"ladder":0.25,"laid":0.25,"laiti":0.25,"lalli":0.25,"lambent":0.25,"lampoon":0.25,"lancelik":0.25,"lanceol":0.25,"lanki":0.25,"later":0.25,"laugher":0.25,"lawcourt":0.25,"lazulin":0.25,"lbf":0.25,"lecher":0.25,"lectern":0.25,"leechlik":0.25,"leftism":0.25,"legato":0.25,"legerdemain":0.25,"leger":0.25,"leggi":0.25,"legisl":0.25,"lender":0.25,"leniti":0.25,"leresi":0.25,"lesbian":0.25,"liegeman":0.25,"lieu":0.25,"lifelong":0.25,"lifes":0.25,"lifework":0.25,"likelihood":0.25,"likeli":0.25,"limpid":0.25,"lindi":0.25,"lingual":0.25,"linguist":0.25,"linstock":0.25,"lionis":0.25,"lioniz":0.25,"lip":0.25,"liquefi":0.25,"liquesc":0.25,"liquifi":0.25,"list":0.25,"litot":0.25,"livestock":0.25,"llano":0.25,"local":0.25,"localis":0.25,"locat":0.25,"locomot":0.25,"longanim":0.25,"longitud":0.25,"longsight":0.25,"longstand":0.25,"longtim":0.25,"lossless":0.25,"lucent":0.25,"lucubr":0.25,"luge":0.25,"lulu":0.25,"lumin":0.25,"luminesc":0.25,"luminos":0.25,"lycanthropi":0.25,"lyophilis":0.25,"lyophil":0.25,"machmet":0.25,"macrobiot":0.25,"macron":0.25,"macroscop":-0.25,"madra":0.25,"maglev":0.25,"mahlstick":0.25,"maidenli":0.25,"mail":0.25,"majuscular":0.25,"majuscul":0.25,"makeshift":0.25,"maladapt":0.25,"malvasia":0.25,"mammalogist":0.25,"manacl":0.25,"manic":0.25,"manlik":0.25,"manli":0.25,"manus":0.25,"marbleis":0.25,"marbleiz":0.25,"marcel":0.25,"margin":-0.25,"maroon":-0.25,"marqu":0.25,"martinet":0.25,"masculin":0.25,"mass":0.25,"massag":0.25,"mastership":0.25,"mastoidal":0.25,"masturb":0.25,"matchboard":0.25,"mateless":0.25,"materi":0.25,"matine":0.25,"matrilin":0.25,"matrilinear":0.25,"mattock":0.25,"maulstick":0.25,"maverick":0.25,"meadowgrass":0.25,"meander":0.25,"meati":0.25,"meclofenam":0.25,"median":0.25,"meetinghous":0.25,"meliorist":0.25,"melodis":0.25,"meltabl":0.25,"melt":0.25,"memorabilia":0.25,"mend":-0.25,"mepacrin":0.25,"mercenari":0.25,"merchandis":0.25,"meringu":0.25,"merrymak":0.25,"mesophyron":0.25,"mesophyt":0.25,"metabol":0.25,"metacarpus":0.25,"metaknowledg":0.25,"metaphor":0.25,"metaphys":0.25,"metast":0.25,"methanogen":0.25,"methenamin":0.25,"methotrex":0.25,"metonym":0.25,"metonymi":0.25,"metopion":0.25,"metronom":0.25,"mew":0.25,"mexiletin":0.25,"mezuza":0.25,"mezuzah":0.25,"miasmal":0.25,"microphotomet":0.25,"middlemost":0.25,"midget":0.25,"midmost":0.25,"midsumm":0.25,"might":0.25,"mightili":0.25,"militaris":0.25,"militar":0.25,"milldam":0.25,"millennium":0.25,"mine":0.25,"miniatur":0.25,"minimum":-0.25,"miniscul":0.25,"miotic":0.25,"misalli":0.25,"misbehav":0.25,"misdemean":0.25,"misfeas":0.25,"mission":0.25,"missionari":0.25,"misti":0.25,"misunderstood":0.25,"mithramycin":0.25,"mnemon":0.25,"mob":0.25,"mod":-0.25,"moderat":0.25,"moderato":0.25,"modernist":0.25,"moisturis":0.25,"moistur":0.25,"molal":0.25,"mold":0.25,"monestr":0.25,"monitor":0.25,"monocl":0.25,"monoestr":0.25,"monogen":0.25,"monosyllab":0.25,"monoth":0.25,"monthlong":0.25,"moot":0.25,"morganat":0.25,"morganit":0.25,"morpholog":0.25,"mot":0.25,"motet":0.25,"motherli":0.25,"motori":0.25,"motorway":0.25,"mouser":0.25,"movi":0.25,"muggi":0.25,"multidimension":0.25,"multiethn":0.25,"multipli":0.25,"multipurpos":0.25,"multiraci":0.25,"multitudin":0.25,"mum":0.25,"mundan":0.25,"munific":0.25,"muscular":0.25,"muser":0.25,"musicianship":0.25,"mutafaci":0.25,"mutagen":0.25,"mutant":0.25,"mutual":-0.25,"mutualist":0.25,"mydriat":0.25,"myofibril":0.25,"myofibrilla":0.25,"myotic":0.25,"myriad":0.25,"myringa":0.25,"mystic":0.25,"mystiqu":0.25,"mythologist":0.25,"nailbrush":0.25,"naked":0.25,"naltrexon":0.25,"nankeen":0.25,"nap":-0.25,"naprapathi":0.25,"narcotis":0.25,"narcot":0.25,"narrow":0.25,"nascenc":0.25,"nasion":0.25,"nativ":0.25,"natter":0.25,"naturist":0.25,"navig":0.25,"nearbi":-0.25,"near":0.25,"nebuchadnezzar":0.25,"nee":0.25,"needlelik":0.25,"negat":-0.25,"negoti":0.25,"negroid":0.25,"neigh":0.25,"neo":0.25,"neoclassic":0.25,"neostigmin":0.25,"netlik":0.25,"neurobiolog":0.25,"neuroeth":0.25,"neurolept":0.25,"newfound":0.25,"newslett":0.25,"newssheet":0.25,"nib":0.25,"nicker":0.25,"nicknam":0.25,"nilpot":0.25,"ninon":0.25,"nip":0.25,"nitid":0.25,"nitrofurantoin":0.25,"noetic":0.25,"nombril":0.25,"nomia":0.25,"nomin":0.25,"nonappoint":0.25,"noncommiss":0.25,"noncompli":-0.25,"nonelect":0.25,"nonglutin":0.25,"nonimmun":0.25,"nonkosh":0.25,"nonmotil":0.25,"nonparasit":0.25,"nonpoison":0.25,"nonresin":0.25,"nonresini":0.25,"nonsegreg":0.25,"nonsymbiot":0.25,"nonviscid":0.25,"nonwork":0.25,"nosh":0.25,"nostalgia":0.25,"notifi":0.25,"novat":0.25,"nuke":-0.25,"numberless":0.25,"numbfish":0.25,"nurtur":0.25,"nutritionist":0.25,"nymphet":0.25,"obelion":0.25,"obiism":0.25,"oblat":0.25,"obstruct":0.25,"obtrus":0.25,"obviat":0.25,"occlus":0.25,"octosyllab":0.25,"oenolog":0.25,"officiales":0.25,"olden":0.25,"oldi":0.25,"olfact":0.25,"ommastreph":0.25,"omnipres":0.25,"omnirang":0.25,"omnisci":0.25,"ongo":0.25,"onomasticon":0.25,"onomatopoet":0.25,"onym":0.25,"onyxi":0.25,"opalesc":0.25,"opalin":0.25,"open":0.25,"openhanded":0.25,"ophryon":0.25,"opisthognath":0.25,"oppugn":0.25,"orat":0.25,"oratorio":0.25,"ordinari":0.25,"orgasm":0.25,"orinas":0.25,"ornament":0.25,"ornamentalist":0.25,"ornat":0.25,"orthostat":0.25,"oscil":0.25,"oscillatori":0.25,"osteolog":0.25,"osteologist":0.25,"osteopathi":0.25,"ostler":0.25,"outermost":0.25,"outgo":0.25,"out":-0.25,"outmost":0.25,"outrig":0.25,"outshout":0.25,"outsid":0.25,"outsiz":0.25,"outwork":0.25,"over":0.25,"overcrit":0.25,"overcross":0.25,"overdel":0.25,"overexposur":0.25,"overflow":0.25,"overgener":0.25,"overh":0.25,"oversex":0.25,"overs":0.25,"overstuf":0.25,"oversuppli":0.25,"overvalu":0.25,"overzeal":0.25,"oxyphenbutazon":0.25,"packabl":0.25,"paediatrician":0.25,"pagoda":0.25,"pal":0.25,"palaeoanthropolog":0.25,"palatopharyngoplasti":0.25,"paleoanthropolog":0.25,"palpabl":0.25,"palpebra":0.25,"pamper":-0.25,"panoram":0.25,"pantryman":0.25,"paradiddl":0.25,"paramagnet":0.25,"paramed":0.25,"parang":0.25,"parcel":0.25,"parent":0.25,"parimutuel":0.25,"paripinn":0.25,"parlanc":0.25,"parodi":0.25,"paronomasia":0.25,"paroxetim":0.25,"parrotlik":0.25,"parson":0.25,"pasquinad":0.25,"passado":0.25,"passbook":0.25,"pastor":0.25,"patholog":0.25,"patrilin":0.25,"patrilinear":0.25,"patrimoni":0.25,"patrol":0.25,"patronag":0.25,"patsi":0.25,"paunchi":0.25,"pave":0.25,"pawnbrok":0.25,"pawnshop":0.25,"paymast":0.25,"payola":0.25,"pearlesc":0.25,"peasanthood":0.25,"pedagog":0.25,"pedagogi":0.25,"pedant":0.25,"pedest":0.25,"pediatrician":0.25,"pediatrist":0.25,"pedicur":0.25,"peek":0.25,"pentasyllab":0.25,"pep":0.25,"perceptu":0.25,"perdur":0.25,"perfervid":0.25,"perfor":0.25,"periapsi":0.25,"perihelion":0.25,"periwig":0.25,"perpetr":-0.25,"personalis":0.25,"peruk":0.25,"pesantran":0.25,"pesantren":0.25,"petit":-0.25,"petitionari":0.25,"phaeton":0.25,"phalarop":0.25,"phantasm":0.25,"phantasma":0.25,"phantom":-0.25,"pharmaceut":0.25,"pharmacokinet":0.25,"pharmacolog":0.25,"phasianid":0.25,"phenomenolog":0.25,"philosoph":0.25,"philosophi":0.25,"phonat":0.25,"phonem":0.25,"phonic":0.25,"phonolog":0.25,"photochemistri":0.25,"photomet":0.25,"photometri":0.25,"photospher":0.25,"phraseolog":0.25,"physician":0.25,"pictograph":0.25,"pictur":0.25,"piecem":-0.25,"pierc":0.25,"piggish":0.25,"piggi":0.25,"pilgrimag":0.25,"pile":0.25,"pillow":0.25,"pinchbeck":-0.25,"piroxicam":0.25,"pitprop":0.25,"pizzicato":0.25,"place":0.25,"placent":0.25,"placer":0.25,"plagiaris":0.25,"plagiarist":0.25,"plagiar":0.25,"planaria":0.25,"planarian":0.25,"plane":0.25,"plangent":0.25,"plankton":0.25,"plan":0.25,"plash":0.25,"plat":0.25,"playth":0.25,"plead":0.25,"plebeian":0.25,"plinth":0.25,"ploce":0.25,"plushi":0.25,"pocketcomb":0.25,"podiatrist":0.25,"podlik":0.25,"poeciliid":0.25,"pogonion":0.25,"point":0.25,"pointed":0.25,"poltroon":-0.25,"polyestr":0.25,"polygen":0.25,"polyoestr":0.25,"polysyllab":0.25,"polysyndeton":0.25,"polyval":0.25,"popgun":0.25,"popov":0.25,"pop":0.25,"popul":0.25,"populist":0.25,"porker":0.25,"position":0.25,"postmodern":0.25,"postop":0.25,"potbelli":0.25,"pour":0.25,"powder":0.25,"preachment":0.25,"precat":0.25,"precatori":0.25,"precios":0.25,"precipit":0.25,"preclus":0.25,"precoci":0.25,"precognit":0.25,"predestin":0.25,"predict":-0.25,"prednisolon":0.25,"preemptiv":0.25,"prehensil":0.25,"prejudg":0.25,"preliminari":0.25,"premis":0.25,"premiss":0.25,"prenat":0.25,"prentic":0.25,"preoper":0.25,"prepot":0.25,"prescript":0.25,"prescriptiv":0.25,"pressur":0.25,"prevent":0.25,"prewar":0.25,"pride":0.25,"priesthood":0.25,"priest":0.25,"primaev":0.25,"primev":0.25,"primidon":0.25,"primordi":0.25,"primp":0.25,"privi":0.25,"probe":0.25,"probiot":0.25,"profession":0.25,"progressiv":0.25,"prolix":-0.25,"promulg":0.25,"pronat":0.25,"prongi":0.25,"properti":0.25,"proport":0.25,"propriocept":0.25,"prop":0.25,"prospect":0.25,"prostheon":0.25,"prosthion":0.25,"prosthodontist":0.25,"prostitut":0.25,"protagon":0.25,"protanopia":0.25,"protean":0.25,"protector":0.25,"protectorship":0.25,"proteg":0.25,"prothalamion":0.25,"prothalamium":0.25,"proto":0.25,"protogeometr":0.25,"protolog":0.25,"prototyp":0.25,"proverb":0.25,"provoc":0.25,"proxem":0.25,"pseudohermaphrodit":0.25,"psychoact":0.25,"psychotrop":0.25,"psyop":0.25,"pteridologist":0.25,"puff":0.25,"puf":0.25,"pufferi":0.25,"puissant":0.25,"pulley":0.25,"pulveris":0.25,"pulver":0.25,"pun":0.25,"pungent":0.25,"purchas":0.25,"purr":0.25,"purview":0.25,"pussycat":0.25,"putout":0.25,"pyrotechn":-0.25,"pyrotechni":0.25,"quadrat":0.25,"quaint":0.25,"qualit":0.25,"quark":0.25,"quarter":0.25,"quicken":0.25,"quiff":0.25,"quinacrin":0.25,"quinidin":0.25,"quintessenti":0.25,"quip":0.25,"quiz":0.25,"quotidian":0.25,"racecours":0.25,"racetrack":0.25,"racialist":0.25,"radianc":0.25,"radiat":0.25,"radioact":0.25,"radiochemistri":0.25,"radioluc":0.25,"raffl":0.25,"rafter":0.25,"ragtim":0.25,"raimentless":0.25,"rain":0.25,"rainless":0.25,"rang":0.25,"rant":0.25,"rapport":0.25,"rapproch":0.25,"rase":0.25,"rattlebrain":0.25,"rattlep":0.25,"rave":0.25,"raze":0.25,"reactionari":0.25,"readabl":0.25,"readmiss":0.25,"real":0.25,"realpolitik":0.25,"rebind":0.25,"reborn":0.25,"recept":0.25,"recession":0.25,"recip":0.25,"reclam":0.25,"reclus":0.25,"recompens":0.25,"rector":0.25,"rectorship":0.25,"recurr":0.25,"redol":0.25,"redux":0.25,"reedlik":0.25,"reedi":0.25,"refashion":0.25,"refect":0.25,"refinish":0.25,"reflectoris":0.25,"refractil":0.25,"refract":0.25,"reific":0.25,"reincarn":0.25,"reinstat":0.25,"relent":0.25,"religionist":0.25,"reliquari":0.25,"remak":0.25,"remuner":0.25,"rentier":0.25,"reopen":0.25,"repechag":0.25,"report":0.25,"repossess":0.25,"repp":0.25,"rescind":0.25,"resurrect":0.25,"retard":0.25,"rethink":0.25,"retinu":0.25,"retouch":0.25,"retread":0.25,"retrench":0.25,"retriev":0.25,"retroact":0.25,"revis":0.25,"revolution":0.25,"rewir":0.25,"rhinoplasti":0.25,"rhyme":0.25,"ribavirin":0.25,"rifampin":0.25,"righthand":0.25,"rightish":0.25,"rightism":0.25,"rime":0.25,"risen":0.25,"rite":0.25,"ritual":0.25,"ritualist":0.25,"rogat":0.25,"roleplay":0.25,"romanticis":0.25,"romantic":0.25,"romp":0.25,"rose":0.25,"roseat":0.25,"roug":0.25,"rounded":0.25,"roundsman":0.25,"routin":0.25,"rudiment":0.25,"ruli":0.25,"runti":0.25,"rural":0.25,"russet":0.25,"rust":0.25,"rustless":0.25,"sacred":0.25,"sacristan":0.25,"sainthood":0.25,"saintli":0.25,"salaci":0.25,"salesmanship":0.25,"salti":0.25,"salv":0.25,"sanctitud":0.25,"sanctiti":0.25,"sandboy":0.25,"sapid":0.25,"saponac":0.25,"sapphic":0.25,"sarcostyl":0.25,"satur":0.25,"scallop":0.25,"scant":0.25,"scatti":0.25,"scepter":0.25,"sceptr":0.25,"schmoos":0.25,"schmooz":0.25,"schmoozer":0.25,"schoolwork":0.25,"scientif":0.25,"scientist":0.25,"scolion":0.25,"scoreboard":0.25,"scorekeep":0.25,"scotch":-0.25,"screaki":0.25,"script":0.25,"scriptur":0.25,"scrumptious":0.25,"sculpt":0.25,"scurri":0.25,"sec":0.25,"secular":0.25,"segreg":0.25,"selfless":0.25,"selfsam":0.25,"sell":0.25,"semicircular":0.25,"semicomatos":0.25,"semiconsci":0.25,"semiempir":0.25,"semiform":0.25,"semin":0.25,"semioffici":0.25,"semiparasit":0.25,"semiskil":0.25,"semisoft":0.25,"semitranspar":0.25,"sendup":0.25,"sensibilis":0.25,"sensibil":0.25,"sensifi":0.25,"sensitis":0.25,"sensit":-0.25,"sensori":0.25,"sententi":0.25,"sentient":0.25,"sentimentalis":0.25,"sentiment":0.25,"sequenti":0.25,"seriocomedi":0.25,"serpentin":0.25,"serrat":0.25,"sertralin":0.25,"servo":0.25,"servomechan":0.25,"servosystem":0.25,"sew":0.25,"sewn":0.25,"sexist":0.25,"sexploit":0.25,"sexton":0.25,"sexualis":0.25,"shadow":0.25,"shahadah":0.25,"sheen":0.25,"shielder":0.25,"shirtdress":0.25,"shirtwaist":0.25,"shitlist":0.25,"shmoos":0.25,"shmooz":0.25,"shovelhead":0.25,"shun":0.25,"shutter":0.25,"sidekick":0.25,"signatori":0.25,"signboard":0.25,"silvicultur":0.25,"simultan":0.25,"sinistr":0.25,"sinistrors":0.25,"sinuous":0.25,"sinusoid":0.25,"sirdar":0.25,"sitcom":0.25,"situat":0.25,"skedaddl":0.25,"skeg":0.25,"skew":0.25,"skyward":0.25,"slant":-0.25,"slapdash":0.25,"slapper":0.25,"slavehold":0.25,"slavish":0.25,"sleepless":0.25,"sleepov":0.25,"sleev":0.25,"sleight":0.25,"slim":0.25,"slippi":0.25,"slipshod":0.25,"slitheri":0.25,"slope":-0.25,"small":0.25,"smallish":0.25,"smitten":0.25,"smoothen":0.25,"snakelik":0.25,"snaki":0.25,"snaplin":0.25,"sober":0.25,"socialit":0.25,"sociobiolog":0.25,"sociolinguist":0.25,"sociolog":0.25,"sod":0.25,"soften":0.25,"softish":0.25,"solubl":0.25,"solvent":0.25,"somatogenet":0.25,"somatogen":0.25,"some":0.25,"somebodi":0.25,"someon":0.25,"somewhat":0.25,"somnifer":0.25,"somnif":0.25,"songbird":0.25,"songlik":0.25,"sonnet":0.25,"sonor":0.25,"sorbat":0.25,"sorb":0.25,"sorbefaci":0.25,"sorrel":0.25,"soundman":0.25,"southern":0.25,"sovereign":0.25,"spacecraft":0.25,"spaceship":0.25,"spacial":0.25,"spatial":0.25,"spatter":0.25,"spatul":0.25,"spearpoint":0.25,"specialist":0.25,"speckless":0.25,"spectacl":-0.25,"spectacular":0.25,"spectrophotomet":0.25,"speedili":0.25,"speedup":0.25,"spheric":0.25,"spic":0.25,"spick":0.25,"spiff":0.25,"spinnbar":0.25,"spirited":0.25,"spiritis":0.25,"splatter":0.25,"splint":0.25,"spondais":0.25,"spongelik":0.25,"spongi":0.25,"sponsorship":0.25,"spoof":0.25,"spotless":0.25,"spotweld":0.25,"spread":0.25,"sprechgesang":0.25,"sprechstimm":0.25,"sprightli":0.25,"squama":0.25,"squarish":0.25,"squeaker":0.25,"squilla":0.25,"stableboy":0.25,"staff":0.25,"stainabl":0.25,"stair":0.25,"stall":0.25,"stammel":0.25,"stanchion":0.25,"stape":0.25,"staret":0.25,"stargaz":0.25,"starship":0.25,"stash":0.25,"statant":0.25,"statist":0.25,"stativ":0.25,"statuari":0.25,"statur":0.25,"stead":0.25,"stellar":0.25,"stenos":0.25,"stenot":0.25,"stent":0.25,"stentorian":0.25,"stephanion":0.25,"stepp":0.25,"stepwis":0.25,"sternpost":0.25,"stigmat":-0.25,"stigmatist":0.25,"stillbirth":0.25,"stilli":0.25,"stilt":0.25,"stimulus":0.25,"stint":0.25,"stipulatori":0.25,"stirrup":0.25,"stitch":0.25,"stocker":0.25,"stocktak":0.25,"stomatopod":0.25,"stone":-0.25,"stopgap":0.25,"stouthearted":0.25,"straightaway":-0.25,"strand":0.25,"strapado":0.25,"strappado":0.25,"stripe":0.25,"stripl":0.25,"stripi":0.25,"stroll":0.25,"studi":0.25,"stunted":0.25,"stylemark":0.25,"stylis":0.25,"styliz":0.25,"styptic":0.25,"suasibl":0.25,"subcontin":0.25,"subcultur":0.25,"subduabl":0.25,"subscrib":0.25,"subsidiari":0.25,"subterranean":0.25,"subterran":0.25,"subvent":0.25,"succeed":0.25,"suffrag":0.25,"sugarcoat":0.25,"sugar":0.25,"sulfa":0.25,"sulfisoxazol":0.25,"sulfonamid":0.25,"sulpha":0.25,"sultri":0.25,"summat":0.25,"sumpsimus":0.25,"sumptuari":0.25,"sunup":0.25,"superbl":0.25,"supercrit":0.25,"supergi":0.25,"superhuman":0.25,"superincumb":0.25,"supervisori":0.25,"supplement":0.25,"supplementari":0.25,"supplier":0.25,"suppress":0.25,"supra":0.25,"supraocular":0.25,"supraorbit":0.25,"supremac":0.25,"supremaci":0.25,"supremo":0.25,"surrebutt":0.25,"surrejoind":0.25,"surreptiti":0.25,"surround":0.25,"sustent":0.25,"swagger":-0.25,"swami":0.25,"swap":0.25,"swash":0.25,"swatch":0.25,"sweeten":0.25,"sweetmeat":0.25,"swelter":-0.25,"sweltri":0.25,"swept":0.25,"sweptw":0.25,"swishi":0.25,"switchblad":0.25,"swoosh":-0.25,"swop":0.25,"swordplay":0.25,"swosh":0.25,"symbiot":0.25,"sympathet":0.25,"symphonis":0.25,"symphys":0.25,"synchron":0.25,"synchronis":0.25,"synchroni":0.25,"synclin":0.25,"synergist":0.25,"syntact":0.25,"synthet":0.25,"tabasco":0.25,"tacheomet":0.25,"tachymet":0.25,"taciturn":-0.25,"tactic":-0.25,"tag":0.25,"tailstock":0.25,"talk":0.25,"tallish":0.25,"tan":0.25,"tangerin":0.25,"tangibl":0.25,"tantra":0.25,"taper":0.25,"tasti":0.25,"tattl":0.25,"taup":0.25,"tawni":-0.25,"tax":0.25,"taxabl":-0.25,"taxonom":0.25,"teahous":0.25,"teal":0.25,"teamwork":0.25,"tearoom":0.25,"teari":0.25,"teashop":0.25,"technologist":0.25,"tedious":0.25,"teen":0.25,"teenag":0.25,"teensi":0.25,"teentsi":0.25,"teeni":0.25,"teeth":0.25,"telco":0.25,"teleport":0.25,"telethermomet":0.25,"temperament":0.25,"templat":0.25,"templet":0.25,"temporali":0.25,"tenaci":0.25,"tend":0.25,"tenni":0.25,"tenon":0.25,"terazosin":0.25,"terefah":0.25,"terrass":0.25,"terrif":0.25,"territori":0.25,"testifi":0.25,"tetartanopia":0.25,"theatric":-0.25,"theosoph":0.25,"theosophi":0.25,"therewith":0.25,"thermoacidophil":0.25,"thermoplast":0.25,"thick":0.25,"thinkabl":0.25,"thrill":0.25,"throb":0.25,"throttlehold":0.25,"throughway":0.25,"thruway":0.25,"thunderstruck":0.25,"ticktock":0.25,"tictac":0.25,"tidi":-0.25,"tide":0.25,"tie":0.25,"tini":0.25,"tiresom":0.25,"titer":0.25,"titiv":0.25,"titrat":0.25,"titr":0.25,"tittiv":0.25,"toboggan":0.25,"tocktact":0.25,"tocopherol":0.25,"tocsin":0.25,"tolazamid":0.25,"tonal":0.25,"tonsur":0.25,"toothi":0.25,"tootl":0.25,"topographi":0.25,"totem":0.25,"totipot":0.25,"touchston":0.25,"toupe":0.25,"tour":0.25,"tourism":0.25,"touristri":0.25,"towboat":0.25,"toy":0.25,"trademark":0.25,"tradeoff":0.25,"tragicomedi":0.25,"transect":0.25,"transitivis":0.25,"transitiv":0.25,"transluc":0.25,"transmit":0.25,"transmundan":0.25,"transplacent":0.25,"transvest":0.25,"transvestit":0.25,"tray":0.25,"tref":0.25,"treillag":0.25,"trelli":0.25,"trenchanc":0.25,"trendset":0.25,"trespass":0.25,"trestl":0.25,"triag":0.25,"trichion":0.25,"trichlormethiazid":0.25,"trichodesmium":0.25,"trident":0.25,"trifid":0.25,"trig":0.25,"trilobit":0.25,"tripod":0.25,"tritanopia":0.25,"trochlear":0.25,"trochleari":0.25,"trogon":0.25,"troth":0.25,"trouser":0.25,"truck":0.25,"truism":0.25,"truncat":0.25,"truste":0.25,"truster":0.25,"tuck":0.25,"tugboat":0.25,"tundra":0.25,"turnverein":0.25,"tusker":0.25,"tweak":0.25,"twiggi":0.25,"twiglik":0.25,"twinkler":0.25,"twin":-0.25,"twist":0.25,"twisti":0.25,"twofold":0.25,"ubiquit":0.25,"ultim":0.25,"ultraconserv":0.25,"ultrasound":0.25,"ultraviolet":0.25,"umbra":0.25,"unab":0.25,"unabus":0.25,"unadorn":0.25,"unadulter":0.25,"unaffected":0.25,"unalt":0.25,"unannounc":0.25,"unasham":0.25,"unbeliev":0.25,"unbloodi":0.25,"unbound":0.25,"unbreak":0.25,"unburden":0.25,"unchain":0.25,"uncial":0.25,"unclog":0.25,"uncommon":0.25,"uncompassion":0.25,"uncomplain":0.25,"uncontrol":0.25,"uncount":0.25,"uncousin":0.25,"uncreas":0.25,"uncurv":0.25,"undaunt":0.25,"undec":0.25,"undecor":0.25,"undefil":0.25,"understructur":0.25,"underweight":0.25,"undisput":-0.25,"undress":0.25,"unexceed":0.25,"unexcel":0.25,"unexplod":0.25,"unfathom":0.25,"unheed":0.25,"unherald":0.25,"unhitch":0.25,"unicuspid":0.25,"unkept":0.25,"unkey":0.25,"unleaven":0.25,"unloos":0.25,"unloosen":0.25,"unman":-0.25,"unmanlik":0.25,"unmemor":0.25,"unmention":0.25,"unmodul":0.25,"unnam":0.25,"unnumber":0.25,"unnumb":0.25,"unnumer":0.25,"unplumb":0.25,"unpredict":0.25,"unpretenti":0.25,"unprophet":0.25,"unquest":-0.25,"unrais":0.25,"unreconstruct":0.25,"unreleas":0.25,"unremark":0.25,"unrepent":0.25,"unres":0.25,"unresist":0.25,"unrhetor":0.25,"unsegreg":0.25,"unsex":0.25,"unshield":0.25,"unsmooth":-0.25,"unspel":0.25,"unsteadili":0.25,"unstint":0.25,"unsurpass":0.25,"unwav":0.25,"unweath":0.25,"upbring":0.25,"updraft":0.25,"upfield":0.25,"uphil":0.25,"uppercas":0.25,"upstag":0.25,"upstrok":0.25,"uptown":0.25,"utensil":0.25,"utmost":0.25,"utopian":0.25,"utricl":0.25,"utriculus":0.25,"uttermost":0.25,"uvulopalatopharyngoplasti":0.25,"vacil":-0.25,"vacuum":0.25,"vagil":0.25,"vals":0.25,"vaporif":0.25,"vaporish":0.25,"vaporiz":0.25,"vapourif":0.25,"vapouris":0.25,"vapourish":0.25,"variform":0.25,"vasovasostomi":0.25,"vassal":0.25,"vaticin":0.25,"veld":0.25,"veldt":0.25,"velvet":0.25,"venial":0.25,"verbatim":0.25,"verbos":0.25,"verili":0.25,"vesper":0.25,"vie":0.25,"visag":0.25,"viscous":0.25,"viselik":0.25,"visionari":0.25,"vitalist":0.25,"vitreous":0.25,"vivarium":0.25,"vocalis":0.25,"vocat":0.25,"voidabl":0.25,"voil":0.25,"volant":0.25,"volatilis":0.25,"volatiliz":0.25,"voluminos":0.25,"vower":0.25,"vox":0.25,"voyeur":0.25,"vroom":0.25,"vulcanis":0.25,"vulcan":0.25,"vulturin":0.25,"vultur":0.25,"wage":0.25,"wain":0.25,"wane":0.25,"warden":0.25,"warrant":0.25,"warrantor":0.25,"watch":0.25,"watercraft":0.25,"watercress":0.25,"wax":-0.25,"wayward":0.25,"weald":0.25,"weapon":0.25,"weatherglass":0.25,"weatherstrip":0.25,"webbi":0.25,"weblik":0.25,"weeklong":0.25,"weensi":0.25,"weeni":0.25,"weigh":0.25,"weller":0.25,"whicker":0.25,"whimsic":0.25,"whinni":0.25,"whiskerless":0.25,"wholeheart":0.25,"whopper":0.25,"whoredom":0.25,"wifelik":0.25,"wife":0.25,"wilt":0.25,"wincey":0.25,"windfal":0.25,"wind":0.25,"windless":0.25,"windup":0.25,"winglik":0.25,"wisecrack":0.25,"wish":0.25,"wisplik":0.25,"wizardri":0.25,"wold":0.25,"womanish":0.25,"womanlik":0.25,"womanli":0.25,"woodcraft":0.25,"woolgath":-0.25,"woosh":0.25,"word":0.25,"wordplay":0.25,"wordi":-0.25,"workaday":0.25,"workspac":0.25,"worldwid":0.25,"woven":0.25,"wrink":0.25,"wrought":0.25,"wri":0.25,"xerographi":0.25,"yacht":-0.25,"yagi":0.25,"yearlong":0.25,"yeti":0.25,"yummi":0.25,"zero":0.25,"zooid":0.25,"zoomorph":0.25,"zygodactyl":0.25,"abaya":-0.25,"aberr":-0.25,"abey":-0.25,"abject":-0.25,"abrog":-0.25,"abseil":-0.25,"absent":-0.25,"absolutist":-0.25,"absurd":-0.25,"abysm":-0.25,"acanthot":-0.25,"acapnia":-0.25,"acarophobia":-0.25,"acathexia":-0.25,"acaud":-0.25,"acetaminophen":-0.25,"achlorhydria":-0.25,"achlorhydr":-0.25,"achondrit":-0.25,"achondroplast":-0.25,"acousma":-0.25,"acroanaesthesia":-0.25,"acroanesthesia":-0.25,"acrophobia":-0.25,"acrophob":-0.25,"acrylamid":-0.25,"act":-0.25,"actinomycet":-0.25,"actinomycot":-0.25,"activewear":-0.25,"adagio":-0.25,"addlebrain":-0.25,"addlep":-0.25,"adjudg":-0.25,"adscititi":-0.25,"advowson":-0.25,"adynam":-0.25,"aesthesi":-0.25,"afeard":-0.25,"afear":-0.25,"affected":-0.25,"affenpinsch":-0.25,"affer":-0.25,"affront":-0.25,"agenesia":-0.25,"agenesi":-0.25,"agitprop":-0.25,"agonad":-0.25,"agonist":-0.25,"agoraphobia":-0.25,"agoraphob":-0.25,"agranulocytosi":-0.25,"agranulosi":-0.25,"agraph":-0.25,"agrest":-0.25,"agromania":-0.25,"aigret":-0.25,"aigrett":-0.25,"ailurophobia":-0.25,"airstrip":-0.25,"alalia":-0.25,"alb":-0.25,"albin":-0.25,"algolagn":-0.25,"algometri":-0.25,"allegoris":-0.25,"allegor":-0.25,"allig":-0.25,"alloy":-0.25,"alm":-0.25,"alopecia":-0.25,"alphabetis":-0.25,"alphabet":-0.25,"amastia":-0.25,"amaurosi":-0.25,"amaurot":-0.25,"ambagi":-0.25,"amenorrh":-0.25,"amenorrho":-0.25,"aminobenzin":-0.25,"amiodaron":-0.25,"ammonit":-0.25,"ammunit":-0.25,"amnesia":-0.25,"amnest":-0.25,"amygdalin":-0.25,"anaphrodisia":-0.25,"anaplasia":-0.25,"anaplasmosi":-0.25,"anaplast":-0.25,"anarthria":-0.25,"androphobia":-0.25,"anecho":-0.25,"angina":-0.25,"angiohemophilia":-0.25,"angiopathi":-0.25,"angioplasti":-0.25,"anglophob":-0.25,"anhidrosi":-0.25,"anhydrosi":-0.25,"anil":-0.25,"anilin":-0.25,"anion":-0.25,"ankylot":-0.25,"annex":-0.25,"annul":-0.25,"anomal":-0.25,"anonym":-0.25,"anopia":-0.25,"anorexia":-0.25,"anovul":-0.25,"anoxemia":-0.25,"anoxia":-0.25,"anox":-0.25,"antenn":-0.25,"antennari":-0.25,"antiarrhythm":-0.25,"antidiarrh":-0.25,"antiestablishmentarian":-0.25,"antiestablishment":-0.25,"antifeminist":-0.25,"antimacassar":-0.25,"antipersonnel":-0.25,"antipop":-0.25,"antiprotozo":-0.25,"antipyret":-0.25,"antisatellit":-0.25,"antisemit":-0.25,"antiserum":-0.25,"antisoci":-0.25,"antisubmarin":-0.25,"anuresi":-0.25,"anuria":-0.25,"aoudad":-0.25,"aplasia":-0.25,"apogamet":-0.25,"apogam":-0.25,"apologis":-0.25,"apolog":-0.25,"apoptosi":-0.25,"apost":-0.25,"apostatis":-0.25,"apostat":-0.25,"apotropa":-0.25,"appetit":-0.25,"applejack":-0.25,"aquaphob":-0.25,"arachnophobia":-0.25,"araroba":-0.25,"arginin":-0.25,"argonaut":-0.25,"argu":-0.25,"arianist":-0.25,"arid":-0.25,"armillari":-0.25,"aromatis":-0.25,"aromat":-0.25,"arson":-0.25,"arthriti":-0.25,"arthroscopi":-0.25,"artiodactyl":-0.25,"arui":-0.25,"asafetida":-0.25,"asafoetida":-0.25,"ascit":-0.25,"asexu":-0.25,"asleep":-0.25,"assuas":-0.25,"astasia":-0.25,"asthen":-0.25,"asthma":-0.25,"asthmat":-0.25,"asyndet":-0.25,"asynerg":-0.25,"ataraxi":-0.25,"atelectasi":-0.25,"atopognosia":-0.25,"atopognosi":-0.25,"attemp":-0.25,"attempt":-0.25,"audad":-0.25,"autism":-0.25,"autotomi":-0.25,"avaritia":-0.25,"aveng":-0.25,"avitaminosi":-0.25,"awhil":-0.25,"azot":-0.25,"babel":-0.25,"babiroussa":-0.25,"babirusa":-0.25,"babirussa":-0.25,"babushka":-0.25,"babi":-0.25,"backbench":-0.25,"backbit":-0.25,"backfield":-0.25,"backplat":-0.25,"backslap":-0.25,"backtalk":-0.25,"baddi":-0.25,"badger":-0.25,"badmouth":-0.25,"bagel":-0.25,"baggi":-0.25,"bailiff":-0.25,"bailiffship":-0.25,"bake":-0.25,"balki":-0.25,"ballist":-0.25,"ballyrag":-0.25,"bam":-0.25,"banal":-0.25,"banknot":-0.25,"barbarian":-0.25,"barbet":-0.25,"bareback":-0.25,"barefoot":-0.25,"baronetis":-0.25,"baronet":-0.25,"barrat":-0.25,"barrelhous":-0.25,"barren":-0.25,"barricado":-0.25,"basalt":-0.25,"baseborn":-0.25,"baseless":-0.25,"bate":-0.25,"batfowl":-0.25,"bathrob":-0.25,"bat":-0.25,"battlefield":-0.25,"battlefront":-0.25,"battleground":-0.25,"battlesight":-0.25,"battu":-0.25,"batti":-0.25,"bawl":-0.25,"beachwear":-0.25,"beani":-0.25,"bearabl":-0.25,"beat":-0.25,"becloud":-0.25,"bedaub":-0.25,"bedeck":-0.25,"bedight":-0.25,"bedim":-0.25,"bedizen":-0.25,"bedlamit":-0.25,"befool":-0.25,"behaviorist":-0.25,"behaviourist":-0.25,"beigel":-0.25,"beldam":-0.25,"beleagu":-0.25,"bellicos":-0.25,"bemock":-0.25,"bend":-0.25,"benight":-0.25,"benjamin":-0.25,"benzoin":-0.25,"beryllium":-0.25,"bide":-0.25,"bighead":-0.25,"bigot":-0.25,"bijou":-0.25,"billingsg":-0.25,"bioterror":-0.25,"biotit":-0.25,"bipinnatifid":-0.25,"birdfeed":-0.25,"birthmark":-0.25,"bite":-0.25,"blackamoor":-0.25,"blackdamp":-0.25,"blacken":-0.25,"blackfac":-0.25,"blackish":-0.25,"blackwat":-0.25,"blanc":-0.25,"blanch":-0.25,"blear":-0.25,"blight":-0.25,"bling":-0.25,"blizzard":-0.25,"blob":-0.25,"blood":-0.25,"bloodbath":-0.25,"bloodlust":-0.25,"blous":-0.25,"blub":-0.25,"bluetongu":-0.25,"blunt":-0.25,"blurt":-0.25,"blusteri":-0.25,"boarhound":-0.25,"bobtail":-0.25,"bogeyman":-0.25,"boilersuit":-0.25,"boister":-0.25,"bold":-0.25,"bollworm":-0.25,"boneshak":-0.25,"bonker":-0.25,"boogeyman":-0.25,"bootboy":-0.25,"boot":-0.25,"bootleg":-0.25,"bootlegg":-0.25,"bootless":-0.25,"boring":-0.25,"borrelia":-0.25,"botcher":-0.25,"botul":-0.25,"boucl":-0.25,"boutonnier":-0.25,"brachial":-0.25,"bradycardia":-0.25,"brainsick":-0.25,"brakeman":-0.25,"brand":-0.25,"brant":-0.25,"bravado":-0.25,"brave":-0.25,"breakax":-0.25,"break":-0.25,"brent":-0.25,"briarroot":-0.25,"briber":-0.25,"brickbat":-0.25,"bridgehead":-0.25,"bridl":-0.25,"brinkmanship":-0.25,"bronz":-0.25,"browbeat":-0.25,"brown":-0.25,"bruxism":-0.25,"bubon":-0.25,"budgereegah":-0.25,"budgerigar":-0.25,"budgerygah":-0.25,"budgi":-0.25,"bugaboo":-0.25,"bulbar":-0.25,"bulimarexia":-0.25,"bulim":-0.25,"bullyrag":-0.25,"bulwark":-0.25,"bum":-0.25,"bumbler":-0.25,"bummer":-0.25,"bump":-0.25,"bunco":-0.25,"buncomb":-0.25,"bunghol":-0.25,"bungler":-0.25,"bunko":-0.25,"bunkum":-0.25,"burbl":-0.25,"burglar":-0.25,"burka":-0.25,"burqa":-0.25,"busbi":-0.25,"bustier":-0.25,"butcher":-0.25,"butyr":-0.25,"byrni":-0.25,"bystand":-0.25,"cabala":-0.25,"cabbala":-0.25,"cabbalah":-0.25,"cachect":-0.25,"cad":-0.25,"cadav":-0.25,"cadaver":-0.25,"cadger":-0.25,"caffein":-0.25,"caftan":-0.25,"caimitillo":-0.25,"calamit":-0.25,"calam":-0.25,"caldera":-0.25,"callos":-0.25,"calpac":-0.25,"calpack":-0.25,"camelpox":-0.25,"camis":-0.25,"camisol":-0.25,"campylotrop":-0.25,"cancer":-0.25,"canthus":-0.25,"carbuncular":-0.25,"carcas":-0.25,"carcass":-0.25,"carcinoid":-0.25,"cardcastl":-0.25,"cardhous":-0.25,"careen":-0.25,"careworn":-0.25,"carjack":-0.25,"cark":-0.25,"carper":-0.25,"carp":-0.25,"cartilagin":-0.25,"cassock":-0.25,"catabiosi":-0.25,"catnap":-0.25,"cattish":-0.25,"causeless":-0.25,"caustic":-0.25,"cefotaxim":-0.25,"ceftriaxon":-0.25,"cellul":-0.25,"cephalexin":-0.25,"cerus":-0.25,"chafewe":-0.25,"chaffwe":-0.25,"chancr":-0.25,"chancrous":-0.25,"chaparr":-0.25,"charlatan":-0.25,"chartless":-0.25,"chasubl":-0.25,"chawbacon":-0.25,"cheekili":-0.25,"cheep":-0.25,"cheesi":-0.25,"chequ":-0.25,"chessman":-0.25,"chicken":-0.25,"chickenfight":-0.25,"chickenheart":-0.25,"chickenpox":-0.25,"chickenshit":-0.25,"chigetai":-0.25,"chignon":-0.25,"chipboard":-0.25,"chiralgia":-0.25,"chokedamp":-0.25,"chomp":-0.25,"chous":-0.25,"chromaesthesia":-0.25,"chromat":-0.25,"chromatograph":-0.25,"chromesthesia":-0.25,"chromium":-0.25,"chrysarobin":-0.25,"chuck":-0.25,"chuf":-0.25,"chug":-0.25,"churidar":-0.25,"cinerarium":-0.25,"cinerari":-0.25,"cingulum":-0.25,"circul":-0.25,"circumlocuti":-0.25,"circumlocutori":-0.25,"circumvent":-0.25,"cirrhosi":-0.25,"clamour":-0.25,"claret":-0.25,"claustrophobia":-0.25,"claw":-0.25,"clinodactyli":-0.25,"cloth":-0.25,"clout":-0.25,"club":-0.25,"coaxer":-0.25,"cobalt":-0.25,"coccidioidomycosi":-0.25,"coccidiomycosi":-0.25,"cocker":-0.25,"cocoon":-0.25,"coddler":-0.25,"codifi":-0.25,"coenzym":-0.25,"colic":-0.25,"collywobbl":-0.25,"colonis":-0.25,"colonist":-0.25,"colon":-0.25,"comminatori":-0.25,"competitor":-0.25,"compromis":-0.25,"comput":-0.25,"conceit":-0.25,"conceptus":-0.25,"condescens":-0.25,"conessi":-0.25,"conflagr":-0.25,"conflict":-0.25,"conservationist":-0.25,"constip":-0.25,"consumpt":-0.25,"contend":-0.25,"contenti":-0.25,"continu":-0.25,"contraband":-0.25,"contradict":-0.25,"contrarian":-0.25,"contrari":-0.25,"controvert":-0.25,"contumaci":-0.25,"contumeli":-0.25,"convolut":-0.25,"cooli":-0.25,"coon":-0.25,"cooti":-0.25,"cop":-0.25,"coppic":-0.25,"coprolith":-0.25,"cops":-0.25,"cordless":-0.25,"corner":-0.25,"corps":-0.25,"corpul":-0.25,"corrod":-0.25,"corundom":-0.25,"corundum":-0.25,"cosset":-0.25,"cost":-0.25,"costless":-0.25,"cough":-0.25,"counterchalleng":-0.25,"counterglow":-0.25,"counterintellig":-0.25,"counteroffens":-0.25,"counterproduct":-0.25,"cowardic":-0.25,"cowardli":-0.25,"coward":-0.25,"cowpi":-0.25,"cowpox":-0.25,"cozenag":-0.25,"crackdown":-0.25,"cracker":-0.25,"crackpot":-0.25,"crag":-0.25,"craggi":-0.25,"cranki":-0.25,"crapshoot":-0.25,"crapul":-0.25,"crassitud":-0.25,"crawlspac":-0.25,"criminolog":-0.25,"crimson":-0.25,"crossli":-0.25,"crownless":-0.25,"crownwork":-0.25,"crucial":-0.25,"crummi":-0.25,"cryobiolog":-0.25,"cryogeni":-0.25,"cryopathi":-0.25,"cryophobia":-0.25,"cryptogram":-0.25,"cuckoopint":-0.25,"cudgel":-0.25,"cue":-0.25,"cuiss":-0.25,"curiosa":-0.25,"curst":-0.25,"curtainless":-0.25,"curt":-0.25,"cutthroat":-0.25,"cybercrim":-0.25,"cynophobia":-0.25,"cystoparalysi":-0.25,"cystoplegia":-0.25,"cytopenia":-0.25,"daemon":-0.25,"daft":-0.25,"damnabl":-0.25,"damp":-0.25,"damson":-0.25,"darkey":-0.25,"darki":-0.25,"dauber":-0.25,"deaden":-0.25,"deadey":-0.25,"deadli":-0.25,"deadlock":-0.25,"deafen":-0.25,"deathless":-0.25,"deathlik":-0.25,"debauche":-0.25,"debrid":-0.25,"decalesc":-0.25,"decomposit":-0.25,"deconsecr":-0.25,"dedifferenti":-0.25,"deerstalk":-0.25,"defalc":-0.25,"defeatist":-0.25,"defervesc":-0.25,"defiant":-0.25,"defil":-0.25,"deform":-0.25,"defraud":-0.25,"deiti":-0.25,"delv":-0.25,"demerit":-0.25,"demimond":-0.25,"demoniac":-0.25,"demyelin":-0.25,"denatur":-0.25,"dendrit":-0.25,"denounc":-0.25,"denunci":-0.25,"denunciatori":-0.25,"deodor":-0.25,"deodour":-0.25,"deploy":-0.25,"derat":-0.25,"derbi":-0.25,"dermatomycosi":-0.25,"dermatomyos":-0.25,"dermatophytosi":-0.25,"desideratum":-0.25,"desist":-0.25,"desk":-0.25,"despoli":-0.25,"deter":-0.25,"deterior":-0.25,"detumesc":-0.25,"devilwood":-0.25,"dhoti":-0.25,"diabol":-0.25,"diabolist":-0.25,"diacetylmorphin":-0.25,"diagnost":-0.25,"diarrhea":-0.25,"diarrhoea":-0.25,"dibber":-0.25,"dibbl":-0.25,"dictyopteran":-0.25,"diffract":-0.25,"dig":-0.25,"digress":-0.25,"diltiazem":-0.25,"diluent":-0.25,"dilut":-0.25,"din":-0.25,"dingo":-0.25,"dioxin":-0.25,"dipsomania":-0.25,"disaccord":-0.25,"disaffect":-0.25,"disarrang":-0.25,"disastr":-0.25,"disbar":-0.25,"discept":-0.25,"discombobul":-0.25,"discomfort":-0.25,"discompos":-0.25,"dishevel":-0.25,"dissatisfactori":-0.25,"dissev":-0.25,"distraught":-0.25,"divers":-0.25,"diverticul":-0.25,"divestitur":-0.25,"dizzili":-0.25,"dogban":-0.25,"domineering":-0.25,"dongl":-0.25,"donkey":-0.25,"donkeywork":-0.25,"doodad":-0.25,"doohickey":-0.25,"doojigg":-0.25,"dopey":-0.25,"dopi":-0.25,"dosshous":-0.25,"doublet":-0.25,"doughi":-0.25,"downdraft":-0.25,"downgrad":-0.25,"downhil":-0.25,"downi":-0.25,"downward":-0.25,"doze":-0.25,"drake":-0.25,"dray":-0.25,"drey":-0.25,"drib":-0.25,"driblet":-0.25,"drivel":-0.25,"dronabinol":-0.25,"drool":-0.25,"droopi":-0.25,"drop":-0.25,"dross":-0.25,"drudgeri":-0.25,"drumhead":-0.25,"drumstick":-0.25,"drunkard":-0.25,"dud":-0.25,"duffer":-0.25,"dulli":-0.25,"dumbass":-0.25,"dumdum":-0.25,"dumpi":-0.25,"dumpsit":-0.25,"dunc":-0.25,"dunderhead":-0.25,"dung":-0.25,"dungeon":-0.25,"dwarfism":-0.25,"dynamit":-0.25,"dysenteri":-0.25,"dyslex":-0.25,"dysosmia":-0.25,"dyspepsia":-0.25,"dysphem":-0.25,"dysplasia":-0.25,"dyspnea":-0.25,"dyspneal":-0.25,"dyspneic":-0.25,"dyspnoea":-0.25,"dyspnoeal":-0.25,"dyspnoeic":-0.25,"dysthymia":-0.25,"dystrophi":-0.25,"dziggetai":-0.25,"ear":-0.25,"earless":-0.25,"earliest":-0.25,"earli":-0.25,"earsplit":-0.25,"earthenwar":-0.25,"eavesdrop":-0.25,"ebonis":-0.25,"ebonit":-0.25,"ebon":-0.25,"eburn":-0.25,"ectrodactyli":-0.25,"effluent":-0.25,"effort":-0.25,"egalit":-0.25,"egal":-0.25,"egomania":-0.25,"eldest":-0.25,"eldritch":-0.25,"electrocut":-0.25,"electrocution":-0.25,"electrosleep":-0.25,"elid":-0.25,"elmwood":-0.25,"elus":-0.25,"embezzl":-0.25,"embitter":-0.25,"embol":-0.25,"embrangl":-0.25,"emeri":-0.25,"encainid":-0.25,"encopresi":-0.25,"encount":-0.25,"encumb":-0.25,"endocarp":-0.25,"endomorphi":-0.25,"ensconc":-0.25,"enterotoxemia":-0.25,"enterprising":-0.25,"entomb":-0.25,"entomophobia":-0.25,"environmentalist":-0.25,"envisag":-0.25,"eosinophilia":-0.25,"epaulier":-0.25,"ephemer":-0.25,"epicanthus":-0.25,"epicardia":-0.25,"epidemiolog":-0.25,"epilept":-0.25,"ern":-0.25,"escapad":-0.25,"escap":-0.25,"eschatolog":-0.25,"essay":-0.25,"esthesi":-0.25,"ethanediol":-0.25,"etud":-0.25,"euthanasia":-0.25,"eutroph":-0.25,"evacue":-0.25,"evilli":-0.25,"exanthem":-0.25,"exanthema":-0.25,"excerpt":-0.25,"excess":-0.25,"excresc":-0.25,"excret":-0.25,"excretori":-0.25,"exodus":-0.25,"exorc":-0.25,"expiatori":-0.25,"expostul":-0.25,"extemporan":-0.25,"extemporari":-0.25,"extempor":-0.25,"extirp":-0.25,"extralinguist":-0.25,"extrem":-0.25,"eyeglass":-0.25,"eyelash":-0.25,"faceless":-0.25,"fade":-0.25,"fado":-0.25,"faecalith":-0.25,"faineanc":-0.25,"faineant":-0.25,"fakeri":-0.25,"falcon":-0.25,"falsehood":-0.25,"falsiti":-0.25,"fantasi":-0.25,"farthingal":-0.25,"fatig":-0.25,"fatso":-0.25,"fattish":-0.25,"fay":-0.25,"faze":-0.25,"fearless":-0.25,"featherless":-0.25,"febrifug":-0.25,"fecalith":-0.25,"feckless":-0.25,"fecul":-0.25,"feist":-0.25,"fernless":-0.25,"feud":-0.25,"few":-0.25,"fibrinolysi":-0.25,"fice":-0.25,"fierili":-0.25,"finch":-0.25,"fingerpoint":-0.25,"firearm":-0.25,"fireproof":-0.25,"firestorm":-0.25,"firethorn":-0.25,"firework":-0.25,"firstborn":-0.25,"fishey":-0.25,"flashflood":-0.25,"flavorless":-0.25,"flavourless":-0.25,"fleabag":-0.25,"fleeting":-0.25,"flimflam":-0.25,"flip":-0.25,"flippant":-0.25,"flogger":-0.25,"floor":-0.25,"flop":-0.25,"flophous":-0.25,"flora":-0.25,"fluctuat":-0.25,"flunk":-0.25,"fog":-0.25,"foli":-0.25,"folklor":-0.25,"fomit":-0.25,"foodless":-0.25,"fooleri":-0.25,"footpad":-0.25,"footrest":-0.25,"footstool":-0.25,"footwal":-0.25,"foresighted":-0.25,"foresight":-0.25,"foretast":-0.25,"forewarn":-0.25,"forg":-0.25,"forgeri":-0.25,"fork":-0.25,"forthwith":-0.25,"found":-0.25,"fox":-0.25,"foxtrot":-0.25,"frazzl":-0.25,"freeboot":-0.25,"frenzi":-0.25,"frequent":-0.25,"frigorif":-0.25,"fripperi":-0.25,"frisson":-0.25,"fritter":-0.25,"frontbench":-0.25,"frontlet":-0.25,"frostbit":-0.25,"frowsi":-0.25,"frowzl":-0.25,"frowzi":-0.25,"fruitless":-0.25,"fuckhead":-0.25,"fugac":-0.25,"fulsom":-0.25,"fumbler":-0.25,"fumbl":-0.25,"funer":-0.25,"funerari":-0.25,"funki":-0.25,"funnili":-0.25,"furunculosi":-0.25,"fussili":-0.25,"fusspot":-0.25,"fustig":-0.25,"galactosemia":-0.25,"galbanum":-0.25,"gallium":-0.25,"gambrel":-0.25,"ganef":-0.25,"gangster":-0.25,"ganof":-0.25,"gaolbird":-0.25,"gaoler":-0.25,"gargoyl":-0.25,"garibaldi":-0.25,"garnish":-0.25,"garott":-0.25,"garrot":-0.25,"garrott":-0.25,"gas":-0.25,"gaskin":-0.25,"gasmask":-0.25,"gasp":-0.25,"gastriti":-0.25,"gateau":-0.25,"gazillion":-0.25,"gazump":-0.25,"gean":-0.25,"geezer":-0.25,"gegenschein":-0.25,"gerfalcon":-0.25,"german":-0.25,"ghastli":-0.25,"gibbous":-0.25,"giddili":-0.25,"gilbert":-0.25,"gimmick":-0.25,"gin":-0.25,"gip":-0.25,"glander":-0.25,"glareol":-0.25,"glassless":-0.25,"glee":-0.25,"gliricidia":-0.25,"glitch":-0.25,"glucinium":-0.25,"glyptic":-0.25,"gnathion":-0.25,"goad":-0.25,"goate":-0.25,"goldbrick":-0.25,"gonif":-0.25,"goniff":-0.25,"gonion":-0.25,"gonorrhea":-0.25,"gonorrhoea":-0.25,"goo":-0.25,"goosebump":-0.25,"gooseflesh":-0.25,"gooselik":-0.25,"goosey":-0.25,"goosi":-0.25,"gorget":-0.25,"graini":-0.25,"granit":-0.25,"granular":-0.25,"granulocytopenia":-0.25,"granuloma":-0.25,"grappl":-0.25,"grati":-0.25,"gray":-0.25,"grayish":-0.25,"greaser":-0.25,"greatcoat":-0.25,"greav":-0.25,"greenback":-0.25,"greet":-0.25,"grey":-0.25,"greyish":-0.25,"grime":-0.25,"grimoir":-0.25,"gritrock":-0.25,"gritston":-0.25,"grope":-0.25,"grouchili":-0.25,"groundless":-0.25,"groundl":-0.25,"groundsheet":-0.25,"grumbler":-0.25,"grumpili":-0.25,"grung":-0.25,"gubbin":-0.25,"guck":-0.25,"guesser":-0.25,"guff":-0.25,"guimp":-0.25,"gum":-0.25,"gunk":-0.25,"gunrunn":-0.25,"gust":-0.25,"gustat":-0.25,"gustatori":-0.25,"gutsi":-0.25,"gynogenesi":-0.25,"gyp":-0.25,"gyrfalcon":-0.25,"habergeon":-0.25,"hacker":-0.25,"hackney":-0.25,"haemoptysi":-0.25,"haick":-0.25,"haik":-0.25,"haiku":-0.25,"hallstand":-0.25,"hamartia":-0.25,"harangu":-0.25,"hardboard":-0.25,"hardpan":-0.25,"hardscrabbl":-0.25,"harridan":-0.25,"hashmark":-0.25,"hatemong":-0.25,"hauberk":-0.25,"hawkish":-0.25,"haymak":-0.25,"hayse":-0.25,"headless":-0.25,"headscarf":-0.25,"hearer":-0.25,"heartrot":-0.25,"heatless":-0.25,"heatstrok":-0.25,"hebephrenia":-0.25,"hebephren":-0.25,"hecatomb":-0.25,"heckl":-0.25,"hectic":-0.25,"hector":-0.25,"hegira":-0.25,"heist":-0.25,"hejira":-0.25,"hellcat":-0.25,"hellhound":-0.25,"hellion":-0.25,"hemiplegia":-0.25,"hemoptysi":-0.25,"hereupon":-0.25,"heritor":-0.25,"herpangia":-0.25,"herp":-0.25,"hesitat":-0.25,"heterocerc":-0.25,"hidebound":-0.25,"highbind":-0.25,"highjack":-0.25,"highlif":-0.25,"highwayman":-0.25,"hijink":-0.25,"hillock":-0.25,"hilli":-0.25,"hirer":-0.25,"hiss":-0.25,"hitless":-0.25,"hoars":-0.25,"hoax":-0.25,"hobo":-0.25,"hogwash":-0.25,"homesick":-0.25,"honkytonk":-0.25,"hooey":-0.25,"hooki":-0.25,"hoosegow":-0.25,"hoosgow":-0.25,"hop":-0.25,"horari":-0.25,"hornswoggl":-0.25,"horripil":-0.25,"horticultur":-0.25,"hottish":-0.25,"housecoat":-0.25,"hubri":-0.25,"huck":-0.25,"huckaback":-0.25,"humankind":-0.25,"humat":-0.25,"hummock":-0.25,"hunt":-0.25,"hurl":-0.25,"hydrocel":-0.25,"hydrocephalus":-0.25,"hydrocephali":-0.25,"hydrochlorofluorocarbon":-0.25,"hydrolis":-0.25,"hydrol":-0.25,"hydroxychloroquin":-0.25,"hydroxyzin":-0.25,"hymenopter":-0.25,"hymi":-0.25,"hyperacusia":-0.25,"hyperacusi":-0.25,"hyperaliment":-0.25,"hyperextend":-0.25,"hyperic":-0.25,"hypermetrop":-0.25,"hyperon":-0.25,"hyperop":-0.25,"hyperventil":-0.25,"hypervitaminosi":-0.25,"hypnophobia":-0.25,"hypobetalipoproteinemia":-0.25,"hypocapnia":-0.25,"hypogammaglobulinemia":-0.25,"hypogonad":-0.25,"hypokalemia":-0.25,"hypothrombinemia":-0.25,"hypovitaminosi":-0.25,"icebox":-0.25,"ictal":-0.25,"ictic":-0.25,"ideat":-0.25,"ignobl":-0.25,"ignoramus":-0.25,"illicit":-0.25,"imbroglio":-0.25,"immigr":-0.25,"immobil":-0.25,"immodesti":-0.25,"impact":-0.25,"impeach":-0.25,"impecuni":-0.25,"imper":-0.25,"imperi":-0.25,"implicit":-0.25,"impound":-0.25,"impractic":-0.25,"impromptu":-0.25,"impuls":-0.25,"inaccess":-0.25,"inalter":-0.25,"incaut":-0.25,"incauti":-0.25,"incendiar":-0.25,"inch":-0.25,"incoher":-0.25,"inconsequenti":-0.25,"incontest":-0.25,"incurr":-0.25,"indefeas":-0.25,"indetermin":-0.25,"indeterminaci":-0.25,"indexless":-0.25,"indissolubl":-0.25,"indomit":-0.25,"indwel":-0.25,"ineluct":-0.25,"ineradic":-0.25,"inerti":-0.25,"inescap":-0.25,"inexhaust":-0.25,"inextens":-0.25,"inextinguish":-0.25,"infeas":-0.25,"infiltr":-0.25,"infract":-0.25,"infrang":-0.25,"ingrow":-0.25,"ingrown":-0.25,"inhal":-0.25,"inheritor":-0.25,"injudici":-0.25,"inki":-0.25,"inocul":-0.25,"inoculum":-0.25,"inodor":-0.25,"inorgan":-0.25,"inositol":-0.25,"insalubri":-0.25,"insalubr":-0.25,"insan":-0.25,"insecticid":-0.25,"insignific":-0.25,"insomnia":-0.25,"instant":-0.25,"insul":-0.25,"insurrection":-0.25,"intens":-0.25,"intercollegi":-0.25,"intermitt":-0.25,"interscholast":-0.25,"interschool":-0.25,"intertrigo":-0.25,"intravas":-0.25,"intrench":-0.25,"intumesc":-0.25,"inutil":-0.25,"invidia":-0.25,"invidi":-0.25,"invinc":-0.25,"invis":-0.25,"involuntarili":-0.25,"irat":-0.25,"ire":-0.25,"irreclaim":-0.25,"irreligionist":-0.25,"irreligi":-0.25,"irrevoc":-0.25,"irrevok":-0.25,"isoclin":-0.25,"isometropia":-0.25,"isopteran":-0.25,"itraconazol":-0.25,"jagged":-0.25,"jailbird":-0.25,"jailer":-0.25,"jailor":-0.25,"jalopi":-0.25,"jar":-0.25,"javelina":-0.25,"jaywalk":-0.25,"jellaba":-0.25,"jellyrol":-0.25,"jerkin":-0.25,"jet":-0.25,"jigaboo":-0.25,"jihadi":-0.25,"jillion":-0.25,"jilt":-0.25,"jink":-0.25,"jiqui":-0.25,"jobless":-0.25,"jodhpur":-0.25,"jointworm":-0.25,"jostl":-0.25,"jot":-0.25,"juggernaut":-0.25,"jugular":-0.25,"jument":-0.25,"kabala":-0.25,"kabbala":-0.25,"kabbalah":-0.25,"kaftan":-0.25,"kalanta":-0.25,"kalpac":-0.25,"kaon":-0.25,"keepsak":-0.25,"keratoconus":-0.25,"keratomalacia":-0.25,"keratoscop":-0.25,"khimar":-0.25,"kiang":-0.25,"kidnap":-0.25,"kike":-0.25,"kimono":-0.25,"kinemat":-0.25,"kinesi":-0.25,"kip":-0.25,"kirtl":-0.25,"kitte":-0.25,"kleptomania":-0.25,"knacker":-0.25,"kneecap":-0.25,"knicker":-0.25,"knoll":-0.25,"knucklehead":-0.25,"kooki":-0.25,"kurche":-0.25,"kurchi":-0.25,"kurta":-0.25,"labori":-0.25,"labrocyt":-0.25,"lacewood":-0.25,"lacquer":-0.25,"laetril":-0.25,"lagophthalmo":-0.25,"lambdac":-0.25,"lampblack":-0.25,"landlubb":-0.25,"lapid":-0.25,"larcen":-0.25,"larvicid":-0.25,"last":-0.25,"laterit":-0.25,"lath":-0.25,"lavalava":-0.25,"lawbreak":-0.25,"lawman":-0.25,"layoff":-0.25,"lazar":-0.25,"lazi":-0.25,"lederhosen":-0.25,"leer":-0.25,"legionella":-0.25,"lemonlik":-0.25,"lemoni":-0.25,"lenit":-0.25,"leprechaun":-0.25,"leptospira":-0.25,"lethargi":-0.25,"leucaemia":-0.25,"leucoma":-0.25,"leukaemia":-0.25,"leukemia":-0.25,"leukoenceph":-0.25,"leukoma":-0.25,"leverag":-0.25,"levir":-0.25,"libertin":-0.25,"lifer":-0.25,"light":-0.25,"lightless":-0.25,"lipochondrodystrophi":-0.25,"listen":-0.25,"listeriosi":-0.25,"lithoglypt":-0.25,"litmus":-0.25,"littl":-0.25,"llama":-0.25,"loco":-0.25,"loos":-0.25,"looter":-0.25,"loot":-0.25,"lopsid":-0.25,"lout":-0.25,"lovelorn":-0.25,"lovesick":-0.25,"lowboy":-0.25,"lowercas":-0.25,"lubber":-0.25,"lucif":-0.25,"lummox":-0.25,"lumpen":-0.25,"lumpenproletariat":-0.25,"lumpish":-0.25,"lunaci":-0.25,"lunkhead":-0.25,"lute":-0.25,"lycanthrop":-0.25,"lie":-0.25,"lymphadenoma":-0.25,"lymphogranuloma":-0.25,"lymphoma":-0.25,"lysi":-0.25,"macul":-0.25,"macushla":-0.25,"madwoman":-0.25,"maggot":-0.25,"magistraci":-0.25,"magistr":-0.25,"magistratur":-0.25,"maidism":-0.25,"malais":-0.25,"malaprop":-0.25,"malaria":-0.25,"malefactor":-0.25,"malfeas":-0.25,"malnourish":-0.25,"malnutrit":-0.25,"malposit":-0.25,"malvers":-0.25,"mammon":-0.25,"mandat":-0.25,"manganes":-0.25,"manhandl":-0.25,"manhunt":-0.25,"mankind":-0.25,"manslaught":-0.25,"mantilla":-0.25,"manual":-0.25,"manumitt":-0.25,"marginalis":-0.25,"maria":-0.25,"mariticid":-0.25,"marl":-0.25,"marlberri":-0.25,"mashi":-0.25,"mastocyt":-0.25,"matchstick":-0.25,"materiel":-0.25,"matman":-0.25,"matt":-0.25,"mayhem":-0.25,"mayid":-0.25,"mazzard":-0.25,"mealybug":-0.25,"meaningless":-0.25,"meatless":-0.25,"mecopteran":-0.25,"mecopter":-0.25,"meddler":-0.25,"meiotic":-0.25,"melancholiac":-0.25,"melanis":-0.25,"melan":-0.25,"melanosi":-0.25,"mendaci":-0.25,"menial":-0.25,"mening":-0.25,"merl":-0.25,"mesocolon":-0.25,"messiah":-0.25,"messiahship":-0.25,"metalepsi":-0.25,"metastasi":-0.25,"methanol":-0.25,"methylphenid":-0.25,"methyltestosteron":-0.25,"mewl":-0.25,"miasmic":-0.25,"microcopi":-0.25,"micronutri":-0.25,"milit":-0.25,"milkless":-0.25,"millettia":-0.25,"minelay":-0.25,"miner":-0.25,"ming":-0.25,"mingi":-0.25,"minibik":-0.25,"minifi":-0.25,"minim":-0.25,"minyan":-0.25,"miro":-0.25,"misadventur":-0.25,"misalign":-0.25,"misapprehens":-0.25,"misappropri":-0.25,"misbrand":-0.25,"miscal":-0.25,"miscellani":-0.25,"miscount":-0.25,"misdeliv":-0.25,"misgiv":-0.25,"misinterpret":-0.25,"mislabel":-0.25,"mismanag":-0.25,"misnam":-0.25,"misplac":-0.25,"misrel":-0.25,"miss":-0.25,"misspend":-0.25,"mistreat":-0.25,"misunderstand":-0.25,"mo":-0.25,"moaner":-0.25,"mobster":-0.25,"mocker":-0.25,"moderatorship":-0.25,"moil":-0.25,"moist":-0.25,"molass":-0.25,"mollycoddl":-0.25,"monarchi":-0.25,"monaur":-0.25,"moneran":-0.25,"mongolian":-0.25,"mongol":-0.25,"monoplegia":-0.25,"moocher":-0.25,"moodili":-0.25,"moonshel":-0.25,"moonshin":-0.25,"moonstruck":-0.25,"mop":-0.25,"morceau":-0.25,"mordac":-0.25,"moron":-0.25,"mothproof":-0.25,"motorbik":-0.25,"move":-0.25,"mow":-0.25,"muck":-0.25,"mucus":-0.25,"mud":-0.25,"muddlehead":-0.25,"mugger":-0.25,"multifari":-0.25,"mump":-0.25,"mumpsimus":-0.25,"munch":-0.25,"muncher":-0.25,"mural":-0.25,"murderess":-0.25,"murkili":-0.25,"murrain":-0.25,"mussit":-0.25,"muttonhead":-0.25,"myasthenia":-0.25,"myelatelia":-0.25,"myonecrosi":-0.25,"myopath":-0.25,"myxomatosi":-0.25,"nanism":-0.25,"narcolepsi":-0.25,"narcotraff":-0.25,"nazifi":-0.25,"nebbech":-0.25,"nebbish":-0.25,"nebulos":-0.25,"neckerchief":-0.25,"neckless":-0.25,"neckpiec":-0.25,"neckti":-0.25,"neckwear":-0.25,"necrolysi":-0.25,"necrom":-0.25,"necromania":-0.25,"necrophilia":-0.25,"necrophil":-0.25,"necros":-0.25,"necrosi":-0.25,"necrot":-0.25,"nefari":-0.25,"negativ":-0.25,"neglige":-0.25,"neophobia":-0.25,"nerita":-0.25,"nervili":-0.25,"neuralg":-0.25,"neurasthenia":-0.25,"neurofibromatosi":-0.25,"neurotox":-0.25,"nevertheless":-0.25,"nevus":-0.25,"newspeak":-0.25,"newsreel":-0.25,"nigga":-0.25,"niggardli":-0.25,"nigger":-0.25,"niggler":-0.25,"nightcloth":-0.25,"nightdress":-0.25,"nightgown":-0.25,"nighti":-0.25,"nightwear":-0.25,"nigra":-0.25,"nihil":-0.25,"nihilist":-0.25,"nitrobenzen":-0.25,"nock":-0.25,"noctuid":-0.25,"nocturia":-0.25,"nocturn":-0.25,"nonarbitr":-0.25,"nonassert":-0.25,"nonastring":-0.25,"noncaus":-0.25,"nonclass":-0.25,"noncompetit":-0.25,"nonconformist":-0.25,"noncontroversi":-0.25,"nondeduct":-0.25,"nonequival":-0.25,"nonetheless":-0.25,"nonexplos":-0.25,"nonextensil":-0.25,"nonfict":-0.25,"nonfissil":-0.25,"nonindustri":-0.25,"noninterchang":-0.25,"nonion":-0.25,"nonionis":-0.25,"nonlex":-0.25,"nonmandatori":-0.25,"nonmeaning":-0.25,"nonmechan":-0.25,"nonmechanist":-0.25,"nonmet":-0.25,"nonmetal":-0.25,"nonmov":-0.25,"nonobligatori":-0.25,"nonoccurr":-0.25,"nonparticul":-0.25,"nonpluss":-0.25,"nonpolar":-0.25,"nonpolit":-0.25,"nonproduct":-0.25,"nonprotractil":-0.25,"nonreciproc":-0.25,"nonrenew":-0.25,"nonspecif":-0.25,"nonunion":-0.25,"nonunionis":-0.25,"nonverb":-0.25,"nonvolatil":-0.25,"nonvolatilis":-0.25,"nonvolatiliz":-0.25,"nonwash":-0.25,"noreast":-0.25,"northeast":-0.25,"nosey":-0.25,"nosolog":-0.25,"notorieti":-0.25,"notwithstand":-0.25,"novelett":-0.25,"novella":-0.25,"nudg":-0.25,"null":-0.25,"numskul":-0.25,"nut":-0.25,"nycturia":-0.25,"nystagmus":-0.25,"oaf":-0.25,"obdur":-0.25,"obes":-0.25,"oblivion":-0.25,"obscurantist":-0.25,"obstin":-0.25,"obstip":-0.25,"obtur":-0.25,"occlud":-0.25,"octopod":-0.25,"ode":-0.25,"odorless":-0.25,"odourless":-0.25,"oft":-0.25,"often":-0.25,"ofttim":-0.25,"oleophob":-0.25,"ommatidium":-0.25,"oncogen":-0.25,"operos":-0.25,"opinion":-0.25,"opisthotono":-0.25,"opprobrium":-0.25,"orchiti":-0.25,"organis":-0.25,"orthopnea":-0.25,"oscheocel":-0.25,"oscheocoel":-0.25,"osmosi":-0.25,"osteiti":-0.25,"other":-0.25,"otic":-0.25,"otiti":-0.25,"ousel":-0.25,"outdat":-0.25,"outfac":-0.25,"outgener":-0.25,"outright":-0.25,"outroar":-0.25,"outstar":-0.25,"ouzel":-0.25,"overbearing":-0.25,"overfamiliar":-0.25,"overlay":-0.25,"overli":-0.25,"oversho":-0.25,"overshoot":-0.25,"overshot":-0.25,"overskirt":-0.25,"overturn":-0.25,"overvali":-0.25,"overwrought":-0.25,"oxymoron":-0.25,"ozaena":-0.25,"ozena":-0.25,"pacha":-0.25,"padder":-0.25,"painkil":-0.25,"palaeopatholog":-0.25,"palatalis":-0.25,"paleopatholog":-0.25,"panamica":-0.25,"panamiga":-0.25,"pancreat":-0.25,"panti":-0.25,"paralyz":-0.25,"paranoia":-0.25,"paraquat":-0.25,"paratyphoid":-0.25,"parch":-0.25,"parentless":-0.25,"paret":-0.25,"parki":-0.25,"parosamia":-0.25,"part":-0.25,"pasha":-0.25,"passementeri":-0.25,"pasteurellosi":-0.25,"past":-0.25,"patricid":-0.25,"patzer":-0.25,"pauper":-0.25,"pauperis":-0.25,"paw":-0.25,"pear":-0.25,"peccabl":-0.25,"peccant":-0.25,"peckish":-0.25,"pecul":-0.25,"pediculosi":-0.25,"peephol":-0.25,"peignoir":-0.25,"pellagra":-0.25,"penniless":-0.25,"peplo":-0.25,"peplus":-0.25,"perfection":-0.25,"perfidi":-0.25,"perforc":-0.25,"peridotit":-0.25,"periodont":-0.25,"periphrast":-0.25,"peroneus":-0.25,"persecutor":-0.25,"pertussi":-0.25,"pesticid":-0.25,"pestil":-0.25,"pettili":-0.25,"phaneromania":-0.25,"phantasmagor":-0.25,"phellem":-0.25,"phenylamin":-0.25,"philander":-0.25,"phimosi":-0.25,"phobia":-0.25,"photophobia":-0.25,"photoretin":-0.25,"physiotherapist":-0.25,"pickelhaub":-0.25,"pickl":-0.25,"pigstick":-0.25,"pilar":-0.25,"pinafor":-0.25,"pinkroot":-0.25,"pinni":-0.25,"piperacillin":-0.25,"piranha":-0.25,"pitfal":-0.25,"placeman":-0.25,"placeseek":-0.25,"placoid":-0.25,"planimet":-0.25,"plantal":-0.25,"platelik":-0.25,"platitudinarian":-0.25,"pleonast":-0.25,"pleurocarp":-0.25,"ploughman":-0.25,"plower":-0.25,"plowman":-0.25,"plumbism":-0.25,"plunder":-0.25,"plutocrat":-0.25,"policeman":-0.25,"poltrooneri":-0.25,"pom":-0.25,"pommi":-0.25,"poppycock":-0.25,"postich":-0.25,"postict":-0.25,"postilion":-0.25,"postillion":-0.25,"potboil":-0.25,"pothold":-0.25,"potomania":-0.25,"pounc":-0.25,"pox":-0.25,"prang":-0.25,"pratincol":-0.25,"precancer":-0.25,"precautionari":-0.25,"preclin":-0.25,"predic":-0.25,"preeclampsia":-0.25,"presbyop":-0.25,"presbyopia":-0.25,"presymptomat":-0.25,"prevu":-0.25,"prod":-0.25,"prodigi":-0.25,"proflig":-0.25,"prognost":-0.25,"proselytis":-0.25,"proselyt":-0.25,"prostat":-0.25,"protuber":-0.25,"provinci":-0.25,"pruderi":-0.25,"pruritus":-0.25,"pseudoephedrin":-0.25,"pseudohallucin":-0.25,"pseudophloem":-0.25,"psilophyt":-0.25,"psittacosi":-0.25,"psychogenet":-0.25,"psychosurgeri":-0.25,"psychotherapist":-0.25,"pteridosperm":-0.25,"ptosi":-0.25,"pube":-0.25,"puce":-0.25,"puddinghead":-0.25,"pugil":-0.25,"pule":-0.25,"punctum":-0.25,"punic":-0.25,"punk":-0.25,"purism":-0.25,"putrefact":-0.25,"putrescin":-0.25,"putsch":-0.25,"putz":-0.25,"pycnodysostosi":-0.25,"pyracanth":-0.25,"pyramid":-0.25,"pyridin":-0.25,"pyrolign":-0.25,"pyroscop":-0.25,"pyuria":-0.25,"qabala":-0.25,"qabalah":-0.25,"quaker":-0.25,"quartzit":-0.25,"quillwort":-0.25,"quinin":-0.25,"quinquefoli":-0.25,"rabato":-0.25,"rabbi":-0.25,"rabbit":-0.25,"rabid":-0.25,"racket":-0.25,"rack":-0.25,"ragamuffin":-0.25,"ramipril":-0.25,"randomis":-0.25,"random":-0.25,"rankl":-0.25,"rappel":-0.25,"raptor":-0.25,"rassl":-0.25,"reappear":-0.25,"reapprais":-0.25,"rearrang":-0.25,"rebarb":-0.25,"rebato":-0.25,"reced":-0.25,"rechauff":-0.25,"recidiv":-0.25,"reconvict":-0.25,"recrimin":-0.25,"recriminatori":-0.25,"recus":-0.25,"redbelli":-0.25,"redetermin":-0.25,"redistribut":-0.25,"redneck":-0.25,"reductiv":-0.25,"reelect":-0.25,"refriger":-0.25,"regain":-0.25,"regrow":-0.25,"reheat":-0.25,"reincarnation":-0.25,"reintegr":-0.25,"reject":-0.25,"relati":-0.25,"reluct":-0.25,"remilitaris":-0.25,"remilitar":-0.25,"remonstr":-0.25,"remorseless":-0.25,"rend":-0.25,"reorder":-0.25,"repriev":-0.25,"reshoot":-0.25,"resublim":-0.25,"retali":-0.25,"retaliatori":-0.25,"reveng":-0.25,"rheolog":-0.25,"rhymeless":-0.25,"ribier":-0.25,"ribless":-0.25,"rickettsia":-0.25,"rickettsialpox":-0.25,"rickettsiosi":-0.25,"rigatoni":-0.25,"rimeless":-0.25,"rinderpest":-0.25,"rioter":-0.25,"rival":-0.25,"roadblock":-0.25,"roadkil":-0.25,"robber":-0.25,"rockwe":-0.25,"rogu":-0.25,"rogueri":-0.25,"rook":-0.25,"root":-0.25,"rotenon":-0.25,"rotgut":-0.25,"roughcast":-0.25,"rout":-0.25,"roux":-0.25,"rowdyism":-0.25,"rube":-0.25,"rubella":-0.25,"rugged":-0.25,"ruiner":-0.25,"rumpl":-0.25,"runup":-0.25,"rushi":-0.25,"rustl":-0.25,"saccad":-0.25,"saddl":-0.25,"sag":-0.25,"salal":-0.25,"salienc":-0.25,"salol":-0.25,"sandbank":-0.25,"sapraemia":-0.25,"sapremia":-0.25,"sapsago":-0.25,"sarap":-0.25,"sarcoma":-0.25,"sarong":-0.25,"sass":-0.25,"satinleaf":-0.25,"saturn":-0.25,"satyriasi":-0.25,"saucili":-0.25,"saut":-0.25,"saute":-0.25,"savior":-0.25,"saviour":-0.25,"savorless":-0.25,"savourless":-0.25,"saxatil":-0.25,"saxicolin":-0.25,"saxicol":-0.25,"scabicid":-0.25,"scabi":-0.25,"scalar":-0.25,"scam":-0.25,"scandalmong":-0.25,"scapulari":-0.25,"scatolog":-0.25,"schedul":-0.25,"schizoid":-0.25,"schlep":-0.25,"schlepper":-0.25,"schlockmeist":-0.25,"schmegegg":-0.25,"schnook":-0.25,"sciara":-0.25,"sciarid":-0.25,"scienter":-0.25,"sclaff":-0.25,"scleredema":-0.25,"scleros":-0.25,"scoffer":-0.25,"scofflaw":-0.25,"scoundrel":-0.25,"scourger":-0.25,"scragg":-0.25,"scribbl":-0.25,"scrimmag":-0.25,"scrimp":-0.25,"scroll":-0.25,"scrounger":-0.25,"scrubbi":-0.25,"scuffer":-0.25,"scurvi":-0.25,"scut":-0.25,"seagul":-0.25,"secobarbit":-0.25,"section":-0.25,"seedless":-0.25,"seek":-0.25,"selenium":-0.25,"sempitern":-0.25,"septicaemia":-0.25,"septicemia":-0.25,"serap":-0.25,"serviett":-0.25,"setback":-0.25,"shadowbox":-0.25,"shadowi":-0.25,"shaggyman":-0.25,"shako":-0.25,"shallon":-0.25,"shantung":-0.25,"shard":-0.25,"sharia":-0.25,"shariah":-0.25,"shegetz":-0.25,"shelterbelt":-0.25,"sherd":-0.25,"shigellosi":-0.25,"shill":-0.25,"shillysh":-0.25,"shimmi":-0.25,"shinpad":-0.25,"shipboard":-0.25,"shirker":-0.25,"shirt":-0.25,"shithead":-0.25,"shitless":-0.25,"shitwork":-0.25,"shlep":-0.25,"shlepper":-0.25,"shlockmeist":-0.25,"shmegegg":-0.25,"shnook":-0.25,"shoeless":-0.25,"shoot":-0.25,"shopahol":-0.25,"shortish":-0.25,"short":-0.25,"shred":-0.25,"shrill":-0.25,"shrimpi":-0.25,"shrub":-0.25,"shunter":-0.25,"shyster":-0.25,"sickbag":-0.25,"sickb":-0.25,"sidelin":-0.25,"sidetrack":-0.25,"sieg":-0.25,"silent":-0.25,"sima":-0.25,"simpl":-0.25,"simplist":-0.25,"siriasi":-0.25,"sit":-0.25,"skibob":-0.25,"skimpi":-0.25,"skinhead":-0.25,"skirmish":-0.25,"skulk":-0.25,"skunkwe":-0.25,"slacker":-0.25,"slagheap":-0.25,"slake":-0.25,"slap":-0.25,"slatey":-0.25,"slati":-0.25,"slaveless":-0.25,"sleepwear":-0.25,"sleuth":-0.25,"slight":-0.25,"slime":-0.25,"slipperi":-0.25,"slob":-0.25,"slog":-0.25,"slopshop":-0.25,"sloth":-0.25,"sloucher":-0.25,"sloven":-0.25,"slower":-0.25,"slowest":-0.25,"slum":-0.25,"slut":-0.25,"sluttish":-0.25,"smack":-0.25,"smarm":-0.25,"smarmi":-0.25,"smell":-0.25,"smirker":-0.25,"smolder":-0.25,"smoulder":-0.25,"smudgi":-0.25,"snare":-0.25,"snickersne":-0.25,"sniffli":-0.25,"sniffi":-0.25,"snippet":-0.25,"snip":-0.25,"snivel":-0.25,"snobberi":-0.25,"snobbish":-0.25,"snobbism":-0.25,"snooti":-0.25,"snooz":-0.25,"snot":-0.25,"snowsho":-0.25,"snuffl":-0.25,"snuffli":-0.25,"sob":-0.25,"sock":-0.25,"softheart":-0.25,"sole":-0.25,"solidif":-0.25,"solidifi":-0.25,"somatosensori":-0.25,"soonest":-0.25,"soot":-0.25,"sop":-0.25,"sorceri":-0.25,"sot":-0.25,"sou":-0.25,"soulless":-0.25,"sourbal":-0.25,"sourish":-0.25,"soutan":-0.25,"spacesuit":-0.25,"spec":-0.25,"spermophil":-0.25,"spewer":-0.25,"sphacel":-0.25,"sphacelus":-0.25,"spicat":-0.25,"spiritualist":-0.25,"spoilat":-0.25,"spontan":-0.25,"sportswear":-0.25,"sprite":-0.25,"sprue":-0.25,"spue":-0.25,"spunk":-0.25,"spunki":-0.25,"spur":-0.25,"spyhol":-0.25,"squalli":-0.25,"squat":-0.25,"squatti":-0.25,"squigg":-0.25,"squint":-0.25,"stag":-0.25,"stagi":-0.25,"stakeout":-0.25,"stake":-0.25,"stamped":-0.25,"standdown":-0.25,"stannit":-0.25,"staph":-0.25,"staphylococci":-0.25,"staphylococcus":-0.25,"stardust":-0.25,"starer":-0.25,"starless":-0.25,"starvat":-0.25,"stealer":-0.25,"stercolith":-0.25,"sternut":-0.25,"sthene":-0.25,"stickup":-0.25,"stiff":-0.25,"stigmatis":-0.25,"stinkhorn":-0.25,"stob":-0.25,"stole":-0.25,"stonefish":-0.25,"stonewash":-0.25,"stormili":-0.25,"stormi":-0.25,"straggl":-0.25,"strang":-0.25,"stringent":-0.25,"striver":-0.25,"stromateid":-0.25,"struggler":-0.25,"stub":-0.25,"stubbi":-0.25,"stultif":-0.25,"stumper":-0.25,"stumpi":-0.25,"subclin":-0.25,"subfusc":-0.25,"suborn":-0.25,"subt":-0.25,"subvers":-0.25,"subvocalis":-0.25,"subvoc":-0.25,"subwoof":-0.25,"suer":-0.25,"suet":-0.25,"sueti":-0.25,"summon":-0.25,"sunbonnet":-0.25,"sunhat":-0.25,"sunk":-0.25,"sunstrok":-0.25,"suntan":-0.25,"supernaturalist":-0.25,"suprainfect":-0.25,"surreal":-0.25,"surrealist":-0.25,"suspici":-0.25,"swear":-0.25,"swim":-0.25,"swimsuit":-0.25,"swimwear":-0.25,"swindl":-0.25,"swollen":-0.25,"sycoph":-0.25,"symphysi":-0.25,"symposium":-0.25,"synaesthet":-0.25,"synesthet":-0.25,"syphilit":-0.25,"syringa":-0.25,"tablespoon":-0.25,"tactil":-0.25,"tailgat":-0.25,"tailless":-0.25,"tambac":-0.25,"tamer":-0.25,"tangl":-0.25,"tangi":-0.25,"tantalum":-0.25,"tappet":-0.25,"tap":-0.25,"tarantula":-0.25,"tarnish":-0.25,"tarpan":-0.25,"tattoo":-0.25,"telex":-0.25,"temporari":-0.25,"tenement":-0.25,"teratogen":-0.25,"teratolog":-0.25,"termag":-0.25,"terrain":-0.25,"terroris":-0.25,"tetchili":-0.25,"thalidomid":-0.25,"thanatolog":-0.25,"thereinaft":-0.25,"thermocauteri":-0.25,"thermoreceptor":-0.25,"thermotherapi":-0.25,"theropod":-0.25,"thicket":-0.25,"thief":-0.25,"thiev":-0.25,"thievish":-0.25,"thin":-0.25,"thingamabob":-0.25,"thingamajig":-0.25,"thingmabob":-0.25,"thingmajig":-0.25,"thingumabob":-0.25,"thingumajig":-0.25,"thingummi":-0.25,"thinner":-0.25,"thorn":-0.25,"thriftless":-0.25,"throati":-0.25,"thuggeri":-0.25,"thunderbird":-0.25,"thundershow":-0.25,"ticklish":-0.25,"tiebreak":-0.25,"tightfisted":-0.25,"tike":-0.25,"till":-0.25,"timeworn":-0.25,"tinnitus":-0.25,"titanium":-0.25,"titulari":-0.25,"toeless":-0.25,"toga":-0.25,"toilsom":-0.25,"tombac":-0.25,"tombak":-0.25,"tomfooleri":-0.25,"toot":-0.25,"topcoat":-0.25,"tope":-0.25,"topo":-0.25,"torero":-0.25,"torn":-0.25,"torqu":-0.25,"tortuous":-0.25,"totteri":-0.25,"tousl":-0.25,"tow":-0.25,"trailhead":-0.25,"traitor":-0.25,"tranquilli":-0.25,"transitori":-0.25,"transmogrif":-0.25,"traumatophobia":-0.25,"treasonist":-0.25,"treed":-0.25,"trembler":-0.25,"tribul":-0.25,"tributyrin":-0.25,"trichloroethan":-0.25,"trichloroethylen":-0.25,"trichomoniasi":-0.25,"trifoli":-0.25,"trifoliol":-0.25,"triskaidekaphobia":-0.25,"triumvir":-0.25,"trivia":-0.25,"trivial":-0.25,"trollop":-0.25,"trope":-0.25,"troublemak":-0.25,"troubler":-0.25,"truanci":-0.25,"tsunami":-0.25,"tsuri":-0.25,"tubercul":-0.25,"tudung":-0.25,"tuffet":-0.25,"tularaemia":-0.25,"tularemia":-0.25,"tumesc":-0.25,"tumid":-0.25,"turnkey":-0.25,"tweedi":-0.25,"twing":-0.25,"tyke":-0.25,"typescript":-0.25,"typhoid":-0.25,"tyrant":-0.25,"tyrosinemia":-0.25,"uakari":-0.25,"ulcer":-0.25,"ultramicroscop":-0.25,"ultramontan":-0.25,"umpir":-0.25,"unacknowledg":-0.25,"unacquaint":-0.25,"unaddress":-0.25,"unadventur":-0.25,"unaffect":-0.25,"unaffection":-0.25,"unalter":-0.25,"unann":-0.25,"unapproach":-0.25,"unassail":-0.25,"unassur":-0.25,"unavoid":-0.25,"unaw":-0.25,"unbal":-0.25,"unbar":-0.25,"unbefit":-0.25,"unbelov":-0.25,"unblink":-0.25,"unbolt":-0.25,"unbook":-0.25,"unborn":-0.25,"unburnish":-0.25,"unbutton":-0.25,"uncarpet":-0.25,"uncaus":-0.25,"uncensor":-0.25,"unchalleng":-0.25,"unchart":-0.25,"unchristlik":-0.25,"uncommercialis":-0.25,"uncommerci":-0.25,"unconformist":-0.25,"unconsid":-0.25,"unconstrict":-0.25,"uncontroversi":-0.25,"uncoordin":-0.25,"uncrop":-0.25,"unctuous":-0.25,"uncurtain":-0.25,"undecipher":-0.25,"undeciph":-0.25,"undefend":-0.25,"undelin":-0.25,"undemand":-0.25,"underbid":-0.25,"underbodic":-0.25,"underlin":-0.25,"underpart":-0.25,"underpric":-0.25,"underscor":-0.25,"undiagnos":-0.25,"undifferenti":-0.25,"undrawn":-0.25,"undi":-0.25,"unedit":-0.25,"unenclos":-0.25,"unencourag":-0.25,"unequip":-0.25,"uner":-0.25,"unexclus":-0.25,"unexpans":-0.25,"unfad":-0.25,"unfashion":-0.25,"unfeas":-0.25,"unfeath":-0.25,"unforethought":-0.25,"unform":-0.25,"unfound":-0.25,"unfunni":-0.25,"ungainli":-0.25,"ungentl":-0.25,"ungentlemanlik":-0.25,"ungentleman":-0.25,"unglaz":-0.25,"unharden":-0.25,"unharmoni":-0.25,"unhatch":-0.25,"unhealth":-0.25,"unhing":-0.25,"unhygien":-0.25,"unilater":-0.25,"unimport":-0.25,"unimpress":-0.25,"uninebri":-0.25,"uninquir":-0.25,"uninquisit":-0.25,"uninsur":-0.25,"uninterest":-0.25,"unintox":-0.25,"unjust":-0.25,"unlatch":-0.25,"unlaw":-0.25,"unlikelihood":-0.25,"unlikeli":-0.25,"unlog":-0.25,"unlucki":-0.25,"unmap":-0.25,"unmelt":-0.25,"unmerci":-0.25,"unmin":-0.25,"unmoder":-0.25,"unmotiv":-0.25,"unnerv":-0.25,"unorganis":-0.25,"unorgan":-0.25,"unpackag":-0.25,"unpaint":-0.25,"unpar":-0.25,"unperform":-0.25,"unperm":-0.25,"unperplex":-0.25,"unpiti":-0.25,"unpledg":-0.25,"unport":-0.25,"unprepossess":-0.25,"unpresent":-0.25,"unprevent":-0.25,"unprofession":-0.25,"unpromis":-0.25,"unpublish":-0.25,"unread":-0.25,"unreassur":-0.25,"unregist":-0.25,"unregul":-0.25,"unrehears":-0.25,"unrepress":-0.25,"unretent":-0.25,"unrevis":-0.25,"unrhym":-0.25,"unrim":-0.25,"unromant":-0.25,"unschedul":-0.25,"unscientif":-0.25,"unscript":-0.25,"unseen":-0.25,"unseeyn":-0.25,"unsettl":-0.25,"unshapen":-0.25,"unsmil":-0.25,"unsold":-0.25,"unsolubl":-0.25,"unsown":-0.25,"unspecif":-0.25,"unspectacular":-0.25,"unsport":-0.25,"unsportsmanlik":-0.25,"unstapl":-0.25,"unstr":-0.25,"unsweet":-0.25,"unswept":-0.25,"unsystemat":-0.25,"unten":-0.25,"unthemat":-0.25,"untitl":-0.25,"untoast":-0.25,"untranslat":-0.25,"untrim":-0.25,"untyp":-0.25,"ununderstood":-0.25,"unventil":-0.25,"unvindict":-0.25,"unvitrifi":-0.25,"unvoic":-0.25,"unwean":-0.25,"unwieldi":-0.25,"unwork":-0.25,"unwoven":-0.25,"uppish":-0.25,"uprais":-0.25,"uproot":-0.25,"urchin":-0.25,"useless":-0.25,"vaginismus":-0.25,"vagu":-0.25,"vain":-0.25,"vandalis":-0.25,"vandal":-0.25,"vanish":-0.25,"vanquish":-0.25,"vapid":-0.25,"variabl":-0.25,"varicella":-0.25,"varicosi":-0.25,"varmint":-0.25,"veget":-0.25,"ventricos":-0.25,"ventric":-0.25,"ventriloqu":-0.25,"ventriloquy":-0.25,"versicl":-0.25,"vest":-0.25,"vestiari":-0.25,"vestigi":-0.25,"vestment":-0.25,"vetchworm":-0.25,"viatic":-0.25,"viaticus":-0.25,"vilifi":-0.25,"vilipend":-0.25,"villai":-0.25,"viola":-0.25,"viricid":-0.25,"virucid":-0.25,"vitiligin":-0.25,"void":-0.25,"vulcanit":-0.25,"vulner":-0.25,"waddl":-0.25,"wader":-0.25,"waffl":-0.25,"wager":-0.25,"wander":-0.25,"warn":-0.25,"warship":-0.25,"warthog":-0.25,"wasteland":-0.25,"wastewat":-0.25,"wasteyard":-0.25,"waterworn":-0.25,"waver":-0.25,"waxi":-0.25,"waxlik":-0.25,"wearabl":-0.25,"weatherman":-0.25,"wee":-0.25,"weeper":-0.25,"werewolf":-0.25,"wetback":-0.25,"wetland":-0.25,"wham":-0.25,"whap":-0.25,"whatchamacallit":-0.25,"whatchamacallum":-0.25,"whatsi":-0.25,"wheedler":-0.25,"wheelless":-0.25,"wheezi":-0.25,"whiffer":-0.25,"whiner":-0.25,"whisper":-0.25,"whiten":-0.25,"whodunit":-0.25,"whoosh":-0.25,"widow":-0.25,"widowman":-0.25,"wildfir":-0.25,"willi":-0.25,"wimpl":-0.25,"windbreak":-0.25,"windstorm":-0.25,"winless":-0.25,"wino":-0.25,"wireless":-0.25,"wiri":-0.25,"witch":-0.25,"wobbl":-0.25,"wolfman":-0.25,"womanis":-0.25,"woodsi":-0.25,"workhous":-0.25,"worrier":-0.25,"worrywart":-0.25,"wraithlik":-0.25,"wren":-0.25,"wrench":-0.25,"wrest":-0.25,"wrestl":-0.25,"wrestler":-0.25,"writ":-0.25,"xenolith":-0.25,"xenophobia":-0.25,"xeric":-0.25,"yahoo":-0.25,"yammer":-0.25,"yatobyo":-0.25,"yea":-0.25,"yes":-0.25,"yid":-0.25,"yin":-0.25,"yip":-0.25,"yodel":-0.25,"yokel":-0.25,"zapper":-0.25,"zephyr":-0.25,"zidovudin":-0.25,"zillion":-0.25,"zit":-0.25,"ziti":-0.25,"zoo":-0.25,"zoonosi":-0.25,"zoophobia":-0.25}
},{}],82:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const senticon = require('./senticon_en.json');
const negations = require('./negations_en.json');

module.exports = {
  senticon,
  negations,
  stemmed: true,
};

},{"./negations_en.json":80,"./senticon_en.json":81}],83:[function(require,module,exports){
module.exports={
  "before": {
    "estando": "estar",
    "estoy": "estar",
    "estamos": "estar",
    "estais": "estar",
    "estan": "estar",
    "estes": "estar",
    "estemos": "estar",
    "esteis": "estar",
    "esten": "estar",
    "abstente": "absten",
    "abstengamonos": "absten",
    "abstenganse": "absten",
    "abriendo": "abrir",
    "abro": "abrir",
    "abres": "abrir",
    "abre": "abrir",
    "abrimos": "abrir",
    "abren": "abrir",
    "abriste": "abrir",
    "abristeis": "abrir",
    "abrieron": "abrir",
    "abramos": "abrir",
    "abran": "abrir",
    "abrid": "abrir",
    "divierte": "divert",
    "tus": "tu",
    "quienes": "qui",
    "el": "el",
    "lo": "el",
    "la": "el",
    "los": "el",
    "las": "el",
    "he": "hab",
    "has": "hab",
    "ha": "hab",
    "hay": "hab",
    "hemos": "hab",
    "han": "hab",
    "hube": "hab",
    "hubiste": "hab",
    "hubo": "hab",
    "hubimos": "hab",
    "hubisteis": "hab",
    "hubieron": "hab",
    "habre": "hab",
    "habras": "hab",
    "habra": "hab",
    "habremos": "hab",
    "habreis": "hab",
    "habran": "hab",
    "haya": "hab",
    "hayas": "hab",
    "hayamos": "hab",
    "hayais": "hab",
    "hayan": "hab",
    "hubiere": "hab",
    "hubieres": "hab",
    "hubieremos": "hab",
    "hubiereis": "hab",
    "hubieren": "hab",
    "hubiera": "hab",
    "hubieras": "hab",
    "hubieramos": "hab",
    "hubierais": "hab",
    "hubieran": "hab",
    "hubiese": "hab",
    "hubieses": "hab",
    "hubiesemos": "hab",
    "hubieseis": "hab",
    "hubiesen": "hab",
    "habria": "hab",
    "habrias": "hab",
    "habriamos": "hab",
    "habriais": "hab",
    "habrian": "hab",
    "fui": "ser",
    "fuiste": "ser",
    "fue": "ser",
    "fuimos": "ser",
    "fuisteis": "ser",
    "fueron": "ser",
    "fuere": "ser",
    "fueres": "ser",
    "fueremos": "ser",
    "fuereis": "ser",
    "fueren": "ser",
    "fuera": "ser",
    "fueras": "ser",
    "fueramos": "ser",
    "fuerais": "ser",
    "fueran": "ser",
    "fuese": "ser",
    "fueses": "ser",
    "fuesemos": "ser",
    "fueseis": "ser",
    "fuesen": "ser",
    "siendo": "ser",
    "sido": "ser",
    "soy": "ser",
    "eres": "ser",
    "es": "ser",
    "somos": "ser",
    "sois": "ser",
    "son": "ser",
    "era": "ser",
    "eras": "ser",
    "eramos": "ser",
    "erais": "ser",
    "eran": "ser",
    "sea": "ser",
    "seas": "ser",
    "seamos": "ser",
    "seais": "ser",
    "sean": "ser",
    "quepo": "cab",
    "cupe": "cab",
    "cupiste": "cab",
    "cupo": "cab",
    "cupimos": "cab",
    "cupisteis": "cab",
    "cupieron": "cab",
    "cabre": "cab",
    "cabremos": "cab",
    "cabreis": "cab",
    "cabran": "cab",
    "quepa": "cab",
    "quepas": "cab",
    "quepamos": "cab",
    "quepais": "cab",
    "quepan": "cab",
    "cupiere": "cab",
    "cupieres": "cab",
    "cupieremos": "cab",
    "cupiereis": "cab",
    "cupieren": "cab",
    "cupiera": "cab",
    "cupieras": "cab",
    "cupieramos": "cab",
    "cupierais": "cab",
    "cupieran": "cab",
    "cupiese": "cab",
    "cupieses": "cab",
    "cupiesemos": "cab",
    "cupieseis": "cab",
    "cupiesen": "cab",
    "cabria": "cab",
    "cabrias": "cab",
    "cabriamos": "cab",
    "cabriais": "cab",
    "cabrian": "cab",
    "yendo": "ir",
    "ido": "ir",
    "voy": "ir",
    "vas": "ir",
    "va": "ir",
    "vamos": "ir",
    "vais": "ir",
    "van": "ir",
    "iba": "ir",
    "ibas": "ir",
    "ibamos": "ir",
    "ibais": "ir",
    "iban": "ir",
    "ire": "ir",
    "iras": "ir",
    "ira": "ir",
    "iremos": "ir",
    "ireis": "ir",
    "iran": "ir",
    "vaya": "ir",
    "vayas": "ir",
    "vayamos": "ir",
    "vayais": "ir",
    "vayan": "ir",
    "iria": "ir",
    "irias": "ir",
    "iriamos": "ir",
    "iriais": "ir",
    "irian": "ir",
    "id": "ir",
    "como": "como",
    "mas": "mas",
    "hecho": "hac",
    "hago": "hac",
    "hice": "hac",
    "hiciste": "hac",
    "hizo": "hac",
    "hicimos": "hac",
    "hicisteis": "hac",
    "hicieron": "hac",
    "hare": "hac",
    "haras": "hac",
    "hara": "hac",
    "haremos": "hac",
    "hareis": "hac",
    "haran": "hac",
    "haga": "hac",
    "hagas": "hac",
    "hagamos": "hac",
    "hagais": "hac",
    "hagan": "hac",
    "hiciere": "hac",
    "hicieres": "hac",
    "hicieremos": "hac",
    "hiciereis": "hac",
    "hicieren": "hac",
    "hiciera": "hac",
    "hicieras": "hac",
    "hicieramos": "hac",
    "hicierais": "hac",
    "hicieran": "hac",
    "hiciese": "hac",
    "hicieses": "hac",
    "hiciesemos": "hac",
    "hicieseis": "hac",
    "hiciesen": "hac",
    "haria": "hac",
    "harias": "hac",
    "hariamos": "hac",
    "hariais": "hac",
    "harian": "hac",
    "haz": "hac",
    "estad": "estar",
    "tengo": "ten",
    "tienes": "ten",
    "tiene": "ten",
    "tienen": "ten",
    "tenga": "ten",
    "tengas": "ten",
    "tengamos": "ten",
    "tengais": "ten",
    "tengan": "ten",
    "di": "dec",
    "diciendo": "dec",
    "dicho": "dec",
    "dices": "dec",
    "dice": "dec",
    "dicen": "dec",
    "dijeron": "dec",
    "dijeres": "dec",
    "dijeramos": "dec",
    "dijerais": "dec",
    "dijese": "dec",
    "dijeses": "dec",
    "dijesemos": "dec",
    "dijeseis": "dec",
    "salgo": "sal",
    "sali": "sal",
    "salga": "sal",
    "salgas": "sal",
    "salgamos": "sal",
    "salgais": "sal",
    "salgan": "sal",
    "puesto": "pon",
    "viendo": "ver",
    "veo": "ver",
    "ves": "ver",
    "vemos": "ver",
    "vi": "ver",
    "vio": "ver",
    "vimos": "ver",
    "visteis": "ver",
    "vieron": "ver",
    "vea": "ver",
    "veas": "ver",
    "veamos": "ver",
    "veais": "ver",
    "vean": "ver",
    "ved": "ver",
    "absuelto": "absolv",
    "abstrayendo": "abstra",
    "abstrajeron": "abstra",
    "abstrajeres": "abstra",
    "abstrajeramos": "abstra",
    "abstrajerais": "abstra",
    "abstrajese": "abstra",
    "abstrajeses": "abstra",
    "abstrajesemos": "abstra",
    "abstrajeseis": "abstra",
    "acuerdate": "acord",
    "acuerdese": "acord",
    "acordemonos": "acord",
    "acuerdense": "acord",
    "adhiero": "adher",
    "adhieres": "adher",
    "adhiere": "adher",
    "adhieren": "adher",
    "adhiera": "adher",
    "adhieras": "adher",
    "adhieran": "adher",
    "andando": "andar",
    "andado": "andar",
    "ando": "andar",
    "andas": "andar",
    "anda": "andar",
    "andamos": "andar",
    "andais": "andar",
    "andan": "andar",
    "andaba": "andar",
    "andabas": "andar",
    "andabamos": "andar",
    "andabais": "andar",
    "andaban": "andar",
    "ande": "andar",
    "andes": "andar",
    "andemos": "andar",
    "andeis": "andar",
    "anden": "andar",
    "andad": "andar",
    "dando": "dar",
    "dado": "dar",
    "doy": "dar",
    "das": "dar",
    "da": "dar",
    "damos": "dar",
    "dais": "dar",
    "dan": "dar",
    "daba": "dar",
    "dabas": "dar",
    "dabamos": "dar",
    "dabais": "dar",
    "daban": "dar",
    "diste": "dar",
    "dio": "dar",
    "dimos": "dar",
    "disteis": "dar",
    "dieron": "dar",
    "des": "dar",
    "demos": "dar",
    "deis": "dar",
    "den": "dar",
    "diese": "dar",
    "dieses": "dar",
    "diesemos": "dar",
    "dieseis": "dar",
    "diesen": "dar",
    "dad": "dar",
    "naci": "nac",
    "oyendo": "oir",
    "oido": "oir",
    "oigo": "oir",
    "oyes": "oir",
    "oye": "oir",
    "oimos": "oir",
    "ois": "oir",
    "oyen": "oir",
    "oia": "oir",
    "oias": "oir",
    "oiamos": "oir",
    "oiais": "oir",
    "oian": "oir",
    "oi": "oir",
    "oiste": "oir",
    "oyo": "oir",
    "oisteis": "oir",
    "oyeron": "oir",
    "oiga": "oir",
    "oigas": "oir",
    "oigamos": "oir",
    "oigais": "oir",
    "oigan": "oir",
    "oyese": "oir",
    "oyeses": "oir",
    "oyesemos": "oir",
    "oyeseis": "oir",
    "oyesen": "oir",
    "oid": "oir",
    "quiero": "quer",
    "quieres": "quer",
    "quiere": "quer",
    "quieren": "quer",
    "quiera": "quer",
    "quieras": "quer",
    "quieran": "quer",
    "sepa": "sab",
    "sepas": "sab",
    "sepamos": "sab",
    "sepais": "sab",
    "sepan": "sab",
    "acuestate": "acost",
    "acuestese": "acost",
    "acostemonos": "acost",
    "acuestense": "acost",
    "adquiero": "adquir",
    "adujeron": "aduc",
    "adujeres": "aduc",
    "adujeramos": "aduc",
    "adujerais": "aduc",
    "adujese": "aduc",
    "adujeses": "aduc",
    "adujesemos": "aduc",
    "adujeseis": "aduc",
    "arrepientete": "arrepent",
    "arrepintamonos": "arrepent",
    "arrepientanse": "arrepent",
    "atienes": "aten",
    "atiene": "aten",
    "atienen": "aten",
    "atente": "aten",
    "atengamonos": "aten",
    "atenganse": "aten",
    "atrayendo": "atra",
    "atrajeron": "atra",
    "avienes": "aven",
    "aviene": "aven",
    "avienen": "aven",
    "atraviese": "atraves",
    "atravieses": "atraves",
    "atraviesen": "atraves",
    "averguenzate": "avergonz",
    "averguencese": "avergonz",
    "avergoncemonos": "avergonz",
    "averguencense": "avergonz",
    "bendijeron": "bendec",
    "cayendo": "caer",
    "caido": "caer",
    "caes": "caer",
    "cae": "caer",
    "caemos": "caer",
    "caeis": "caer",
    "caen": "caer",
    "caiste": "caer",
    "caimos": "caer",
    "caisteis": "caer",
    "cayeron": "caer",
    "cayeres": "caer",
    "cayeramos": "caer",
    "cayerais": "caer",
    "caed": "caer",
    "cinendo": "cen",
    "ceni": "cen",
    "cineron": "cen",
    "cineres": "cen",
    "cineramos": "cen",
    "cinerais": "cen",
    "cinese": "cen",
    "cineses": "cen",
    "cinesemos": "cen",
    "cineseis": "cen",
    "coci": "coc",
    "cozamos": "coc",
    "cozais": "coc",
    "complugo": "complac",
    "complegue": "complac",
    "compuesto": "compon",
    "condujeron": "conduc",
    "condujeres": "conduc",
    "condujeramos": "conduc",
    "condujerais": "conduc",
    "condujese": "conduc",
    "condujeses": "conduc",
    "condujesemos": "conduc",
    "condujeseis": "conduc",
    "confiero": "confer",
    "confieres": "confer",
    "confiere": "confer",
    "confieren": "confer",
    "conferia": "confer",
    "conferias": "confer",
    "conferiamos": "confer",
    "conferiais": "confer",
    "conferian": "confer",
    "confiera": "confer",
    "confieras": "confer",
    "confieran": "confer",
    "confieso": "confes",
    "confiesas": "confes",
    "confiesa": "confes",
    "confiesan": "confes",
    "confiese": "confes",
    "confieses": "confes",
    "confiesen": "confes",
    "constrinendo": "constren",
    "constrineron": "constren",
    "constrineres": "constren",
    "constrineramos": "constren",
    "constrinerais": "constren",
    "contiendo": "contend",
    "contienes": "conten",
    "contiene": "conten",
    "contienen": "conten",
    "conten": "conten",
    "contradicho": "contradec",
    "contradijeron": "contradec",
    "contrayendo": "contr",
    "contrae": "contr",
    "contrajeron": "contr",
    "contravienes": "contraven",
    "contraviene": "contraven",
    "contravienen": "contraven",
    "contraven": "contraven",
    "convienes": "conven",
    "conviene": "conven",
    "convienen": "conven",
    "conven": "conven",
    "dedujeron": "deduc",
    "dedujeres": "deduc",
    "dedujeramos": "deduc",
    "dedujerais": "deduc",
    "defiendo": "defend",
    "desando": "desand",
    "desciendo": "descend",
    "descompuesto": "descompon",
    "deshecho": "deshac",
    "deshizo": "deshac",
    "deshaz": "deshac",
    "deshuesen": "desos",
    "despido": "desped",
    "despida": "desped",
    "despidas": "desped",
    "desviste": "desvest",
    "detienes": "deten",
    "detiene": "deten",
    "detienen": "deten",
    "deten": "deten",
    "devienes": "deven",
    "deviene": "deven",
    "devienen": "deven",
    "deven": "deven",
    "devuelto": "devolv",
    "difiero": "difer",
    "difieres": "difer",
    "difiere": "difer",
    "difieren": "difer",
    "diferia": "difer",
    "diferias": "difer",
    "diferiamos": "difer",
    "diferiais": "difer",
    "diferian": "difer",
    "difiera": "difer",
    "difieras": "difer",
    "difieran": "difer",
    "digiero": "diger",
    "digieres": "diger",
    "digiere": "diger",
    "digieren": "diger",
    "digeria": "diger",
    "digerias": "diger",
    "digeriamos": "diger",
    "digeriais": "diger",
    "digerian": "diger",
    "digiera": "diger",
    "digieras": "diger",
    "digieran": "diger",
    "distiendo": "distend",
    "distrayendo": "distr",
    "distrae": "distr",
    "distrajeron": "distr",
    "doli": "dol",
    "entreten": "entreten",
    "irgo": "ergu",
    "irgues": "ergu",
    "irguen": "ergu",
    "irga": "ergu",
    "irgas": "ergu",
    "irgamos": "ergu",
    "irgais": "ergu",
    "irgan": "ergu",
    "extrayendo": "extra",
    "extrajeron": "extra",
    "hedi": "hed",
    "heri": "her",
    "opus": "opus"
  },
  "after": {
    "abstuv": "absten",
    "abstendr": "absten",
    "tuv": "ten",
    "tendr": "ten",
    "dir": "dec",
    "dig": "dec",
    "dij": "dec",
    "saldr": "sal",
    "pud": "pod",
    "podr": "pod",
    "pued": "pod",
    "pondr": "pon",
    "pong": "pon",
    "pus": "pon",
    "vier": "ver",
    "vies": "ver",
    "vei": "ver",
    "absuelv": "absolv",
    "abstraj": "abstra",
    "abstraig": "abstra",
    "aciert": "acert",
    "acuerd": "acord",
    "adhir": "adher",
    "anduv": "andar",
    "dier": "dar",
    "nazc": "nac",
    "oyer": "oir",
    "querr": "quer",
    "quis": "quer",
    "sabr": "sab",
    "sup": "sab",
    "acuest": "acost",
    "adqu": "adquir",
    "aduj": "aduc",
    "advirt": "advert",
    "adviert": "advert",
    "almuerz": "almorz",
    "almuerc": "almorz",
    "almorc": "almorz",
    "arrepint": "arrepent",
    "arrepient": "arrepent",
    "durm": "dorm",
    "duerm": "dorm",
    "alient": "alent",
    "apacient": "apacent",
    "apuest": "apost",
    "apriet": "apret",
    "arriend": "arrend",
    "asciend": "ascend",
    "asint": "asent",
    "asient": "asent",
    "atiend": "atend",
    "atuv": "aten",
    "ateng": "aten",
    "atendr": "aten",
    "atraj": "atra",
    "atrajer": "atra",
    "atrajes": "atra",
    "atraig": "atra",
    "avin": "aven",
    "avendr": "aven",
    "aveng": "aven",
    "atravies": "atraves",
    "averguenz": "avergonz",
    "averguenc": "avergonz",
    "avergonc": "avergonz",
    "bendij": "bendec",
    "bendig": "bendec",
    "bendic": "bendec",
    "bendijes": "bendec",
    "bendijer": "bendec",
    "bendit": "bendec",
    "cai": "caer",
    "cay": "caer",
    "caig": "caer",
    "cayes": "caer",
    "calient": "calent",
    "cieg": "ceg",
    "cin": "cen",
    "ciern": "cern",
    "cuez": "coc",
    "cuec": "coc",
    "cuel": "col",
    "colig": "coleg",
    "colij": "coleg",
    "cuelg": "colg",
    "comienz": "comenz",
    "comienc": "comenz",
    "comenc": "comenz",
    "compit": "compet",
    "complugu": "complac",
    "compondr": "compon",
    "compong": "compon",
    "compus": "compon",
    "comprueb": "comprob",
    "concib": "conceb",
    "conciern": "concern",
    "conciert": "concert",
    "concuerd": "concord",
    "conduj": "conduc",
    "confir": "confer",
    "conmuev": "conmov",
    "consigu": "consegu",
    "consig": "consegu",
    "consint": "consent",
    "consient": "consent",
    "consuel": "consol",
    "constrin": "constren",
    "constrines": "constren",
    "cuent": "cont",
    "contiend": "contend",
    "contuv": "conten",
    "contendr": "conten",
    "conteng": "conten",
    "contrad": "contradec",
    "contradic": "contradec",
    "contradig": "contradec",
    "contradij": "contradec",
    "contradijer": "contradec",
    "contradijes": "contradec",
    "contraj": "contr",
    "contrajer": "contr",
    "contrajes": "contr",
    "contraig": "contr",
    "contravin": "contraven",
    "contraveng": "contraven",
    "contravendr": "contraven",
    "convin": "conven",
    "conveng": "conven",
    "convendr": "conven",
    "convirt": "convert",
    "conviert": "convert",
    "corrig": "correg",
    "corrij": "correg",
    "cuest": "cost",
    "deduj": "deduc",
    "dedujes": "deduc",
    "defiend": "defend",
    "deguell": "degoll",
    "demuel": "demol",
    "demuestr": "demostr",
    "denieg": "deneg",
    "depondr": "depon",
    "depus": "depon",
    "depong": "depon",
    "depuest": "depon",
    "derrit": "derret",
    "desanduv": "desand",
    "desciend": "descend",
    "descompondr": "descompon",
    "descompus": "descompon",
    "descompong": "descompon",
    "descuent": "descont",
    "deshic": "deshac",
    "deshag": "deshac",
    "desh": "deshac",
    "desuel": "desol",
    "desuell": "desoll",
    "deshues": "desos",
    "despid": "desped",
    "despiert": "despert",
    "desvist": "desvest",
    "detuv": "deten",
    "detendr": "deten",
    "deteng": "deten",
    "devin": "deven",
    "devendr": "deven",
    "deveng": "deven",
    "devuelv": "devolv",
    "difir": "difer",
    "digir": "diger",
    "disciern": "discern",
    "disint": "disent",
    "disient": "disent",
    "disuelv": "disolv",
    "disuelt": "disolv",
    "dispus": "dispon",
    "dispondr": "dispon",
    "dispong": "dispon",
    "dispuest": "dispon",
    "distiend": "distend",
    "distraig": "distr",
    "distraj": "distr",
    "distrajes": "distr",
    "distrajer": "distr",
    "elig": "eleg",
    "elij": "eleg",
    "elect": "eleg",
    "duel": "dol",
    "embist": "embest",
    "enciend": "encend",
    "encierr": "encerr",
    "encuentr": "encontr",
    "enmiend": "enmend",
    "entiend": "entend",
    "entierr": "enterr",
    "entretuv": "entreten",
    "entretendr": "entreten",
    "entreteng": "entreten",
    "entretien": "entreten",
    "envuelv": "envolv",
    "envuelt": "envolv",
    "equivaldr": "equival",
    "equivalg": "equival",
    "irgu": "ergu",
    "yerg": "ergu",
    "errab": "errar",
    "yerr": "errar",
    "erras": "errar",
    "esfuerc": "esforz",
    "esfuerz": "esforz",
    "esforc": "esforz",
    "extraig": "extra",
    "extrajes": "extra",
    "extrajer": "extra",
    "extraj": "extra",
    "estrin": "estren",
    "estrines": "estren",
    "estriner": "estren",
    "expid": "exped",
    "expus": "expon",
    "expondr": "expon",
    "expong": "expon",
    "extiend": "extend",
    "fuerc": "forz",
    "forc": "forz",
    "fuerz": "forz",
    "frieg": "freg",
    "gobiern": "gobern",
    "hied": "hed",
    "hiel": "hel",
    "hinch": "hench",
    "hir": "her",
    "hier": "her",
    "hirv": "herv",
    "hierv": "herv",
    "impid": "imped",
    "impondr": "impon",
    "impong": "impon",
    "impus": "impon",
    "induj": "induc",
    "indujes": "induc",
    "indujer": "induc",
    "infir": "infer",
    "interfir": "interfer",
    "interf": "interfer",
    "interpondr": "interpon",
    "interpus": "interpon",
    "interpong": "interpon",
    "intervendr": "interven",
    "intervin": "interven",
    "interveng": "interven",
    "introduj": "introduc",
    "introdujer": "introduc",
    "introdujes": "introduc",
    "invirt": "invert",
    "inviert": "invert",
    "invist": "invest",
    "jueg": "jug",
    "lluev": "llov",
    "luzc": "luc",
    "maldij": "maldec",
    "maldijes": "maldec",
    "maldijer": "maldec",
    "maldig": "maldec",
    "maldic": "maldec",
    "malquis": "malquer",
    "malquerr": "malquer",
    "malqu": "malquer",
    "manifiest": "manifest",
    "mantendr": "manten",
    "mantuv": "manten",
    "manteng": "manten",
    "mantien": "manten",
    "meriend": "merend",
    "muel": "mol",
    "muerd": "mord",
    "muestr": "mostr",
    "muev": "mov",
    "nieg": "neg",
    "niev": "nev",
    "obtuv": "obten",
    "obtendr": "obten",
    "obteng": "obten",
    "obtien": "obten",
    "opondr": "opon",
    "opong": "opon",
    "opus": "opon",
    "pid": "ped",
    "piens": "pens",
    "persigu": "persegu",
    "persig": "persegu",
    "plugu": "plac",
    "plieg": "pleg",
    "pospus": "pospon",
    "pospondr": "pospon",
    "pospong": "pospon",
    "predij": "predec",
    "predijer": "predec",
    "predijes": "predec",
    "predig": "predec",
    "prefir": "prefer",
    "presint": "present",
    "presient": "present",
    "prevendr": "preven",
    "preveng": "preven",
    "previn": "preven",
    "previen": "preven",
    "produj": "produc",
    "produjes": "produc",
    "produjer": "produc",
    "propondr": "propon",
    "propus": "propon",
    "propong": "propon",
    "promuev": "promov",
    "prosigu": "prosegu",
    "prosig": "prosegu",
    "proveng": "proven",
    "provendr": "proven",
    "provin": "proven",
    "provien": "proven",
    "prueb": "prob",
    "quiebr": "quebr",
    "recaig": "rec",
    "recay": "rec",
    "recayes": "rec",
    "recayer": "rec",
    "recomiend": "recomend",
    "recuerd": "record",
    "redujes": "reduc",
    "redujer": "reduc",
    "reduj": "reduc",
    "refir": "refer",
    "refuerc": "reforz",
    "reforc": "reforz",
    "refuerz": "reforz",
    "rieg": "reg",
    "rehic": "rehac",
    "rehaz": "rehac",
    "rehag": "rehac",
    "remuev": "remov",
    "rind": "rend",
    "renuev": "renov",
    "repit": "repet",
    "repondr": "repon",
    "repus": "repon",
    "repong": "repon",
    "reproduj": "reproduc",
    "reprodujes": "reproduc",
    "reprodujer": "reproduc",
    "requir": "requer",
    "requ": "requer",
    "resuelv": "resolv",
    "retuv": "reten",
    "reteng": "reten",
    "retien": "reten",
    "retendr": "reten",
    "revient": "revent",
    "revuelv": "revolv",
    "satisfic": "satisfac",
    "satisf": "satisfac",
    "satisfag": "satisfac",
    "seduj": "seduc",
    "sedujes": "seduc",
    "sedujer": "seduc",
    "sigu": "segu",
    "siembr": "sembr",
    "sint": "sent",
    "sient": "sent",
    "sierr": "serr",
    "sirv": "serv",
    "sobresalg": "sobresal",
    "sobresaldr": "sobresal",
    "sobrevuel": "sobrevol",
    "suelt": "solt",
    "suen": "son",
    "sosieg": "soseg",
    "sostuv": "sosten",
    "sostendr": "sosten",
    "sosteng": "sosten",
    "sostien": "sosten",
    "sugir": "suger",
    "supondr": "supon",
    "supus": "supon",
    "supong": "supon",
    "tiembl": "tembl",
    "tuerz": "torc",
    "torz": "torc",
    "traduj": "traduc",
    "tradujer": "traduc",
    "tradujes": "traduc",
    "transfir": "transfer",
    "transf": "transfer",
    "tropiec": "tropec",
    "tropez": "tropec",
    "tropiez": "tropec",
    "valdr": "val",
    "valg": "val",
    "vendr": "ven",
    "veng": "ven",
    "vin": "ven",
    "vien": "ven",
    "truen": "tron",
    "viert": "vert",
    "vuelc": "volc",
    "abri": "abrir",
    "abrier": "abrir",
    "abries": "abrir",
    "abra": "abrir",
    "abiert": "abrir",
    "divirt": "divert",
    "diviert": "divert",
    "absteng": "absten",
    "abstien": "absten",
    "estuv": "estar",
    "estab": "estar",
    "renegoc": "renegoci",
    "abalic": "abaliz",
    "absuelt": "absolv",
    "academic": "academiz",
    "acomid": "acomed",
    "actualic": "actualiz",
    "amortig": "amortigu",
    "aspavient": "aspavent",
    "auspic": "auspici",
    "autograf": "autografi",
    "aglom": "aglomer",
    "trasciend": "trascend"
  }
}

},{}],84:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const LangEs = require('./lang-es');
const TokenizerEs = require('./tokenizer-es');
const StemmerEs = require('./stemmer-es');
const StopwordsEs = require('./stopwords-es');
const NormalizerEs = require('./normalizer-es');
const SentimentEs = require('./sentiment/sentiment_es');

module.exports = {
  LangEs,
  StemmerEs,
  StopwordsEs,
  TokenizerEs,
  NormalizerEs,
  SentimentEs,
};

},{"./lang-es":85,"./normalizer-es":86,"./sentiment/sentiment_es":90,"./stemmer-es":91,"./stopwords-es":92,"./tokenizer-es":93}],85:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const TokenizerEs = require('./tokenizer-es');
const StemmerEs = require('./stemmer-es');
const StopwordsEs = require('./stopwords-es');
const NormalizerEs = require('./normalizer-es');
const SentimentEs = require('./sentiment/sentiment_es');
const registerTrigrams = require('./trigrams');

class LangEs {
  register(container) {
    container.use(TokenizerEs);
    container.use(StemmerEs);
    container.use(StopwordsEs);
    container.use(NormalizerEs);
    container.register('sentiment-es', SentimentEs);
    registerTrigrams(container);
  }
}

module.exports = LangEs;

},{"./normalizer-es":86,"./sentiment/sentiment_es":90,"./stemmer-es":91,"./stopwords-es":92,"./tokenizer-es":93,"./trigrams":94}],86:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const { Normalizer } = require('@nlpjs/core');

class NormalizerEs extends Normalizer {
  constructor(container) {
    super(container);
    this.name = 'normalizer-es';
  }

  normalize(text) {
    return text
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .toLowerCase();
  }

  run(srcInput) {
    const input = srcInput;
    input.text = this.normalize(input.text, input);
    return input;
  }
}

module.exports = NormalizerEs;

},{"@nlpjs/core":59}],87:[function(require,module,exports){
module.exports={"grat":1,"no":-1,"nunc":-1,"ayud":2,"gust":2,"arrib":2,"apoy":1,"mejor":2,"buen":3,"estupend":3,"unid":1,"quer":2,"cuid":2,"grand":3,"amor":3,"calid":2,"guard":2,"unir":1,"avanc":1,"si":1,"amig":2,"legal":1,"problem":-2,"import":2,"regal":2,"complic":-1,"pag":-1,"guerr":-2,"facil":2,"inter":1,"compart":1,"popul":3,"bienven":2,"dio":1,"acord":1,"segur":2,"diversion":4,"oro":2,"limit":-1,"solucion":1,"natural":1,"verdader":2,"mal":-3,"riesg":-2,"grac":1,"error":-2,"clar":1,"bellec":3,"activ":2,"fueg":-2,"muer":-2,"perd":-3,"aument":1,"crecimient":2,"deten":-1,"benefic":2,"efect":2,"extrav":-3,"esperanc":2,"des":1,"madur":2,"ciert":1,"bien":2,"sal":-1,"enor":1,"amabl":2,"oportun":2,"aprop":2,"agrad":3,"permit":1,"sab":2,"mat":-3,"respons":2,"gan":2,"canc":-1,"feliz":3,"agradec":3,"salv":2,"cul":-4,"favorit":2,"cor":-1,"anti":-1,"fuer":2,"enfermed":-1,"excelent":3,"perfect":3,"prem":3,"asegur":1,"exit":3,"hermos":3,"advertent":-3,"signific":1,"util":2,"autor":1,"sexy":3,"cool":1,"leading":2,"positiv":2,"fitnes":1,"great":3,"responsibility":1,"resolu":2,"lealt":1,"recomend":2,"aprob":2,"habil":2,"bonit":1,"violacion":-2,"presion":-1,"deud":-2,"interes":1,"disfrut":2,"bloc":-1,"just":2,"incorrect":-2,"muert":-2,"respet":2,"pobr":-2,"jod":-4,"paz":2,"creativ":2,"progres":2,"concesion":1,"fan":3,"acept":1,"mor":-3,"servicial":2,"limp":2,"justic":2,"demand":-2,"posibil":2,"vision":1,"baj":-1,"emergent":-2,"dificil":-1,"ajust":1,"dolor":-2,"desperdic":-1,"delit":-3,"senorit":-2,"garant":1,"diam":1,"sol":2,"compat":2,"ros":1,"libert":2,"nuev":1,"crecient":1,"poll":-5,"integral":2,"proteg":1,"solt":-3,"preven":-1,"ric":2,"espiritu":1,"desaf":-1,"carg":-2,"list":1,"tet":-2,"evit":-1,"abus":-3,"liderazg":1,"fe":1,"falt":-2,"mur":-3,"alcanc":1,"atac":-1,"perdon":-1,"dan":-3,"fracas":-2,"jesu":1,"aventur":2,"lucr":2,"determin":2,"divert":4,"dedic":2,"criminal":-3,"poder":2,"son":1,"fals":-1,"promocion":1,"ventaj":2,"ahorr":1,"rect":1,"prepar":1,"alert":-1,"dulc":2,"gananc":2,"olvid":-1,"rot":-1,"batall":-1,"spam":-2,"forz":2,"pel":-2,"fall":-2,"negat":-2,"salud":2,"lesion":-2,"ascens":1,"famos":2,"violenc":-3,"exclus":2,"soport":2,"maravill":3,"mied":-2,"accion":1,"comod":2,"ocult":-1,"luj":2,"increibl":3,"sentimient":1,"vac":-1,"estre":-1,"yeah":1,"preocup":-3,"competit":2,"dick":-4,"conflict":-2,"dificult":-2,"expand":1,"afect":-1,"tramp":-1,"enfermedad":-1,"donacion":2,"asesin":-3,"atraccion":2,"loc":-2,"comed":1,"compromis":2,"pistol":-1,"pur":1,"infiern":-4,"confianc":2,"cal":1,"desconect":-1,"chup":-3,"suprem":4,"reconoc":2,"alent":2,"cancel":-1,"retras":-1,"novel":2,"discapac":-2,"ganador":4,"compromet":1,"asec":2,"excepcional":5,"jaj":2,"castig":-2,"gri":-1,"odi":-3,"ilegal":-3,"consent":2,"adecu":1,"confiabl":2,"dud":-1,"incapaz":-2,"romanc":2,"ciel":2,"enfoc":2,"negoc":2,"cort":-1,"guau":4,"amad":3,"superior":2,"otorg":1,"cris":-3,"lumin":1,"pobrec":-1,"accident":-2,"acces":1,"huelg":-1,"amenac":-2,"extran":-1,"sosten":2,"innov":2,"negrit":2,"establ":2,"asset":2,"titul":1,"sever":-2,"humor":2,"capac":1,"pec":-2,"lind":2,"anhel":1,"trastor":-2,"asent":1,"fantast":4,"comet":1,"orgull":2,"desastr":-2,"alarm":-2,"rob":-2,"peor":-3,"peligr":-2,"emocion":3,"fiabil":2,"plac":3,"honor":2,"suer":3,"comic":1,"ceg":-1,"furios":-3,"asquer":-2,"capaz":1,"victor":3,"alegr":3,"enferm":-2,"lol":3,"suc":-2,"don":2,"quebr":-3,"viv":1,"promes":1,"mar":-2,"prision":-2,"popular":3,"empeor":-3,"victim":-3,"escap":-1,"sustancial":1,"fraud":-4,"awesom":4,"choc":-2,"infeccion":-2,"extend":1,"asesinat":-2,"rescat":2,"combat":-1,"lanz":1,"contamin":-2,"shock":-2,"bes":2,"brom":2,"satisfech":2,"content":3,"fantasm":-1,"viol":-2,"campeon":2,"oracion":-2,"ignor":-2,"riquec":3,"inteligent":2,"estup":-2,"enemig":-2,"mierd":-4,"restring":-2,"afortun":3,"penalic":-2,"aprec":2,"precios":3,"sonris":2,"expuest":-1,"quej":-2,"impuls":1,"resolv":1,"pasion":1,"debil":-2,"integr":2,"vitamin":1,"paradis":3,"glory":2,"sad":-2,"promoting":1,"hurt":-2,"slip":-1,"profit":2,"funeral":-1,"talent":2,"sabidur":1,"dispar":-1,"nobl":2,"dolenc":-2,"destruccion":-3,"desord":-2,"hero":2,"caer":-2,"dej":-1,"tortur":-4,"refin":1,"meand":-3,"invit":1,"terror":-2,"prohib":-2,"impar":-2,"favor":2,"atract":2,"exig":-1,"cuidad":2,"top":2,"llor":-1,"simpat":2,"rar":-2,"inspir":2,"adopt":1,"deneg":-2,"foll":-4,"disput":-2,"cans":-2,"honest":2,"arriesg":-3,"restaur":1,"maldit":-2,"suicid":-2,"fam":1,"cortes":2,"critic":-2,"asust":-2,"engan":-3,"fortun":2,"explor":1,"grip":-2,"esclav":-3,"litig":-1,"her":2,"terrorist":-2,"etic":2,"luch":-2,"sufrimient":-2,"culpabl":-3,"encant":3,"violent":-3,"borrach":-2,"crimen":-3,"resuelt":2,"romp":-1,"resalt":2,"ojal":2,"brill":4,"amar":2,"eleg":2,"fak":-3,"bomb":-1,"perjuic":-2,"asalt":-2,"particip":1,"sospech":-1,"obligator":-1,"celebr":3,"lleg":1,"mear":-4,"reir":1,"destru":-3,"ofens":-2,"excit":3,"equilibr":1,"demor":-1,"exclu":-2,"ansied":-2,"indispuest":-1,"put":-5,"aisl":-1,"descont":-1,"desesper":-3,"demostr":-1,"neg":-2,"desempl":-2,"lagrim":-2,"enoj":-3,"amist":2,"arrastr":-1,"arrest":-2,"atasc":-2,"sofistic":2,"impuest":-1,"toxic":-3,"oscur":-1,"nuec":-3,"rechac":-2,"vulner":-2,"impresion":3,"tiern":2,"alabanc":3,"esper":2,"parcial":-1,"admit":1,"sufr":-2,"cao":-2,"confund":-2,"acus":-2,"corrupcion":-3,"terribl":-3,"fiebr":-2,"orar":1,"tesor":2,"golp":-1,"curios":1,"exquisit":4,"colaps":-2,"improb":-1,"tribut":2,"inmun":1,"infect":-2,"barr":-2,"perr":-5,"protest":-2,"intens":1,"partidar":1,"sucied":-2,"retir":-1,"culp":-2,"devot":3,"desped":-2,"desacuerd":-2,"ir":-3,"felic":3,"bizarr":-2,"exent":-1,"realic":2,"nervios":-2,"magnif":5,"calm":2,"inaprop":-2,"armon":2,"distingu":2,"recompens":2,"medall":3,"apest":-3,"unific":1,"respald":2,"toler":2,"atra":1,"oop":-2,"solitar":-2,"tont":-2,"suspend":-1,"delic":3,"durabl":2,"desagrad":-3,"tumor":-2,"feo":-3,"invasion":-1,"fortalec":2,"agres":-2,"perturb":-2,"motiv":2,"aplaus":2,"restriccion":-2,"usad":-1,"defect":-3,"clarid":2,"basur":-3,"promet":1,"robust":2,"fabul":4,"prospect":1,"tension":-1,"perspect":1,"notabl":2,"previnind":-1,"lio":-2,"volc":-1,"incomplet":-1,"tumb":-2,"pres":-2,"dign":2,"lobby":-2,"derrot":-2,"sostenibil":1,"ridicul":-1,"misericord":2,"verguenc":-2,"fatal":-2,"val":2,"reprob":-2,"reten":-1,"urgent":-1,"felicit":2,"venganc":-2,"disfrutan":2,"inquiet":-3,"porc":-1,"aburr":-2,"deficit":-2,"rebeld":-2,"malv":-2,"conspir":-3,"prominent":2,"panic":-3,"excus":-1,"reclam":-2,"desech":-1,"abandon":-2,"pasiv":-1,"coraj":2,"entreten":2,"suspension":-1,"pacif":2,"rab":-2,"conf":1,"horribl":-3,"negacion":-2,"gem":3,"borr":1,"logr":2,"mit":-1,"infecc":-2,"carit":2,"convenc":1,"incumpl":-2,"competent":2,"riend":1,"deseabl":2,"rap":2,"milagr":4,"perec":-1,"cualidad":2,"bla":-2,"mortal":-3,"con":-5,"exclusion":-1,"entusiast":1,"gener":2,"locur":-3,"fascin":3,"salvacion":2,"brutal":-3,"adapt":2,"deleit":3,"sobrevivient":2,"deterior":-2,"joy":1,"traged":-2,"funky":2,"aterr":-2,"sangrient":-3,"molest":-2,"trastorn":-2,"endos":2,"polucion":-2,"bendec":2,"triunf":4,"pul":2,"controvert":-2,"traum":-3,"exigent":-1,"censur":-2,"lerd":-3,"huec":-1,"promov":1,"hambr":-2,"beneplacit":2,"esplend":3,"prontitud":1,"danin":-2,"advert":-2,"gravement":-3,"decepcion":-2,"primic":3,"repuls":-3,"valient":2,"atroz":-3,"impon":-1,"acos":-3,"zorr":-4,"controvers":-2,"bell":3,"conden":-2,"crud":-1,"espant":-2,"infraccion":-2,"venen":-2}
},{}],88:[function(require,module,exports){
module.exports={
  "words": ["no", "nunca", "jamás", "ni"]
}

},{}],89:[function(require,module,exports){
module.exports={"acert":0.375,"admir":0.625,"afect":0.625,"afectu":0.625,"aficion":-0.25,"afortun":0.875,"agrad":0.625,"agradec":0.5,"alegr":1,"alent":0.313,"amabl":0.688,"amar":0.25,"amist":0.708,"amor":0.625,"anim":0.25,"apac":0.313,"apasion":0.25,"apeg":0.75,"aprec":0.25,"aprob":0.359,"ardient":0.313,"atract":0.625,"benefic":0.375,"benevolent":0.313,"bien":0.792,"bienest":0.531,"bond":0.25,"bonit":0.75,"buen":0.5,"carin":0.375,"cautiv":0.594,"cercan":0.354,"comod":0.25,"companer":0.25,"competent":0.344,"complacent":0.688,"complac":0.438,"complacient":0.643,"confianc":0.375,"confort":0.25,"consol":-0.25,"content":0.5,"correct":0.375,"cort":0.667,"cuidad":0.521,"cal":-0.25,"cand":0.35,"decent":0.571,"deleit":0.375,"diestr":0.625,"disfrut":0.25,"divert":0.542,"dulc":0.518,"emot":0.25,"encant":0.35,"entusiasm":0.417,"entusiast":0.6,"estim":0.25,"estimul":0.75,"eufor":0.344,"excelent":0.75,"excit":0.3,"expert":0.25,"fascin":0.5,"favor":0.25,"favorec":0.268,"felic":0.708,"feliz":0.719,"fervient":-0.25,"fiabl":0.75,"firmec":0.278,"goz":0.375,"gracios":0.5,"gratif":0.75,"gust":0.266,"honor":0.5,"honr":0.5,"habil":0.429,"ideal":0.425,"idon":0.75,"inter":0.321,"jovial":0.583,"joy":0.458,"jubil":0.375,"just":0.675,"magnif":0.804,"manos":-0.281,"minuc":0.438,"optim":1,"optimist":0.875,"placenter":0.875,"plac":0.25,"posit":0.594,"preferent":0.875,"prometedor":0.875,"provech":0.417,"reconfort":-0.25,"recr":0.438,"rect":0.438,"refresc":0.5,"regocij":0.625,"respet":0.375,"salud":0.375,"san":-0.375,"satisfac":0.625,"satisfactor":0.375,"satisfech":0.6,"seductor":0.7,"segur":0.375,"seren":0.297,"simpat":0.653,"solac":0.375,"sonrient":1,"soseg":-0.25,"superior":0.406,"ternur":0.313,"tiern":0.375,"tranquilic":0.313,"tonic":0.5,"util":0.25,"vigoric":0.5,"abat":0.25,"abochorn":-0.5,"abomin":-0.375,"aborrec":-0.25,"acongoj":-0.75,"acos":-0.25,"afliccion":-0.606,"aflig":-0.687,"agrav":-0.375,"agres":-0.375,"alarm":-0.333,"alborot":-0.25,"amargur":-0.5,"angust":-0.5,"antipat":0.25,"apesadumbr":-0.5,"apoc":-0.375,"apur":-0.25,"arrepent":-0.375,"arriesg":-0.25,"asco":-0.357,"asqu":-0.25,"asquer":-0.575,"atorment":-0.25,"atroz":-0.672,"avergonc":-0.25,"aversion":-0.359,"cabr":-0.75,"celos":-0.25,"coler":-0.75,"confund":0.375,"congoj":-0.75,"conmocion":-0.354,"constern":-0.344,"contraried":-0.656,"contrit":-0.5,"crueld":-0.525,"culpabil":-1,"culpabl":-0.312,"danin":-0.437,"dec":-0.25,"defectu":-0.431,"degrad":-0.375,"deplor":-0.406,"depriment":-1,"deprim":-0.5,"desagrad":-0.375,"desagr":-0.667,"desalent":-0.589,"desalient":-0.325,"desampar":-0.25,"desaprob":-0.375,"desasosieg":-0.344,"desconsol":-0.25,"descu":-0.281,"desdich":-0.35,"desd":-0.363,"desesper":0.25,"deshonr":-0.708,"desol":-0.25,"desprec":-0.437,"desanim":-0.5,"detest":-0.75,"devast":-0.437,"dificil":-0.667,"disgust":-0.75,"disuad":-0.25,"dolor":-0.375,"encoleric":-0.625,"enemist":-0.5,"enfad":-0.437,"enfurec":-0.25,"enoj":-0.333,"entristec":-0.5,"escalofr":-0.25,"espant":-0.25,"exacerb":-0.437,"exasper":-0.5,"fastid":-0.75,"fatal":-0.5,"frustr":-0.375,"fri":-0.292,"fur":-0.4,"furios":-0.437,"hart":-0.25,"hast":0.25,"her":-0.25,"hist":-0.437,"horribl":-0.429,"horripil":-0.4,"horror":-0.5,"horroric":-0.625,"hostig":-0.25,"hostil":-0.375,"humill":-0.75,"impacient":-0.333,"impotent":-0.375,"inadecu":-0.312,"inclement":-0.25,"incomod":-0.271,"inoportun":-0.361,"inquiet":-0.344,"inquin":-0.25,"insatisfech":-0.5,"insegur":-0.437,"insuficient":-0.417,"intoler":-0.312,"iracund":-0.375,"irasc":-0.562,"irrit":-0.479,"lament":-0.25,"malhumor":-0.833,"malic":-0.375,"malign":-0.562,"malevol":-0.775,"melancol":-0.25,"menosprec":-0.304,"miedos":-0.25,"miser":-0.25,"mison":-0.25,"mohin":-0.375,"molest":-0.347,"monstruos":-0.5,"mosc":0.25,"nauseabund":-0.25,"negr":-0.25,"nociv":-0.437,"odi":-0.75,"ofend":-0.375,"ofens":-0.429,"opresion":-0.375,"oscur":-0.359,"pavor":-0.75,"pen":-0.458,"penos":-0.321,"perjudicial":-0.455,"perturb":-0.266,"pesadumbr":-0.575,"pes":-0.562,"pesar":-0.437,"pesim":-0.333,"pesimist":-0.375,"problem":-0.437,"panic":-0.292,"quemazon":-0.281,"rab":-0.375,"recel":-0.25,"rechac":-0.25,"rencor":-0.5,"repel":-0.312,"repugn":-0.375,"repuls":-0.25,"resent":-0.625,"sombr":0.25,"tem":-0.583,"temer":-0.292,"temibl":-0.417,"terribl":-0.562,"torment":-0.469,"trastorn":-0.281,"tribul":-0.281,"trist":-0.509,"tristec":-0.45,"verguenc":-0.375,"vilipend":-0.917,"ador":0.5,"afectuos":0.375,"alboroc":0.25,"altruist":0.375,"amat":0.25,"amig":-0.25,"aprobator":1,"arrebat":-0.375,"autocomplacent":0.625,"benefactor":0.938,"beneficent":0.688,"benef":0.625,"benevol":0.438,"confiad":0.5,"convenc":0.25,"desahog":0.375,"devot":0.5,"embebec":0.5,"embeles":0.25,"embriag":0.375,"encandil":-0.625,"esperanc":1,"exuber":0.3,"exult":0.375,"fervor":0.25,"fraternal":0.375,"fratern":0.375,"facil":-0.25,"gratific":0.417,"gratitud":0.417,"habilid":0.875,"hilar":0.375,"jocund":0.5,"lealt":0.313,"motiv":0.375,"placidez":0.25,"predileccion":0.375,"risuen":0.833,"saciabl":0.625,"suertud":0.75,"triunf":0.313,"triunfal":0.375,"ufan":-0.25,"ventur":0.875,"victor":0.625,"vitor":0.375,"air":0.25,"alter":-0.25,"animadversion":-0.5,"ansios":-0.5,"apen":-0.312,"aprens":-0.25,"aprension":-0.312,"ased":-0.25,"asquead":-0.5,"asur":-0.375,"aterroric":-0.25,"autocompasion":-0.25,"avaric":-0.333,"avar":-0.5,"basc":-0.25,"beliger":-0.458,"berrinch":-0.625,"calamit":-0.5,"carg":-0.625,"cel":-0.25,"codic":0.375,"compadec":-0.75,"compuncion":-0.625,"concom":-0.25,"conmiser":-0.375,"contrar":-0.375,"contricion":-0.25,"conturb":-0.25,"corazon":-0.25,"cuit":-0.312,"cinic":0.313,"decepcion":-0.25,"deficient":-0.575,"defraud":-0.5,"demolidor":-0.375,"depr":-0.625,"desacredit":-0.406,"desagradec":-0.625,"desasoseg":-0.562,"desazon":-0.312,"descompostur":-0.25,"desconsuel":-0.75,"desden":-0.475,"desech":0.25,"desesperanc":-1,"desfallec":-0.25,"desgarr":-0.375,"desmoralic":-0.375,"despavor":-0.25,"despech":-0.375,"destruct":-0.25,"dificult":-0.5,"disfor":-0.75,"dol":-0.375,"embarac":-0.5,"encon":-0.375,"enfurrun":-0.375,"engorr":-0.75,"enloquec":-0.75,"estremecedor":-0.562,"execr":-0.375,"frenet":-0.25,"furibund":-0.5,"grim":-0.25,"hormiguill":-0.375,"horrend":-0.625,"ignomin":-0.375,"improp":-0.5,"indign":-0.5,"ingratitud":-1,"inhuman":-0.333,"inmund":-0.312,"insid":-0.25,"intimid":-0.5,"irascibil":-0.375,"lastimer":-0.75,"lobreg":-0.812,"lugubr":-0.375,"macabr":-0.75,"maleficent":-0.562,"malevolent":-0.562,"malquerent":-0.375,"malef":-0.875,"misantrop":-0.75,"misogin":-0.687,"mortific":-0.562,"mortif":-0.25,"murr":-0.375,"nauseos":-0.25,"oprob":-0.417,"patalet":-0.625,"perr":-0.375,"petrific":-0.25,"pic":-0.25,"preocup":-0.25,"provoc":-0.75,"quejumbr":-0.375,"rabiet":-0.625,"rabios":-0.292,"reconcom":-0.25,"remord":-0.333,"repulsion":-0.458,"resign":-0.625,"retr":-0.25,"sulfur":-0.312,"terrorif":-0.625,"transtorn":-0.75,"turb":-0.375,"ultraj":-0.333,"vejacion":-0.542,"vej":-0.312,"verecund":-0.25,"verrac":-0.625,"acaudal":0.5,"acogedor":0.775,"afabl":1,"alab":1,"amen":0.75,"armon":0.3,"bendec":0.25,"bonachon":1,"citabl":0.813,"clamor":-0.25,"clav":0.875,"conmov":0.875,"cooper":0.25,"celebr":0.375,"destac":0.375,"dot":0.25,"encom":0.375,"esplendor":0.438,"esplend":0.771,"exculp":0.375,"famos":1,"favorecedor":0.875,"filantrop":0.375,"finisim":0.875,"glorios":0.833,"harmon":0.625,"hermos":0.792,"heroic":1,"heroism":1,"idealic":0.875,"juicios":0.833,"laudabl":1,"lind":0.875,"loabl":1,"magistral":0.813,"manit":0.875,"medr":0.813,"merecedor":0.813,"meritor":0.25,"modos":0.875,"model":0.875,"notabl":0.775,"pacif":0.333,"perfect":0.625,"present":0.25,"prosper":0.7,"querub":1,"rubicund":0.813,"salvament":1,"talent":0.458,"ventaj":0.292,"adinam":-0.875,"adulterin":-0.375,"agarr":-0.875,"amenac":-0.25,"ampoll":-0.875,"antiestet":-1,"apest":-0.375,"asesin":-0.25,"asimetr":-0.875,"atrof":-0.625,"autodestruct":-0.875,"avern":-0.875,"calumn":-0.5,"censur":0.25,"cerril":-0.875,"cen":0.438,"cicater":-1,"conden":-0.286,"condenator":-1,"condolent":-0.875,"contrabandist":-1,"critic":-0.286,"denigr":-0.292,"denigrator":-1,"desaprovech":-0.375,"desarmon":-0.875,"desasist":-0.625,"desconoc":-0.417,"descorazon":-1,"desequilibr":-0.812,"desgrac":-0.409,"deshonor":-0.875,"desprestig":-0.406,"desventaj":-0.875,"deterior":-0.25,"difam":-0.375,"difamator":-1,"disconform":-0.875,"discontinu":-0.875,"disimul":0.25,"envilec":-0.25,"escroful":-1,"espur":-0.75,"excor":-0.875,"expens":-1,"falsar":-1,"fechor":-1,"feo":-0.833,"fing":-0.792,"fruncion":-0.875,"friament":-0.875,"fet":-0.875,"fobic":-1,"garrap":-1,"guind":-0.25,"hipocondriac":-0.375,"homic":-1,"huran":-0.25,"impas":-1,"impersonal":-1,"inan":-0.875,"incompetent":-0.25,"inconstruct":-1,"incrimin":-0.625,"incultur":-0.875,"indigest":-0.687,"ineficac":-0.812,"ineficient":-0.75,"inelast":-0.875,"inelig":-0.875,"infiern":-0.8,"infranc":-0.937,"inhabil":-0.875,"injur":-1,"inobserv":-0.812,"insubstancial":-0.875,"intransit":-0.375,"irrepresent":-0.875,"kitsch":-0.375,"lagrim":-0.875,"lerd":-0.812,"malolient":-1,"maniacodepres":-0.5,"matuter":-1,"mentir":-0.25,"metedor":-1,"nolunt":-1,"orco":-0.875,"padec":-0.562,"parasit":-0.375,"pestilent":-0.275,"pill":-0.25,"protestatar":-1,"protest":-0.25,"psicopatolog":-0.5,"psicopat":-0.375,"put":-0.375,"putresc":-0.875,"pesam":-0.875,"ramplon":-0.875,"rat":-0.875,"recrimin":-0.25,"reganon":-1,"reprens":-1,"reproch":-0.583,"ronc":-0.25,"saqu":-0.25,"suic":-0.875,"tacan":-0.25,"tenebr":-1,"tont":-0.264,"torcedor":-1,"veleid":-1,"abord":-0.5,"adecu":0.25,"adopt":0.75,"afirm":0.5,"alcist":0.5,"arroj":0.75,"beat":0.75,"bienaventuranc":0.75,"bienven":0.75,"bizarr":0.75,"canjeabl":0.75,"carismat":0.75,"chistos":0.75,"cognosc":0.75,"confident":0.75,"confirm":0.25,"congruenc":0.75,"conoc":-0.25,"construct":0.5,"corrobor":0.275,"curat":0.625,"deseabl":0.75,"dich":0.75,"eleg":0.25,"enmend":0.75,"entran":0.75,"escal":-0.25,"estandaric":0.25,"exhuber":0.75,"exit":0.3,"experiment":0.75,"fastuos":0.75,"fehacient":0.75,"fidedign":0.75,"fotogen":0.75,"garbos":0.75,"grat":-0.25,"guap":0.75,"halaguen":0.75,"harmonic":0.625,"hedonist":0.75,"hedon":0.313,"honorif":0.75,"hospitalar":0.75,"laudator":0.75,"mejor":0.281,"panegir":0.375,"perit":0.375,"plastic":0.75,"polifacet":0.75,"pujant":0.75,"realc":0.75,"reconstructor":0.75,"reform":0.25,"remed":0.25,"reir":0.75,"saci":0.375,"salubr":0.75,"sanador":0.75,"sublim":0.25,"valeder":0.75,"verif":0.75,"veteran":0.75,"virtuosill":0.75,"virtuos":0.375,"voluntar":0.25,"abul":-0.75,"agonic":-0.75,"agon":-0.625,"ahuec":-0.75,"algofob":-0.75,"amenc":-0.75,"antipatriot":-0.75,"aparatos":-0.75,"autoincrimin":-0.75,"autoinculp":-0.75,"autotorment":-0.75,"autotortur":-0.75,"aventur":-0.25,"basted":-0.75,"bilios":-0.75,"burlon":-0.75,"canall":-0.312,"canallesc":-0.75,"caradur":-0.75,"carcom":-0.25,"cegued":-0.75,"cegu":-0.75,"cenud":-0.75,"contumel":-0.75,"cretin":-0.25,"culp":-0.75,"denunc":-0.25,"desafortun":-0.75,"desesclarecedor":-0.75,"desvanc":-0.75,"dispept":-0.75,"encontron":-0.75,"engravec":-0.75,"envanec":-0.75,"esquizofren":-0.25,"fraudulent":-0.312,"gaf":-0.25,"golpic":-0.75,"hedor":-0.75,"hipocondr":-0.75,"hosc":-0.75,"idiot":-0.75,"imperfect":-0.312,"impetu":-0.25,"impopular":-0.75,"imprevision":-0.75,"imprevisor":-0.75,"impropic":-0.75,"inamov":-0.75,"incombin":-0.75,"inconsol":-0.75,"indiger":-0.75,"inexp":-0.75,"inextric":-0.75,"inflig":-0.75,"infling":-0.75,"ingrat":-0.75,"inhospital":-0.75,"insolvent":0.5,"insult":-0.25,"invident":-0.5,"irrevers":-0.75,"linch":-0.75,"lividez":-0.75,"lut":-0.75,"magnicid":-0.75,"malpar":-0.75,"mefit":-0.75,"misofob":-0.5,"parox":-0.75,"pasiv":0.313,"pestac":-0.75,"pleit":-0.75,"profan":-0.437,"regan":-0.562,"satanofob":-0.75,"sord":-0.3,"sucedan":-0.75,"testadur":-0.75,"trampos":-0.75,"traumatic":-0.75,"tufill":-0.75,"tuf":-0.75,"vermicul":-0.75,"vermin":-0.75,"xenofob":-0.25,"non":0.375,"abund":0.5,"acces":0.607,"acept":0.5,"acomod":0.469,"acompas":0.625,"aconsej":0.5,"acredit":0.667,"administr":0.625,"admis":0.5,"adorn":0.625,"afabil":0.583,"alimentic":0.625,"amabil":0.547,"angelical":0.583,"anglofil":0.625,"antihelmint":0.625,"antimicrobian":0.625,"apacigu":0.375,"aplaud":0.625,"aprop":0.656,"aptitud":0.542,"apto":0.557,"apost":0.688,"asidu":0.625,"atrayent":0.583,"autodidact":0.25,"autoimpuest":0.625,"auxil":0.375,"axen":0.625,"bellac":-0.25,"bell":0.25,"bienaventur":0.625,"brillantez":0.594,"brun":0.375,"caballer":0.625,"cachond":-0.25,"campeon":0.625,"capaz":0.634,"cast":0.563,"catart":0.688,"cautel":0.521,"caut":0.531,"certific":0.25,"certificator":0.625,"chach":0.688,"chic":0.625,"chusc":0.625,"circunspect":0.625,"comed":0.5,"comest":0.625,"compat":0.5,"concept":0.375,"concil":0.5,"congrac":0.563,"congruent":0.625,"consagr":0.292,"consensu":0.625,"control":0.25,"convalid":0.625,"convenient":0.25,"copios":0.25,"cordial":0.646,"cordur":0.625,"correg":0.25,"creativ":0.625,"cualific":0.375,"cult":0.525,"curativ":0.625,"celib":0.625,"decenc":0.542,"decibl":0.625,"decor":0.25,"deduc":0.25,"deferent":0.25,"demostr":0.313,"describ":0.625,"descript":0.625,"desenganch":0.25,"desenterr":0.625,"destrec":0.525,"detall":0.25,"deten":0.25,"dign":0.375,"disoc":0.625,"dispon":0.25,"distingu":0.5,"divertidisim":0.625,"doct":0.563,"domestic":0.375,"edif":0.625,"educ":0.563,"efect":-0.25,"eficaz":0.583,"eficient":0.375,"elast":0.313,"enardecedor":0.563,"encicloped":0.25,"entreg":0.625,"entreten":0.25,"equit":0.625,"erudit":0.542,"especialic":0.25,"especific":0.625,"eudemon":0.625,"exact":0.625,"expans":0.25,"explic":0.375,"explicit":0.375,"expres":0.25,"factibl":0.625,"fecund":0.563,"fenomenal":0.563,"fiel":0.7,"flam":0.625,"fogos":0.563,"formalic":0.25,"format":0.625,"formid":0.542,"fortalec":0.625,"frutal":0.625,"fulgor":0.625,"fertil":0.5,"galant":0.5,"gallard":0.688,"ganador":0.625,"gener":-0.25,"genial":0.25,"guay":0.542,"habilit":0.25,"habit":0.25,"halag":0.5,"helmint":0.625,"hospital":0.25,"identific":0.25,"idil":0.688,"igual":0.625,"ilumin":0.625,"ilustr":0.438,"imagin":0.25,"imponent":0.667,"incontamin":0.625,"indic":0.25,"infer":0.625,"inform":0.375,"ingen":0.25,"instru":0.542,"intelectual":0.594,"inteligent":0.275,"interes":0.333,"interpret":0.375,"invent":0.625,"invict":0.625,"iter":0.563,"jugueton":0.563,"justific":-0.375,"ladin":0.625,"leal":0.7,"letr":0.563,"lisonjer":0.688,"logic":0.292,"majestu":0.719,"manej":0.333,"maravill":0.417,"medicinal":0.625,"merec":0.25,"mesur":0.375,"miramient":0.688,"mitig":-0.5,"moralic":0.375,"maxim":0.625,"nobl":0.542,"nutrit":0.688,"obedient":0.25,"observ":0.375,"ocurrent":0.625,"oper":0.333,"oportun":0.542,"opulent":0.625,"parasitic":0.625,"pasabl":0.542,"patent":-0.25,"paus":0.625,"perfectibil":0.625,"persever":0.563,"pertinent":0.417,"pinchabl":0.625,"plenar":0.625,"pletor":0.625,"popular":-0.25,"practic":-0.25,"precaucion":0.583,"precios":0.675,"precis":0.641,"precocin":0.625,"prefer":0.375,"prepar":0.531,"preponder":0.625,"prescient":0.625,"preserv":0.25,"prestig":0.25,"previsor":0.542,"privileg":0.375,"prob":0.542,"procedent":0.688,"product":0.25,"productor":0.625,"profilact":0.542,"progres":0.25,"prolifer":0.333,"prolif":0.563,"promov":0.583,"propic":0.5,"proteccionist":0.625,"prudent":0.578,"purific":0.563,"quer":0.625,"racional":0.5,"razon":0.25,"recicl":0.625,"reconcil":0.5,"reconstituyent":0.563,"recuper":-0.25,"rehabilit":0.313,"reiter":0.563,"remir":0.625,"rentabl":0.625,"repet":0.25,"respetu":0.625,"retozon":0.625,"retribu":0.625,"reverend":0.625,"reverent":0.25,"revivific":0.688,"sab":0.375,"sagaz":0.534,"salv":0.313,"santific":0.292,"sant":0.25,"select":0.25,"semiconductor":0.625,"sensat":0.571,"sent":0.25,"seriocom":0.625,"servibl":0.542,"sexi":0.625,"sibarit":0.625,"signif":0.292,"signific":0.25,"simplific":0.625,"sincer":0.313,"sobreabund":0.625,"socarron":0.625,"sociabl":0.542,"soport":-0.25,"sosten":0.563,"suficient":0.563,"superabund":0.25,"sustanc":0.542,"terapeut":0.313,"test":0.375,"tib":0.625,"toler":0.3,"torn":0.688,"tratabl":0.521,"triumf":0.625,"valios":0.688,"vencedor":0.625,"vener":0.313,"veraz":0.563,"viabl":0.563,"vitalic":0.438,"vivif":0.625,"vocal":0.625,"voluptu":0.583,"etic":0.625,"abetalipoproteinem":-0.625,"acet":-0.562,"acrimin":-0.25,"adulter":-0.562,"afan":-0.687,"agob":-0.312,"agorer":-0.687,"agridulc":-0.562,"alterc":-0.531,"amnes":-0.25,"amortec":-0.25,"anglofob":-0.25,"apech":-0.625,"apretur":-0.625,"apret":-0.625,"arisc":-0.675,"arric":-0.625,"arruin":-0.319,"asesinat":-0.625,"asol":-0.5,"atez":-0.625,"aton":-0.625,"aturdiment":-0.625,"avinagr":0.25,"bastard":-0.312,"bast":0.375,"bef":-0.375,"birl":-0.542,"bret":-0.625,"buf":-0.625,"camorrer":-0.625,"cansanc":-0.625,"carent":-0.625,"cascarrab":-0.375,"castig":-0.25,"chabacan":-0.562,"chacot":-0.25,"chafarrinon":-0.625,"chaqueter":-0.625,"choc":-0.275,"combat":-0.25,"comparend":-0.625,"conflict":-0.375,"contrasent":-0.562,"corr":-0.25,"corrupt":0.375,"danos":-0.531,"defect":-0.667,"delit":-0.687,"desaconsej":-0.375,"desas":-0.375,"desautoric":-0.625,"descalific":-0.25,"descar":-0.25,"descortes":-0.375,"descort":-0.525,"desenmadej":-0.625,"desfavor":-0.594,"desigual":-0.273,"desluc":-0.562,"desobedec":-0.625,"desproporcion":-0.25,"destructor":-0.687,"destru":-0.25,"desert":-0.312,"detriment":-0.625,"discord":-0.312,"dismenorr":-0.625,"disturb":-0.3,"divis":-0.625,"dramon":-0.625,"embabuc":-0.625,"embauc":-0.375,"emba":-0.625,"embosc":-0.25,"endiabl":-0.625,"engan":-0.333,"engreimient":-0.562,"enterr":-0.25,"eritroderm":-0.625,"escapator":-0.625,"escocedur":-0.625,"escozor":-0.625,"estrag":-0.625,"estat":-0.625,"faccios":-0.625,"falac":-0.25,"falsific":-0.521,"farfoll":-0.625,"filf":-0.625,"fracas":-0.625,"full":-0.625,"fusil":-0.625,"galban":-0.25,"garabat":-0.25,"garrapat":-0.625,"gilipoll":-0.583,"groser":-0.312,"gros":-0.589,"hambrun":-0.562,"hediondez":-0.542,"hijoput":-0.625,"hipognat":-0.625,"hipotiroid":-0.625,"holgazan":-0.625,"hort":-0.625,"hosqued":-0.562,"hurt":-0.687,"ir":-0.5,"ignor":-0.5,"ilog":-0.25,"imaginar":-0.625,"impens":-0.625,"imperdon":-0.562,"implac":-0.625,"imprec":-0.625,"improper":-0.542,"impropied":-0.625,"impa":-0.625,"inadmis":-0.625,"inanim":-0.344,"inapetent":-0.625,"inapetit":-0.625,"incognosc":-0.625,"incomprension":-0.625,"increp":-0.625,"inculp":-0.312,"indecent":-0.583,"indecor":-0.5,"inexpugn":-0.375,"infernal":-0.525,"inhabilit":-0.625,"inmerec":-0.7,"inmut":-0.625,"insensit":-0.625,"irreconoc":-0.687,"irrecuper":-0.625,"irreduc":-0.625,"lasitud":-0.531,"llor":-0.281,"lordos":-0.625,"mal":-0.25,"maldicion":-0.562,"manding":-0.625,"melodramat":-0.375,"ment":-0.3,"mestic":-0.375,"macul":-0.562,"obscur":-0.625,"odinofag":-0.625,"oscurec":-0.5,"osteofit":-0.625,"pajarot":-0.625,"palabrot":-0.625,"paran":-0.25,"paraplej":-0.625,"parapleg":-0.625,"pel":-0.25,"peligr":-0.667,"penalic":-0.281,"pendencier":-0.375,"perd":0.25,"perdul":-0.625,"picaresc":-0.625,"pit":-0.625,"precaried":-0.562,"princip":0.25,"prognat":-0.625,"prohibidor":-0.625,"provincian":-0.625,"pusilanim":-0.375,"quej":-0.417,"rach":-0.312,"rebat":-0.625,"recalcitr":-0.625,"rechifl":-0.375,"recul":-0.625,"reganin":-0.562,"renieg":-0.625,"ronos":-0.25,"rud":-0.575,"ruin":-0.25,"racan":-0.25,"salt":-0.25,"saprofit":-0.312,"silb":-0.625,"siniestr":-0.25,"socorr":-0.375,"soez":-0.625,"subdesarroll":-0.625,"sufrimient":-0.578,"tiranicid":-0.625,"tosqued":-0.625,"traicion":-0.687,"tisic":-0.625,"vituper":-0.469,"volt":-0.625,"volubil":-0.625,"volubl":-0.562,"yert":-0.625,"zafied":-0.667,"zaf":-0.625,"absort":0.5,"aceler":0.5,"acical":0.25,"aclam":0.25,"acomodatic":0.5,"actualic":0.5,"adapt":0.25,"adiner":0.375,"admisibil":0.5,"adrenocorticotrop":0.5,"ahorr":0.5,"airos":0.5,"ajust":0.292,"alabanc":0.5,"aliger":-0.25,"alquil":0.5,"altilocuent":0.5,"amad":0.5,"amalgam":0.25,"ambidiestr":0.375,"amelior":0.5,"amentifer":0.5,"amov":0.5,"anacorit":0.5,"antimonopol":0.5,"antisept":0.5,"apar":-0.25,"aplanet":0.5,"aplic":0.25,"apodict":0.5,"apoy":0.5,"aprend":0.5,"arabl":0.5,"ascend":0.5,"asoc":0.313,"asept":0.5,"autosuficient":0.5,"averigu":0.5,"aviej":0.5,"aviv":0.5,"beatific":0.5,"beatif":0.25,"beb":0.5,"bienintencion":0.5,"bord":0.5,"bromist":0.5,"cadenc":0.25,"cadent":0.5,"cantabl":0.5,"caracterist":0.5,"carit":0.5,"casader":0.5,"centralic":0.375,"civil":0.275,"colm":0.5,"combust":0.5,"comprim":0.5,"comprob":0.333,"concienc":0.25,"condicion":0.5,"conduct":0.5,"conductor":0.5,"conform":0.5,"constitucional":0.5,"consum":-0.271,"contest":0.5,"copetud":0.5,"correctitud":0.5,"cultiv":0.375,"curabl":0.5,"curs":0.5,"dadiv":0.5,"defin":0.438,"delect":0.375,"desafect":-0.25,"desambigued":0.5,"descans":-0.25,"desconf":-0.25,"descubr":0.5,"desegreg":0.5,"desencant":0.375,"desgrav":0.5,"desinfl":0.5,"desmont":0.5,"despavil":0.5,"despej":0.5,"determin":0.375,"diagnostic":0.5,"digestibil":0.5,"digest":0.5,"discern":0.5,"disciplinal":0.5,"disert":0.5,"disput":-0.417,"dor":0.5,"ductil":0.5,"eclect":0.25,"elocuent":0.5,"emancip":0.25,"embergadur":0.5,"emocion":0.458,"emplum":0.5,"empat":0.25,"encaden":0.5,"energic":0.5,"energet":0.5,"enfund":0.5,"enjoy":0.5,"ennoblecedor":0.5,"envain":0.5,"envejec":0.5,"epicur":0.375,"epigramat":0.5,"eremit":0.313,"escog":0.375,"esmalt":0.5,"espaldarac":0.5,"espavil":0.5,"espiritual":0.5,"estabil":0.5,"estabilic":0.25,"estud":0.375,"estet":0.5,"eufon":0.5,"eugenes":0.5,"eugen":0.25,"evidencial":0.5,"evit":0.5,"exhaust":0.5,"exhortator":0.5,"exoter":0.5,"expedit":0.5,"explicitud":0.5,"extensisim":0.5,"extenu":0.5,"fam":0.5,"fatig":-0.25,"festej":0.25,"fiducial":0.5,"filmabl":0.5,"fision":0.5,"flexion":0.5,"focalic":0.5,"forr":0.5,"fortalecedor":0.5,"gananc":0.25,"gazmon":0.25,"germinal":0.5,"grandios":0.5,"higien":0.5,"hiperton":0.313,"hipnotic":0.313,"histrion":0.5,"homeopat":0.5,"immacul":0.5,"impresion":0.25,"impudent":-0.25,"incamb":0.5,"incit":0.25,"inclus":0.5,"incorrupcion":0.5,"indisimul":0.5,"influenc":0.25,"innov":0.5,"intach":0.5,"intencional":0.292,"invalor":0.5,"jocos":0.275,"justic":0.25,"labrant":0.5,"laur":0.5,"laurel":0.5,"lavor":0.5,"legal":0.5,"leid":0.5,"liber":-0.375,"limit":0.5,"liric":0.25,"loar":0.5,"lustros":0.5,"macr":0.5,"madur":0.453,"magnanim":0.25,"maniat":0.5,"maniobr":0.5,"marin":0.5,"medicament":0.5,"medit":0.375,"melod":0.25,"mezclabl":0.5,"miop":0.5,"mirament":0.5,"mismisim":0.5,"modernic":0.5,"mojigat":0.375,"moldeabl":0.5,"moral":0.25,"nat":0.5,"neutralic":0.5,"novel":-0.25,"nutr":0.275,"nautic":0.5,"nubil":0.5,"orient":0.375,"ortotrop":0.5,"ovacion":0.25,"panoram":0.5,"particip":0.375,"patric":0.5,"patriot":0.5,"payas":-0.375,"perfeccion":0.281,"permis":0.313,"permut":0.5,"persuasion":0.5,"petul":0.5,"piados":0.5,"pintoresc":0.5,"plegabl":0.5,"pormenoric":0.5,"pornograf":0.5,"precav":0.5,"preciosur":0.5,"preeminent":0.438,"prem":0.5,"prevencion":0.5,"profundic":0.5,"profus":0.5,"promet":0.375,"propiciatoried":0.5,"protagon":0.5,"prudencial":0.5,"pudient":0.5,"punt":0.25,"pio":0.5,"rastrer":0.5,"ratific":0.25,"realic":0.5,"reanim":0.266,"rec":0.5,"rectific":0.5,"rectitud":0.5,"recubiert":0.5,"refin":0.4,"reflect":0.5,"reformator":0.25,"refrend":0.25,"regent":0.5,"regul":0.375,"rend":0.5,"rentabil":0.5,"repar":0.292,"repleg":-0.5,"repon":0.5,"represent":0.25,"resolubl":0.5,"respald":0.275,"respingon":0.5,"resplandecient":0.5,"reten":0.5,"revalid":0.5,"revel":0.375,"revitalic":0.5,"rosac":0.5,"rumbos":0.5,"sacrosant":0.5,"seleccion":0.25,"semiprec":0.5,"seraf":0.5,"sexu":0.5,"sinverguenc":-0.25,"solvenc":0.5,"solvent":0.5,"subsan":0.5,"subsist":0.5,"suerter":0.5,"sujet":0.5,"sumerg":0.5,"sum":0.5,"supern":0.5,"sustancial":0.5,"somat":0.5,"tapic":0.5,"tarac":0.5,"tasabl":0.5,"templ":-0.25,"tent":0.5,"tonific":0.25,"transit":0.313,"transplant":0.5,"transport":0.5,"trasmis":0.5,"trasplant":0.5,"trat":-0.25,"turist":0.375,"tecnic":0.375,"unanim":0.375,"usabil":0.5,"usual":0.5,"utilitar":0.375,"valid":0.469,"valor":0.5,"varonil":0.5,"vend":0.375,"verific":0.438,"verism":0.5,"val":0.5,"zurd":0.25,"ablandabrev":-0.5,"abomb":-0.5,"abronc":-0.5,"aburr":-0.25,"abusion":-0.5,"acalor":-0.25,"aciag":-0.5,"acoquin":-0.5,"acrac":-0.5,"adip":-0.5,"adustez":-0.5,"agent":-0.5,"agranulocit":-0.5,"albuminur":-0.5,"algometr":-0.5,"alopec":-0.5,"aminor":-0.25,"analfabet":-0.417,"anarc":-0.5,"anatematic":-0.5,"anestes":-0.25,"anginal":-0.5,"angin":-0.375,"aniquil":-0.25,"anodin":-0.25,"anquilos":-0.5,"antagonic":-0.5,"apel":0.25,"apocalips":-0.5,"ardent":-0.5,"ardor":-0.5,"arras":-0.5,"artralg":-0.375,"asalt":-0.25,"astrafob":-0.5,"astut":0.268,"atac":-0.307,"aterr":-0.5,"atollader":-0.5,"atras":-0.5,"avent":-0.5,"ay":-0.5,"azar":-0.5,"aztreonam":-0.5,"bald":-0.25,"batracomiomac":-0.5,"berenjenal":-0.5,"beriber":-0.5,"bib":-0.5,"biserr":-0.5,"blanquit":-0.5,"bluff":-0.5,"brag":-0.5,"broncoespasm":-0.5,"bronquit":-0.5,"cabezud":-0.5,"cabezon":-0.5,"cacofon":-0.5,"cadaverin":-0.5,"cafr":-0.5,"cag":-0.375,"cagon":-0.5,"calambrac":-0.5,"calambr":-0.5,"canot":-0.5,"cantoner":-0.5,"cariadur":-0.5,"cataclism":-0.5,"catastrof":-0.437,"chapuc":0.25,"charr":-0.375,"chepos":-0.5,"chiquilicuatr":-0.5,"chirr":-0.5,"chismos":-0.5,"chuch":-0.5,"cizan":-0.5,"cleptoman":-0.25,"cnidiosporid":-0.5,"colchonet":-0.5,"cominer":-0.5,"comis":-0.5,"complic":-0.5,"comprometedor":-0.5,"condol":-0.5,"confront":-0.375,"contraband":-0.5,"contrahac":-0.5,"contrahech":0.25,"corcov":-0.5,"crepuscul":-0.5,"criminal":-0.25,"criticon":-0.5,"credul":-0.5,"cubil":-0.5,"curc":-0.5,"curios":-0.25,"decolor":-0.5,"deleter":-0.5,"dement":-0.312,"deprec":-0.25,"desabr":-0.25,"desapac":-0.5,"desaprension":-0.5,"desatencion":-0.5,"descarin":-0.5,"descolor":-0.25,"desenmaran":-0.5,"desfavorec":0.375,"deshonest":-0.5,"desinclin":-0.5,"desmejor":-0.25,"desmesur":-0.5,"desorient":-0.312,"desproteccion":-0.5,"desprov":-0.5,"destructibil":-0.5,"dison":-0.5,"disparej":-0.5,"disur":-0.5,"elegiac":-0.312,"embastec":-0.5,"embravec":-0.5,"empalidec":-0.5,"empeor":-0.25,"encam":-0.5,"endech":-0.5,"enerv":-0.25,"enfrent":-0.5,"ennegrec":-0.5,"enrarec":-0.5,"entorpec":-0.5,"entromet":-0.5,"entumec":-0.5,"eritem":-0.5,"escarch":-0.312,"escarnecedor":-0.5,"esguinc":-0.5,"esmer":0.375,"espasm":-0.5,"especios":-0.5,"espermic":-0.5,"espondilit":-0.5,"esporad":-0.5,"estereotip":-0.5,"estrangul":-0.5,"estremec":-0.5,"estres":-0.437,"estrib":0.25,"estupid":-0.5,"evas":-0.292,"exces":-0.5,"excrecent":-0.5,"extrem":-0.25,"extremist":-0.5,"faisand":-0.5,"fak":-0.5,"fals":-0.25,"falt":-0.5,"fanafarron":-0.5,"fantas":0.313,"fatid":-0.5,"feroc":-0.5,"feuch":-0.5,"fierec":-0.5,"fingimient":-0.5,"fisgon":-0.25,"fosilic":-0.5,"fragil":-0.5,"fragor":-0.5,"gangren":-0.25,"gemfibrozil":-0.5,"gibos":-0.5,"ginofob":-0.5,"glosalg":-0.5,"glosodin":-0.5,"gorigor":-0.5,"graffit":-0.5,"granit":-0.5,"gras":-0.5,"grazn":-0.5,"guanac":-0.5,"guason":-0.5,"guerriller":-0.5,"gustill":-0.5,"hamp":-0.5,"hediond":-0.5,"hemopat":-0.5,"hemosideros":-0.5,"hepatomegal":-0.5,"heterodox":-0.5,"heterogen":-0.5,"hiperadrenocortical":-0.5,"hipoglucem":-0.375,"hister":-0.437,"husm":-0.25,"horr":-0.5,"iconoclas":-0.5,"impied":-0.5,"impolit":-0.5,"impun":0.375,"inanicion":-0.5,"inaplic":-0.25,"inatencion":-0.5,"inceremon":-0.5,"inclumpl":-0.5,"incompat":-0.5,"inconceb":-0.5,"inconstitucional":-0.5,"inconvenient":-0.375,"incriminator":-0.5,"inculpator":-0.5,"indefension":-0.5,"indestructibil":-0.5,"ineleg":-0.5,"inescrupul":-0.5,"inexcus":-0.458,"inexperient":-0.5,"inexplic":-0.5,"inexpl":-0.5,"inframaxil":-0.5,"ininteligent":-0.5,"injustific":-0.25,"inmol":-0.375,"innaveg":-0.5,"inoper":-0.5,"insalv":-0.5,"insatisfac":-0.5,"insensibilic":-0.5,"insincer":-0.5,"insoport":-0.25,"insosten":-0.5,"insulsez":-0.5,"insustancial":-0.286,"irrespetu":-0.5,"ixod":-0.5,"jerem":-0.5,"jorob":-0.375,"laringofaring":-0.5,"licopen":-0.5,"lisi":-0.25,"liz":-0.5,"lloron":-0.5,"loqu":-0.5,"maj":-0.5,"majaret":-0.5,"maletud":-0.5,"malintencion":-0.5,"malogr":-0.25,"mandibul":-0.5,"mang":-0.5,"man":0.3,"martir":-0.5,"mastalg":-0.5,"maximalist":-0.5,"megalomaniac":-0.375,"mequetref":-0.5,"metralg":-0.5,"microsporid":-0.5,"mixosporid":-0.5,"mofador":-0.5,"multabl":-0.5,"mutil":-0.304,"muyah":-0.5,"narcos":-0.5,"narcot":-0.5,"neced":-0.5,"nef":-0.5,"nictalop":-0.5,"ninfoman":-0.375,"novat":-0.5,"nubarron":-0.5,"obses":-0.25,"odios":-0.5,"oftalm":-0.5,"ordinariez":-0.5,"osteoporos":-0.5,"pajarrac":-0.5,"palidec":-0.5,"pand":-0.375,"parafil":-0.5,"paralog":-0.5,"parqued":-0.5,"patet":-0.5,"pejiguer":-0.5,"pelafust":-0.5,"penitenciar":-0.5,"pereceder":-0.5,"perplej":-0.25,"perruch":-0.5,"picot":-0.5,"picotac":-0.5,"pifi":-0.5,"piquetac":-0.5,"piroman":-0.5,"piros":-0.5,"plomic":-0.5,"poltergeist":-0.5,"prevar":-0.5,"prodrom":-0.375,"proteinur":-0.5,"provisional":-0.5,"punch":-0.25,"punibl":-0.5,"punit":-0.5,"punetac":-0.312,"punet":-0.5,"puneter":-0.5,"paj":-0.5,"quebrader":-0.5,"quejic":-0.5,"quejos":-0.5,"queratalg":-0.5,"querenc":-0.5,"quijotesc":-0.5,"rarit":-0.5,"rasc":-0.5,"rascadur":-0.5,"raspos":-0.5,"recurrent":0.25,"redobl":-0.375,"refocil":-0.5,"regod":0.313,"repelon":-0.5,"reprension":-0.5,"requiescat":-0.5,"resab":-0.5,"rook":-0.5,"ruc":-0.5,"rustic":0.292,"rutinar":-0.5,"sabotaj":-0.5,"salobr":-0.5,"saturnin":-0.5,"scratch":-0.5,"sobreexcit":-0.5,"sobresalt":0.375,"sociopat":-0.5,"sofism":-0.5,"sofoc":-0.375,"speakeasy":-0.5,"stog":-0.5,"stogy":-0.5,"subaliment":-0.5,"subproduccion":-0.5,"subyug":-0.25,"suicid":-0.5,"supersticion":-0.5,"sinfis":-0.5,"tanatofob":-0.5,"terracot":-0.5,"terror":-0.5,"thugg":-0.5,"torped":-0.5,"toxic":-0.5,"traumat":-0.375,"tren":-0.5,"trifulc":-0.5,"tristement":-0.5,"tull":-0.5,"tunc":-0.5,"tortol":-0.5,"urodin":-0.5,"vacun":-0.25,"venc":-0.5,"vici":-0.5,"viejuj":-0.5,"vient":-0.5,"vil":-0.446,"vilec":-0.5,"vocifer":-0.5,"voluntaried":-0.5,"volatil":-0.5,"zambomb":-0.5,"zarrapastr":-0.5,"abad":0.375,"abades":0.375,"abander":0.375,"abdic":0.375,"abil":0.313,"abland":0.25,"abon":0.375,"aboton":0.375,"absorb":0.375,"abstem":0.375,"absolv":-0.25,"acall":0.375,"acat":0.375,"accesibil":0.417,"aceitun":0.375,"achisp":0.375,"acompan":0.375,"acopl":0.375,"acorac":0.313,"acorazon":0.375,"acord":0.438,"acostumbr":0.333,"acristal":0.375,"activ":0.25,"activist":0.375,"actu":0.375,"acull":0.375,"acumul":0.375,"acust":0.375,"aderec":0.313,"adherent":0.375,"adiestr":0.25,"adoxograf":0.375,"adquir":-0.25,"adult":0.375,"aerob":0.25,"aerotransport":0.375,"afemin":0.313,"afil":0.25,"afin":0.25,"afluenc":0.375,"agasaj":0.333,"agil":0.25,"agot":0.375,"agreg":0.458,"aguafiest":0.375,"agudic":0.3,"ahus":0.25,"alad":0.313,"alcanc":0.375,"alert":0.375,"alfabet":0.375,"alicient":0.438,"alin":0.275,"allegr":0.375,"allunyat":0.375,"alla":0.375,"alucin":0.25,"amaestr":0.375,"amamant":0.375,"amarill":0.375,"amatist":0.375,"ambivalent":0.375,"ambrosiac":0.375,"ametist":0.375,"amotin":-0.25,"ampl":0.393,"anacoret":0.375,"anaerob":0.375,"analept":0.375,"anaranj":0.375,"anchur":0.292,"anej":0.438,"anex":0.344,"anfiprostil":0.375,"anfiprot":0.375,"anfipod":0.375,"anfoter":0.375,"angel":0.25,"anin":0.375,"antend":0.375,"anther":0.375,"antiadherent":0.375,"antiaer":-0.375,"antitox":0.375,"antiac":0.375,"antropofag":0.375,"anuenc":0.313,"analog":0.292,"apetit":-0.25,"apical":0.375,"aplac":0.469,"aplaus":0.458,"apocarp":0.375,"apolog":0.333,"aprovech":0.417,"arbitr":0.25,"arbitrar":0.313,"arcan":0.25,"archimandit":0.375,"archimandrit":0.375,"argot":0.375,"argent":0.375,"aristocrat":0.438,"aristotel":0.375,"aritmet":0.25,"arlequin":0.375,"armad":0.333,"arroll":0.375,"artefact":0.375,"arte":0.375,"artesanal":0.375,"artesan":0.417,"artist":0.417,"ascendent":0.375,"ascendient":0.417,"ase":0.25,"asegur":0.375,"aserr":0.375,"asesor":0.25,"asibil":0.375,"asimil":0.375,"asintomat":0.375,"asist":0.375,"asombr":0.25,"astad":0.375,"asustadic":0.375,"atad":0.271,"atarax":0.375,"atav":0.25,"atent":0.341,"atest":0.375,"atribu":0.25,"atuend":0.375,"audibil":0.375,"august":0.375,"autentific":0.292,"autofecund":0.375,"autogenes":0.375,"automatic":0.375,"autopolinic":0.375,"autoric":0.437,"autent":0.25,"avanc":0.375,"avancat":0.375,"avisp":0.458,"ayud":0.275,"anad":-0.25,"bacteric":0.375,"balonvol":0.375,"barat":0.292,"barrigud":0.292,"barrigon":0.375,"beatitud":0.375,"benchmark":0.375,"beneplacit":0.313,"benign":0.469,"bermej":0.375,"bienhabl":0.375,"bimestral":0.313,"biolog":0.25,"bioluminiscent":0.375,"bioquim":0.375,"bipart":0.375,"blason":0.375,"bocon":0.375,"bonanc":0.417,"bondad":0.357,"boquiabiert":0.438,"borrabl":0.375,"brac":0.375,"brill":-0.25,"brutal":-0.344,"bri":0.313,"buenaventur":0.438,"butirac":0.375,"caballeros":0.375,"cabalist":0.375,"cachet":-0.312,"calcul":0.25,"calent":0.25,"caligraf":0.25,"callos":-0.375,"calm":0.25,"cambiabl":0.313,"camb":0.333,"campanill":0.375,"canibal":0.375,"canon":0.281,"canonic":0.25,"capac":0.307,"capacit":0.438,"cap":0.375,"capital":0.281,"carioc":0.375,"carism":0.375,"carmes":0.375,"carmin":0.375,"cas":0.25,"castr":-0.375,"casuist":0.375,"cat":0.375,"cateques":0.313,"catequic":0.375,"centell":0.375,"centrist":0.313,"centripet":0.375,"cepill":0.313,"ceremonial":0.25,"cerec":0.375,"chanchuller":0.375,"charlot":0.375,"chauvinist":0.25,"cicatric":0.375,"cigomorf":0.375,"cintil":0.375,"circunstancial":0.313,"circunstanc":0.375,"clandestin":0.375,"clarific":0.375,"clar":-0.25,"clasist":0.375,"claudic":0.375,"clement":0.438,"clo":0.375,"clasic":0.25,"coactiv":0.375,"cobr":0.375,"coercit":0.375,"coexistent":0.375,"coextens":0.375,"cognit":0.375,"coherent":0.406,"coincident":0.292,"cojinet":0.375,"colect":0.313,"color":0.25,"colosal":0.375,"columnar":0.313,"combin":0.375,"combinator":0.375,"comburent":0.375,"comerc":0.375,"compartiment":0.313,"compatibil":0.313,"complet":0.469,"comprensibil":0.375,"comprens":0.375,"compres":0.375,"compromet":0.417,"comunic":0.313,"concentr":0.25,"concert":0.25,"concienzud":0.292,"concis":0.375,"concomit":0.375,"condecor":0.375,"conduc":0.375,"conector":0.375,"confiabil":0.375,"conf":0.375,"confidencial":0.313,"confin":0.375,"confluent":0.375,"confor":0.375,"conformist":0.375,"confucion":0.375,"congratul":0.417,"conjetur":0.375,"conjetural":0.375,"conmemor":0.375,"conmensur":0.375,"conmovedor":0.344,"conmut":-0.312,"connivent":0.281,"conocedor":0.375,"conquist":-0.25,"conscienc":0.375,"conscient":0.375,"consecuent":0.458,"consens":0.292,"consider":0.25,"consolid":0.25,"conson":0.333,"const":0.344,"constat":0.375,"constitut":0.375,"constrict":0.375,"consultor":0.375,"contag":0.313,"contempl":0.375,"contemporic":0.313,"contradec":-0.25,"contumaz":0.375,"contundent":0.333,"convencional":0.313,"conven":0.25,"convert":0.333,"convid":0.375,"convincent":0.281,"cornud":0.313,"correder":0.375,"correspondient":0.292,"corruptor":0.375,"cortej":0.375,"cortes":0.271,"cosmet":0.25,"credencial":0.375,"credibil":0.313,"creibl":0.438,"cristian":0.25,"crujient":0.375,"cruz":0.25,"cronic":0.333,"cuadr":0.375,"cuadricul":0.375,"cualit":0.375,"cuaresmal":0.375,"cucufat":0.375,"cuerd":0.375,"cuid":0.25,"cultural":0.375,"culturist":0.375,"cumpl":0.266,"cumplidor":0.438,"cumul":0.375,"cun":0.25,"curabil":0.375,"cur":0.25,"curvilin":0.458,"civic":0.313,"comic":0.25,"concav":0.375,"corn":0.375,"dacron":0.375,"deb":0.313,"decid":0.411,"decis":0.25,"declar":0.417,"definit":0.333,"degener":-0.292,"delant":0.313,"deliber":0.375,"delic":-0.375,"delin":0.375,"deltoid":0.375,"demagog":0.375,"demas":0.375,"democrat":0.375,"denominacional":0.375,"densific":0.375,"dependient":0.375,"deprav":0.25,"depres":-0.375,"deriv":0.25,"desagrav":0.375,"desarroll":0.438,"desbast":0.375,"descentralic":0.375,"desclasific":0.375,"descoll":0.375,"desconect":0.271,"deseabil":0.375,"desempan":0.375,"desencamin":0.375,"desencorv":0.438,"desestim":0.375,"deshel":0.375,"deshumanic":0.375,"deshuman":0.375,"desinfect":0.375,"desintegr":-0.375,"deslig":0.375,"deslic":0.313,"desmitific":0.375,"desobstru":0.375,"despabil":0.375,"despenalic":0.25,"despert":0.375,"despos":0.313,"desposor":0.375,"desprend":0.375,"destet":0.375,"destitu":0.375,"desvel":0.333,"desvitalic":-0.25,"detect":0.25,"diabat":0.375,"diacron":0.375,"diagonalic":0.375,"diar":0.313,"dicynodont":0.375,"diferenc":0.25,"diligent":0.438,"diminu":0.375,"dinam":0.286,"diplomat":0.458,"direct":0.26,"discernidor":0.375,"disciplin":0.438,"discrimin":0.375,"discriminator":0.313,"disculp":0.375,"discut":-0.375,"disolubl":0.375,"disyunt":0.25,"divergent":0.313,"diversion":0.292,"divin":0.438,"divorc":0.25,"divulg":0.375,"dialis":0.375,"doctrin":0.313,"document":0.25,"domest":0.25,"doul":0.375,"dramat":0.275,"dulzain":0.375,"dulzarron":0.375,"dulzon":0.438,"docil":0.396,"ebri":-0.25,"econom":0.339,"ecrin":0.375,"ecuanim":0.375,"ecumen":0.375,"edit":0.292,"eden":0.375,"eficac":0.375,"ejempl":0.458,"ejercit":0.375,"elabor":0.313,"eleganc":0.333,"elev":0.375,"elision":0.375,"elitist":0.375,"elog":0.417,"elucid":0.25,"elis":-0.25,"emascul":0.375,"eminent":0.417,"emocional":0.375,"empac":0.375,"empaquet":0.375,"emparent":0.313,"enaltec":0.344,"encarec":0.313,"encerr":0.281,"encojin":0.375,"encomiast":0.375,"encript":0.375,"endogam":0.25,"energ":0.342,"enfoc":0.375,"enfat":0.313,"engord":0.375,"engrandec":0.375,"engrillet":0.375,"enhorabuen":0.417,"enlac":0.25,"enmoquet":0.375,"ennoblec":0.375,"enor":0.325,"enriquec":0.313,"enrojec":0.375,"ensalc":0.458,"ensimism":0.375,"entend":0.375,"enternec":0.375,"enter":0.25,"entren":0.25,"envas":0.375,"envolvent":0.375,"envolv":0.375,"epizoot":0.375,"equid":0.375,"equidist":0.375,"equilibr":0.275,"equip":0.281,"equivalent":0.292,"erectil":0.313,"esbelt":0.313,"escarlat":0.375,"escenotecn":0.375,"escrupulos":0.438,"escrupul":0.25,"escultural":0.313,"espabil":0.406,"espac":0.375,"especial":0.406,"especialist":0.25,"espectacul":0.375,"especif":0.292,"esprint":0.375,"estatal":0.375,"estereofon":0.375,"estertor":0.375,"estrateg":0.375,"estros":0.375,"estand":0.25,"ester":0.375,"eucariot":0.375,"eulog":0.375,"evident":-0.25,"evoc":0.375,"exactitud":0.3,"exalt":0.25,"excepcional":0.271,"exclus":0.25,"existent":0.35,"exoner":-0.333,"expect":0.375,"experient":0.333,"expiabl":0.375,"explot":0.375,"exposit":-0.437,"exquisitez":0.281,"exquisit":0.375,"extens":0.25,"extrafin":0.438,"extragrand":0.375,"extralarg":0.375,"extraordinar":0.25,"extravert":0.375,"extrovert":0.375,"fabul":0.333,"familiaric":0.25,"favorit":0.417,"feder":0.375,"felicit":0.375,"fenomen":0.313,"festiv":0.458,"fiabil":0.313,"filatel":0.375,"filet":0.375,"filogenet":0.375,"filohelen":0.375,"filosof":0.375,"finalic":0.313,"fin":0.384,"finur":0.313,"flexibl":0.341,"flexional":0.375,"florec":0.281,"florecient":0.417,"flu":0.333,"fluorescent":0.25,"foment":0.281,"forens":-0.375,"formal":0.375,"forn":0.3,"fortific":0.313,"forzud":-0.25,"fosforescent":0.375,"franc":0.321,"fructifer":0.375,"frugal":0.292,"funcional":0.406,"fe":0.375,"fiat":0.313,"fisic":0.286,"garb":0.375,"gastronom":0.375,"genealogist":0.375,"generos":0.325,"gentilec":0.417,"germic":0.375,"gest":0.375,"glamur":0.375,"glas":0.25,"glid":0.375,"global":0.347,"glor":0.333,"glorific":0.375,"gluglu":0.375,"glutin":0.313,"gnostic":0.375,"goc":0.313,"gomos":0.333,"gorr":0.375,"gorron":0.375,"gourmet":0.375,"grafic":0.375,"gran":0.375,"grand":0.292,"grandec":0.266,"grecofil":0.375,"gregar":-0.375,"gracil":0.438,"gurmet":0.375,"gustos":0.438,"habitu":0.375,"habitual":0.304,"habl":0.313,"hazan":0.313,"hebdomadar":0.375,"hechic":0.25,"hac":0.313,"hermet":0.25,"heteros":0.375,"hidrofob":-0.25,"hifi":0.375,"higrofit":0.375,"higrofil":0.375,"hiperact":0.375,"hiperpigment":0.375,"hipertiroid":0.375,"hobby":0.375,"hogaren":0.375,"holgur":0.292,"holometabol":0.375,"homogen":0.25,"hond":0.375,"honest":0.438,"honorar":0.313,"hosann":0.375,"hosped":0.375,"human":0.25,"humanist":0.25,"humor":0.375,"hapax":0.375,"hidric":0.375,"idolatr":0.375,"iles":0.375,"imit":0.25,"impec":0.375,"implic":0.417,"import":0.354,"impregn":0.375,"imprimatur":0.375,"impuls":-0.25,"impulsor":0.375,"inalter":0.292,"incans":-0.25,"inconfund":0.313,"incontrol":-0.25,"increment":0.438,"increibl":0.458,"indemn":0.417,"individual":0.3,"individualist":0.313,"individualic":0.375,"indivis":0.313,"indulgent":0.45,"industrialic":0.375,"industr":0.375,"inelud":0.292,"inequivoc":0.469,"inestim":0.375,"infantil":0.275,"infatig":0.313,"infect":0.375,"inflacionist":0.375,"inflam":-0.25,"influyent":0.281,"infrabastec":0.375,"infrason":0.375,"inger":0.375,"inhibidor":0.25,"inigual":0.25,"inmacul":0.313,"inmanent":0.438,"inmens":0.375,"inocent":0.393,"inquiridor":0.375,"inquisidor":0.375,"inquisitorial":0.375,"insonoric":-0.25,"inspiracional":0.375,"inspir":0.375,"instantan":-0.25,"institucionalic":0.375,"instruct":0.375,"instrumental":0.25,"integr":0.333,"intencion":0.438,"intensional":0.375,"interact":0.375,"intercamb":0.375,"interconfesional":0.375,"intermolecul":0.375,"intern":0.281,"interpersonal":0.375,"intersexual":0.313,"intrig":0.313,"introvert":0.25,"investig":0.375,"involucr":0.313,"inyect":0.375,"irremed":0.375,"irrepar":0.313,"irreprimibil":0.375,"irreprim":-0.25,"irromp":0.313,"isotrop":0.375,"izad":0.375,"jerg":0.375,"jesuit":0.375,"jod":0.375,"jonron":0.375,"junt":-0.25,"lacr":0.375,"lact":-0.25,"lacon":0.375,"larg":0.3,"lavabl":0.375,"lax":0.375,"lecher":0.375,"legibl":0.375,"legitim":0.411,"lejan":0.292,"liberal":0.25,"libertar":0.25,"licenc":-0.375,"lil":0.375,"liliac":0.375,"limp":0.25,"liquid":0.375,"lisonj":0.375,"list":0.25,"livian":0.375,"llen":0.321,"lloric":-0.25,"llov":0.375,"lob":0.375,"longanim":0.313,"longev":0.375,"longitudinal":0.375,"lucr":0.375,"lucrat":0.438,"ludit":0.375,"lugartenient":0.375,"lujos":0.375,"lujur":0.25,"luminos":0.417,"lumin":0.25,"licit":0.25,"liqu":0.275,"liv":0.375,"lubric":0.313,"luc":0.417,"maestr":0.281,"magent":-0.25,"magnificent":0.35,"majec":0.438,"malcas":0.375,"maleabl":0.375,"malv":0.375,"manicur":0.375,"manifest":0.354,"mans":0.281,"manten":0.375,"manual":0.313,"maric":-0.375,"mariquit":0.375,"marrull":0.375,"marron":0.375,"masiv":0.375,"masoquist":0.25,"mastic":0.438,"matemat":0.375,"maull":0.375,"maximic":0.25,"mecenazg":0.375,"medic":0.375,"medicin":0.375,"med":0.25,"megaloman":-0.375,"memor":0.375,"mendic":0.375,"mensual":0.375,"mental":0.292,"menud":0.375,"meritocrac":0.313,"mesomorf":0.375,"metalist":0.375,"meticul":0.344,"metod":0.375,"miau":0.375,"microfon":0.375,"milagr":0.375,"mimos":0.375,"mimet":0.313,"mirmecofil":0.375,"modern":0.328,"modest":0.313,"modific":0.292,"momentan":0.375,"mon":-0.25,"monosem":0.375,"mont":-0.312,"monarc":-0.25,"monast":0.313,"movibl":0.292,"muchachil":0.375,"mucilagin":0.313,"mudr":0.375,"muesc":0.375,"mug":0.375,"multifor":0.375,"mundial":0.275,"muscul":0.375,"musical":0.375,"musicolog":0.375,"mutabil":0.375,"merit":0.417,"metric":0.25,"mimic":0.375,"movil":0.25,"naranj":0.375,"narrat":0.375,"negabl":0.375,"neoliberal":0.375,"net":0.313,"nivel":0.375,"no":0.375,"normal":0.292,"notoried":0.375,"noved":0.375,"numin":0.375,"nutricional":0.375,"nit":0.333,"nostic":0.375,"obedec":0.375,"objet":-0.375,"obsequ":0.375,"obten":0.375,"obvi":-0.25,"occidentalic":0.375,"ocios":0.375,"ocre":0.375,"ofertor":0.375,"ofic":0.25,"ok":0.375,"okey":0.375,"oliv":0.375,"olivac":0.375,"olor":0.375,"omit":0.313,"ondul":0.375,"onomatop":0.375,"onomatopey":0.375,"operator":0.375,"orator":0.25,"orden":0.292,"organ":0.292,"original":0.313,"oro":0.375,"oxid":0.375,"pact":0.281,"palm":-0.25,"pamp":0.375,"panegirist":0.375,"panopt":0.375,"parabl":0.375,"parangon":0.375,"parch":0.375,"parec":0.344,"particul":0.313,"partidist":0.375,"part":0.292,"paseat":0.375,"pasmos":0.313,"pastizal":0.375,"pastur":0.375,"paternal":0.25,"paternalist":0.375,"patidifus":0.375,"patities":0.375,"patrioter":0.25,"ped":0.375,"pegadic":0.333,"pein":0.313,"penetr":-0.25,"pentecostal":0.375,"percept":0.25,"perdon":0.375,"perfil":0.375,"perfum":0.333,"peric":0.313,"perig":0.375,"personific":0.375,"perspicaz":0.45,"perspicu":0.375,"persuas":0.25,"pervert":0.375,"picant":0.292,"ping":0.375,"placabl":0.375,"plausibil":0.375,"plausibl":0.313,"playboy":0.375,"plen":0.438,"plu":0.375,"polizon":0.375,"ponder":0.375,"pop":0.375,"popul":0.25,"popularic":0.375,"positivist":0.375,"potabl":0.313,"potenc":0.375,"pragmat":0.292,"prec":0.375,"precision":0.406,"preconcert":0.375,"preconic":0.313,"prediger":0.375,"predilect":0.375,"predispuest":0.375,"predomin":0.25,"prefabric":0.375,"prejuzg":-0.25,"preliterar":0.375,"premedit":0.417,"prestacion":0.375,"prest":0.313,"presum":0.25,"presunt":0.3,"prevalec":0.344,"preven":0.25,"previs":0.375,"primor":0.375,"principal":0.389,"principesc":0.375,"prior":0.375,"prisioner":0.375,"priv":0.25,"probabl":0.438,"proces":0.438,"procr":0.25,"prodig":-0.25,"profec":0.313,"profesion":0.275,"proficient":0.375,"profund":0.292,"profusion":0.438,"progresist":0.375,"prolong":0.375,"pront":-0.25,"pronunc":0.375,"proporcion":0.25,"protector":0.438,"providencial":0.417,"pristin":0.313,"prostil":0.375,"psicoterapeut":-0.25,"pueblerin":0.375,"puericultur":0.375,"pulcr":0.375,"pulimient":0.375,"pul":0.417,"puntill":0.281,"puntual":0.375,"pur":0.409,"purulent":0.375,"putat":0.375,"public":0.438,"quincenal":0.375,"quirurg":0.375,"qi":0.375,"racem":0.375,"racionalist":0.375,"racist":0.25,"radi":0.333,"rascun":0.375,"rasg":-0.375,"rasgu":0.375,"rasgun":-0.25,"rasp":0.375,"ratif":0.313,"raud":0.438,"reactiv":0.375,"reaviv":0.375,"rebas":0.375,"rebos":0.25,"recab":0.375,"recaud":0.375,"rechin":0.375,"recomend":0.375,"reconoc":0.429,"rector":0.375,"redefin":0.313,"redentor":0.375,"redim":0.375,"redom":0.375,"reduc":0.375,"reduct":0.375,"reductor":0.375,"reemplac":0.438,"referend":0.375,"referendum":0.375,"reformist":0.375,"reforc":0.375,"refulgent":0.375,"regalon":0.375,"regener":0.375,"reg":0.406,"regl":0.375,"regular":0.375,"regularic":0.25,"rein":0.375,"reincident":0.375,"relaj":0.313,"relinc":0.375,"relucient":0.438,"reluc":0.275,"rememor":0.292,"remilg":-0.25,"reminiscent":0.25,"remot":0.375,"remuner":0.25,"renacient":0.375,"renombr":0.375,"renov":0.25,"repic":0.375,"reproductor":0.375,"repuest":0.375,"repuj":0.375,"reput":0.438,"requer":0.375,"requisicion":0.375,"rescat":0.375,"reserv":0.25,"resitu":0.375,"reson":0.375,"restablec":0.375,"restrict":0.406,"resuelt":0.25,"resumid":0.375,"retent":0.292,"reticent":0.313,"retrat":0.375,"retrot":0.375,"retractil":0.375,"reutilic":0.438,"reverber":-0.375,"reverdec":0.25,"revers":0.35,"revert":-0.375,"revoc":-0.333,"revolt":-0.312,"revolucionar":0.313,"ric":0.356,"rigor":0.375,"rim":0.375,"riquec":0.292,"robustez":0.292,"robust":0.391,"rollic":0.438,"ros":0.292,"rosbif":0.375,"rubicundez":0.375,"runrun":0.375,"rap":0.318,"ritmic":0.375,"sabros":0.333,"sacafalt":0.313,"sagr":0.438,"saler":0.275,"sanid":0.375,"sanitic":0.375,"santif":0.375,"santurron":0.375,"satin":0.375,"satisfacient":0.375,"saturnal":0.375,"sazon":0.25,"secund":0.292,"sedant":0.25,"sedos":0.375,"seg":0.375,"segreg":0.375,"semanal":0.375,"semanar":0.375,"semej":0.354,"semestral":0.375,"semiautomat":0.313,"semivocal":0.375,"senil":0.375,"sensacional":0.458,"sensatez":0.357,"sensit":0.313,"sensual":0.25,"separ":0.375,"separatist":0.375,"serendip":0.375,"seried":0.275,"serr":0.25,"servicial":0.469,"servil":0.313,"sesud":0.375,"sexy":0.375,"shag":0.375,"sibil":0.375,"silenc":0.375,"simetr":0.375,"simil":0.35,"simul":0.313,"sinecdoc":0.375,"sinfon":0.313,"sinonim":0.375,"soberb":0.25,"sobrealiment":0.375,"sobrecog":0.375,"sobreexplot":0.375,"sobresalient":0.406,"sobreutilic":0.375,"sobrevalor":0.375,"sobrexcit":0.375,"social":0.375,"socialic":0.375,"sofistic":0.406,"sol":0.292,"solemn":0.292,"solicit":0.438,"solidez":0.479,"solucion":0.375,"sonor":0.292,"sonris":0.375,"sonros":0.458,"sospech":-0.25,"sprint":0.375,"stigmat":0.375,"suavid":0.281,"subjet":0.25,"subst":0.375,"substancial":0.375,"substitu":0.375,"substract":0.375,"subson":0.375,"sucint":0.375,"sugestion":0.375,"sugest":0.375,"sumis":0.475,"suntuos":0.375,"super":0.333,"superrefin":0.375,"supersens":0.375,"supervis":0.375,"suplementar":0.333,"suposit":0.375,"suprem":0.438,"suprim":0.375,"surt":0.375,"suscept":0.469,"suspicaz":0.375,"sustitu":0.375,"sustract":0.375,"sutur":0.375,"sonic":0.375,"tal":0.25,"talant":0.375,"taoism":0.375,"tech":0.375,"tecnolog":0.25,"telescop":0.375,"tempest":-0.375,"tendenc":0.292,"tentabl":0.375,"termin":0.25,"terros":0.313,"ters":0.375,"terylen":0.375,"ticket":0.313,"tintin":0.417,"tipic":0.375,"tiqu":0.375,"tirotoxicos":0.375,"titul":0.375,"titan":-0.25,"tom":0.375,"tost":0.375,"transcendent":0.333,"transform":0.375,"transmut":0.375,"trasmut":0.375,"trasparent":0.313,"trienal":0.375,"trisec":0.375,"trisect":0.375,"tropism":0.375,"tuert":0.375,"tutel":0.25,"torr":0.313,"ultramodern":0.375,"ultrason":0.375,"ungidor":0.375,"unid":0.391,"unitar":0.375,"universal":-0.25,"urban":0.475,"usad":0.281,"usur":0.313,"utilic":0.25,"utop":0.25,"vacacion":0.375,"validez":0.333,"vast":0.438,"vaticin":0.292,"vehement":0.438,"vendibl":0.438,"verac":0.313,"veran":0.375,"verd":0.25,"verdader":0.453,"verdem":0.375,"verdigr":0.375,"verdos":0.375,"verosimil":0.333,"versatil":0.417,"verid":0.458,"vest":0.25,"viabil":0.375,"vigor":0.417,"villanc":0.313,"violabl":0.375,"virg":0.375,"virginal":0.417,"virtual":0.313,"vis":0.375,"viscos":0.281,"visibl":0.458,"vistos":0.313,"vital":0.375,"vivac":0.375,"vivaz":0.469,"vivec":0.268,"vivific":0.438,"viv":0.375,"voleibol":0.375,"volit":0.375,"volumin":0.292,"volumetr":0.375,"yang":0.375,"yog":0.313,"zigomorf":0.375,"epic":0.375,"etnic":0.375,"idol":0.313,"unic":0.333,"abalanc":-0.375,"abas":-0.25,"abenuz":-0.375,"aborrecedor":-0.375,"abrum":-0.361,"absentist":-0.312,"abuch":-0.417,"abus":-0.25,"abuson":-0.375,"acaudill":-0.375,"acheront":-0.375,"achic":-0.375,"achicharr":-0.312,"acibar":-0.375,"acid":-0.375,"acines":-0.375,"acondroplas":-0.25,"acre":-0.3,"acromegal":-0.375,"acromat":-0.375,"acuafob":-0.375,"adamantin":-0.375,"adefes":-0.312,"adenomios":-0.375,"adenopat":-0.375,"adivinanc":-0.375,"adust":-0.312,"advers":-0.375,"advertent":-0.344,"afe":-0.333,"afon":-0.292,"afrent":-0.25,"afront":-0.406,"afot":-0.375,"agrand":0.25,"agrazon":-0.292,"agred":-0.375,"agresion":-0.312,"agri":-0.425,"ahog":-0.375,"alar":-0.375,"aler":-0.375,"alex":-0.375,"alfil":0.25,"alfilerac":-0.437,"algarab":-0.437,"algar":-0.375,"alguacil":-0.312,"alifaf":-0.375,"aliv":-0.333,"aljof":-0.375,"almorran":-0.375,"aloc":-0.25,"alpend":-0.375,"altaner":-0.375,"amarg":-0.375,"aman":-0.3,"ambigu":-0.312,"ambliop":-0.375,"amenazador":-0.312,"amilan":-0.375,"amiloidos":-0.375,"amonest":0.25,"ampulos":-0.437,"ampul":-0.375,"analges":-0.25,"analg":-0.375,"andan":-0.437,"andesit":-0.375,"anem":-0.375,"anonad":-0.312,"anosm":-0.312,"antagonist":-0.312,"antecocin":-0.375,"anticip":0.25,"antihigien":-0.25,"antiintelectual":-0.312,"antiproton":-0.375,"antracit":-0.25,"antracos":-0.375,"anuret":-0.375,"apal":-0.312,"aparent":0.25,"apat":-0.281,"aplast":-0.375,"apocalipt":-0.437,"apoplej":-0.375,"aprehension":-0.312,"aprision":-0.25,"apract":-0.375,"aprax":-0.375,"apun":-0.375,"apunet":-0.375,"aquafob":-0.375,"arduid":-0.375,"arguc":-0.458,"arreflex":-0.375,"arrob":0.25,"arrog":-0.25,"arsin":-0.375,"artific":-0.25,"asarum":-0.375,"asbestos":-0.375,"asert":-0.375,"asistol":-0.375,"ason":0.25,"aspergilos":-0.312,"asqueros":-0.312,"asten":-0.25,"astil":-0.375,"astracan":-0.375,"atax":-0.375,"atosig":-0.312,"atrac":-0.292,"atrapamosc":-0.375,"atrap":-0.25,"atrev":-0.25,"atroc":-0.328,"atuf":-0.437,"aturrull":-0.375,"aturull":-0.375,"atip":-0.312,"audaz":-0.333,"audifon":-0.375,"aut":-0.375,"autocastig":-0.375,"autoflagel":-0.437,"autops":-0.375,"avasall":-0.375,"avis":-0.271,"azabach":-0.375,"azor":-0.312,"azot":-0.271,"bab":-0.375,"babuch":-0.375,"bacteriolog":-0.25,"bacteriolis":-0.375,"badulac":-0.458,"bajec":-0.375,"bajist":-0.375,"bajur":-0.375,"baldon":-0.375,"balic":-0.375,"band":-0.292,"bansh":-0.375,"banteng":-0.375,"barahund":-0.375,"barbar":-0.375,"barbot":-0.375,"barbull":-0.375,"barr":0.25,"barril":-0.292,"batahol":-0.292,"bemol":-0.375,"bigard":-0.375,"bloca":-0.375,"bloop":-0.375,"bobal":-0.375,"bobalicon":-0.425,"bob":-0.25,"bocan":-0.375,"borrasc":-0.375,"borric":-0.375,"botarat":-0.375,"bram":0.25,"braquidactil":-0.375,"brazal":-0.292,"breg":-0.25,"bribon":-0.25,"bronc":-0.25,"brot":-0.375,"brusqued":-0.375,"brut":0.25,"bujarr":-0.375,"bujarron":-0.375,"bullanguer":-0.312,"bul":-0.375,"burgues":-0.375,"butterscotch":-0.375,"cabec":-0.375,"cabestr":-0.375,"cabron":-0.446,"caca":-0.325,"cac":-0.25,"cacodemon":-0.375,"calam":-0.469,"calav":-0.333,"calcitonin":-0.375,"calvar":-0.375,"calvatruen":-0.375,"calzoncill":-0.375,"camanduler":-0.375,"camorr":-0.281,"camorrist":-0.312,"cans":0.25,"cant":-0.375,"capataz":-0.375,"carbonill":-0.312,"carbon":-0.344,"cardiomegal":-0.375,"cardiomiopat":-0.375,"carec":-0.375,"cari":-0.437,"cariat":-0.375,"carlanc":-0.437,"carnic":-0.312,"carron":-0.375,"carvedilol":-0.375,"cascot":-0.375,"caseos":-0.375,"casiterit":-0.375,"catacl":-0.312,"cataleps":-0.375,"caotic":-0.333,"cefalalg":-0.375,"cefal":-0.375,"celecoxib":-0.375,"cementit":-0.375,"cenicient":-0.312,"cenic":-0.25,"ceporr":-0.333,"cerd":0.25,"certer":-0.375,"cetonur":-0.375,"cetos":-0.375,"chabon":-0.375,"chal":-0.25,"chalec":-0.312,"chanc":-0.375,"chancl":-0.375,"chaparr":-0.312,"chapucer":-0.312,"chapurr":-0.375,"chaquet":-0.375,"chen":-0.375,"chifl":-0.417,"chinel":-0.375,"chiron":-0.375,"chot":-0.375,"chul":-0.375,"chung":-0.375,"chupachup":-0.375,"churret":-0.375,"ciclotim":-0.375,"ciclon":-0.25,"cilic":-0.375,"cimbel":-0.437,"ciner":-0.375,"citolis":-0.375,"clinopodium":-0.375,"clamid":-0.375,"coadyuv":-0.437,"cobard":-0.375,"coj":-0.375,"colgamient":-0.375,"columbifor":-0.375,"comadrej":-0.312,"complej":-0.344,"congest":-0.375,"conmin":-0.375,"contamin":-0.375,"contenid":-0.312,"contrabaj":-0.375,"contr":0.25,"contratiemp":-0.425,"contusion":-0.375,"convict":-0.375,"cras":-0.437,"cremacion":-0.375,"criestes":-0.375,"crucific":-0.312,"crucifixion":-0.312,"crudec":-0.458,"crud":-0.396,"cuon":-0.375,"cutr":-0.375,"cyberpunk":-0.375,"cyon":-0.375,"dan":-0.4,"debacl":-0.312,"debilit":-0.304,"decrepit":-0.312,"dedil":-0.375,"defens":-0.375,"deform":-0.333,"delacion":-0.375,"delat":-0.375,"delincuent":-0.312,"delir":-0.375,"demand":-0.3,"demoledor":-0.406,"demoniac":-0.437,"demonic":-0.375,"derog":-0.375,"derrision":-0.375,"derrot":-0.25,"derrumb":-0.25,"desabrig":-0.312,"desacat":-0.375,"desacostumbr":-0.375,"desaf":-0.25,"desagrup":-0.375,"desalin":-0.25,"desaparec":-0.281,"desastr":-0.375,"desatent":-0.292,"desbarajust":-0.375,"descamis":-0.292,"descompon":-0.437,"desconcert":-0.275,"desconsider":-0.417,"descontamin":-0.375,"descontent":-0.312,"descoordin":-0.375,"descuid":0.25,"desertif":-0.375,"desestabilic":-0.375,"desfachatez":-0.292,"desfigur":-0.325,"desgan":-0.375,"desgobiern":-0.437,"deshabitu":-0.375,"deshech":-0.375,"desiert":-0.417,"desiguald":-0.292,"desindustrialic":-0.375,"desinform":-0.375,"desmadej":-0.375,"desmay":-0.375,"desman":-0.25,"desnutr":-0.375,"desobedient":-0.292,"desoblig":-0.375,"desorden":-0.437,"desorganic":-0.458,"despect":-0.25,"desped":-0.375,"desperdic":-0.375,"despilfarr":-0.281,"despolaric":-0.375,"despreven":-0.417,"desquit":-0.375,"destech":-0.375,"destroc":-0.292,"desunion":-0.292,"desventur":-0.25,"detrit":-0.312,"detritu":-0.375,"dextrocard":-0.375,"diabl":-0.271,"diabet":-0.25,"didanosin":-0.375,"dift":-0.375,"dilapid":-0.375,"diput":-0.312,"disension":-0.344,"disent":-0.25,"disfag":-0.375,"disfon":-0.375,"disip":-0.333,"disminu":-0.312,"disosm":-0.312,"disparat":-0.437,"dispend":-0.375,"disuasion":-0.292,"dogfight":-0.375,"dolenc":-0.375,"dolient":-0.375,"draconian":-0.375,"dracunculias":-0.375,"drogadict":-0.375,"drogodependient":-0.375,"duplic":-0.292,"durabil":-0.375,"durec":-0.287,"debil":-0.298,"ectop":-0.375,"edem":-0.375,"electrocut":-0.25,"elucubr":-0.312,"embalsam":-0.375,"embarull":-0.333,"embelec":-0.375,"embroc":-0.375,"embroll":-0.312,"embull":-0.375,"embust":-0.275,"embuster":-0.25,"empetrum":-0.312,"enagu":-0.375,"encabec":-0.375,"encabrit":-0.375,"encefalit":-0.375,"encefalopat":-0.375,"encontronac":-0.45,"endebl":-0.437,"endometrios":-0.375,"enemig":-0.333,"enfermed":-0.333,"enfisem":-0.375,"enmaran":-0.312,"enred":-0.344,"enreves":-0.25,"ensan":-0.375,"ensuc":-0.375,"entizn":-0.375,"entramp":-0.458,"entredich":-0.292,"epicondialg":-0.375,"epicondilit":-0.375,"epidem":-0.375,"epididimit":-0.375,"epiglotit":-0.375,"epileps":-0.375,"equisetal":-0.375,"equivoc":-0.25,"ergot":-0.375,"eriz":-0.375,"erosion":-0.312,"escabr":-0.275,"escac":-0.375,"escaramuc":-0.25,"escarment":-0.375,"escarn":-0.275,"escas":-0.312,"escasez":-0.417,"escolios":-0.375,"escombr":-0.375,"espantaj":-0.375,"espasmod":-0.375,"espec":-0.292,"espeluzn":-0.25,"espin":-0.325,"esplenomegal":-0.375,"espast":-0.375,"esquiv":-0.437,"estaferm":-0.375,"estamp":0.25,"estanc":-0.375,"esteatopig":-0.375,"estenos":-0.375,"estornud":-0.25,"estrell":-0.312,"estrident":-0.25,"estrop":-0.375,"estup":-0.375,"etiol":-0.375,"eunuc":-0.375,"excurs":-0.375,"exigu":-0.375,"explosion":-0.312,"expol":-0.312,"extermin":-0.25,"extralegal":-0.375,"faloplast":-0.375,"falsed":-0.266,"fangal":-0.312,"farfull":-0.312,"fasciolias":-0.375,"fatuid":-0.375,"fenec":-0.375,"fenilcetonur":-0.375,"fetidez":-0.458,"filarias":-0.375,"filist":-0.312,"fint":-0.375,"flaccidez":-0.375,"flacidez":-0.375,"flacur":-0.375,"flem":-0.292,"fobofob":-0.375,"follon":-0.375,"foraj":-0.312,"forcej":-0.312,"formaldeh":-0.375,"foruncul":-0.375,"fosgen":-0.375,"fotofob":-0.375,"fractur":-0.375,"frambes":-0.375,"friald":-0.268,"frigidez":-0.417,"fulmin":-0.25,"funest":-0.375,"fustig":-0.292,"furuncul":-0.375,"gallin":-0.25,"gamberr":-0.25,"garambain":-0.437,"garlop":-0.375,"garrafon":-0.375,"garull":-0.375,"gas":-0.375,"gast":0.25,"gazapaton":-0.375,"gazap":-0.375,"giardias":-0.375,"gimot":-0.375,"glacial":-0.437,"glaucom":-0.375,"glumel":-0.375,"glumill":-0.375,"gnatostom":-0.375,"gord":-0.25,"gozc":-0.375,"granic":-0.375,"granuj":-0.275,"gratuit":-0.281,"grav":-0.396,"graved":-0.417,"gregu":-0.437,"gremlin":-0.375,"gri":-0.325,"grit":-0.312,"griter":-0.375,"grun":-0.333,"grunon":-0.375,"guachafit":-0.281,"guardainf":-0.375,"habon":-0.375,"halitos":-0.375,"hampon":-0.312,"hed":-0.437,"hemoglobinem":-0.375,"hemoglobinopat":-0.375,"hemorroid":-0.375,"herrumbr":-0.25,"hidrobat":-0.375,"hidromorfon":-0.375,"hidropes":-0.375,"hipercalciur":-0.375,"hipercolesterolem":-0.375,"hiperemes":-0.375,"hipermetrop":-0.375,"hiperop":-0.375,"hiperplas":-0.375,"hipertrof":0.25,"hipocalcem":-0.375,"hiponim":-0.375,"hipoparatiroid":-0.375,"hipospad":-0.375,"hipotension":-0.375,"hipotens":-0.375,"hipoton":-0.375,"hipocrit":-0.375,"histerocataleps":-0.375,"homicid":-0.312,"horribil":-0.375,"horridez":-0.375,"horter":-0.375,"hurac":-0.375,"huerfan":-0.375,"haptic":-0.375,"iclonoclast":-0.375,"ilegal":-0.313,"ilegalic":-0.437,"iletr":-0.437,"imbecil":-0.417,"impag":-0.25,"impar":-0.375,"impasibil":-0.417,"impercept":-0.25,"impertub":-0.375,"importun":-0.25,"impostur":-0.325,"imprecis":-0.292,"imprevis":-0.437,"improcedent":-0.375,"impromptu":-0.375,"impugn":-0.458,"impurec":-0.312,"impi":-0.417,"inacab":-0.375,"inacept":-0.417,"inacostumbr":-0.375,"inadapt":0.25,"inadopt":-0.375,"inalcanc":-0.312,"inalien":-0.417,"inarmon":-0.312,"inasistent":-0.375,"inatac":-0.312,"incapac":-0.469,"incapaz":-0.321,"incaut":-0.25,"incens":-0.375,"incomparecent":-0.375,"incompas":-0.375,"incongruent":-0.375,"inconmensur":-0.375,"inconmut":-0.312,"inconoc":-0.437,"inconquist":-0.437,"inconscient":-0.25,"inconsecuent":-0.312,"inconsistent":-0.281,"inconst":-0.458,"inconvert":-0.333,"incorruptibil":-0.375,"incur":-0.25,"indeb":-0.292,"indefend":-0.437,"indefens":-0.25,"indefin":-0.375,"indelicadec":-0.375,"indelic":-0.375,"indescript":-0.375,"indetect":-0.25,"indiferent":-0.325,"indigestibil":-0.375,"indiscern":-0.375,"indisciplin":-0.3,"indiscrecion":-0.406,"indiscrimin":-0.292,"indistingu":-0.437,"indom":-0.25,"ineficaz":-0.337,"ineptitud":-0.375,"inept":-0.273,"inescrut":-0.375,"inexact":-0.344,"inexor":-0.312,"inexpert":-0.25,"inexplor":-0.312,"inexpres":-0.25,"infal":-0.375,"infam":-0.25,"infecund":-0.375,"infertil":-0.375,"infident":-0.375,"infiel":-0.312,"inflagait":-0.375,"inflexibil":-0.45,"inflex":-0.281,"informal":-0.25,"infortun":-0.4,"infructu":-0.333,"ingenu":-0.375,"inhered":-0.375,"inhospitalar":-0.375,"inicu":-0.312,"inidentific":-0.375,"inimagin":-0.375,"inmadur":-0.292,"inminent":-0.375,"inmortal":-0.312,"innobl":-0.292,"inpenetr":-0.437,"insatisfaccion":-0.312,"insensatez":-0.268,"insensat":-0.333,"insensibil":-0.375,"insipidez":-0.275,"insoc":-0.375,"insolent":-0.375,"insolubl":-0.458,"insospech":-0.375,"insubmerg":-0.375,"insubordin":-0.375,"insuls":-0.344,"interdict":-0.344,"intransigent":-0.312,"intrat":-0.292,"inutil":-0.333,"inutilic":-0.375,"invalidez":-0.292,"invasor":-0.375,"invectiv":-0.333,"inviol":-0.281,"involuntar":-0.312,"invulner":-0.312,"irracional":-0.437,"irreal":-0.375,"irreverent":-0.375,"irrision":-0.375,"irving":-0.375,"jitt":-0.375,"jument":-0.25,"junky":-0.375,"kernicteru":-0.375,"kitch":-0.375,"lactoflavin":-0.375,"languidec":-0.417,"lastim":-0.25,"lechuc":-0.375,"lent":-0.25,"lepr":-0.375,"letal":-0.25,"letarg":-0.333,"leucocitos":-0.375,"leucopen":-0.375,"leved":-0.375,"liger":-0.25,"linchamient":-0.375,"liniment":-0.375,"liposarcom":-0.375,"lipotim":-0.375,"llant":-0.312,"lloved":-0.375,"loc":-0.292,"locat":-0.25,"lodacer":-0.312,"lorele":-0.375,"lovastatin":-0.375,"lunat":-0.25,"langu":-0.312,"lio":-0.26,"machac":-0.375,"machacon":-0.312,"macroglos":-0.375,"madrigu":-0.312,"magrez":-0.375,"magrur":-0.375,"malabsorcion":-0.375,"malac":-0.375,"malcontent":-0.375,"maledicent":-0.375,"maleduc":-0.35,"malefic":-0.375,"malform":-0.25,"maltrat":-0.25,"malvend":-0.375,"manch":-0.3,"manchurron":-0.375,"manchon":-0.375,"mandil":-0.312,"maniac":-0.312,"manipul":0.25,"maquin":-0.312,"mar":0.25,"maricon":-0.375,"mariposon":-0.375,"marshal":-0.375,"martingal":-0.375,"masteler":-0.375,"matachin":-0.312,"matanc":-0.458,"matricid":-0.375,"maton":-0.25,"mananit":-0.375,"megamu":-0.375,"melen":-0.375,"mem":-0.375,"mendac":-0.375,"mentecat":-0.333,"menton":-0.375,"meralg":-0.375,"merluc":-0.375,"mezquin":-0.25,"michelin":-0.375,"mildiu":-0.375,"milit":-0.25,"miocardiopat":-0.375,"mis":-0.292,"mocos":-0.437,"mohos":-0.312,"monorquid":-0.375,"morbos":-0.312,"moren":-0.417,"moreton":-0.375,"morg":-0.375,"moribund":-0.375,"mor":-0.312,"mortal":-0.375,"mortifer":-0.375,"mudabl":-0.375,"muflon":-0.375,"mult":-0.375,"murall":-0.312,"murmur":-0.375,"mustel":-0.312,"mutu":-0.375,"munec":-0.312,"morb":-0.292,"narcoman":-0.375,"naufrag":-0.312,"naupat":-0.375,"necromant":-0.375,"necrops":-0.375,"negligent":-0.312,"negrit":-0.375,"negrur":-0.312,"neoplas":-0.375,"neumoconios":-0.375,"neumotorax":-0.375,"neuralg":-0.25,"neurasten":-0.25,"neurit":-0.375,"neuros":-0.375,"neurospor":-0.375,"neurot":-0.375,"ninch":-0.375,"nocaut":-0.375,"nocent":-0.375,"nocional":-0.312,"nocion":-0.375,"noqu":-0.375,"numerar":-0.375,"objecion":-0.275,"obliter":-0.375,"obscen":-0.375,"obsidian":-0.375,"ocult":-0.375,"offic":-0.375,"oler":-0.281,"onde":-0.25,"onicos":-0.375,"opresor":-0.375,"ordinar":-0.375,"orquidalg":-0.375,"ortig":-0.375,"oscurant":-0.437,"osteomalac":-0.375,"osteopetros":-0.375,"otoscleros":-0.375,"palot":-0.375,"palurd":-0.312,"pancitopen":-0.375,"pantufl":-0.375,"papil":-0.375,"papism":-0.375,"paralit":-0.25,"parc":-0.375,"pares":-0.25,"parestes":-0.375,"parkinson":-0.375,"parmesan":-0.375,"parsimon":-0.375,"parved":-0.437,"patatu":-0.375,"patoch":-0.375,"patricid":-0.375,"patul":-0.375,"pat":-0.344,"paves":-0.375,"pebet":-0.375,"pecadill":-0.375,"pedreg":-0.312,"peligros":-0.417,"pelot":-0.437,"penal":-0.417,"pendenc":-0.312,"penur":-0.344,"percanc":-0.333,"perceb":-0.292,"percut":-0.375,"perdicion":-0.417,"perdonav":-0.292,"perjuic":-0.333,"pernic":-0.25,"persistent":-0.375,"pesadez":-0.286,"pesc":-0.333,"pest":-0.357,"peyor":-0.312,"pian":-0.375,"piern":-0.375,"pif":-0.375,"pijam":-0.375,"pinchac":-0.312,"piojos":-0.437,"pir":0.25,"piran":-0.375,"pirofob":-0.375,"pirulet":-0.375,"pirul":-0.375,"pitorr":-0.375,"piyam":-0.375,"planid":-0.375,"pleonasm":-0.375,"pleurodin":-0.375,"poc":-0.375,"pod":-0.375,"polemic":-0.312,"polic":-0.292,"polimiosit":-0.375,"poliur":-0.375,"pollin":-0.375,"polvorill":-0.375,"pompos":-0.458,"ponzon":-0.375,"populach":-0.375,"porf":-0.375,"postrim":-0.375,"presag":-0.375,"presuntu":-0.375,"pretenc":-0.312,"pretend":-0.312,"priapism":-0.375,"primitiv":-0.312,"procac":-0.437,"proctalg":-0.375,"profet":-0.375,"promiscu":-0.375,"proscrib":-0.375,"proscrit":-0.375,"proteg":0.25,"psiconeuros":-0.375,"psicos":-0.375,"psicosomat":-0.375,"psicot":-0.375,"psilotal":-0.375,"psorias":-0.375,"pudr":-0.375,"pugnac":-0.312,"pugn":-0.312,"puls":-0.25,"punz":-0.375,"picar":-0.292,"putr":-0.375,"quebradic":-0.375,"quebrant":-0.375,"quebr":-0.312,"que":-0.375,"quehac":-0.312,"quemadur":-0.292,"queratit":-0.375,"querell":-0.344,"quiltr":-0.312,"rabi":-0.417,"rancidez":-0.375,"ranc":-0.458,"rapin":-0.312,"rapt":-0.312,"raquit":-0.375,"raid":-0.325,"rebullic":-0.375,"recarg":-0.375,"reces":-0.312,"reciedumbr":-0.312,"recochin":-0.375,"recocin":-0.375,"refaj":-0.375,"refrieg":-0.406,"refunfun":-0.375,"refunfunon":-0.375,"reivind":-0.375,"reneg":-0.25,"reng":-0.375,"renc":-0.375,"repas":-0.375,"repelent":-0.375,"repip":-0.375,"reprend":-0.375,"reprimend":-0.375,"reprob":-0.375,"reprobator":-0.333,"repunt":-0.375,"residu":-0.25,"ret":-0.375,"retrograd":-0.312,"reum":-0.375,"reumat":-0.375,"revent":-0.292,"revuelc":-0.375,"reyert":-0.375,"ren":-0.359,"riboflavin":-0.375,"rictu":-0.312,"rigidez":-0.275,"riguros":-0.375,"rimbomb":-0.437,"rin":-0.375,"roc":-0.312,"rocos":-0.375,"rodofit":-0.375,"rofecoxib":-0.375,"rompibl":-0.375,"ron":-0.25,"rudec":-0.312,"ruf":-0.312,"rugos":-0.333,"ruinos":-0.375,"rig":-0.319,"sabot":-0.312,"sacrific":-0.375,"salvaj":-0.375,"sambenit":-0.375,"sandec":-0.375,"santalal":-0.375,"saprob":-0.25,"saprofag":-0.375,"sara":-0.292,"saras":-0.375,"sarcast":-0.375,"sarn":-0.375,"sarracin":-0.375,"satan":-0.375,"secret":-0.375,"semblanc":-0.292,"sempitern":-0.312,"sensibl":-0.312,"sepulcral":-0.458,"sepulcr":-0.375,"sever":-0.333,"sicomor":-0.375,"sicos":-0.375,"sicosomat":-0.375,"sicopat":-0.375,"sicot":-0.375,"silicos":-0.375,"simpl":-0.375,"sintomat":-0.375,"siti":-0.375,"snob":-0.375,"sob":-0.375,"sobrellev":-0.375,"sojuzg":-0.25,"solenops":-0.375,"solevant":-0.312,"solloc":-0.312,"sonoton":-0.375,"soplagait":-0.375,"soponc":-0.375,"sordidez":-0.292,"sordomudez":-0.375,"sortileg":-0.375,"sos":-0.297,"subexposicion":-0.375,"subpobl":-0.375,"subyacent":-0.333,"sucied":-0.306,"suc":-0.281,"sufr":-0.273,"sugestibil":-0.375,"superstic":-0.375,"supervivent":-0.375,"suplic":-0.479,"suspicac":-0.312,"sincop":-0.375,"tabard":-0.375,"tach":-0.396,"tambal":-0.375,"tanator":-0.375,"tapagujer":-0.312,"tar":-0.375,"taramban":-0.312,"tarant":-0.375,"tartaj":-0.375,"tartamud":-0.375,"tartuf":-0.375,"tarug":-0.312,"temblor":-0.396,"temerar":-0.375,"tempestu":-0.469,"tens":-0.417,"ter":-0.375,"tergivers":-0.292,"termoest":-0.375,"terqued":-0.344,"tibiec":-0.312,"tim":-0.286,"tirit":-0.25,"tiriton":-0.25,"tiroid":-0.312,"tirot":-0.375,"tizn":-0.312,"tiznon":-0.375,"tizon":-0.375,"toc":-0.25,"tol":-0.437,"toment":-0.375,"tontain":-0.375,"tontorron":-0.375,"top":0.25,"topet":-0.375,"torp":-0.25,"tortur":-0.437,"tosc":-0.446,"toxicoman":-0.375,"toxoplasmos":-0.375,"trabalengu":-0.375,"tracom":-0.312,"traged":-0.312,"traicioner":-0.458,"transmigr":-0.375,"trapisond":-0.292,"trascocin":-0.375,"trasg":-0.375,"trasmigr":-0.375,"trast":-0.333,"tret":-0.312,"trifurc":-0.375,"trombocitopen":-0.375,"tragic":-0.437,"tsain":-0.375,"tumor":-0.375,"tumult":-0.271,"tumultu":-0.375,"turbamult":-0.375,"turbulent":-0.375,"turon":-0.312,"tosig":-0.375,"ulalg":-0.375,"umbr":-0.312,"un":-0.375,"uretrit":-0.375,"vag":-0.268,"vahar":-0.375,"vandal":-0.312,"van":-0.284,"varieg":-0.375,"vejam":-0.375,"vendaj":-0.375,"vendaval":-0.375,"venen":-0.333,"vengat":-0.375,"ventarron":-0.375,"vers":-0.375,"vestibul":-0.375,"vibris":-0.375,"vidr":-0.375,"villan":-0.25,"vioxx":-0.375,"viruel":-0.375,"virulent":-0.292,"voc":-0.375,"vomit":-0.375,"vulg":-0.375,"vulgar":-0.4,"vulgaried":-0.375,"vulgaric":-0.375,"vulner":-0.25,"vom":-0.375,"woof":-0.375,"xeroftalm":-0.375,"xerostom":-0.375,"zalagard":-0.458,"zamarr":-0.375,"zanguang":-0.375,"zarand":-0.292,"zizan":-0.375,"zomb":-0.375,"zoquet":-0.312,"zot":-0.375,"zurriburr":-0.375,"antrax":-0.312,"asper":-0.344,"eban":-0.312,"abandon":0.25,"abarrot":0.25,"abastecedor":0.25,"abejarron":0.25,"abejon":0.25,"abort":0.25,"abracadabr":0.25,"abrevader":0.25,"absolvedor":0.25,"acantion":0.25,"acanton":0.25,"acapar":0.25,"acceler":0.25,"accesional":0.25,"accion":0.25,"acecin":0.25,"acetific":0.25,"acidul":0.25,"acolch":0.25,"acrobat":0.25,"acromatin":0.25,"acrid":0.25,"acuartel":0.25,"acumin":0.25,"adelant":0.25,"adhes":0.25,"adit":0.25,"admit":0.25,"adopcion":0.25,"adormec":0.25,"adrenalin":0.25,"adsorbat":0.25,"adsorb":0.25,"advic":0.25,"adyacent":0.25,"aerofil":0.25,"afianc":0.25,"afilador":0.25,"afinacion":0.25,"aflaut":0.25,"aforist":0.25,"afric":0.25,"afrut":0.25,"agujer":0.25,"ahorquill":0.25,"ahum":0.25,"alacr":0.25,"alambr":0.25,"alaz":0.25,"albor":0.25,"alcalescent":0.25,"alcalot":0.25,"alcanfor":0.25,"alcoholic":0.25,"alcohol":-0.25,"alcotan":0.25,"algoritm":0.25,"algu":0.25,"algun":0.25,"ali":0.25,"alifor":0.25,"alifat":0.25,"alist":0.25,"almoh":0.25,"alpenstock":0.25,"altern":0.25,"altec":0.25,"altivez":0.25,"altivec":0.25,"alucinogen":0.25,"alzad":0.25,"amanec":0.25,"amarillent":0.25,"amateur":0.25,"amniocentes":0.25,"amobl":0.25,"amuebl":0.25,"anabapt":0.25,"anabol":0.25,"anaclis":0.25,"anagog":0.25,"analget":0.25,"analic":0.25,"anamorf":0.25,"anasarc":0.25,"anatomist":0.25,"anatom":-0.25,"andant":0.25,"anglohabl":0.25,"angloparl":0.25,"animacion":0.25,"animal":-0.25,"anot":0.25,"antebrac":0.25,"antiautoritar":0.25,"anticlimat":0.25,"anticuar":0.25,"antifonal":0.25,"antifonar":0.25,"antitanc":0.25,"antiapex":0.25,"antropomorf":0.25,"antroposof":0.25,"antilop":0.25,"antipod":0.25,"antites":0.25,"anual":0.25,"anvers":0.25,"apadrin":0.25,"aplom":0.25,"apocromat":0.25,"apod":0.25,"apoder":0.25,"apoyabrac":0.25,"aprest":0.25,"apresur":0.25,"aprovision":0.25,"aproxim":0.25,"apatr":0.25,"apocop":0.25,"apocrif":0.25,"arcadian":0.25,"arcaist":0.25,"argentifer":0.25,"arid":0.25,"ariet":0.25,"arminian":0.25,"arpon":0.25,"arqu":0.25,"arracim":0.25,"arrib":0.25,"arrull":0.25,"aracn":0.25,"asentist":0.25,"asign":0.25,"asignatur":0.25,"asord":0.25,"aspir":0.25,"asterion":0.25,"astronav":0.25,"atemper":-0.25,"atend":0.25,"atenu":0.25,"atild":0.25,"atlet":0.25,"atonal":0.25,"ator":0.25,"atorvastatin":0.25,"atractor":0.25,"atraibl":0.25,"atonit":0.25,"audiovisual":0.25,"auspic":0.25,"autill":0.25,"autoadul":0.25,"autobomb":0.25,"autocin":0.25,"autoengan":0.25,"autotrof":0.25,"autovolquet":0.25,"ave":0.25,"avenent":0.25,"aven":0.25,"avist":0.25,"axiolog":0.25,"azitromicin":0.25,"azucar":0.25,"azul":0.25,"aer":0.25,"bacanal":0.25,"bal":0.25,"ban":0.25,"barren":0.25,"bas":-0.25,"basament":0.25,"basofil":0.25,"bat":-0.25,"beig":0.25,"beld":0.25,"bent":0.25,"berberech":0.25,"bestialic":0.25,"biblioteconom":0.25,"bicromat":0.25,"bienal":0.25,"bie":0.25,"bifurc":0.25,"bigener":0.25,"bigemin":0.25,"bilabial":0.25,"bilateral":0.25,"bilineal":0.25,"biodegrad":0.25,"bioensay":0.25,"bioscop":0.25,"bioter":0.25,"bioetic":0.25,"bisilab":0.25,"bizantin":0.25,"blanduch":0.25,"blasfem":0.25,"bloc":0.25,"bodhisatw":0.25,"bodij":0.25,"bofeton":0.25,"bolchevic":0.25,"boll":0.25,"boom":0.25,"borriquet":0.25,"bracam":0.25,"brahman":0.25,"brev":0.25,"breviar":0.25,"brind":0.25,"bufon":0.25,"buril":0.25,"butac":0.25,"butacon":0.25,"bif":0.25,"bipar":0.25,"cabl":0.25,"cachivach":0.25,"calamin":0.25,"calc":0.25,"calculist":0.25,"calefaccion":0.25,"calid":0.25,"call":0.25,"callist":0.25,"calorifer":0.25,"cambalach":0.25,"camion":0.25,"campechan":0.25,"camues":0.25,"cancel":0.25,"canel":0.25,"canj":0.25,"canonist":0.25,"cantat":0.25,"cantill":0.25,"caral":0.25,"carambol":0.25,"carid":0.25,"carton":0.25,"castan":0.25,"castill":0.25,"catacrest":0.25,"catamit":0.25,"catastr":0.25,"cataton":0.25,"cattley":0.25,"causat":0.25,"cebollet":0.25,"cefalopod":0.25,"cegador":0.25,"celest":0.25,"cencerr":0.25,"cenotaf":0.25,"centrifug":0.25,"cenacul":0.25,"cephalopod":0.25,"ceremonier":0.25,"ceremonios":0.25,"ceremon":0.25,"certitud":0.25,"cerul":0.25,"cespit":0.25,"cester":0.25,"cetr":0.25,"chalan":0.25,"chantaj":0.25,"charol":0.25,"chateau":0.25,"chavalong":0.25,"chicol":0.25,"chifon":0.25,"chimichurr":0.25,"chiquitin":0.25,"chismer":0.25,"chovinist":0.25,"chup":0.25,"churr":0.25,"cientif":0.25,"circunflej":0.25,"circunscrit":0.25,"ciruel":0.25,"civilic":0.25,"claristor":0.25,"climat":0.25,"cluec":0.25,"coaxial":0.25,"cobij":0.25,"cochin":0.25,"codorniz":0.25,"coexist":0.25,"cogn":0.25,"cohes":0.25,"cohesion":0.25,"cohib":0.25,"colim":0.25,"colind":0.25,"coll":0.25,"colump":0.25,"comercialic":0.25,"comestibil":0.25,"compagin":0.25,"comparecent":0.25,"compenetr":0.25,"compens":0.25,"compet":0.25,"compr":0.25,"compresibil":0.25,"comput":-0.25,"conceb":0.25,"conclav":0.25,"conclu":0.25,"condens":0.25,"condicional":0.25,"condilion":0.25,"confeder":0.25,"confes":0.25,"confraternic":0.25,"congen":0.25,"conglomer":0.25,"conjunt":0.25,"connatural":0.25,"connot":0.25,"conscripcion":0.25,"consej":-0.25,"conservator":0.25,"consistent":0.25,"constren":0.25,"constringent":0.25,"consueld":0.25,"consult":0.25,"consumidor":0.25,"contorn":0.25,"contraejempl":0.25,"contrafirm":0.25,"contrarrepl":0.25,"contrast":0.25,"contrasubversion":0.25,"controvert":0.25,"contractil":0.25,"convalec":0.25,"convers":0.25,"convertibil":0.25,"coordin":0.25,"copern":0.25,"coquet":0.25,"cor":0.25,"coronion":0.25,"corporativ":0.25,"corpor":0.25,"correccional":-0.25,"correccion":0.25,"correl":0.25,"cortapis":0.25,"cortical":0.25,"corv":0.25,"cos":0.25,"cosif":0.25,"cosmonav":0.25,"covarianc":0.25,"crapul":0.25,"cre":0.25,"creenc":0.25,"crep":0.25,"crepit":0.25,"criptograf":0.25,"criptofit":0.25,"cristalin":0.25,"cro":0.25,"cronolog":0.25,"cronograf":0.25,"croquet":0.25,"crucifor":0.25,"cuark":0.25,"cubiert":0.25,"cuc":0.25,"cucamon":0.25,"cuchuflet":0.25,"cucu":0.25,"cultist":0.25,"curacion":0.25,"curculion":0.25,"cursiv":0.25,"cursor":0.25,"curv":0.25,"custod":-0.25,"cartel":0.25,"ciclop":0.25,"dadaism":0.25,"daltonian":0.25,"dalton":0.25,"databl":0.25,"decadent":0.25,"decant":0.25,"dech":0.25,"decimal":0.25,"decrescend":0.25,"decret":0.25,"defensor":0.25,"deforest":0.25,"delicuescent":0.25,"delimit":0.25,"demulcent":0.25,"demot":0.25,"dentud":0.25,"denton":0.25,"depil":0.25,"derech":0.25,"derivacional":0.25,"desaclop":0.25,"desarticul":0.25,"desatranc":0.25,"desbalanc":0.25,"desbord":0.25,"descamb":0.25,"descarg":0.25,"descart":0.25,"descodific":0.25,"descolonic":0.25,"descomprim":0.25,"descomunal":0.25,"descongel":0.25,"descontrol":-0.25,"descorch":0.25,"descuell":0.25,"desec":0.25,"desenvolv":0.25,"desforest":0.25,"desglos":0.25,"deshered":0.25,"deshiel":0.25,"desmed":0.25,"desmovilic":0.25,"desnaturalic":0.25,"despeg":0.25,"despen":0.25,"desplac":0.25,"destin":0.25,"desvalor":0.25,"desvincul":0.25,"deuteranop":0.25,"diacrit":0.25,"dialect":0.25,"diapir":0.25,"dicotom":0.25,"didact":0.25,"dietist":0.25,"diflunisal":0.25,"difusor":0.25,"dilat":0.25,"diminuend":0.25,"diplom":0.25,"diplomatur":0.25,"diptong":0.25,"dirigent":0.25,"dirk":0.25,"discrecional":0.25,"disjunt":0.25,"disp":0.25,"dispersor":0.25,"distanc":0.25,"distint":0.25,"distribuidor":0.25,"divisor":0.25,"doctrinar":0.25,"domicil":0.25,"dop":0.25,"doxolog":0.25,"dracunculoid":0.25,"drenaj":0.25,"drog":0.25,"duodecimal":0.25,"duqu":0.25,"dump":0.25,"eclectic":0.25,"ecoic":0.25,"ecolog":0.25,"ecosistem":0.25,"educacion":0.25,"edulcor":0.25,"eferent":0.25,"ejecut":0.25,"elacion":0.25,"electrif":0.25,"electric":0.25,"electrodomest":0.25,"electrofores":0.25,"eligibil":0.25,"elimin":0.25,"elit":0.25,"embruj":0.25,"emir":0.25,"emolient":0.25,"empalag":0.25,"empantan":0.25,"empatic":0.25,"empenach":0.25,"empequenec":0.25,"emperejil":0.25,"empen":0.25,"empiric":0.25,"empoll":0.25,"empir":0.25,"emulgent":0.25,"enamor":0.25,"enanez":0.25,"enan":-0.25,"encarn":0.25,"encasquill":0.25,"encer":0.25,"enciclopedist":0.25,"encog":0.25,"encomend":0.25,"encortin":0.25,"encuadern":0.25,"encumbr":0.25,"endoenerget":0.25,"endorsement":0.25,"endors":0.25,"endos":0.25,"endulc":0.25,"enfadadic":0.25,"enfortalec":0.25,"engros":0.25,"engrues":0.25,"engualdrap":0.25,"enmader":0.25,"enolog":0.25,"enriel":0.25,"ensanch":0.25,"ensenanc":0.25,"entall":0.25,"enton":0.25,"entorpecedor":0.25,"entreabiert":0.25,"envalenton":-0.25,"enverdec":0.25,"envig":0.25,"eosinofil":-0.25,"epigram":0.25,"epimorf":0.25,"epinefrin":0.25,"epistemolog":0.25,"equipotencial":0.25,"ergotrop":0.25,"erinac":0.25,"erogacion":0.25,"erradic":0.25,"escanc":0.25,"escancian":0.25,"escarc":0.25,"escorpion":0.25,"esculp":0.25,"escurrid":0.25,"escurrider":0.25,"escurridic":0.25,"escen":0.25,"esgrim":0.25,"esgrimist":0.25,"esoter":0.25,"espacial":0.25,"espadachin":0.25,"espald":-0.25,"espaldud":0.25,"esparc":0.25,"espatul":0.25,"especier":0.25,"espectrofotometr":0.25,"espejit":0.25,"espes":0.25,"esponj":0.25,"espos":0.25,"establ":0.25,"estabul":0.25,"estadist":0.25,"estampill":0.25,"estant":0.25,"estatuar":0.25,"estel":0.25,"estentor":0.25,"estep":0.25,"estetic":0.25,"estheticienn":0.25,"estilic":0.25,"estipul":0.25,"estomatopod":0.25,"estructur":0.25,"estupefact":0.25,"etiquet":0.25,"etnocentr":0.25,"etnolog":0.25,"etosuxim":0.25,"euritm":0.25,"evad":0.25,"evapor":0.25,"evitacion":0.25,"exclam":0.25,"exclamator":0.25,"excus":0.25,"exil":0.25,"existencial":0.25,"exist":0.25,"exoenerget":0.25,"expand":-0.25,"expansion":0.25,"experiencial":0.25,"expi":0.25,"exposimetr":0.25,"expurg":0.25,"external":0.25,"extern":0.25,"extingu":0.25,"extra":0.25,"extramatrimonial":0.25,"f":0.25,"facet":0.25,"factibil":0.25,"factual":0.25,"facultad":0.25,"facult":0.25,"faeton":0.25,"fajin":0.25,"falc":0.25,"falcifor":0.25,"falocrat":0.25,"fantasm":-0.25,"fard":0.25,"farmacocinet":0.25,"farmacolog":0.25,"fasian":0.25,"fechabl":0.25,"fedellin":0.25,"ferment":0.25,"feudal":0.25,"fiest":0.25,"figur":0.25,"fijec":0.25,"filial":0.25,"financ":0.25,"finitud":0.25,"firm":0.25,"flagr":0.25,"flexuos":0.25,"flip":0.25,"flirt":0.25,"flor":-0.25,"fogat":0.25,"fonacion":0.25,"formul":0.25,"fotoquim":0.25,"fotosf":0.25,"fotometr":0.25,"foulard":0.25,"foxterr":0.25,"frag":0.25,"fragu":0.25,"francofon":0.25,"franel":0.25,"franquec":0.25,"franquic":0.25,"fraseolog":0.25,"fraternic":0.25,"fraz":0.25,"frecuent":0.25,"fulgur":0.25,"fundament":0.25,"fusifor":0.25,"gabel":0.25,"gafet":0.25,"gag":0.25,"gambit":0.25,"ganoid":0.25,"garantic":0.25,"garl":0.25,"garruch":0.25,"gasolin":0.25,"gentil":0.25,"genet":0.25,"geograf":0.25,"geolog":0.25,"geometr":0.25,"geopolit":0.25,"german":0.25,"germanoparl":0.25,"gestion":0.25,"gigantesc":0.25,"gimnast":0.25,"ginandromorf":0.25,"gincan":0.25,"glamour":0.25,"globalic":0.25,"globos":0.25,"globul":0.25,"glorif":0.25,"gluglut":0.25,"gobern":0.25,"gobernanc":0.25,"gol":-0.25,"golf":-0.25,"got":0.25,"gramofon":0.25,"gravabl":0.25,"gravam":0.25,"grogu":0.25,"grupal":0.25,"guillam":0.25,"gul":0.25,"gymkhan":0.25,"garg":0.25,"hemostat":0.25,"hered":0.25,"heredit":0.25,"herrerasaurida":0.25,"herrerasauru":0.25,"heterodactil":0.25,"heterometabol":0.25,"heterosex":0.25,"heurist":0.25,"hialin":0.25,"hidrofit":0.25,"hidrogen":0.25,"hidrofil":0.25,"higienic":0.25,"hinayan":0.25,"hinduism":0.25,"hiosciamin":0.25,"hipercapn":0.25,"hipercrit":0.25,"hiperglucem":0.25,"hipopn":0.25,"homeoterm":0.25,"homil":0.25,"homocentr":0.25,"homocicl":0.25,"homosexual":0.25,"homoterm":0.25,"honradez":0.25,"huer":0.25,"humanic":0.25,"hum":0.25,"humidific":0.25,"hyphantr":0.25,"hytrin":0.25,"hipic":0.25,"iconfund":0.25,"iconoscop":0.25,"idealist":0.25,"idiom":0.25,"imag":0.25,"impenitent":0.25,"imperm":0.25,"impermeabilic":0.25,"implant":0.25,"implor":0.25,"impolut":0.25,"in":0.25,"inapel":0.25,"inbu":0.25,"incest":0.25,"incident":0.25,"inconclus":0.25,"incondicional":0.25,"incont":0.25,"incontrovert":0.25,"incorrupt":0.25,"inculc":0.25,"indefect":0.25,"independient":0.25,"induc":0.25,"ineduc":0.25,"infalibil":0.25,"infint":0.25,"inflacion":0.25,"influ":0.25,"infrarroj":0.25,"infructuos":0.25,"inic":0.25,"inmemor":0.25,"inmencion":0.25,"inmensur":0.25,"inmodest":0.25,"inmovilist":0.25,"innombr":0.25,"innumer":0.25,"inpronunc":0.25,"instig":0.25,"insurrect":0.25,"inteligibil":0.25,"intemper":0.25,"interactu":0.25,"intercal":0.25,"interdependient":0.25,"interdisciplinar":0.25,"interrelacion":0.25,"intersec":0.25,"intersect":0.25,"introductor":0.25,"intrinsec":0.25,"intuicion":0.25,"inund":0.25,"invit":0.25,"ionosf":0.25,"ipom":0.25,"isocicl":0.25,"isoniac":0.25,"isoscel":0.25,"italohabl":0.25,"izquierd":0.25,"jacob":0.25,"jasp":0.25,"jingoist":0.25,"jorg":0.25,"jorn":0.25,"judicial":0.25,"jud":0.25,"justif":0.25,"juvenil":0.25,"koinon":0.25,"laic":0.25,"laicism":0.25,"lampyrida":0.25,"lan":0.25,"lanceol":0.25,"lanugin":0.25,"largec":0.25,"larguiruch":0.25,"larv":0.25,"lay":0.25,"legalic":0.25,"legat":0.25,"lenit":-0.25,"leon":0.25,"lesbian":0.25,"letrer":0.25,"levant":0.25,"leibl":0.25,"libert":0.25,"libr":-0.25,"librecamb":0.25,"licantrop":-0.25,"licitud":0.25,"lig":-0.25,"ligot":0.25,"limnolog":0.25,"limon":0.25,"limpiec":0.25,"limitrof":0.25,"linder":0.25,"lineback":0.25,"liofilic":0.25,"liquescent":0.25,"llanec":0.25,"lluec":0.25,"localic":0.25,"locuaz":0.25,"lucidez":0.25,"lustr":0.25,"labil":0.25,"lesbic":0.25,"machist":0.25,"macroscop":0.25,"macron":0.25,"madr":0.25,"maestrazg":0.25,"magnet":0.25,"mahayan":0.25,"maitr":0.25,"malentend":0.25,"manag":0.25,"mandarin":0.25,"manguit":0.25,"mansedumbr":0.25,"mansion":0.25,"mansuetud":0.25,"manumit":0.25,"maquet":0.25,"marginal":0.25,"marketing":0.25,"marmol":0.25,"marraj":0.25,"marran":0.25,"masaj":0.25,"masculin":0.25,"masturb":0.25,"mat":-0.25,"mataten":0.25,"materialic":0.25,"matin":0.25,"matrilineal":0.25,"matrimon":0.25,"mayuscul":0.25,"median":0.25,"melfal":0.25,"mercad":0.25,"mercenar":0.25,"merchandising":0.25,"merod":0.25,"mesofit":0.25,"mesofil":0.25,"metacarp":0.25,"metaconoc":0.25,"metafis":0.25,"metafor":0.25,"meteor":0.25,"metonim":0.25,"metotrexat":0.25,"metronom":0.25,"mezuc":0.25,"miasmat":0.25,"microfotometr":0.25,"mient":0.25,"militaric":0.25,"mim":0.25,"mimetic":0.25,"min":-0.25,"miofibrill":0.25,"miradit":0.25,"mistic":0.25,"mistific":0.25,"mitologist":0.25,"mitolog":0.25,"moderant":0.25,"moderat":0.25,"modic":0.25,"modorr":0.25,"monosilab":0.25,"monot":0.25,"monsenor":0.25,"mordac":0.25,"morganat":0.25,"mortinat":0.25,"motet":0.25,"motil":0.25,"motric":0.25,"mostr":0.25,"mujeril":0.25,"mull":0.25,"multiracial":0.25,"multius":0.25,"mundan":0.25,"munificent":0.25,"munificient":0.25,"munif":0.25,"mutabl":0.25,"mutant":0.25,"machmetr":0.25,"mist":0.25,"nacient":0.25,"nadad":0.25,"naltrexon":0.25,"narcisist":0.25,"narcotic":0.25,"nasion":0.25,"naturist":0.25,"neanthertal":0.25,"nebrin":0.25,"nec":0.25,"neg":-0.25,"negroid":0.25,"nemotecn":0.25,"neoclasic":0.25,"neostigmin":0.25,"neurobiolog":0.25,"neurolept":0.25,"ninful":0.25,"niqu":0.25,"nitrific":0.25,"nom":0.25,"nomin":0.25,"nostalg":0.25,"nubl":0.25,"nudist":0.25,"nuev":0.25,"nutricionist":0.25,"nutriment":0.25,"obelion":0.25,"objetific":0.25,"obstructor":0.25,"ocean":0.25,"oclus":0.25,"octosilab":0.25,"ocup":0.25,"ocurr":0.25,"offset":0.25,"oficinist":0.25,"ofrend":0.25,"ojiazul":0.25,"ojo":0.25,"olvid":-0.25,"ombr":0.25,"omnipresent":0.25,"omniscient":0.25,"opalin":0.25,"operacional":0.25,"opistognat":0.25,"opuscul":0.25,"orant":0.25,"ordenancist":0.25,"orejer":0.25,"organic":-0.25,"orgasm":0.25,"ornament":0.25,"ornamental":0.25,"ornamentalist":0.25,"orto":0.25,"osad":0.25,"oscil":0.25,"oscilator":0.25,"ostens":0.25,"osteopat":0.25,"ostracoderm":0.25,"oxifenbutazon":0.25,"pacient":0.25,"pagod":0.25,"paleoantropolog":0.25,"palpabl":0.25,"panecill":0.25,"panzud":0.25,"papelon":0.25,"paprik":0.25,"paraj":0.25,"pard":0.25,"paripin":0.25,"parod":0.25,"partid":0.25,"passer":0.25,"patilarg":0.25,"patolog":0.25,"patrilineal":0.25,"patrocin":0.25,"patronal":0.25,"patrullaj":0.25,"patrull":0.25,"paulatin":0.25,"pedant":0.25,"pedestal":0.25,"pediatr":0.25,"pedicur":0.25,"pellej":0.25,"pensabl":0.25,"pens":0.25,"pentasilab":0.25,"pequenit":0.25,"perciform":0.25,"perdur":0.25,"peregrinaj":0.25,"perihel":0.25,"permeabl":0.25,"personalic":0.25,"perspicac":0.25,"persuasiv":0.25,"pesad":0.25,"petrolifer":0.25,"pezophap":0.25,"phthiriu":0.25,"phthiru":0.25,"picogord":0.25,"pictograf":0.25,"pilot":0.25,"pimpon":0.25,"pin":0.25,"pinzon":0.25,"pirop":0.25,"piroxicam":0.25,"plan":0.25,"planariida":0.25,"plancton":0.25,"plant":-0.25,"plat":0.25,"plebey":0.25,"poder":0.25,"podolog":0.25,"polar":0.25,"polisilab":0.25,"polisindeton":0.25,"poltron":0.25,"popov":0.25,"populist":0.25,"porcelan":0.25,"pormenor":0.25,"portent":-0.25,"posibl":0.25,"posmodern":0.25,"postoperator":0.25,"postor":0.25,"postrat":0.25,"precint":0.25,"precipit":0.25,"precognicion":0.25,"precoz":0.25,"predec":0.25,"predestin":0.25,"predetermin":0.25,"prednisolon":0.25,"preestren":0.25,"preguerr":0.25,"prenatal":0.25,"prensil":0.25,"preorden":0.25,"prescindent":0.25,"prestatar":0.25,"prestec":0.25,"prevent":0.25,"probabil":0.25,"probid":0.25,"proclam":0.25,"procrastin":0.25,"profesional":0.25,"prolij":-0.25,"promulg":0.25,"pronacion":0.25,"propension":0.25,"prop":0.25,"propiocepcion":0.25,"proselit":0.25,"prospect":0.25,"prostitu":0.25,"protanop":0.25,"proteic":0.25,"protogeometr":0.25,"prototip":0.25,"proverb":0.25,"proxem":0.25,"pseudohermafrodit":0.25,"psicoact":0.25,"puertaventan":0.25,"pulidez":0.25,"puliment":0.25,"pulverulent":0.25,"puritan":0.25,"puzzl":0.25,"parp":0.25,"quark":0.25,"querubin":0.25,"quid":0.25,"quidid":0.25,"quinacrin":0.25,"quinceaner":0.25,"quinidin":0.25,"quitapiedr":0.25,"racim":0.25,"racionalic":0.25,"radiact":0.25,"radioact":0.25,"ragtim":0.25,"ramos":0.25,"rastafarian":0.25,"reaccionar":0.25,"readmision":0.25,"reafirm":0.25,"reajust":0.25,"realpolitik":0.25,"reargument":0.25,"reblandec":0.25,"recabl":0.25,"recalent":0.25,"recauchut":0.25,"recepcion":0.25,"recept":0.25,"rechonchez":0.25,"recient":0.25,"reclu":0.25,"recompens":0.25,"recompon":0.25,"recort":0.25,"recus":-0.25,"reciproc":0.25,"reencarn":0.25,"reencauch":0.25,"reencuadern":0.25,"reensambl":0.25,"refaccion":0.25,"reflexolog":0.25,"refract":0.25,"refringent":0.25,"refr":0.25,"regal":0.25,"reharmonic":0.25,"relacion":0.25,"relev":0.25,"relinch":0.25,"reloj":0.25,"relumbr":0.25,"remanent":0.25,"remat":0.25,"remolc":0.25,"rent":0.25,"repart":0.25,"repens":0.25,"replant":0.25,"reposabrac":0.25,"rep":0.25,"resbaladic":0.25,"resbal":0.25,"rescind":0.25,"resident":0.25,"residual":0.25,"respect":-0.25,"restall":0.25,"restring":0.25,"retard":0.25,"retoc":0.25,"retroact":0.25,"retumb":0.25,"reversibil":0.25,"revis":0.25,"riad":0.25,"ribavirin":0.25,"ricur":0.25,"rif":0.25,"rinoplast":0.25,"rit":0.25,"ritual":0.25,"ritualist":0.25,"rogativ":0.25,"rojic":0.25,"rol":0.25,"rolet":0.25,"rompehiel":0.25,"rondall":0.25,"ronron":0.25,"rudiment":0.25,"rueg":0.25,"ruidos":0.25,"rutil":0.25,"saboric":0.25,"sabrosur":0.25,"sacramental":0.25,"salaz":0.25,"salvacion":0.25,"sancion":0.25,"santid":0.25,"santoral":0.25,"saudad":0.25,"saur":0.25,"secuencial":0.25,"secular":0.25,"sedat":0.25,"semicircul":0.25,"semicomat":0.25,"semiconscient":0.25,"semicualific":0.25,"semiempir":0.25,"semiformal":0.25,"semioficial":0.25,"semiproces":0.25,"semitransparent":0.25,"sensibilic":0.25,"sentimental":0.25,"serpentin":0.25,"sertralin":0.25,"serv":0.25,"servomecan":0.25,"sesquipedal":0.25,"sett":0.25,"seudohermafrodit":0.25,"sexist":0.25,"signatar":0.25,"significat":0.25,"simbiot":0.25,"sinclinal":0.25,"sincron":0.25,"sincronic":0.25,"sinfonic":0.25,"sintonic":0.25,"sinusoidal":0.25,"sird":0.25,"sitcom":0.25,"situ":0.25,"soberan":0.25,"sobrecalent":0.25,"sobreexposicion":0.25,"sobreprotector":0.25,"sobrepuest":0.25,"socialit":0.25,"sociobiolog":0.25,"sociolinguist":0.25,"sold":0.25,"solubl":0.25,"sombros":0.25,"somnolent":0.25,"somnolient":0.25,"somnifer":0.25,"sonet":0.25,"sopap":0.25,"sorprend":-0.25,"sonador":0.25,"sonolent":0.25,"sprechgesang":0.25,"staret":0.25,"stent":0.25,"suavic":0.25,"subcontinent":0.25,"subcultur":0.25,"sublev":0.25,"subsid":0.25,"subvencion":0.25,"sudism":0.25,"sufrag":0.25,"sujetalibr":0.25,"sulfam":0.25,"sumator":0.25,"suministr":0.25,"suntuar":0.25,"superdot":0.25,"supergig":0.25,"supervisor":0.25,"suplent":0.25,"supremac":0.25,"supres":0.25,"suscrib":0.25,"suscripcion":0.25,"sustant":0.25,"swam":0.25,"swing":0.25,"safic":0.25,"sanscrit":0.25,"sep":0.25,"sequit":0.25,"sinfit":0.25,"solid":0.25,"subit":0.25,"tachuel":0.25,"tangibil":0.25,"tangibl":0.25,"tap":0.25,"tasaj":0.25,"taxonom":0.25,"tejemanej":0.25,"tej":0.25,"telecomed":0.25,"telefonac":0.25,"teletransport":0.25,"temperamental":0.25,"tendencios":0.25,"teosof":0.25,"terap":0.25,"terazosin":0.25,"terciopel":0.25,"termoplast":0.25,"territorial":0.25,"tesin":0.25,"tir":0.25,"tocoferol":0.25,"tod":0.25,"tolazam":0.25,"tonsur":0.25,"tract":0.25,"tragicomed":0.25,"tragicom":0.25,"tramit":0.25,"trampantoj":0.25,"transfer":0.25,"transimis":0.25,"transistor":0.25,"transitivic":0.25,"transmundan":0.25,"transparent":0.25,"transplacentar":0.25,"transvas":0.25,"trascendent":0.25,"trasmundan":0.25,"travest":0.25,"triclormetiac":0.25,"tricot":0.25,"trident":0.25,"tridimensional":0.25,"trifor":0.25,"trilobit":0.25,"triquion":0.25,"tritanop":0.25,"trogon":0.25,"truc":-0.25,"truec":0.25,"trust":0.25,"triplic":0.25,"tripod":0.25,"tup":0.25,"turn":0.25,"timpan":0.25,"titer":0.25,"ubicu":0.25,"ultraconserv":0.25,"ultraderechist":0.25,"ultraviolet":0.25,"umbros":0.25,"urrac":0.25,"usufruct":0.25,"utricul":0.25,"vagar":0.25,"vah":0.25,"vaiv":0.25,"vampir":0.25,"vaporic":0.25,"vecin":0.25,"vellud":0.25,"venial":0.25,"ventanill":0.25,"ventrud":0.25,"verbos":0.25,"verdec":0.25,"verosimilitud":0.25,"ver":0.25,"vespertilion":0.25,"vez":0.25,"viaj":0.25,"vincul":0.25,"vindic":-0.25,"vitalist":0.25,"vivient":0.25,"vocalic":0.25,"volant":0.25,"volatilic":0.25,"volquet":0.25,"voyer":0.25,"voyeur":0.25,"vulcanic":0.25,"vagil":0.25,"weller":0.25,"wic":0.25,"wicc":0.25,"xerograf":0.25,"yagi":0.25,"yeti":0.25,"yod":0.25,"yuxtapuest":0.25,"zanquilarg":0.25,"zooid":0.25,"zur":0.25,"zafir":0.25,"acim":0.25,"azim":0.25,"abduc":-0.25,"aberr":-0.25,"abrir":-0.25,"abogaduch":-0.25,"abras":-0.25,"abrigader":-0.25,"absolutist":-0.25,"abult":-0.25,"abyeccion":-0.25,"acatex":-0.25,"accident":-0.25,"aceit":-0.25,"acetaminofen":-0.25,"aclorhidr":-0.25,"acobard":-0.25,"acomet":-0.25,"acondrit":-0.25,"acondroplast":-0.25,"acorral":-0.25,"acort":-0.25,"acrilam":-0.25,"acroanestes":-0.25,"acrofob":-0.25,"actinomicot":-0.25,"acufen":-0.25,"acusacion":-0.25,"acus":-0.25,"adormil":-0.25,"adormit":-0.25,"aeroembol":-0.25,"aestes":-0.25,"aethus":-0.25,"aferent":-0.25,"affenpinsch":-0.25,"afta":-0.25,"agar":-0.25,"agitprop":-0.25,"agorafob":-0.25,"agrest":-0.25,"agris":-0.25,"aguijon":-0.25,"aherrumbr":-0.25,"ahogader":-0.25,"ailurofob":-0.25,"ajustic":-0.25,"albayald":-0.25,"albin":-0.25,"aleatoried":-0.25,"aleatoric":-0.25,"algolagn":-0.25,"alzavalvul":-0.25,"amargor":-0.25,"amauros":-0.25,"amaurot":-0.25,"ambientalist":-0.25,"amenorr":-0.25,"amigdalin":-0.25,"amiodaron":-0.25,"amnest":-0.25,"amonit":-0.25,"amorf":-0.25,"ametrop":-0.25,"anacant":-0.25,"anafrodis":-0.25,"anaplas":-0.25,"anaplast":-0.25,"anastomu":-0.25,"andraj":-0.25,"androfob":-0.25,"angiopat":-0.25,"angioplast":-0.25,"angurr":-0.25,"anhidros":-0.25,"aniebl":-0.25,"anion":-0.25,"anop":-0.25,"anorex":-0.25,"anosmat":-0.25,"anovul":-0.25,"anoxem":-0.25,"anox":-0.25,"anteoj":-0.25,"anthonomu":-0.25,"antideport":-0.25,"antimacas":-0.25,"antipiret":-0.25,"antisemit":-0.25,"antisocial":-0.25,"antisubmarin":-0.25,"antro":-0.25,"anures":-0.25,"anur":-0.25,"anomal":-0.25,"aoj":-0.25,"apag":-0.25,"apartader":-0.25,"apetec":-0.25,"apetent":-0.25,"apogam":-0.25,"apol":-0.25,"apoptos":-0.25,"aporr":-0.25,"apostat":-0.25,"apres":-0.25,"aquiescent":-0.25,"aracnofob":-0.25,"arador":-0.25,"arar":-0.25,"arbust":-0.25,"arcoir":-0.25,"arginin":-0.25,"aristoloquial":-0.25,"armerol":-0.25,"arrapiec":-0.25,"arrellan":-0.25,"arremet":-0.25,"arrest":-0.25,"arrian":-0.25,"arri":-0.25,"arter":-0.25,"artrit":-0.25,"artroscop":-0.25,"asafet":-0.25,"ascid":-0.25,"ascit":-0.25,"asexual":-0.25,"asindet":-0.25,"asir":-0.25,"asma":-0.25,"asno":-0.25,"asperec":-0.25,"atan":-0.25,"atelectas":-0.25,"atencional":-0.25,"ates":-0.25,"atirant":-0.25,"atisbader":-0.25,"atribul":-0.25,"atron":-0.25,"atropell":-0.25,"audac":-0.25,"ausent":-0.25,"autism":-0.25,"autoconserv":-0.25,"autodegrad":-0.25,"autodisciplin":-0.25,"automortif":-0.25,"autopreserv":-0.25,"autotom":-0.25,"autocrat":-0.25,"avitaminos":-0.25,"azidotimidin":-0.25,"anor":-0.25,"babel":-0.25,"babirus":-0.25,"bagel":-0.25,"baj":-0.25,"balist":-0.25,"bambol":-0.25,"barrill":-0.25,"basalt":-0.25,"batiborrill":-0.25,"batin":-0.25,"bauhin":-0.25,"banador":-0.25,"behaviorist":-0.25,"belicos":-0.25,"belitr":-0.25,"beril":-0.25,"bicoc":-0.25,"biorremed":-0.25,"bioterror":-0.25,"biotit":-0.25,"bisbis":-0.25,"bizc":-0.25,"blandeng":-0.25,"blus":-0.25,"body":-0.25,"bof":-0.25,"bogeym":-0.25,"bolon":-0.25,"bombard":-0.25,"bombin":-0.25,"borrel":-0.25,"bos":-0.25,"boscaj":-0.25,"botij":-0.25,"botul":-0.25,"box":-0.25,"brachysteg":-0.25,"bradicard":-0.25,"braquial":-0.25,"braquiur":-0.25,"bravucon":-0.25,"bre":-0.25,"brez":-0.25,"bren":-0.25,"bris":-0.25,"bronqued":-0.25,"broz":-0.25,"bruj":-0.25,"bruxism":-0.25,"bruz":-0.25,"bubon":-0.25,"bufet":-0.25,"bulb":-0.25,"bumerang":-0.25,"burd":-0.25,"burk":-0.25,"bur":-0.25,"buscapleit":-0.25,"buscav":-0.25,"bust":-0.25,"butir":-0.25,"bum":-0.25,"cabezadill":-0.25,"cacharr":-0.25,"cadav":-0.25,"cafeinoman":-0.25,"cafein":-0.25,"caft":-0.25,"cajon":-0.25,"calum":-0.25,"camandul":-0.25,"camill":-0.25,"camis":-0.25,"camisol":-0.25,"camp":-0.25,"campilotrop":-0.25,"canij":-0.25,"canill":-0.25,"cao":-0.25,"caper":-0.25,"caquet":-0.25,"carapach":-0.25,"carbunc":-0.25,"carceler":-0.25,"carcinoid":-0.25,"cardamin":-0.25,"carenc":-0.25,"caret":-0.25,"carmelit":-0.25,"carn":-0.25,"carnezuel":-0.25,"carrasp":-0.25,"carreton":-0.25,"carroc":-0.25,"cartilagin":-0.25,"cartuj":-0.25,"casanov":-0.25,"casc":-0.25,"casquivan":-0.25,"cassiop":-0.25,"casull":-0.25,"catacald":-0.25,"catet":-0.25,"cazabombarder":-0.25,"cazatorpeder":-0.25,"caer":-0.25,"ceborrinch":-0.25,"cefotaxim":-0.25,"ceftriaxon":-0.25,"celind":-0.25,"censor":-0.25,"centrosperm":-0.25,"cerapteryx":-0.25,"cerc":-0.25,"cercosporell":-0.25,"chac":-0.25,"chaladur":-0.25,"chamarasc":-0.25,"chancros":-0.25,"changarr":-0.25,"chaparral":-0.25,"charlatan":-0.25,"chec":-0.25,"cheviot":-0.25,"chev":-0.25,"chichon":-0.25,"chicor":-0.25,"chifladur":-0.25,"chil":-0.25,"chilindrin":-0.25,"choric":-0.25,"chorrec":-0.25,"chupopter":-0.25,"cham":-0.25,"cicadofit":-0.25,"cicat":-0.25,"ceg":-0.25,"cien":-0.25,"cimarr":-0.25,"cimbr":-0.25,"cinemat":-0.25,"circul":-0.25,"circunst":-0.25,"cirros":-0.25,"cistoplej":-0.25,"claustrofob":-0.25,"clinch":-0.25,"clinodactil":-0.25,"cobalt":-0.25,"coccidioidomicos":-0.25,"coccidioidos":-0.25,"cocculu":-0.25,"coc":-0.25,"coenzim":-0.25,"cogotac":-0.25,"colaboracionist":-0.25,"colifat":-0.25,"colonic":-0.25,"comb":-0.25,"combatient":-0.25,"combustion":-0.25,"commut":-0.25,"compar":-0.25,"competidor":-0.25,"concern":-0.25,"concertin":-0.25,"concluyent":-0.25,"concusion":-0.25,"conejal":-0.25,"conej":-0.25,"conflagr":-0.25,"confrontacional":-0.25,"confut":-0.25,"congel":-0.25,"conminator":-0.25,"conservacionist":-0.25,"conspir":-0.25,"contraalmir":-0.25,"contrainteligent":-0.25,"contralmir":-0.25,"contraproducent":-0.25,"contrinc":-0.25,"controvers":-0.25,"cook":-0.25,"copi":-0.25,"copt":-0.25,"coraj":-0.25,"corbat":-0.25,"corindon":-0.25,"corpach":-0.25,"corromp":-0.25,"cortavient":-0.25,"cotarr":-0.25,"cres":-0.25,"crescent":-0.25,"criminolog":-0.25,"criofob":-0.25,"criogen":-0.25,"criopat":-0.25,"criptogram":-0.25,"cromatograf":-0.25,"cromoestes":-0.25,"crucial":-0.25,"cuarcit":-0.25,"cuartac":-0.25,"cuart":-0.25,"cuchich":-0.25,"cuelgacap":-0.25,"culi":-0.25,"curr":-0.25,"currusc":-0.25,"cefir":-0.25,"colic":-0.25,"deces":-0.25,"defector":-0.25,"defend":-0.25,"defervescent":-0.25,"defor":-0.25,"degoll":-0.25,"dej":-0.25,"delgad":-0.25,"demon":-0.25,"demerit":-0.25,"dendrit":-0.25,"dendroctonu":-0.25,"denunciator":-0.25,"deport":-0.25,"dermatofitos":-0.25,"dermatomiosit":-0.25,"derroch":-0.25,"derru":-0.25,"desabor":-0.25,"desaboton":-0.25,"desacord":-0.25,"desafor":-0.25,"desahuc":-0.25,"desalm":-0.25,"desangr":-0.25,"desarregl":-0.25,"desatin":-0.25,"desboc":-0.25,"desbrid":-0.25,"descabell":-0.25,"descalc":-0.25,"descendent":-0.25,"descerebr":-0.25,"descerraj":-0.25,"descoc":-0.25,"descol":-0.25,"descord":-0.25,"descruc":-0.25,"desenred":-0.25,"desenvuelt":-0.25,"desescal":-0.25,"desgaj":-0.25,"desgast":-0.25,"desgrap":-0.25,"desgren":-0.25,"deshauc":-0.25,"desideratum":-0.25,"deslustr":-0.25,"desmelen":-0.25,"desmemor":-0.25,"desment":-0.25,"desmerec":-0.25,"desmotiv":-0.25,"desodor":-0.25,"despein":-0.25,"despellej":-0.25,"despoj":-0.25,"desproteg":-0.25,"destap":-0.25,"desvaloric":-0.25,"desverguenc":-0.25,"dhot":-0.25,"diablill":-0.25,"diarr":-0.25,"dicranal":-0.25,"difraccion":-0.25,"diltiazem":-0.25,"dilu":-0.25,"dinamit":-0.25,"ding":-0.25,"dipsn":-0.25,"dipsoman":-0.25,"dipsosauru":-0.25,"discapacit":-0.25,"disconfor":-0.25,"disfem":-0.25,"disfuerc":-0.25,"disloc":-0.25,"dislex":-0.25,"disn":-0.25,"disolut":-0.25,"dispeps":-0.25,"displas":-0.25,"dispn":-0.25,"distend":-0.25,"distim":-0.25,"distorsion":-0.25,"diverticulit":-0.25,"domador":-0.25,"dorm":-0.25,"dribl":-0.25,"dubit":-0.25,"delfic":-0.25,"ebonit":-0.25,"ecologist":-0.25,"ectrodactil":-0.25,"edent":-0.25,"embot":-0.25,"embol":-0.25,"empach":-0.25,"encamis":-0.25,"encanec":-0.25,"enchaquet":-0.25,"encontr":-0.25,"encostr":-0.25,"endeblez":-0.25,"endemon":-0.25,"endios":-0.25,"endocarp":-0.25,"enferm":-0.25,"engatus":-0.25,"engom":-0.25,"engrisec":-0.25,"enhollin":-0.25,"enojadic":-0.25,"enronquec":-0.25,"ensegu":-0.25,"ensordecedor":-0.25,"ensordec":-0.25,"enteric":-0.25,"entolom":-0.25,"entomofob":-0.25,"entrecot":-0.25,"entrec":-0.25,"entremet":-0.25,"enturb":-0.25,"envenen":-0.25,"envilecedor":-0.25,"epidemiolog":-0.25,"epilept":-0.25,"escabros":-0.25,"escafandr":-0.25,"escandalic":-0.25,"escaparss":-0.25,"escap":-0.25,"escapular":-0.25,"escarabaj":-0.25,"escarnec":-0.25,"escatolog":-0.25,"escor":-0.25,"escorial":-0.25,"escuadron":-0.25,"escud":-0.25,"escandal":-0.25,"esferocarpal":-0.25,"esmeril":-0.25,"esnob":-0.25,"esparadrap":-0.25,"espinill":-0.25,"espir":-0.25,"espirit":-0.25,"espiritist":-0.25,"espiritualist":-0.25,"espontan":-0.25,"espru":-0.25,"esquibob":-0.25,"esquirol":-0.25,"esquirolaj":-0.25,"esquivez":-0.25,"esquizoid":-0.25,"estacionar":-0.25,"estafilococ":-0.25,"estigmatic":-0.25,"estol":-0.25,"estrab":-0.25,"estreg":-0.25,"estren":-0.25,"estrucioniform":-0.25,"estupidec":-0.25,"estupidez":-0.25,"eurylaimida":-0.25,"eutanas":-0.25,"eutrofic":-0.25,"evacu":-0.25,"evasion":-0.25,"exantem":-0.25,"exculpator":-0.25,"exhort":-0.25,"exorc":-0.25,"expiator":-0.25,"extralinguist":-0.25,"extran":-0.25,"faciner":-0.25,"facocher":-0.25,"fad":-0.25,"falconifor":-0.25,"fallec":-0.25,"fantasmagor":-0.25,"fars":-0.25,"febrifug":-0.25,"fenestral":-0.25,"fibrinolis":-0.25,"fier":-0.25,"fij":-0.25,"filicid":-0.25,"fimos":-0.25,"fisical":-0.25,"fisostigm":-0.25,"flec":-0.25,"floj":-0.25,"flojed":-0.25,"florest":-0.25,"fluctu":-0.25,"folclor":-0.25,"folklor":-0.25,"folloner":-0.25,"fosfor":-0.25,"foxtrot":-0.25,"franciscan":-0.25,"frangoll":-0.25,"frangollon":-0.25,"franj":-0.25,"frenes":-0.25,"frescor":-0.25,"frigorif":-0.25,"fringillida":-0.25,"frivol":-0.25,"frufru":-0.25,"frig":-0.25,"ser":-0.25,"fugac":-0.25,"funeral":-0.25,"funerar":-0.25,"futil":-0.25,"farrag":-0.25,"fisicoterapeut":-0.25,"galactosem":-0.25,"gallumb":-0.25,"galvanic":-0.25,"gammaglobulin":-0.25,"gandul":-0.25,"gangster":-0.25,"ganzu":-0.25,"garranchuel":-0.25,"gastrit":-0.25,"gaviot":-0.25,"gavion":-0.25,"gaznapir":-0.25,"gan":-0.25,"gegenschein":-0.25,"gemel":-0.25,"gem":-0.25,"general":-0.25,"gilbert":-0.25,"glitch":-0.25,"gliptic":-0.25,"gonorr":-0.25,"gordian":-0.25,"gordinflon":-0.25,"gordit":-0.25,"gorgu":-0.25,"gorjal":-0.25,"grimor":-0.25,"gris":-0.25,"grisos":-0.25,"grisac":-0.25,"groc":-0.25,"grull":-0.25,"grung":-0.25,"guardafren":-0.25,"guard":-0.25,"guasab":-0.25,"guil":-0.25,"guilladur":-0.25,"guinap":-0.25,"gurip":-0.25,"gustat":-0.25,"gustator":-0.25,"gangst":-0.25,"ganst":-0.25,"haiku":-0.25,"hall":-0.25,"hamart":-0.25,"harap":-0.25,"harp":-0.25,"hauberk":-0.25,"hebefren":-0.25,"hematur":-0.25,"hemiplej":-0.25,"hemion":-0.25,"hemoptis":-0.25,"hereder":-0.25,"herrader":-0.25,"hibr":-0.25,"hidrocefal":-0.25,"hidrocel":-0.25,"hidroxicin":-0.25,"himenomicet":-0.25,"hiperacus":-0.25,"hiperinsulin":-0.25,"hiperon":-0.25,"hipogammaglobulinem":-0.25,"hipogonad":-0.25,"hipopotasem":-0.25,"hiyab":-0.25,"holg":-0.25,"holgac":-0.25,"hollin":-0.25,"hor":-0.25,"horriric":-0.25,"horticol":-0.25,"huelg":-0.25,"ictal":-0.25,"ignifug":-0.25,"ilegibil":-0.25,"ilimit":-0.25,"immunic":-0.25,"impact":-0.25,"impenetr":-0.25,"imper":-0.25,"impertinent":-0.25,"imponibil":-0.25,"impopul":-0.25,"impos":-0.25,"impostor":-0.25,"impractic":-0.25,"impresent":-0.25,"imprevist":-0.25,"improduct":-0.25,"inabord":-0.25,"inaccesibil":-0.25,"inadmisibil":-0.25,"incapacit":-0.25,"incend":-0.25,"incendiar":-0.25,"incertitud":-0.25,"incoherent":-0.25,"incomprend":-0.25,"inconcrecion":-0.25,"incursion":-0.25,"indecis":-0.25,"indefinicion":-0.25,"indelimit":-0.25,"indetermin":-0.25,"indigestion":-0.25,"indiscut":-0.25,"indomest":-0.25,"indument":-0.25,"indomit":-0.25,"inelegibil":-0.25,"iner":-0.25,"inest":-0.25,"inextingu":-0.25,"inextirp":-0.25,"infanticid":-0.25,"infinit":-0.25,"inflad":-0.25,"infor":-0.25,"infraviviend":-0.25,"infund":-0.25,"inharmon":-0.25,"inhib":-0.25,"inhum":-0.25,"injust":-0.25,"inmanej":-0.25,"inmarces":-0.25,"inmigr":-0.25,"inmoder":-0.25,"inmoral":-0.25,"inmud":-0.25,"inmundic":-0.25,"inmunitar":-0.25,"inocenton":-0.25,"inocul":-0.25,"inodor":-0.25,"inositol":-0.25,"inpalp":-0.25,"inprocedent":-0.25,"inquisicion":-0.25,"inquisit":-0.25,"insalubr":-0.25,"insan":-0.25,"insatisfactor":-0.25,"insectic":-0.25,"inserv":-0.25,"insign":-0.25,"insinc":-0.25,"insurgent":-0.25,"insip":-0.25,"insolit":-0.25,"intens":-0.25,"interferent":-0.25,"interin":-0.25,"interuniversitar":-0.25,"intox":-0.25,"intraduc":-0.25,"intranquilic":-0.25,"invencibil":-0.25,"inviabil":-0.25,"inviabl":-0.25,"invisibil":-0.25,"inedit":-0.25,"irrealic":-0.25,"irredim":-0.25,"irrelig":-0.25,"irresolubl":-0.25,"irresolut":-0.25,"irreversibil":-0.25,"itraconazol":-0.25,"jacarand":-0.25,"jaquec":-0.25,"jarret":-0.25,"jean":-0.25,"jihad":-0.25,"jorguin":-0.25,"jubon":-0.25,"juncos":-0.25,"justicier":-0.25,"justill":-0.25,"kaon":-0.25,"kart":-0.25,"kiang":-0.25,"kimon":-0.25,"kleenex":-0.25,"lacer":-0.25,"ladron":-0.25,"lambdac":-0.25,"lapid":-0.25,"larvic":-0.25,"laterit":-0.25,"latitud":-0.25,"latrodectu":-0.25,"laureol":-0.25,"lederhos":-0.25,"legionell":-0.25,"leontin":-0.25,"leptosp":-0.25,"lesion":-0.25,"leucem":-0.25,"leucoencefalit":-0.25,"libertin":-0.25,"lid":-0.25,"lidi":-0.25,"lignific":-0.25,"liguer":-0.25,"ligon":-0.25,"limenit":-0.25,"lim":-0.25,"linfadenom":-0.25,"linfogranulom":-0.25,"lingualumin":-0.25,"lis":-0.25,"listerios":-0.25,"llamamient":-0.25,"llevader":-0.25,"lobreguez":-0.25,"locuel":-0.25,"locur":-0.25,"lodazal":-0.25,"luch":-0.25,"ludibr":-0.25,"luminiscent":-0.25,"lumpemproletar":-0.25,"lycopodial":-0.25,"lupul":-0.25,"mach":-0.25,"mafios":-0.25,"magisterial":-0.25,"magistratur":-0.25,"magull":-0.25,"malandrin":-0.25,"malaprop":-0.25,"malcr":-0.25,"maldec":-0.25,"maldicient":-0.25,"malnutricion":-0.25,"malvad":-0.25,"malvers":-0.25,"malw":-0.25,"mamotret":-0.25,"mamporr":-0.25,"mancill":-0.25,"mand":-0.25,"manganes":-0.25,"mangu":-0.25,"manot":-0.25,"manotac":-0.25,"mantill":-0.25,"manton":-0.25,"marattial":-0.25,"marc":-0.25,"marsal":-0.25,"masacr":-0.25,"masc":-0.25,"mascar":-0.25,"mascull":-0.25,"mataperr":-0.25,"matarrat":-0.25,"maul":-0.25,"mazmorr":-0.25,"mecanograf":-0.25,"medioambientalist":-0.25,"melan":-0.25,"melanos":-0.25,"melindr":-0.25,"mendaz":-0.25,"mendig":-0.25,"mening":-0.25,"meningit":-0.25,"mercadill":-0.25,"mes":-0.25,"metaleps":-0.25,"metan":-0.25,"metanol":-0.25,"metijon":-0.25,"meyot":-0.25,"miasten":-0.25,"micronutrient":-0.25,"microond":-0.25,"mielatel":-0.25,"migran":-0.25,"militant":-0.25,"millett":-0.25,"mini":-0.25,"minimot":-0.25,"miny":-0.25,"mirl":-0.25,"mirmecofag":-0.25,"mixomatos":-0.25,"moblaj":-0.25,"moc":-0.25,"mod":-0.25,"mof":-0.25,"monar":-0.25,"mongol":-0.25,"mongoloid":-0.25,"monoaural":-0.25,"montecill":-0.25,"moron":-0.25,"mortuor":-0.25,"mot":-0.25,"motin":-0.25,"mov":-0.25,"mucos":-0.25,"mucu":-0.25,"mudez":-0.25,"mueblaj":-0.25,"mugr":-0.25,"mugrient":-0.25,"mujerieg":-0.25,"mural":-0.25,"murmull":-0.25,"murrin":-0.25,"musit":-0.25,"musl":-0.25,"must":-0.25,"mart":-0.25,"narc":-0.25,"narcoleps":-0.25,"narcolept":-0.25,"narcotraf":-0.25,"necrofil":-0.25,"necrom":-0.25,"necroman":-0.25,"necros":-0.25,"necrot":-0.25,"neglig":-0.25,"negruc":-0.25,"neolengu":-0.25,"nerit":-0.25,"neurofibromatos":-0.25,"neurotox":-0.25,"neutral":-0.25,"nev":-0.25,"nevu":-0.25,"nick":-0.25,"nictur":-0.25,"nigrom":-0.25,"nigromant":-0.25,"nihil":-0.25,"nihilist":-0.25,"nirvan":-0.25,"nitrobencen":-0.25,"nocturn":-0.25,"nonat":-0.25,"nosolog":-0.25,"novial":-0.25,"nublos":-0.25,"nuez":-0.25,"obes":-0.25,"objetor":-0.25,"obscurantist":-0.25,"obstaculic":-0.25,"obstin":-0.25,"octopod":-0.25,"oda":-0.25,"ofensiv":-0.25,"ojer":-0.25,"omatid":-0.25,"onagr":-0.25,"oncog":-0.25,"opac":-0.25,"optez":-0.25,"orfand":-0.25,"orquidal":-0.25,"ortopn":-0.25,"osar":-0.25,"oscurantist":-0.25,"osmos":-0.25,"osqueocel":-0.25,"osteit":-0.25,"otit":-0.25,"otred":-0.25,"out":-0.25,"oximoron":-0.25,"ozonium":-0.25,"pach":-0.25,"palabr":-0.25,"palanquist":-0.25,"palatalic":-0.25,"palatosquis":-0.25,"paleopatolog":-0.25,"paliacion":-0.25,"paliat":-0.25,"palud":-0.25,"pancreatit":-0.25,"panzac":-0.25,"pap":-0.25,"paracetamol":-0.25,"paralel":-0.25,"paraquat":-0.25,"par":-0.25,"parricid":-0.25,"pasajer":-0.25,"pasaman":-0.25,"pasm":-0.25,"pasteric":-0.25,"pasteurelos":-0.25,"pasteuric":-0.25,"patos":-0.25,"pecabl":-0.25,"pediculos":-0.25,"pedrisc":-0.25,"pelagr":-0.25,"peleon":-0.25,"peor":-0.25,"pepl":-0.25,"peridotit":-0.25,"perifrast":-0.25,"perill":-0.25,"periodontit":-0.25,"perjudic":-0.25,"perlin":-0.25,"perpetr":-0.25,"pertuss":-0.25,"pestan":-0.25,"pestic":-0.25,"pezizal":-0.25,"phallal":-0.25,"physostigm":-0.25,"phytophthor":-0.25,"piad":-0.25,"piant":-0.25,"picard":-0.25,"pickelhaub":-0.25,"picor":-0.25,"pigarg":-0.25,"pintamon":-0.25,"piperacilin":-0.25,"piridin":-0.25,"pituf":-0.25,"piur":-0.25,"plaguic":-0.25,"planchac":-0.25,"planimetr":-0.25,"planider":-0.25,"pleitist":-0.25,"plumbem":-0.25,"plutocrat":-0.25,"pobreton":-0.25,"poli":-0.25,"polizont":-0.25,"polem":-0.25,"pompon":-0.25,"portalig":-0.25,"poses":-0.25,"pos":-0.25,"postillon":-0.25,"postr":-0.25,"postul":-0.25,"preavis":-0.25,"precautor":-0.25,"preeclamps":-0.25,"prend":-0.25,"prendimient":-0.25,"prerrequisit":-0.25,"presbic":-0.25,"primogenit":-0.25,"procur":-0.25,"profer":-0.25,"propiciator":-0.25,"prostatit":-0.25,"pseudoalucin":-0.25,"pseudofloem":-0.25,"psilotac":-0.25,"psiquiatr":-0.25,"psitacos":-0.25,"psocopter":-0.25,"pteridosperm":-0.25,"ptos":-0.25,"pudibundez":-0.25,"pugil":-0.25,"pulmotor":-0.25,"putrescent":-0.25,"putrescin":-0.25,"pelvic":-0.25,"perf":-0.25,"queratocon":-0.25,"quijot":-0.25,"quimon":-0.25,"quinin":-0.25,"quinquefol":-0.25,"quinqu":-0.25,"rabicort":-0.25,"rabon":-0.25,"rand":-0.25,"rang":-0.25,"rapaz":-0.25,"rater":-0.25,"reaparec":-0.25,"reconden":-0.25,"reconditez":-0.25,"reconquist":-0.25,"recriminator":-0.25,"redistribu":-0.25,"reeleccion":-0.25,"reencend":-0.25,"reflej":-0.25,"refriger":-0.25,"refut":-0.25,"regicid":-0.25,"reglament":-0.25,"regordet":-0.25,"reintegr":-0.25,"relam":-0.25,"reolog":-0.25,"repetid":-0.25,"repollud":-0.25,"repos":-0.25,"requem":-0.25,"requisitor":-0.25,"resurg":-0.25,"retal":-0.25,"reticuliterm":-0.25,"retorc":-0.25,"revolot":-0.25,"rezong":-0.25,"ricketts":-0.25,"rickettsios":-0.25,"rigaton":-0.25,"rij":-0.25,"rijos":-0.25,"rival":-0.25,"rob":-0.25,"rodill":-0.25,"rodiller":-0.25,"romanal":-0.25,"rompehuelg":-0.25,"ronch":-0.25,"rond":-0.25,"ronqued":-0.25,"ronz":-0.25,"ropon":-0.25,"rosellin":-0.25,"roset":-0.25,"rotenon":-0.25,"roux":-0.25,"rubeol":-0.25,"rubial":-0.25,"ruboric":-0.25,"rufian":-0.25,"rynchopida":-0.25,"requiem":-0.25,"sabl":-0.25,"sablist":-0.25,"salacot":-0.25,"sal":-0.25,"salol":-0.25,"sarcom":-0.25,"sardon":-0.25,"sarong":-0.25,"satanist":-0.25,"satirias":-0.25,"saturn":-0.25,"scam":-0.25,"scat":-0.25,"sciar":-0.25,"scleroderm":-0.25,"sebos":-0.25,"sec":-0.25,"secan":-0.25,"seclusion":-0.25,"secobarbital":-0.25,"secuestr":-0.25,"selen":-0.25,"semianalfabet":-0.25,"sepel":-0.25,"septicem":-0.25,"sepultur":-0.25,"sermon":-0.25,"serolog":-0.25,"serpent":-0.25,"serrasalmu":-0.25,"seudoalucin":-0.25,"seudoefedrin":-0.25,"shar":-0.25,"shigelos":-0.25,"sicar":-0.25,"sicoterapeut":-0.25,"sifilit":-0.25,"similor":-0.25,"simplist":-0.25,"simplon":-0.25,"sinestes":-0.25,"sinrazon":-0.25,"siquiatr":-0.25,"sirl":-0.25,"sir":-0.25,"skibob":-0.25,"slang":-0.25,"snobism":-0.25,"sobrefald":-0.25,"sobrenatural":-0.25,"sobrenaturalist":-0.25,"sobrevest":-0.25,"socavon":-0.25,"sog":-0.25,"solaz":-0.25,"solresol":-0.25,"somatosensorial":-0.25,"somnifob":-0.25,"sonsonet":-0.25,"soplon":-0.25,"sotan":-0.25,"spang":-0.25,"staphylococcu":-0.25,"stout":-0.25,"streptopel":-0.25,"subnormal":-0.25,"subray":-0.25,"subvers":-0.25,"subwoof":-0.25,"succion":-0.25,"solt":-0.25,"sufridor":-0.25,"supernaturalist":-0.25,"superrealist":-0.25,"surrealist":-0.25,"sutil":-0.25,"syring":-0.25,"si":-0.25,"sindrom":-0.25,"sintom":-0.25,"tabardill":-0.25,"taciturn":-0.25,"talidom":-0.25,"tanatolog":-0.25,"tantal":-0.25,"tantarant":-0.25,"tant":-0.25,"tapping":-0.25,"taqu":-0.25,"tarasc":-0.25,"tarj":-0.25,"tarantul":-0.25,"tatu":-0.25,"taxabil":-0.25,"tedios":-0.25,"tejan":-0.25,"tenebros":-0.25,"teratolog":-0.25,"terroric":-0.25,"teropod":-0.25,"tes":-0.25,"testament":-0.25,"thrill":-0.25,"tiesur":-0.25,"tifoid":-0.25,"tiznadur":-0.25,"tinos":-0.25,"tocon":-0.25,"tombac":-0.25,"toper":-0.25,"topist":-0.25,"tori":-0.25,"torpec":-0.25,"tortuos":-0.25,"tos":-0.25,"tozud":-0.25,"trafic":-0.25,"traidor":-0.25,"tranquil":-0.25,"transgred":-0.25,"traspon":-0.25,"traumatofob":-0.25,"trepid":-0.25,"tribut":-0.25,"trickst":-0.25,"tricloroetilen":-0.25,"tricomonias":-0.25,"trifol":-0.25,"triscaidecafob":-0.25,"triunvirat":-0.25,"triunvir":-0.25,"troglodytida":-0.25,"trompeadur":-0.25,"tropec":-0.25,"trop":-0.25,"tsunam":-0.25,"tubercul":-0.25,"tugur":-0.25,"tularem":-0.25,"tumb":-0.25,"tumbon":-0.25,"tumescent":-0.25,"turboembrag":-0.25,"turbon":-0.25,"tussilag":-0.25,"tactic":-0.25,"tenu":-0.25,"ulcer":-0.25,"ultramicroscop":-0.25,"ultramontan":-0.25,"uniform":-0.25,"unilateral":-0.25,"uxoricid":-0.25,"vacil":-0.25,"vagin":-0.25,"vaquer":-0.25,"variabil":-0.25,"varicel":-0.25,"ven":-0.25,"ventos":-0.25,"ventriloc":-0.25,"veratrum":-0.25,"verdug":-0.25,"versicul":-0.25,"vesan":-0.25,"vestidur":-0.25,"vestigial":-0.25,"vicealmir":-0.25,"viej":-0.25,"vislumbr":-0.25,"viud":-0.25,"vulcanit":-0.25,"victim":-0.25,"whodunit":-0.25,"xenolit":-0.25,"zangarrian":-0.25,"zidovudin":-0.25,"ziti":-0.25,"zoo":-0.25,"zoofob":-0.25,"zoolog":-0.25,"zoonos":-0.25,"zorr":-0.25,"zurc":-0.25,"azo":-0.25,"obit":-0.25,"otic":-0.25}
},{}],90:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const afinn = require('./afinn_es.json');
const senticon = require('./senticon_es.json');
const negations = require('./negations_es.json');

module.exports = {
  afinn,
  pattern: undefined,
  senticon,
  negations,
  stemmed: true,
};

},{"./afinn_es.json":87,"./negations_es.json":88,"./senticon_es.json":89}],91:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const { Among, BaseStemmer } = require('@nlpjs/core');
const dictionary = require('./dictionary-es.json');

/* eslint-disable */
class StemmerEs extends BaseStemmer {
  constructor(container) {
    super(container, dictionary);
    this.name = 'stemmer-es';
    this.I_p2 = 0;
    this.I_p1 = 0;
    this.I_pV = 0;
    StemmerEs.a_0_tree = this.buildAmongTree(StemmerEs.a_0);
    StemmerEs.a_1_tree = this.buildAmongTree(StemmerEs.a_1);
    StemmerEs.a_2_tree = this.buildAmongTree(StemmerEs.a_2);
    StemmerEs.a_4_tree = this.buildAmongTree(StemmerEs.a_4);
    StemmerEs.a_5_tree = this.buildAmongTree(StemmerEs.a_5);
    StemmerEs.a_6_tree = this.buildAmongTree(StemmerEs.a_6);
    StemmerEs.a_7_tree = this.buildAmongTree(StemmerEs.a_7);
    StemmerEs.a_8_tree = this.buildAmongTree(StemmerEs.a_8);
    StemmerEs.a_9_tree = this.buildAmongTree(StemmerEs.a_9);
  }

  findAmongBTree(tree) {
    const reversed = this.current.split('').reverse();
    let node = tree;
    let l = 0;
    let longest = 0;
    let result = 0;
    const maxLength = this.current.length - this.limit_backward;
    for (let i = 0; i < reversed.length; i += 1) {
      l += 1;
      if (l > maxLength) {
        this.cursor -= longest;
        return result;
      }
      const current = reversed[i];
      if (!node[current]) {
        this.cursor -= longest;
        return result;
      }
      node = node[current];
      if (node.result) {
        longest = l;
        result = node.result;
      }
    }
    this.cursor -= l;
    return node.result;
  }

  buildAmongTree(amongs) {
    const result = {};
    for (let i = 0; i < amongs.length; i += 1) {
      const among = typeof amongs[i] === 'string' ? { s: amongs[i], result: -1} : amongs[i];
      const reversed = among.s.split('').reverse();
      let node = result;
      for (let j = 0; j < reversed.length; j += 1) {
        const current = reversed[j];
        if (!node[current]) {
          node[current] = {};
        }
        node = node[current];
      }
      node.result = among.result;
    }
    return result;
  }

  copy_from(other) {
    this.I_p2 = other.I_p2;
    this.I_p1 = other.I_p1;
    this.I_pV = other.I_pV;
    super.copy_from(other);
  }

  r_mark_regions() {
    let v_1;
    let v_2;
    let v_3;
    let v_6;
    let v_8;
    // (, line 31
    this.I_pV = this.limit;
    this.I_p1 = this.limit;
    this.I_p2 = this.limit;
    // do, line 37
    v_1 = this.cursor;
    let lab0 = true;
    lab0: while (lab0 == true) {
      lab0 = false;
      // (, line 37
      // or, line 39
      let lab1 = true;
      lab1: while (lab1 == true) {
        lab1 = false;
        v_2 = this.cursor;
        let lab2 = true;
        lab2: while (lab2 == true) {
          lab2 = false;
          // (, line 38
          if (!this.in_grouping(StemmerEs.g_v, 97, 252)) {
            break;
          }
          // or, line 38
          let lab3 = true;
          lab3: while (lab3 == true) {
            lab3 = false;
            v_3 = this.cursor;
            let lab4 = true;
            lab4: while (lab4 == true) {
              lab4 = false;
              // (, line 38
              if (!this.out_grouping(StemmerEs.g_v, 97, 252)) {
                break;
              }
              // gopast, line 38
              golab5: while (true) {
                let lab6 = true;
                while (lab6 == true) {
                  lab6 = false;
                  if (!this.in_grouping(StemmerEs.g_v, 97, 252)) {
                    break;
                  }
                  break golab5;
                }
                if (this.cursor >= this.limit) {
                  break lab4;
                }
                this.cursor++;
              }
              break lab3;
            }
            this.cursor = v_3;
            // (, line 38
            if (!this.in_grouping(StemmerEs.g_v, 97, 252)) {
              break lab2;
            }
            // gopast, line 38
            golab7: while (true) {
              let lab8 = true;
              while (lab8 == true) {
                lab8 = false;
                if (!this.out_grouping(StemmerEs.g_v, 97, 252)) {
                  break;
                }
                break golab7;
              }
              if (this.cursor >= this.limit) {
                break lab2;
              }
              this.cursor++;
            }
          }
          break lab1;
        }
        this.cursor = v_2;
        // (, line 40
        if (!this.out_grouping(StemmerEs.g_v, 97, 252)) {
          break lab0;
        }
        // or, line 40
        let lab9 = true;
        lab9: while (lab9 == true) {
          lab9 = false;
          v_6 = this.cursor;
          let lab10 = true;
          lab10: while (lab10 == true) {
            lab10 = false;
            // (, line 40
            if (!this.out_grouping(StemmerEs.g_v, 97, 252)) {
              break;
            }
            // gopast, line 40
            golab11: while (true) {
              let lab12 = true;
              while (lab12 == true) {
                lab12 = false;
                if (!this.in_grouping(StemmerEs.g_v, 97, 252)) {
                  break;
                }
                break golab11;
              }
              if (this.cursor >= this.limit) {
                break lab10;
              }
              this.cursor++;
            }
            break lab9;
          }
          this.cursor = v_6;
          // (, line 40
          if (!this.in_grouping(StemmerEs.g_v, 97, 252)) {
            break lab0;
          }
          // next, line 40
          if (this.cursor >= this.limit) {
            break lab0;
          }
          this.cursor++;
        }
      }
      // setmark pV, line 41
      this.I_pV = this.cursor;
    }
    this.cursor = v_1;
    // do, line 43
    v_8 = this.cursor;
    let lab13 = true;
    lab13: while (lab13 == true) {
      lab13 = false;
      // (, line 43
      // gopast, line 44
      golab14: while (true) {
        let lab15 = true;
        while (lab15 == true) {
          lab15 = false;
          if (!this.in_grouping(StemmerEs.g_v, 97, 252)) {
            break;
          }
          break golab14;
        }
        if (this.cursor >= this.limit) {
          break lab13;
        }
        this.cursor++;
      }
      // gopast, line 44
      golab16: while (true) {
        let lab17 = true;
        while (lab17 == true) {
          lab17 = false;
          if (!this.out_grouping(StemmerEs.g_v, 97, 252)) {
            break;
          }
          break golab16;
        }
        if (this.cursor >= this.limit) {
          break lab13;
        }
        this.cursor++;
      }
      // setmark p1, line 44
      this.I_p1 = this.cursor;
      // gopast, line 45
      golab18: while (true) {
        let lab19 = true;
        while (lab19 == true) {
          lab19 = false;
          if (!this.in_grouping(StemmerEs.g_v, 97, 252)) {
            break;
          }
          break golab18;
        }
        if (this.cursor >= this.limit) {
          break lab13;
        }
        this.cursor++;
      }
      // gopast, line 45
      golab20: while (true) {
        let lab21 = true;
        while (lab21 == true) {
          lab21 = false;
          if (!this.out_grouping(StemmerEs.g_v, 97, 252)) {
            break;
          }
          break golab20;
        }
        if (this.cursor >= this.limit) {
          break lab13;
        }
        this.cursor++;
      }
      // setmark p2, line 45
      this.I_p2 = this.cursor;
    }
    this.cursor = v_8;
    return true;
  }

  r_postlude() {
    let among_var;
    let v_1;
    // repeat, line 49
    replab0: while (true) {
      v_1 = this.cursor;
      let lab1 = true;
      lab1: while (lab1 == true) {
        lab1 = false;
        // (, line 49
        // [, line 50
        this.bra = this.cursor;
        // substring, line 50
        among_var = this.find_among(StemmerEs.a_0, 6);
        if (among_var == 0) {
          break;
        }
        // ], line 50
        this.ket = this.cursor;
        switch (among_var) {
          case 0:
            break lab1;
          case 1:
            // (, line 51
            // <-, line 51
            if (!this.slice_from('a')) {
              return false;
            }
            break;
          case 2:
            // (, line 52
            // <-, line 52
            if (!this.slice_from('e')) {
              return false;
            }
            break;
          case 3:
            // (, line 53
            // <-, line 53
            if (!this.slice_from('i')) {
              return false;
            }
            break;
          case 4:
            // (, line 54
            // <-, line 54
            if (!this.slice_from('o')) {
              return false;
            }
            break;
          case 5:
            // (, line 55
            // <-, line 55
            if (!this.slice_from('u')) {
              return false;
            }
            break;
          case 6:
            // (, line 57
            // next, line 57
            if (this.cursor >= this.limit) {
              break lab1;
            }
            this.cursor++;
            break;
        }
        continue replab0;
      }
      this.cursor = v_1;
      break;
    }
    return true;
  }

  r_RV() {
    if (!(this.I_pV <= this.cursor)) {
      return false;
    }
    return true;
  }

  r_R1() {
    if (!(this.I_p1 <= this.cursor)) {
      return false;
    }
    return true;
  }

  r_R2() {
    if (!(this.I_p2 <= this.cursor)) {
      return false;
    }
    return true;
  }

  r_R2b() {
    if (this.cursor < (this.current.length / 2)) {
    //if (!(this.I_p2 <= this.cursor)) {
      return false;
    }
    return true;
  }

  r_attached_pronoun() {
    let among_var;
    // (, line 67
    // [, line 68
    this.ket = this.cursor;
    // substring, line 68
    if (this.findAmongBTree(StemmerEs.a_1_tree) == 0) {
      return false;
    }
    // ], line 68
    this.bra = this.cursor;
    // substring, line 72
    among_var = this.find_among_b(StemmerEs.a_2);
    //among_var = this.findAmongBTree(StemmerEs.a_2_tree);
    if (among_var == 0) {
      return false;
    }
    // call RV, line 72
    if (!this.r_RV()) {
      return false;
    }
    switch (among_var) {
      case 0:
        return false;
      case 1:
        // (, line 73
        // ], line 73
        this.bra = this.cursor;
        // <-, line 73
        if (!this.slice_from('iendo')) {
          return false;
        }
        break;
      case 2:
        // (, line 74
        // ], line 74
        this.bra = this.cursor;
        // <-, line 74
        if (!this.slice_from('ando')) {
          return false;
        }
        break;
      case 3:
        // (, line 75
        // ], line 75
        this.bra = this.cursor;
        // <-, line 75
        if (!this.slice_from('ar')) {
          return false;
        }
        break;
      case 4:
        // (, line 76
        // ], line 76
        this.bra = this.cursor;
        // <-, line 76
        if (!this.slice_from('er')) {
          return false;
        }
        break;
      case 5:
        // (, line 77
        // ], line 77
        this.bra = this.cursor;
        // <-, line 77
        if (!this.slice_from('ir')) {
          return false;
        }
        break;
      case 6:
        // (, line 81
        // delete, line 81
        if (!this.slice_del()) {
          return false;
        }
        break;
      case 7:
        // (, line 82
        // literal, line 82
        if (!this.eq_s_b(1, 'u')) {
          return false;
        }
        // delete, line 82
        if (!this.slice_del()) {
          return false;
        }
        break;
    }
    return true;
  }

  r_standard_suffix() {
    let among_var;
    let v_1;
    let v_2;
    let v_3;
    let v_4;
    let v_5;
    // (, line 86
    // [, line 87
    this.ket = this.cursor;
    // substring, line 87
    among_var = this.find_among_b(StemmerEs.a_6, 46);
    //among_var = this.findAmongBTree(StemmerEs.a_6_tree);
    if (among_var == 0) {
      return false;
    }
    // ], line 87
    this.bra = this.cursor;
    switch (among_var) {
      case 0:
        return false;
      case 1:
        // (, line 98
        // call R2, line 99
        if (!this.r_R2()) {
          return false;
        }
        // delete, line 99
        if (!this.slice_del()) {
          return false;
        }
        break;
      case 2:
        // (, line 104
        // call R2, line 105
        if (!this.r_R2b()) {
          return false;
        }
        // delete, line 105
        if (!this.slice_del()) {
          return false;
        }
        // try, line 106
        v_1 = this.limit - this.cursor;
        var lab0 = true;
        while (lab0 == true) {
          lab0 = false;
          // (, line 106
          // [, line 106
          this.ket = this.cursor;
          // literal, line 106
          if (!this.eq_s_b(2, 'ic')) {
            this.cursor = this.limit - v_1;
            break;
          }
          // ], line 106
          this.bra = this.cursor;
          // call R2, line 106
          if (!this.r_R2()) {
            this.cursor = this.limit - v_1;
            break;
          }
          // delete, line 106
          if (!this.slice_del()) {
            return false;
          }
        }
        break;
      case 3:
        // (, line 110
        // call R2, line 111
        if (!this.r_R2()) {
          return false;
        }
        // <-, line 111
        if (!this.slice_from('log')) {
          return false;
        }
        break;
      case 4:
        // (, line 114
        // call R2, line 115
        if (!this.r_R2()) {
          return false;
        }
        // <-, line 115
        if (!this.slice_from('u')) {
          return false;
        }
        break;
      case 5:
        // (, line 118
        // call R2, line 119
        if (!this.r_R2()) {
          return false;
        }
        // <-, line 119
        if (!this.slice_from('ente')) {
          return false;
        }
        break;
      case 6:
        // (, line 122
        // call R1, line 123
        if (!this.r_R1()) {
          return false;
        }
        // delete, line 123
        if (!this.slice_del()) {
          return false;
        }
        // try, line 124
        v_2 = this.limit - this.cursor;
        var lab1 = true;
        lab1: while (lab1 == true) {
          lab1 = false;
          // (, line 124
          // [, line 125
          this.ket = this.cursor;
          // substring, line 125
          among_var = this.find_among_b(StemmerEs.a_3, 4);
          if (among_var == 0) {
            this.cursor = this.limit - v_2;
            break;
          }
          // ], line 125
          this.bra = this.cursor;
          // call R2, line 125
          if (!this.r_R2()) {
            this.cursor = this.limit - v_2;
            break;
          }
          // delete, line 125
          if (!this.slice_del()) {
            return false;
          }
          switch (among_var) {
            case 0:
              this.cursor = this.limit - v_2;
              break lab1;
            case 1:
              // (, line 126
              // [, line 126
              this.ket = this.cursor;
              // literal, line 126
              if (!this.eq_s_b(2, 'at')) {
                this.cursor = this.limit - v_2;
                break lab1;
              }
              // ], line 126
              this.bra = this.cursor;
              // call R2, line 126
              if (!this.r_R2()) {
                this.cursor = this.limit - v_2;
                break lab1;
              }
              // delete, line 126
              if (!this.slice_del()) {
                return false;
              }
              break;
          }
        }
        break;
      case 7:
        // (, line 134
        // call R2, line 135
        if (!this.r_R2()) {
          return false;
        }
        // delete, line 135
        if (!this.slice_del()) {
          return false;
        }
        // try, line 136
        v_3 = this.limit - this.cursor;
        var lab2 = true;
        lab2: while (lab2 == true) {
          lab2 = false;
          // (, line 136
          // [, line 137
          this.ket = this.cursor;
          // substring, line 137
          among_var = this.find_among_b(StemmerEs.a_4, 3);
          //among_var = this.findAmongBTree(StemmerEs.a_4_tree);
          if (among_var == 0) {
            this.cursor = this.limit - v_3;
            break;
          }
          // ], line 137
          this.bra = this.cursor;
          switch (among_var) {
            case 0:
              this.cursor = this.limit - v_3;
              break lab2;
            case 1:
              // (, line 140
              // call R2, line 140
              if (!this.r_R2()) {
                this.cursor = this.limit - v_3;
                break lab2;
              }
              // delete, line 140
              if (!this.slice_del()) {
                return false;
              }
              break;
          }
        }
        break;
      case 8:
        // (, line 146
        // call R2, line 147
        if (!this.r_R2()) {
          return false;
        }
        // delete, line 147
        if (!this.slice_del()) {
          return false;
        }
        // try, line 148
        v_4 = this.limit - this.cursor;
        var lab3 = true;
        lab3: while (lab3 == true) {
          lab3 = false;
          // (, line 148
          // [, line 149
          this.ket = this.cursor;
          // substring, line 149
          among_var = this.find_among_b(StemmerEs.a_5, 3);
          if (among_var == 0) {
            this.cursor = this.limit - v_4;
            break;
          }
          // ], line 149
          this.bra = this.cursor;
          switch (among_var) {
            case 0:
              this.cursor = this.limit - v_4;
              break lab3;
            case 1:
              // (, line 152
              // call R2, line 152
              if (!this.r_R2()) {
                this.cursor = this.limit - v_4;
                break lab3;
              }
              // delete, line 152
              if (!this.slice_del()) {
                return false;
              }
              break;
          }
        }
        break;
      case 9:
        // (, line 158
        // call R2, line 159
        if (!this.r_R2()) {
          return false;
        }
        // delete, line 159
        if (!this.slice_del()) {
          return false;
        }
        // try, line 160
        v_5 = this.limit - this.cursor;
        var lab4 = true;
        while (lab4 == true) {
          lab4 = false;
          // (, line 160
          // [, line 161
          this.ket = this.cursor;
          // literal, line 161
          if (!this.eq_s_b(2, 'at')) {
            this.cursor = this.limit - v_5;
            break;
          }
          // ], line 161
          this.bra = this.cursor;
          // call R2, line 161
          if (!this.r_R2()) {
            this.cursor = this.limit - v_5;
            break;
          }
          // delete, line 161
          if (!this.slice_del()) {
            return false;
          }
        }
        break;
    }
    return true;
  }

  r_y_verb_suffix() {
    let among_var;
    let v_1;
    let v_2;
    // (, line 167
    // setlimit, line 168
    v_1 = this.limit - this.cursor;
    // tomark, line 168
    if (this.cursor < this.I_pV) {
      return false;
    }
    this.cursor = this.I_pV;
    v_2 = this.limit_backward;
    this.limit_backward = this.cursor;
    this.cursor = this.limit - v_1;
    // (, line 168
    // [, line 168
    this.ket = this.cursor;
    // substring, line 168
    among_var = this.find_among_b(StemmerEs.a_7, 11);
    //among_var = this.findAmongBTree(StemmerEs.a_7_tree);
    if (among_var == 0) {
      this.limit_backward = v_2;
      return false;
    }
    // ], line 168
    this.bra = this.cursor;
    this.limit_backward = v_2;
    switch (among_var) {
      case 0:
        return false;
      case 1:
        // (, line 171
        // literal, line 171
        if (!this.eq_s_b(1, 'u')) {
          return false;
        }
        // delete, line 171
        if (!this.slice_del()) {
          return false;
        }
        break;
    }
    return true;
  }

  r_verb_suffix() {
    let among_var;
    let v_1;
    let v_2;
    let v_3;
    let v_4;
    // (, line 175
    // setlimit, line 176
    v_1 = this.limit - this.cursor;
    // tomark, line 176
    if (this.cursor < this.I_pV) {
      return false;
    }
    this.cursor = this.I_pV;
    v_2 = this.limit_backward;
    this.limit_backward = this.cursor;
    this.cursor = this.limit - v_1;
    // (, line 176
    // [, line 176
    this.ket = this.cursor;
    // substring, line 176

    //among_var = this.find_among_b(StemmerEs.a_8, 95);
    among_var = this.findAmongBTree(StemmerEs.a_8_tree);
    if (among_var == 0) {
      this.limit_backward = v_2;
      return false;
    }
    // ], line 176
    this.bra = this.cursor;
    this.limit_backward = v_2;
    switch (among_var) {
      case 0:
        return false;
      case 1:
        // (, line 179
        // try, line 179
        v_3 = this.limit - this.cursor;
        var lab0 = true;
        while (lab0 == true) {
          lab0 = false;
          // (, line 179
          // literal, line 179
          if (!this.eq_s_b(1, 'u')) {
            this.cursor = this.limit - v_3;
            break;
          }
          // test, line 179
          v_4 = this.limit - this.cursor;
          // literal, line 179
          if (!this.eq_s_b(1, 'g')) {
            this.cursor = this.limit - v_3;
            break;
          }
          this.cursor = this.limit - v_4;
        }
        // ], line 179
        this.bra = this.cursor;
        // delete, line 179
        if (!this.slice_del()) {
          return false;
        }
        break;
      case 2:
        // (, line 200
        // delete, line 200
        if (!this.slice_del()) {
          return false;
        }
        break;
    }
    return true;
  }

  r_residual_suffix() {
    let among_var;
    let v_1;
    let v_2;
    // (, line 204
    // [, line 205
    this.ket = this.cursor;
    // substring, line 205
    among_var = this.find_among_b(StemmerEs.a_9, 5);
    //among_var = this.findAmongBTree(StemmerEs.a_9_tree);

    if (among_var == 0) {
      return false;
    }
    // ], line 205
    this.bra = this.cursor;
    switch (among_var) {
      case 0:
        return false;
      case 1:
        // (, line 208
        // call RV, line 208
        if (!this.r_RV()) {
          return false;
        }
        // delete, line 208
        if (!this.slice_del()) {
          return false;
        }
        break;
      case 2:
        // (, line 210
        // call RV, line 210
        if (!this.r_RV()) {
          return false;
        }
        // delete, line 210
        if (!this.slice_del()) {
          return false;
        }
        // try, line 210
        v_1 = this.limit - this.cursor;
        var lab0 = true;
        while (lab0 == true) {
          lab0 = false;
          // (, line 210
          // [, line 210
          this.ket = this.cursor;
          // literal, line 210
          if (!this.eq_s_b(1, 'u')) {
            this.cursor = this.limit - v_1;
            break;
          }
          // ], line 210
          this.bra = this.cursor;
          // test, line 210
          v_2 = this.limit - this.cursor;
          // literal, line 210
          if (!this.eq_s_b(1, 'g')) {
            this.cursor = this.limit - v_1;
            break;
          }
          this.cursor = this.limit - v_2;
          // call RV, line 210
          if (!this.r_RV()) {
            this.cursor = this.limit - v_1;
            break;
          }
          // delete, line 210
          if (!this.slice_del()) {
            return false;
          }
        }
        break;
    }
    return true;
  }

  innerbStem() {
    let v_1;
    let v_2;
    let v_3;
    let v_4;
    let v_5;
    let v_6;
    // (, line 215
    // do, line 216
    v_1 = this.cursor;
    let lab0 = true;
    while (lab0 == true) {
      lab0 = false;
      // call mark_regions, line 216
      if (!this.r_mark_regions()) {
        break;
      }
    }
    this.cursor = v_1;
    // backwards, line 217
    this.limit_backward = this.cursor;
    this.cursor = this.limit;
    // (, line 217
    // do, line 218
    v_2 = this.limit - this.cursor;
    let lab1 = true;
    while (lab1 == true) {
      lab1 = false;
      // call attached_pronoun, line 218
      if (!this.r_attached_pronoun()) {
        break;
      }
    }
    this.cursor = this.limit - v_2;
    // do, line 219
    v_3 = this.limit - this.cursor;
    let lab2 = true;
    lab2: while (lab2 == true) {
      lab2 = false;
      // (, line 219
      // or, line 219
      let lab3 = true;
      lab3: while (lab3 == true) {
        lab3 = false;
        v_4 = this.limit - this.cursor;
        let lab4 = true;
        while (lab4 == true) {
          lab4 = false;
          // call standard_suffix, line 219
          if (!this.r_standard_suffix()) {
            break;
          }
          break lab3;
        }
        this.cursor = this.limit - v_4;
        let lab5 = true;
        while (lab5 == true) {
          lab5 = false;
          // call y_verb_suffix, line 220
          if (!this.r_y_verb_suffix()) {
            break;
          }
          break lab3;
        }
        this.cursor = this.limit - v_4;
        // call verb_suffix, line 221
        if (!this.r_verb_suffix()) {
          break lab2;
        }
      }
    }
    this.cursor = this.limit - v_3;
    // do, line 223
    v_5 = this.limit - this.cursor;
    let lab6 = true;
    while (lab6 == true) {
      lab6 = false;
      // call residual_suffix, line 223
      if (!this.r_residual_suffix()) {
        break;
      }
    }
    this.cursor = this.limit - v_5;
    this.cursor = this.limit_backward; // do, line 225
    v_6 = this.cursor;
    let lab7 = true;
    while (lab7 == true) {
      lab7 = false;
      // call postlude, line 225
      if (!this.r_postlude()) {
        break;
      }
    }
    this.cursor = v_6;
    return true;
  }

  innerStem() {
    const current = this.getCurrent();
    if (current.endsWith('rme')) {
      this.setCurrent(current.slice(0, -2));
    } else if (current.endsWith('rte')) {
      this.setCurrent(current.slice(0, -2));
    } else if (current.endsWith('rse')) {
      this.setCurrent(current.slice(0, -2));
    } else if (current.endsWith('rnos')) {
      this.setCurrent(current.slice(0, -3));
    }
    this.innerbStem();
    const b = current;
    const a = this.getCurrent();
    if (a.length > 4) {
      if (a === b) {
        if (a.endsWith('s') || a.endsWith('i')) {
          this.setCurrent(a.slice(0, -1));
        }
      } else if (a.endsWith('zc') || (a.endsWith('qu'))) {
        this.setCurrent(`${a.slice(0, -2)}c`);
      } else if (a.endsWith('z')) {
        this.setCurrent(`${a.slice(0, -1)}c`);
      } else if (a.endsWith('i')) {
        this.setCurrent(`${a.slice(0, -1)}`);
      }
    }
    if (a.length <= 4) {
      if (a.endsWith('z')) {
        this.setCurrent(`${a.slice(0, -1)}c`);
      }      
    }
  }
}

StemmerEs.a_0 = [
  new Among('', -1, 6),
  new Among('a', 0, 1),
  new Among('e', 0, 2),
  new Among('i', 0, 3),
  new Among('o', 0, 4),
  new Among('u', 0, 5)
];

StemmerEs.a_1 = [
  new Among('la', -1, -1),
  new Among('sela', 0, -1),
  new Among('le', -1, -1),
  new Among('me', -1, -1),
  new Among('se', -1, -1),
  new Among('lo', -1, -1),
  new Among('selo', 5, -1),
  new Among('las', -1, -1),
  new Among('selas', 7, -1),
  new Among('les', -1, -1),
  new Among('los', -1, -1),
  new Among('selos', 10, -1),
  new Among('nos', -1, -1)
];

StemmerEs.a_2 = [
  new Among('ando', -1, 6),
  new Among('iendo', -1, 6),
  new Among('yendo', -1, 7),
  new Among('ar', -1, 6),
  new Among('er', -1, 6),
  new Among('ir', -1, 6)
];

StemmerEs.a_3 = [
  new Among('ic', -1, -1),
  new Among('ad', -1, -1),
  new Among('os', -1, -1),
  new Among('iv', -1, 1)
];

StemmerEs.a_4 = [
  new Among('able', -1, 1),
  new Among('ible', -1, 1),
  new Among('ante', -1, 1)
];

StemmerEs.a_5 = [
  new Among('ic', -1, 1),
  new Among('abil', -1, 1),
  new Among('iv', -1, 1)
];

StemmerEs.a_6 = [
  new Among('ica', -1, 1),
  new Among('ancia', -1, 2),
  new Among('encia', -1, 5),
  new Among('adora', -1, 2),
  new Among('osa', -1, 1),
  new Among('ista', -1, 1),
  new Among('iva', -1, 9),
  new Among('anza', -1, 1),
  new Among('logia', -1, 3),
  new Among('idad', -1, 8),
  new Among('able', -1, 1),
  new Among('ible', -1, 1),
  new Among('ante', -1, 2),
  new Among('mente', -1, 7),
  new Among('amente', 13, 6),
  new Among('acion', -1, 2),
  new Among('ucion', -1, 4),
  new Among('ico', -1, 1),
  new Among('ismo', -1, 1),
  new Among('oso', -1, 1),
  new Among('amiento', -1, 1),
  new Among('imiento', -1, 1),
  new Among('ivo', -1, 9),
  new Among('ador', -1, 2),
  new Among('icas', -1, 1),
  new Among('ancias', -1, 2),
  new Among('encias', -1, 5),
  new Among('adoras', -1, 2),
  new Among('osas', -1, 1),
  new Among('istas', -1, 1),
  new Among('ivas', -1, 9),
  new Among('anzas', -1, 1),
  new Among('logias', -1, 3),
  new Among('idades', -1, 8),
  new Among('ables', -1, 1),
  new Among('ibles', -1, 1),
  new Among('aciones', -1, 2),
  new Among('uciones', -1, 4),
  new Among('adores', -1, 2),
  new Among('antes', -1, 2),
  new Among('icos', -1, 1),
  new Among('ismos', -1, 1),
  new Among('osos', -1, 1),
  new Among('amientos', -1, 1),
  new Among('imientos', -1, 1),
  new Among('ivos', -1, 9)
];

StemmerEs.a_7 = [
  new Among('ya', -1, 1),
  new Among('ye', -1, 1),
  new Among('yan', -1, 1),
  new Among('yen', -1, 1),
  new Among('yeron', -1, 1),
  new Among('yendo', -1, 1),
  new Among('yo', -1, 1),
  new Among('yas', -1, 1),
  new Among('yes', -1, 1),
  new Among('yais', -1, 1),
  new Among('yamos', -1, 1)
];

StemmerEs.a_8 = [
  new Among('aba', -1, 2),
  new Among('ada', -1, 2),
  new Among('ida', -1, 2),
  new Among('ara', -1, 2),
  new Among('iera', -1, 2),
  new Among('ia', -1, 2),
  new Among('aria', 'ia', 2),
  new Among('eria', 'ia', 2),
  new Among('iria', 'ia', 2),
  new Among('ad', -1, 2),
  new Among('ed', -1, 2),
  new Among('id', -1, 2),
  new Among('ase', -1, 2),
  new Among('iese', -1, 2),
  new Among('aste', -1, 2),
  new Among('iste', -1, 2),
  new Among('an', -1, 2),
  new Among('aban', 'an', 2),
  new Among('aran', 'an', 2),
  new Among('ieran', 'an', 2),
  new Among('ian', 'an', 2),
  new Among('arian', 'ian', 2),
  new Among('erian', 'ian', 2),
  new Among('irian', 'ian', 2),
  new Among('en', -1, 1),
  new Among('asen', 'en', 2),
  new Among('iesen', 'en', 2),
  new Among('aron', -1, 2),
  new Among('ieron', -1, 2),
  new Among('aran', -1, 2),
  new Among('eran', -1, 2),
  new Among('iran', -1, 2),
  new Among('ado', -1, 2),
  new Among('ido', -1, 2),
  new Among('ando', -1, 2),
  new Among('iendo', -1, 2),
  new Among('ar', -1, 2),
  new Among('er', -1, 2),
  new Among('ir', -1, 2),
  new Among('as', -1, 2),
  new Among('abas', 'as', 2),
  new Among('adas', 'as', 2),
  new Among('idas', 'as', 2),
  new Among('aras', 'as', 2),
  new Among('ieras', 'as', 2),
// conditional
  new Among('ias', 'as', 2),
  new Among('arias', 'ias', 2),
  new Among('erias', 'ias', 2),
  new Among('irias', 'ias', 2),
// subjunctive
  new Among('es', -1, 1),
  new Among('ases', 'es', 2),
  new Among('ieses', 'es', 2),
  new Among('abais', -1, 2),
  new Among('arais', -1, 2),
  new Among('ierais', -1, 2),
  new Among('iais', -1, 2),
  new Among('ariais', 'iais', 2),
  new Among('eriais', 'iais', 2),
  new Among('iriais', 'iais', 2),
  new Among('ieremos', -1, 2),
  new Among('iereis', -1, 2),
  new Among('ieren', -1, 2),
  new Among('ieres', -1, 2),
  new Among('iere', -1, 2),
  new Among('aseis', -1, 2),
  new Among('ieseis', -1, 2),
  new Among('asteis', -1, 2),
  new Among('isteis', -1, 2),
  new Among('ais', -1, 2),
  new Among('eis', -1, 1),
  new Among('areis', 'eis', 2),
  new Among('ereis', 'eis', 2),
  new Among('ireis', 'eis', 2),
  new Among('ados', -1, 2),
  new Among('idos', -1, 2),
  new Among('amos', -1, 2),
  new Among('abamos', 'amos', 2),
  new Among('aramos', 'amos', 2),
  new Among('ieramos', 'amos', 2),
  new Among('iamos', 'amos', 2),
  new Among('ariamos', 'iamos', 2),
  new Among('eriamos', 'iamos', 2),
  new Among('iriamos', 'iamos', 2),
  new Among('emos', -1, 1),
  new Among('aremos', 'emos', 2),
  new Among('eremos', 'emos', 2),
  new Among('iremos', 'emos', 2),
  new Among('asemos', 'emos', 2),
  new Among('iesemos', 'emos', 2),
  new Among('aras', -1, 2),
  new Among('eras', -1, 2),
  new Among('iras', -1, 2),
  new Among('is', -1, 2),
  new Among('aren', -1, 2),
  new Among('ares', -1, 2),
  new Among('eren', -1, 2),
  new Among('esen', -1, 2),
  new Among('ea', -1, 2),
  new Among('ee', -1, 2),
  new Among('eo', -1, 2),
// future
  new Among('era', -1, 2),
  new Among('ira', -1, 2),
  new Among('are', -1, 2),
  new Among('ere', -1, 2),
  new Among('ire', -1, 2),
// perfect past
  new Among('io', -1, 2),
  new Among('imos', -1, 2),
  new Among('s', -1, 2),
  new Among('os', -1, 2),
  new Among('ios', -1, 2),
];

StemmerEs.a_9 = [
  new Among('a', -1, 1),
  new Among('e', -1, 2),
  new Among('o', -1, 1),
  new Among('os', -1, 1),
  new Among('i', -1, 1)
];

StemmerEs.g_v = [
  17,
  65,
  16,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  17,
  4,
  10
];

module.exports = StemmerEs;
},{"./dictionary-es.json":83,"@nlpjs/core":59}],92:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const { Stopwords } = require('@nlpjs/core');

class StopwordsEs extends Stopwords {
  constructor(container, words) {
    super(container);
    this.name = 'stopwords-es';
    this.dictionary = {};
    const list = words || [
      'a',
      'un',
      'el',
      'ella',
      'y',
      'sobre',
      'de',
      'la',
      'que',
      'en',
      'los',
      'del',
      'se',
      'las',
      'por',
      'un',
      'para',
      'con',
      'no',
      'una',
      'su',
      'al',
      'lo',
      'como',
      'más',
      'pero',
      'sus',
      'le',
      'ya',
      'o',
      'porque',
      'cuando',
      'muy',
      'sin',
      'sobre',
      'también',
      'me',
      'hasta',
      'donde',
      'quien',
      'desde',
      'nos',
      'durante',
      'uno',
      'ni',
      'contra',
      'ese',
      'eso',
      'mí',
      'qué',
      'otro',
      'él',
      'cual',
      'poco',
      'mi',
      'tú',
      'te',
      'ti',
      'sí',
      '1',
      '2',
      '3',
      '4',
      '5',
      '6',
      '7',
      '8',
      '9',
      '0',
      '_',
    ];
    this.build(list);
  }
}

module.exports = StopwordsEs;

},{"@nlpjs/core":59}],93:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
const { Tokenizer } = require('@nlpjs/core');

class TokenizerEs extends Tokenizer {
  constructor(container, shouldNormalize) {
    super(container, shouldNormalize);
    this.name = 'tokenizer-es';
  }

  innerTokenize(text) {
    return text.split(/[\s,.!?;:([\]'"¡¿)/]+/).filter((x) => x);
  }
}

module.exports = TokenizerEs;

},{"@nlpjs/core":59}],94:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

function registerTrigrams(container) {
  const language = container.get('Language');
  if (language) {
    language.addModel(
      'Latin',
      'spa',
      ' deos de  lala  y  a es ón iónrecereder coe lel en ienchoentechcióacio aa p ela lal as e d enna onas dda nte toad enecon pr sutod seho los peperers loo d tician dcio esidaresa ttieionrsote do  inson re lito dadtade sestproquemen poa eodanci qu unue ne n es ylibsu  nas enacia e etra paor adoa dnesra se uala cer porcomnalrtaa sber o ones pdosrá stalesdesibesereraar ertter dialel dntohosdelicaa as nn cociimiio o ere y le cantcci aslasparame cuiciaraencs tndi soo smietosunabredicclas le al pprentro tialy anidn pa ymanomoso n l alalis ano  igs se pntaumatenguaadey esocmo  fuiguo pn thumd dranriay dadativl ecas cavidl ts cidodasdiss i hus onadfun maracndaelisarund acunimbra udiee iquia i halar trodoca tico yctilidorindoari meta indesacuaun iertalespsegeleonsitoontivas hd ynosistrse lecieideediecciosl mr emedtorstin arimuiepletriibrsuslo ectpeny can e hn serntarl yegugururaintondmatl rr aisfote'
    );
  }
}

module.exports = registerTrigrams;

},{}],95:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const LangFr = require('./lang-fr');
const TokenizerFr = require('./tokenizer-fr');
const StemmerFr = require('./stemmer-fr');
const StopwordsFr = require('./stopwords-fr');
const NormalizerFr = require('./normalizer-fr');
const SentimentFr = require('./sentiment/sentiment_fr');

module.exports = {
  LangFr,
  StemmerFr,
  StopwordsFr,
  TokenizerFr,
  NormalizerFr,
  SentimentFr,
};

},{"./lang-fr":96,"./normalizer-fr":97,"./sentiment/sentiment_fr":100,"./stemmer-fr":101,"./stopwords-fr":102,"./tokenizer-fr":103}],96:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const TokenizerFr = require('./tokenizer-fr');
const StemmerFr = require('./stemmer-fr');
const StopwordsFr = require('./stopwords-fr');
const NormalizerFr = require('./normalizer-fr');
const SentimentFr = require('./sentiment/sentiment_fr');
const registerTrigrams = require('./trigrams');

class LangFr {
  register(container) {
    container.use(TokenizerFr);
    container.use(StemmerFr);
    container.use(StopwordsFr);
    container.use(NormalizerFr);
    container.register('sentiment-fr', SentimentFr);
    registerTrigrams(container);
  }
}

module.exports = LangFr;

},{"./normalizer-fr":97,"./sentiment/sentiment_fr":100,"./stemmer-fr":101,"./stopwords-fr":102,"./tokenizer-fr":103,"./trigrams":104}],97:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const { Normalizer } = require('@nlpjs/core');

class NormalizerFr extends Normalizer {
  constructor(container) {
    super(container);
    this.name = 'normalizer-fr';
  }

  normalize(text) {
    return text
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .toLowerCase();
  }

  run(srcInput) {
    const input = srcInput;
    input.text = this.normalize(input.text, input);
    return input;
  }
}

module.exports = NormalizerFr;

},{"@nlpjs/core":59}],98:[function(require,module,exports){
module.exports={
  "words": []
}

},{}],99:[function(require,module,exports){
module.exports={"abandon":-0.3,"abandonne":-0.3,"abasourd":0.24,"abattu":-0.12,"abattus":-0.12,"aberr":0,"abomin":-0.9,"abond":0,"abord":0.15,"abracadabr":-0.18,"abrut":-0.28,"absent":-0.1,"absolu":0.25,"absolus":0,"absorb":0.3,"absorbe":0.3,"abstrait":0,"absurd":0.4,"abus":-0.2,"acariatr":0.2,"accabl":-0.15,"accable":-0.15,"accept":0.05,"accessibl":0.13,"accident":-0.04,"accidente":-0.04,"accol":0,"accole":0,"accommod":0.45,"accompl":0.4,"accort":0.23,"accueil":0.4,"acerb":-0.15,"acharn":0.2,"acharne":0.2,"achev":0.07,"acheve":0.07,"acidul":-0.1,"acidule":-0.1,"actif":0.1,"activ":-0.1,"actuel":0.1,"additionnel":0.05,"adjacent":0.03,"administr":0,"admir":0.7,"adolescent":0.16,"ador":0.5,"adroit":0.23,"adul":0.27,"adventic":0.05,"advers":-0.35,"adequat":0,"affabl":0.31,"affectu":0.4,"affil":0.1,"affile":0.1,"afflig":-0.15,"afflige":-0.15,"affol":-0.5,"affole":-0.5,"affreux":-0.8,"africain":0,"agac":-0.25,"agiss":0.2,"agit":0.1,"agite":0.1,"agress":-0.8,"agreabl":0.7,"ahur":0.15,"aigr":-0.3,"aigu":0.2,"aiguis":0.1,"aiguise":0.1,"aigus":0.2,"aimabl":0.9,"aim":0.4,"aime":0.4,"ajout":0.05,"ajoute":0.05,"ajust":0,"ajuste":0,"alarm":-0.2,"algerien":0,"allemand":0,"allogen":-0.1,"allong":0,"allonge":0,"allum":0.3,"allume":0.3,"allegr":0.25,"altruist":0.35,"alter":-0.4,"altere":-0.4,"aleatoir":-0.05,"amaigr":-0.1,"ambi":0,"ambigu":-0.05,"ambigus":-0.05,"amer":-0.6,"ami":0.75,"amical":0.5,"amis":0.75,"amour":0.55,"ample":0.1,"amus":0.4,"amelior":0.27,"ameliore":0.27,"americain":0.08,"amerindien":0.04,"amethyst":0,"analog":0,"analogu":0.02,"ancestral":0.05,"ancien":0.04,"android":0.11,"anglais":0.07,"angoiss":-0.05,"angoisse":-0.05,"angel":0.05,"anhydr":-0.12,"animal":-0.3,"annex":0,"annexe":0,"anodin":-0.08,"anonym":-0.1,"anormal":-0.08,"antagon":-0.35,"anthropoid":0.11,"anticapital":-0.11,"antiqu":0.1,"anterieur":0,"anxieux":-0.1,"apeur":-0.05,"apeure":-0.05,"aphas":-0.05,"aplat":-0.14,"apparent":0.1,"appliqu":0.22,"applique":0.22,"approch":0,"approche":0,"appropr":0,"approprie":0,"approxim":0,"appreci":0.03,"apprec":0.4,"arab":0,"arachneen":0.09,"ardent":0.5,"argent":0,"argente":0,"aristocrat":0.15,"arme":-0.2,"arriv":0.1,"arrive":0.1,"arrier":-0.18,"arriere":-0.18,"arrond":-0.15,"arret":-0.1,"arrete":-0.1,"artificiel":-0.1,"artist":0.1,"assembl":0,"assidu":0.02,"assidus":0.02,"assis":0,"assoup":0,"assujet":0.05,"assur":0.2,"assure":0.2,"astral":0.05,"astronom":0.11,"astuci":0.45,"athlet":0.21,"atroc":-0.9,"atrocit":-0.5,"attach":0.23,"attard":0,"attarde":0,"atten":0.03,"attent":0.6,"attention":0.45,"attentionne":0.45,"attir":0.31,"attitr":-0.09,"attitre":-0.09,"attrist":-0.15,"attriste":-0.15,"atyp":0.1,"aubergin":0,"audaci":0.01,"audibl":0,"august":0.28,"auster":-0.1,"authent":0.3,"autonom":0.23,"autoris":0.05,"autorise":0.05,"autoritair":-0.11,"autr":-0.1,"avanc":0.3,"avance":0.3,"avantag":0.1,"avar":-0.4,"avarie":-0.4,"aven":0.4,"aventur":-0.28,"aveugl":-0.3,"avid":0.4,"azimut":-0.01,"aerien":0,"ain":0,"aine":0,"bagarreur":-0.1,"bagarr":-0.1,"balist":0,"balourd":-0.24,"banal":-0.3,"bancal":-0.1,"barbar":-0.7,"bas":-0.2,"basan":0,"basane":0,"bass":-0.2,"batailleur":-0.4,"bataill":-0.4,"batt":-0.2,"battu":-0.3,"battus":-0.3,"bavard":-0.3,"beau":0.8,"beaucoup":0.1,"bel":0.8,"belg":0,"belliger":-0.1,"belliqu":-0.23,"besogn":-0.34,"bien":0,"bienfais":0.35,"bienheur":0.35,"biens":0,"bienveil":0.38,"bijou":0.3,"biscornu":-0.2,"biscornus":-0.2,"bistr":0,"bizarr":-0.4,"blafard":-0.1,"blanc":0.05,"blanch":0.05,"bless":-0.4,"blesse":-0.4,"bleu":0.04,"bleus":0.04,"bleut":0.02,"bleute":0.02,"bleuatr":0.02,"blond":0.03,"blamabl":-0.12,"blem":-0.4,"bon":0.7,"bonheur":0.5,"bonhomm":0.35,"boudin":-0.15,"boudine":-0.15,"boueux":-0.2,"bouff":0,"bouffon":0.26,"bouill":0,"bourgeois":-0.1,"bourr":0.14,"bourre":0.14,"brav":0.6,"bref":0.08,"breton":0,"brill":0.65,"bris":-0.4,"brise":-0.4,"britann":0.07,"british":0.03,"brun":0,"brusqu":-0.5,"brutal":-0.6,"brui":-0.2,"brev":0.08,"brul":-0.1,"brule":-0.1,"burin":0.2,"burine":0.2,"burlesqu":-0.2,"byzantin":0,"be":0,"bet":-0.5,"cabalist":0.24,"cach":0.2,"cache":0.2,"cadeau":0.45,"cagneux":-0.1,"calcin":0,"calcine":0,"calcul":0,"calm":0.17,"camard":-0.14,"candid":0.05,"capabl":0.35,"capital":0.2,"capiton":0,"capitonne":0,"captif":-0.15,"captiv":-0.15,"carmin":0.01,"carr":0,"carre":0,"cass":-0.4,"casse":-0.4,"catastroph":-0.5,"cathol":-0.1,"cavali":0.23,"cavalier":0.23,"cavern":-0.25,"cendr":-0.09,"cendre":-0.09,"cens":-0.1,"cense":-0.1,"central":0.05,"certain":0.29,"chaleur":0.3,"chang":-0.05,"change":-0.05,"charit":0.35,"charm":0.55,"charnel":0.1,"charnu":-0.17,"charnus":-0.17,"chast":0.05,"chatoi":0.2,"chaud":0.25,"chauv":-0.1,"cher":0.5,"chic":-0.3,"chimer":-0.05,"chinois":0,"chois":0.1,"chouet":0.6,"chroniqu":-0.01,"chretien":0,"cherot":-0.11,"chetif":-0.08,"chetiv":-0.08,"cingl":-0.01,"cingle":-0.01,"cinoqu":-0.01,"cinquiem":0,"cinet":0,"circonspect":-0.01,"circulair":0,"cireux":-0.03,"cisel":0.2,"cisele":0.2,"civil":0.1,"civilis":0.05,"civilise":0.05,"clair":0.28,"clandestin":-0.1,"classiqu":0.7,"clos":-0.1,"clerical":0,"coc":-0.1,"coeur":0.2,"coll":-0.03,"collect":0.2,"collegial":0.1,"colonial":0,"color":0,"colore":0,"colossal":0,"coler":-0.27,"combat":-0.25,"combatt":-0.2,"combl":0.27,"comble":0.27,"comiqu":0.4,"commenc":0.15,"commercial":0,"commod":0.3,"commun":0.08,"communautair":0.07,"compact":0.1,"compar":0,"complet":0.43,"complex":-0.05,"complexe":-0.05,"complic":0.38,"compliqu":-0.4,"complique":-0.4,"composit":0,"compress":-0.15,"compresse":-0.15,"comprim":-0.14,"comprime":-0.14,"comprehensibl":0.09,"con":-0.7,"concentr":0.3,"concentre":0.3,"conc":-0.1,"concis":-0.1,"conclu":0,"concret":0.25,"condescend":0.02,"confessionnel":0,"confi":0.3,"confidentiel":0.04,"confin":-0.12,"confine":-0.12,"confondu":0.24,"confondus":0.24,"conform":0.1,"confort":0.3,"confus":-0.4,"conjugal":0,"conner":-0.7,"connu":0.6,"connus":0.6,"conscienci":0,"conscient":0.1,"conseil":0.2,"consider":0.1,"consign":0,"consigne":0,"consist":0.08,"const":0.1,"constern":-0.17,"consterne":-0.17,"consequent":0,"contemporain":0.07,"content":0.65,"contest":-0.05,"continental":0.01,"contingent":0,"continu":0,"continus":0,"contract":-0.22,"contracte":-0.22,"contradictoir":-0.05,"contrair":-0.1,"contrari":-0.25,"contr":-0.2,"contrit":-0.2,"convaincu":0.1,"convaincus":0.1,"conven":0.2,"cordial":0.25,"coriac":-0.11,"corpulent":0,"correct":0.4,"corrig":0.27,"corrige":0.27,"corrompu":-0.4,"corrompus":-0.4,"cosmiqu":0.1,"cosmopolit":0.17,"costaud":0.21,"coton":-0.1,"couch":-0.2,"couche":-0.2,"coupabl":-0.25,"coup":0,"coupe":0,"courag":0.5,"cour":0.1,"courb":-0.03,"court":-0.1,"courtois":0.2,"coutumi":0,"coutumier":0,"couteux":-0.11,"craintif":-0.05,"craintiv":-0.05,"cramois":0.01,"crasseux":-0.4,"crayeux":-0.03,"creus":-0.5,"creux":-0.5,"cri":0.05,"criminel":-0.1,"cristallin":0.15,"critiqu":0,"crois":-0.5,"croise":-0.5,"croul":0,"croustill":-0.15,"cru":-0.3,"crucial":0.08,"cruel":-0.4,"crus":-0.3,"credul":0.05,"cretin":-0.35,"cuis":0,"cuit":0,"culturel":0.1,"cuprifer":0.1,"cupriqu":0.1,"curieux":0.07,"cyclopeen":0.08,"celest":0.24,"celebr":0.15,"ceruleen":0.02,"cerebral":0.05,"emot":0.4,"danger":-0.55,"dantesqu":-0.2,"dem":-0.05,"dens":0,"derni":-0.29,"dernier":-0.29,"deuxiem":0.03,"difficil":-0.5,"difform":-0.35,"different":0.4,"dign":0.5,"dingu":-0.2,"diplomat":0,"direct":0.2,"dirig":-0.05,"discord":0.2,"discret":0,"discut":-0.05,"disgraci":-0.35,"disparat":0.1,"disparu":-0.14,"disparus":-0.14,"dispendi":-0.11,"disponibl":0.1,"dissembl":0.08,"dissimul":0.1,"dissimule":0.1,"dist":-0.05,"distinct":0,"distingu":0.2,"distingue":0.2,"distr":-0.6,"distrait":-0.6,"diurn":0,"diver":0,"divers":0,"divin":0.55,"docil":-0.1,"domest":0,"domin":0.3,"dommag":-0.3,"don":0.1,"donne":0.1,"dorm":0,"dormeur":0,"dormeux":0,"dor":0.2,"dore":0.2,"doubl":0,"douc":0.4,"doucer":0.2,"doulour":-0.55,"douteux":-0.1,"doux":0.4,"draconien":0.16,"dramat":-0.2,"dress":0,"dresse":0,"droit":0.17,"dru":0,"drus":0,"drol":0.53,"dur":-0.21,"duvet":0.1,"dynam":0,"debil":-0.5,"debonnair":0,"debut":0.15,"decent":0,"decept":-0.5,"decharn":-0.1,"decharne":-0.1,"dechir":-0.3,"dechire":-0.3,"decid":0.1,"decide":0.1,"decis":0.2,"deconcert":0.28,"deconcerte":0.28,"deconf":-0.2,"deconfit":-0.2,"decoupl":0.21,"decouple":0.21,"decouvert":0.1,"decouvr":0.1,"def":-0.1,"defait":-0.1,"defavor":-0.35,"defendu":-0.05,"defendus":-0.05,"deficient":-0.19,"definit":0,"deform":-0.1,"deforme":-0.1,"degout":-0.43,"degueul":-1,"delaiss":-0.12,"delaisse":-0.12,"delect":0.4,"delicat":0.25,"delici":0.8,"delictu":-0.06,"dement":-0.01,"demerdard":-0.05,"demesur":0.14,"demesure":0.14,"demod":-0.08,"demode":-0.08,"denud":-0.02,"denude":-0.02,"depeupl":-0.13,"depeuple":-0.13,"deplais":0.02,"deplor":-0.15,"deraison":0.2,"derisoir":-0.5,"derout":0.1,"deregl":-0.2,"deregle":-0.2,"desagre":-0.5,"desarm":-0.33,"desarme":-0.33,"desastr":-0.5,"desax":-0.01,"desaxe":-0.01,"desert":-0.14,"deserte":-0.14,"desesper":-0.7,"desespere":-0.7,"deshabill":0.08,"deshabille":0.08,"deshydrat":-0.12,"deshydrate":-0.12,"desherit":-0.5,"desherite":-0.5,"desol":-0.3,"desole":-0.3,"detach":-0.1,"detache":-0.1,"detaill":0.2,"detaille":0.2,"detenu":-0.15,"detenus":-0.15,"detest":0,"devor":0.5,"decu":-1,"decus":-1,"ecclesiast":0,"effect":0.1,"efficac":0.4,"efficient":0.2,"effil":0.06,"effile":0.06,"efflanqu":-0.1,"efflanque":-0.1,"effrai":-0.5,"effray":-0.5,"effraye":-0.5,"effroi":-0.2,"effemin":0,"effemine":0,"ellipt":-0.05,"embarrass":-0.23,"embarr":-0.5,"embarrasse":-0.5,"emberlificot":0,"embras":0.25,"embrase":0.25,"embrouill":-0.2,"embrouille":-0.2,"embrum":-0.02,"embrume":-0.02,"emmerd":-0.25,"emprison":-0.15,"emprisonne":-0.15,"empat":-0.09,"empate":-0.09,"encaiss":0.13,"encaisse":0.13,"encastr":0.13,"encastre":0.13,"enceint":0.1,"enchant":0.32,"enchante":0.32,"encrout":-0.15,"endeuill":-0.32,"endeuille":-0.32,"endommag":-0.3,"endommage":-0.3,"endorm":0,"enfantin":-0.15,"enflamm":0.25,"enflamme":0.25,"engourd":-0.11,"enjou":0.26,"enjoue":0.26,"ennem":-0.6,"ennui":-0.7,"ennuy":-0.7,"ennuye":-0.7,"ensangl":-0.2,"ensanglante":-0.2,"ensorcel":0.45,"entaill":0,"entaille":0,"entendu":0,"entendus":0,"enthousiast":0.8,"entich":0.27,"entiche":0.27,"enti":0.15,"entier":0.15,"entortill":-0.2,"entortille":-0.2,"entrouvert":0,"envah":-0.25,"envelopp":0,"enveloppe":0,"envieux":-0.2,"envout":0.45,"errant":-0.1,"espagnol":0,"espiegl":0.15,"essai":-0.05,"essentiel":0.3,"esseul":-0.1,"esseule":-0.1,"estim":0.15,"europeen":0,"exact":0.25,"excellent":0.5,"exceptionnel":0.2,"excess":-0.4,"excit":-0.15,"excite":-0.15,"exclus":-0.03,"exemplair":0.3,"exig":-0.12,"exist":0.07,"exorbit":0.11,"exot":0.1,"explicit":0,"express":0,"expre":0,"exquis":0.6,"extern":0,"extraordinair":0.1,"extravag":0.2,"extrem":-0.3,"exterieur":0,"execr":-0.36,"fabul":1,"facil":0.27,"factic":0.25,"fad":-0.4,"faibl":-0.38,"faisabl":0,"fameux":0.1,"familial":0.1,"famili":0.2,"familier":0.2,"fantast":1,"farouch":-0.6,"fatal":-0.7,"fatig":-0.2,"fatigu":-0.2,"fatigue":-0.2,"fauch":-0.34,"fauche":-0.34,"fauss":-0.5,"fauv":0,"faux":-0.5,"favor":0.3,"favorit":0.3,"femel":0,"ferm":-0.28,"ferme":-0.28,"fertil":0.05,"fessi":0,"fessier":0,"fichu":-0.25,"fichus":-0.25,"fidel":0.1,"fi":0.38,"fier":0.38,"fig":-0.2,"fige":-0.2,"fin":-0.1,"final":-0.5,"fix":0.1,"fievreux":-0.2,"flagad":-0.1,"flageol":-0.05,"flagr":-0.1,"flamboi":0.25,"flegmat":0.07,"fleur":0.1,"flexibl":0.05,"flott":0,"flou":-0.2,"flous":-0.2,"fluid":0,"flaneur":-0.21,"flaneux":-0.21,"foll":-0.01,"fonc":-0.2,"fonce":-0.2,"forcen":-0.22,"forcene":-0.22,"forc":-0.4,"force":-0.4,"formel":-0.12,"formid":0.85,"fort":0.41,"fortuit":0.25,"fortun":0.23,"fortune":0.23,"fossil":0,"fou":-0.01,"foudroi":0.02,"fouineur":0.04,"fouin":0.04,"fourr":0,"fourre":0,"fourvoy":-0.22,"fourvoye":-0.22,"fous":-0.01,"foutais":-0.6,"foutu":-0.4,"foutus":-0.4,"fragil":-0.25,"frais":0.3,"franc":0.2,"franch":0.2,"franchouillard":0.1,"francais":0.2,"fraternel":0.1,"fraich":0.3,"frisquet":0.15,"frisson":-0.05,"fris":0,"frise":0,"froid":-0.34,"froiss":-0.4,"froisse":-0.4,"fructueux":0.1,"frust":0.1,"frem":-0.05,"frequent":0.1,"fretill":-0.15,"frel":-0.1,"fugit":-0.1,"fum":0,"fume":0,"funest":-0.2,"funebr":-0.6,"fureteur":0.04,"furet":0.04,"furibond":-0.22,"furieux":-0.45,"furtif":-0.2,"furtiv":-0.2,"futur":0,"febril":0.15,"federal":0,"feminin":0,"feroc":-0.3,"gai":0.5,"gais":0.5,"galop":0.05,"gauch":-0.16,"gaulois":0.1,"gentil":0.4,"gentill":0.4,"gigantesqu":0.1,"girond":0.4,"glabr":0.1,"glacial":-0.2,"glac":-0.25,"glace":-0.25,"glauqu":0,"global":0,"glorieux":1,"glu":-0.1,"gnangnan":-0.21,"godich":0.05,"gonfl":-0.1,"gonfle":-0.1,"gourmand":0.1,"gracieux":0.8,"grand":0.3,"grandios":0.8,"gras":-0.35,"grass":-0.35,"gratin":-0.2,"gratuit":0.1,"grav":0.4,"gravel":-0.15,"grec":0,"grecqu":0,"grelott":-0.12,"gris":-0.18,"grisatr":-0.1,"grivois":-0.15,"gros":0,"gross":0,"grossi":0.3,"grossier":0.3,"grotesqu":-0.6,"guerri":-0.07,"guerrier":-0.07,"ge":0.2,"genial":0.9,"general":0,"gener":0.7,"gen":-0.3,"gene":-0.3,"habil":0.3,"habill":0,"habille":0,"habituel":-0.05,"hagard":-0.2,"haineux":-0.38,"halet":0.1,"hard":0.2,"hargneux":-0.5,"hasard":0.4,"hasarde":0.4,"haut":0.18,"hautain":-0.7,"hellen":0,"hermet":0.04,"heureux":0.7,"hexagonal":0.1,"hideux":-0.7,"hispan":0,"histor":0,"hierat":0.17,"homogen":0,"homologu":0.03,"honnet":0.2,"honor":0.5,"honteux":-0.4,"horizontal":0,"horreur":-0.6,"horribl":-1,"hostil":-0.7,"humain":0.22,"humanoid":0.11,"humbl":-0.2,"humid":-0.03,"hyperact":-0.15,"hypothet":-0.05,"hebreu":0,"hebreux":0,"hel":-0.4,"heroiqu":0.5,"hesit":-0.1,"heteroclit":0,"heterogen":0,"iber":0,"ident":0,"idiot":-0.7,"ideal":0.8,"ideau":0.8,"ignobl":-0.8,"ignor":-0.1,"ignore":-0.1,"illicit":-0.05,"illimit":0.11,"illimite":0.11,"illog":0.2,"illustr":0.2,"illegal":-0.05,"imaginair":0.3,"imbib":-0.02,"imbibe":-0.02,"imbecil":-1,"immacul":0.16,"immacule":0.16,"immanqu":-0.35,"immens":0.45,"immigr":-0.1,"immobil":-0.16,"immuabl":0,"immediat":0.55,"immemorial":0.02,"impar":-0.35,"imparf":-0.08,"imparfait":-0.08,"impassibl":-0.1,"impatient":-0.3,"impavid":0.08,"impecc":0.7,"impens":0.02,"imperceptibl":-0.2,"impitoi":-0.6,"implac":-0.3,"import":0.4,"impos":0.5,"impossibl":-0.5,"impratic":-0.25,"impression":0.7,"improb":-0.1,"imprec":0.15,"imprecis":0.15,"imprevisibl":-0.2,"imprevu":0.08,"imprevus":0.08,"impuiss":-0.2,"impenetr":0.09,"imper":0.02,"imperial":-0.2,"imperi":-0.1,"inabord":-0.05,"inaccessibl":-0.2,"inadmissibl":0.3,"inalter":0.25,"inaltere":0.25,"inamical":-0.35,"inapt":-0.33,"inattendu":0.2,"inattendus":0.2,"inaudibl":-0.1,"incalcul":0.11,"incap":-0.67,"incarnat":0.01,"incertain":-0.3,"incess":-0.2,"incompar":0.1,"incomprehensibl":-0.4,"inconcev":0.3,"inconnu":-0.2,"inconnus":-0.2,"inconscient":-0.3,"incroi":0.6,"incredul":-0.4,"indien":0,"indifferent":-0.4,"indigent":-0.5,"indign":-0.3,"indiscret":-0.3,"indispens":0.8,"individuel":-0.03,"indompt":0.04,"indompte":0.04,"industriel":0.05,"indec":-0.2,"indecis":-0.2,"indefin":0,"independ":0.1,"indetermin":-0.15,"indetermine":-0.15,"inentam":0,"inentame":0,"inert":-0.1,"inesper":0.4,"inespere":0.4,"inexplor":-0.1,"inexplore":-0.1,"infernal":-0.6,"infim":-0.1,"infin":0,"infinitesimal":-0.11,"inflexibl":-0.17,"influent":0.3,"inferieur":-0.5,"ingenu":0.1,"ingenus":0.1,"inhumain":-0.5,"inimagin":0.3,"injust":-0.4,"innocent":0.2,"innombr":0.2,"inopin":0.02,"inopine":0.02,"inoubli":0.6,"inou":0.9,"inoui":0.9,"inquiet":-0.4,"inquisiteur":0.04,"inquisitric":0.04,"insatisf":-0.32,"insatisfait":-0.32,"insensibl":-0.3,"insens":-0.4,"insense":-0.4,"insignifi":-0.4,"insolent":-0.7,"insolit":-0.3,"insouten":-0.1,"inspir":0.1,"inspire":0.1,"instabl":-0.12,"instant":0.1,"instinct":0,"insupport":-0.2,"intact":0,"intangibl":0.17,"intellectuel":0.1,"intelligent":0.9,"intelligibl":0.14,"intens":0.4,"interd":-0.1,"interdit":-0.1,"interess":0.3,"intermin":-0.5,"intermediair":-0.08,"international":0.35,"intern":-0.03,"interrog":0.04,"intestin":-0.02,"intim":0.2,"intoler":-0.5,"integral":0.09,"interieur":-0.07,"inutil":-0.3,"invers":0,"invincibl":0.21,"inviol":0.17,"invisibl":-0.07,"invraisembl":-0.25,"ined":0.12,"inedit":0.12,"inepuis":0.1,"inequit":-0.2,"inevit":-0.2,"irascibl":-0.22,"iron":0.3,"irrattrap":0,"irrespons":0.1,"irreel":0.1,"irresistibl":0.9,"isol":-0.2,"isole":-0.2,"israelit":0,"italien":0,"ivre":-0.5,"jalous":-0.4,"jaloux":-0.4,"japon":0,"japonais":0,"jaun":-0.02,"jaunatr":0,"jeun":0.32,"joint":0,"jol":0.57,"jouiss":-0.28,"journali":0,"journalier":0,"joyeux":0.55,"judici":0.1,"juif":0,"juiv":0,"jumel":0,"jumele":0,"just":0.22,"laid":-0.7,"laiteux":0,"lambin":-0.21,"lament":-0.3,"langour":0.12,"lapidair":0,"larg":0.15,"las":-0.4,"lascif":0.12,"lasciv":0.12,"lass":-0.4,"latin":0,"lent":-0.42,"lev":0.4,"leve":0.4,"libr":0.45,"liberal":-0.05,"liber":0.1,"libere":0.1,"licenci":0.04,"lilial":0.03,"limit":-0.12,"limite":-0.12,"limpid":0,"liquid":0,"liquor":0.1,"lisibl":0.14,"liss":0.2,"litterair":0.1,"liturg":0.17,"livid":-0.5,"local":0,"logiqu":0.1,"lointain":-0.1,"long":-0.4,"longu":-0.4,"louabl":0.25,"louch":-0.5,"lourd":-0.05,"loyal":0.1,"lucid":0.2,"lugubr":-0.6,"luis":0.4,"lumin":0.6,"luxueux":0.5,"lach":-0.1,"legendair":0.4,"leg":0.18,"leger":0.18,"legitim":0.2,"leonin":-0.2,"maghrebin":0,"magiqu":0.7,"magnif":1,"maigr":-0.2,"majestu":1,"mal":-0.7,"malad":-0.35,"maladroit":-0.6,"malentend":-0.15,"malfais":-0.15,"malgr":0.2,"malheur":-0.3,"malici":-0.07,"malign":-0.3,"malin":-0.3,"malleabl":0.14,"manifest":0.05,"manqu":-0.05,"marin":0,"maritim":0,"mar":0,"marie":0,"marr":0.4,"marron":0,"martial":-0.07,"marxist":0,"masculin":0,"massif":0,"massiv":0,"mastoc":0,"mat":-0.1,"maternel":0,"matinal":0,"materiel":0.29,"maud":-0.8,"maudit":-0.8,"mauv":0,"mauvais":-0.71,"meilleur":0.53,"menac":-0.6,"mensong":-0.25,"mensonger":-0.25,"mental":0.2,"merc":0.3,"merd":-0.7,"merveil":0.9,"mesur":-0.1,"mesure":-0.1,"meurtri":-0.6,"meurtrier":-0.6,"mignon":0.3,"militair":-0.13,"minabl":-0.2,"minc":-0.03,"minim":-0.2,"minuscul":-0.22,"miracul":0.2,"misogyn":-0.6,"miser":-1,"mobil":0.1,"moch":-0.8,"modern":0.2,"modest":-0.2,"model":0,"moder":-0.15,"modere":-0.15,"moelleux":-0.03,"moindr":-0.1,"moit":-0.1,"molleton":0,"molletonne":0,"mondain":0,"mondial":0,"monocord":-0.1,"monoton":-0.2,"monstrueux":-0.4,"monumental":0.3,"moqu":-0.2,"moral":0,"morn":-0.6,"mou":-0.2,"mouchet":-0.3,"mouchete":-0.3,"mouill":0,"mouille":0,"mous":-0.2,"mouv":0.4,"moyen":-0.15,"muet":-0.1,"multicolor":0,"multipl":0.2,"municipal":0,"muscl":0.21,"muscle":0.21,"musical":0,"mystiqu":0.2,"mysteri":0.28,"mecan":0,"mech":-0.4,"mecontent":-0.4,"median":-0.08,"medical":0,"mediocr":-0.4,"mefi":-0.4,"melancol":-0.3,"melang":-0.1,"melange":-0.1,"menag":0.05,"menager":0.05,"mepris":-0.6,"metall":0,"metaphys":0,"metropolitain":0.1,"mem":0,"mur":0.2,"naiss":0.14,"natal":0.3,"national":0,"natur":0.25,"naturel":0.38,"nautiqu":0,"naz":-0.7,"naif":0.1,"naiv":0.1,"nerveux":-0.3,"net":0.3,"neuf":0.1,"neutr":0,"neuv":0.1,"nobl":0.3,"nocturn":0,"noir":-0.1,"nombreux":0,"non":-0.01,"nonchal":-0.1,"nord":0,"normal":0.17,"nouveau":0.34,"nouvel":0.1,"nu":0.16,"nuageux":-0.2,"nul":-0.2,"null":-0.2,"nus":0.16,"necessair":0.27,"neglige":-0.25,"obligatoir":-0.2,"obliqu":0,"obscur":-0.47,"obscen":-0.9,"occidental":0.05,"occult":0.04,"occup":-0.1,"occupe":-0.1,"odieux":-0.7,"oecumen":-0.05,"officiel":0,"oiseux":-0.15,"ombreux":-0.2,"opalescent":0.03,"opaqu":-0.1,"oppos":-0.1,"oppose":-0.1,"opulent":0.23,"oper":0.2,"orang":0,"ordinair":-0.2,"organis":0.4,"organise":0.4,"oriental":0,"original":0.2,"orthodox":0,"orthogonal":0.03,"oubl":-0.4,"oublie":-0.4,"oui":0.01,"ouvert":0.31,"oval":0,"pacif":0.4,"paisibl":0.8,"pantouflard":0.4,"paradisiaqu":0,"parallel":0.1,"paralys":-0.08,"paralyse":-0.08,"pareil":0,"parental":0.05,"paress":-0.4,"parf":0.8,"parfait":0.8,"parfum":0.2,"parfume":0.2,"parigot":0,"parisien":0,"part":-0.1,"particuli":-0.15,"particulier":-0.15,"parvenu":0.05,"parvenus":0.05,"pascal":0,"passion":0.8,"passionne":0.8,"pass":-0.2,"passe":-0.2,"passeist":0,"patent":0.1,"paternel":-0.2,"pathet":-1,"patient":0,"pauvr":-0.37,"peinard":0.4,"pench":0,"penche":0,"pensif":0.1,"pensiv":0.1,"perceptibl":0.05,"perdu":-0.45,"perdus":-0.45,"permanent":0,"perm":0.03,"perpendiculair":0,"perplex":-0.1,"perpetuel":-0.1,"personnel":0.05,"pes":-0.2,"petiot":0.05,"pet":0.1,"petit":0.1,"peu":-0.05,"phosphorescent":0.2,"physiqu":0.8,"pieus":0.1,"pieux":0.1,"piment":-0.17,"pimente":-0.17,"piqu":0.05,"pirat":-0.05,"pir":-0.4,"piteux":-0.15,"pitoi":-0.2,"plais":0.15,"plaqu":-0.25,"plaque":-0.25,"plastiqu":-0.03,"plat":-0.28,"platin":0.01,"platine":0.01,"plein":0.29,"pleur":-0.5,"plebeien":0.25,"plus":0.15,"pointu":0.3,"pointus":0.3,"poisseux":-0.05,"pol":0.3,"polit":0,"polon":0,"polonais":0,"ponder":0.15,"pondere":0.15,"populaci":-0.02,"populacier":-0.02,"populair":0.5,"posit":0,"possibl":0,"possed":0.23,"postal":0,"posterieur":0,"pos":0.1,"pose":0.1,"poubel":-0.1,"pourpr":0,"pourr":-0.8,"poussier":-0.2,"poetiqu":0.2,"pratic":0,"pratiqu":0.2,"premi":0.5,"premier":0.5,"press":-0.3,"presse":-0.3,"primit":-0.1,"primordial":0.13,"principal":0.1,"prisonni":-0.3,"prisonnier":-0.3,"privileg":0.2,"privilegie":0.2,"priv":0,"prive":0,"probabl":0,"prob":0,"prochain":0,"proch":0.32,"prodigi":0.15,"product":0.05,"profan":0.1,"professionnel":0.2,"profond":0.2,"progress":-0.11,"proletarien":-0.3,"propic":0.2,"propr":0.33,"protest":0,"provisoir":-0.1,"prudent":-0.1,"prussien":0,"precair":-0.12,"precieux":0.6,"precipit":0.17,"precipite":0.17,"prec":0.4,"precis":0.4,"precoc":0.1,"precurseur":0,"precedent":0,"predomin":0.3,"preexist":0.25,"prefer":0.75,"prefere":0.75,"preponder":0.2,"present":0.12,"preeminent":0.3,"pret":0.14,"psychiqu":0.05,"pu":-0.5,"public":0,"publiqu":0,"puber":0.16,"puiss":0.6,"puniss":-0.12,"pur":0.5,"pueril":-0.4,"pal":-0.05,"palichon":0.03,"pateux":-0.1,"penibl":-0.4,"pepit":0.7,"peremptoir":-0.14,"perim":-0.2,"perime":-0.2,"periss":-0.12,"petrif":-0.08,"petrifie":-0.08,"quadrangulair":0,"qualit":0.4,"quatriem":0,"quelconqu":-0.15,"quotidien":0,"raccourc":0,"radical":-0.1,"radieux":0.6,"raffin":0.1,"raffine":0.1,"raid":-0.2,"raison":0.2,"ramollo":-0.1,"ramollos":-0.1,"rapid":0.35,"raplapl":-0.1,"rar":0.25,"rassas":0.15,"rassasie":0.15,"rassur":0.2,"rat":-0.4,"rate":-0.4,"rauqu":-0.1,"rav":0.9,"recherch":0.3,"recherche":0.3,"recommand":0.2,"recommande":0.2,"reconnu":0.14,"reconnus":0.14,"rectangulair":0,"rectilign":0.09,"recul":-0.07,"recule":-0.07,"redoubl":0,"redouble":0,"redout":-0.4,"refroid":-0.05,"relat":0,"relev":0,"releve":0,"religi":0,"remarqu":0.4,"rempl":0,"renvers":0,"renverse":0,"respons":0.3,"ressembl":0.08,"rich":0.45,"richess":0.4,"ridicul":-0.75,"rigid":-0.1,"rigol":0.5,"rigour":0.1,"rir":0.5,"robust":0.2,"rocheux":0,"romain":0,"romanesqu":0,"romant":0.4,"rond":-0.3,"rondelet":-0.15,"ros":0.08,"rosatr":0.04,"roturi":-0.3,"roturier":-0.3,"roug":0.01,"roul":0,"rouss":0,"roussatr":0,"roux":0,"royal":0.2,"rud":-0.2,"ruineux":-0.11,"russ":0,"rebarb":-0.6,"recent":0.1,"rechauff":0.03,"rechauffe":0.03,"reduit":-0.1,"reel":0.2,"reflech":0.19,"regal":0.6,"reglementair":0.05,"reguli":0.1,"regulier":0.1,"republicain":0,"repugn":-0.7,"repet":0,"repete":0,"reserv":-0.05,"reserve":-0.05,"resist":-0.11,"resolu":0.2,"resolus":0.2,"retroact":0.25,"reuss":-0.2,"revolu":-0.16,"revolus":-0.16,"revolutionnair":0.4,"sacr":0.35,"sacre":0.35,"sag":0.2,"saign":-0.2,"saill":0.1,"sain":0.3,"salaud":-0.8,"sal":-0.1,"sale":-0.1,"sangl":-0.4,"sanguinolent":-0.2,"saoul":-0.7,"sarrasin":0,"satisfais":0.4,"satisf":0.3,"satisfait":0.3,"saumon":0.04,"saumatr":-0.17,"sauvag":0.08,"sav":0.5,"scandal":-0.8,"scolair":0.1,"scrupul":0,"sculpt":0.2,"sculpte":0.2,"sec":-0.25,"second":0,"secret":0.08,"semblabl":0,"sensibl":0.2,"sensuel":0.6,"sentimental":0.1,"serein":0.1,"serr":0,"serre":0,"seul":-0.1,"sexuel":0.3,"si":0.1,"silenci":0.06,"simpl":0.1,"simplist":0.05,"sincer":0.5,"singuli":-0.2,"singulier":-0.2,"sinistr":-0.65,"sirup":-0.05,"sixiem":0,"social":0.25,"societal":0.12,"dis":-0.3,"soigneux":0.22,"soign":0.1,"soigne":0.1,"soldatesqu":-0.07,"solennel":-0.5,"solid":0.5,"solitair":-0.2,"sombr":-0.33,"sommair":0.05,"somptueux":0.6,"sonor":0,"sordid":-0.4,"soucieux":-0.25,"soudain":0.03,"soup":-0.5,"soupl":0.1,"sourd":-0.3,"sourdingu":-0.15,"souri":0.7,"sourir":0.3,"sournois":-0.6,"souterrain":0,"souverain":0,"soviet":-0.45,"soyeux":0.1,"spacieux":0.19,"spirituel":0.1,"splendid":0.8,"spontan":0.2,"spontane":0.2,"spontaneit":0.3,"sportif":0.1,"sportiv":0.1,"special":0.5,"specif":-0.08,"stabl":-0.01,"strateg":0,"strict":-0.1,"stupid":-0.5,"stupef":0.4,"stupefait":0.4,"steril":-0.2,"sub":-0.2,"subit":-0.2,"subject":-0.1,"sublim":1,"subtil":0.2,"success":0,"suffis":0.1,"suiss":0,"suissess":0,"suiv":0,"suiveur":0,"suiveux":0,"sup":0.7,"superb":1,"superflu":-0.15,"superflus":-0.15,"supplementair":0.1,"supranational":0.17,"suprem":0.6,"superieur":0.4,"surpren":0.8,"surpr":0.55,"surpris":0.55,"susceptibl":-0.1,"suspect":-0.3,"suspendu":-0.1,"suspendus":-0.1,"symbol":0,"symp":0.2,"sympath":0.6,"sech":-0.25,"semit":0,"separ":-0.08,"separe":-0.08,"serieux":0.45,"sever":-0.25,"sur":0.2,"taciturn":-0.05,"taill":0.1,"taille":0.1,"talent":0.3,"taraud":-0.28,"tardif":-0.1,"tardiv":-0.1,"technicien":0.1,"tel":0,"tenac":-0.1,"tendr":0.28,"tendu":-0.45,"tendus":-0.45,"tenu":0,"tenus":0,"terminal":-0.14,"tern":-0.5,"terrestr":0,"terribl":-0.7,"terrifi":-0.7,"territorial":0,"teuton":0,"theolog":0,"theatral":-0.05,"timid":-0.1,"tied":0.05,"tomb":-0.15,"tombe":-0.15,"tordu":-0.2,"tordus":-0.2,"total":0.1,"touch":0.3,"tous":0.22,"tout":0.22,"traditionnel":0,"tragiqu":-0.4,"tranquill":0.15,"transalpin":0,"transcend":0.09,"transparent":0.3,"trembl":-0.1,"tremblot":-0.05,"tremp":0,"trempe":0,"tre":0.01,"tricolor":0.1,"triomphal":0.6,"triomph":0.9,"trist":-0.3,"troisiem":0,"trompeur":-0.3,"trompeux":-0.3,"trop":-0.25,"troubl":-0.1,"trouble":-0.1,"tudesqu":0,"turc":0,"turqu":0,"telephon":0,"tenebr":-0.16,"terebr":-0.28,"ultim":0.6,"ultramontain":0,"ulterieur":0,"uni":0.1,"uniqu":0.43,"unis":0.1,"universel":0.2,"urgent":-0.1,"util":0.2,"vacill":-0.05,"vagu":-0.4,"vain":-0.3,"valabl":0.4,"valetudinair":-0.18,"vapor":0.09,"vast":0.38,"verdatr":0,"vert":0,"vertical":0,"vertigin":-0.1,"vertueux":0.05,"victori":0.8,"vid":-0.29,"vieil":0.5,"vierg":0.1,"vieux":0.5,"vif":0.27,"vigil":0.3,"vigour":0.4,"vilain":-0.6,"violent":-0.5,"violet":0,"viril":0.4,"visibl":0,"visqueux":-0.05,"vital":0.1,"vitr":0,"vitre":0,"vivac":0.4,"viv":0.27,"voisin":0.05,"vol":0,"volontair":0,"volont":0.1,"voluptu":0.6,"vom":-0.2,"vout":0,"voute":0,"vrai":0,"vrais":0.05,"vulgair":-0.7,"vulner":-0.1,"veloc":0.17,"verit":0.2,"vetu":0,"vetus":0,"waouh":0.3,"acre":-0.3,"apre":-0.2,"eblou":0.2,"ebouriff":0.45,"ecarlat":0.01,"ecart":-0.1,"ecarte":-0.1,"eclair":0.6,"eclaire":0.6,"eclat":0.4,"ecoeur":0.2,"econom":0.1,"ecras":-0.2,"ecrase":-0.2,"edifi":0,"egal":0.2,"egar":-0.2,"egare":-0.2,"egoist":-0.7,"elanc":0,"elance":0,"elast":0.05,"electr":-0.15,"eloign":-0.05,"eloigne":-0.05,"eleg":0.7,"elementair":0.1,"elephantesqu":0.05,"emeraud":0,"eminent":0.07,"emouss":-0.3,"emousse":-0.3,"emouv":0.4,"emu":0.1,"emus":0.1,"emech":-0.25,"emeche":-0.25,"enigmat":0.1,"enorm":0.22,"epais":0.06,"epaiss":0.06,"epanou":0.28,"epanoui":0.28,"epar":-0.1,"epars":-0.1,"epat":0.43,"ephemer":0,"epouvant":-0.7,"eprouv":0.3,"eprouve":0.3,"epuis":-0.6,"epuise":-0.6,"equilibr":0.15,"equilibre":0.15,"equip":-0.1,"equit":0.11,"equivalent":0.05,"equivoqu":-0.12,"erot":0.2,"esoter":0.18,"eteint":-0.4,"etendu":0.05,"etendus":0.05,"eternel":0.1,"ether":0.09,"ethere":0.09,"etincel":0.3,"eton":0.4,"etonne":0.4,"etrang":-0.5,"etranger":-0.2,"etriqu":0.05,"etrique":0.05,"etroit":-0.25,"evacu":-0.15,"evacue":-0.15,"evanou":-0.03,"evanoui":-0.03,"evas":-0.2,"eventuel":0,"evident":0.1}
},{}],100:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const pattern = require('./pattern_fr.json');
const negations = require('./negations_fr.json');

module.exports = {
  afinn: undefined,
  pattern,
  senticon: undefined,
  negations,
  stemmed: true,
};

},{"./negations_fr.json":98,"./pattern_fr.json":99}],101:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const { Among, BaseStemmer } = require('@nlpjs/core');

/* eslint-disable */
class StemmerFr extends BaseStemmer {
  constructor(container) {
    super(container);
    this.name = 'stemmer-fr';
    this.I_p2 = 0;
    this.I_p1 = 0;
    this.I_pV = 0;
  }

  copy_from(other) {
    this.I_p2 = other.I_p2;
    this.I_p1 = other.I_p1;
    this.I_pV = other.I_pV;
    super.copy_from(other);
  }

  r_prelude() {
    let v_1;
    let v_2;
    let v_3;
    let v_4;
    // repeat, line 38
    replab0: while (true) {
      v_1 = this.cursor;
      let lab1 = true;
      lab1: while (lab1 == true) {
        lab1 = false;
        // goto, line 38
        golab2: while (true) {
          v_2 = this.cursor;
          let lab3 = true;
          lab3: while (lab3 == true) {
            lab3 = false;
            // (, line 38
            // or, line 44
            let lab4 = true;
            lab4: while (lab4 == true) {
              lab4 = false;
              v_3 = this.cursor;
              let lab5 = true;
              lab5: while (lab5 == true) {
                lab5 = false;
                // (, line 40
                if (!this.in_grouping(StemmerFr.g_v, 97, 251)) {
                  break;
                }
                // [, line 40
                this.bra = this.cursor;
                // or, line 40
                let lab6 = true;
                lab6: while (lab6 == true) {
                  lab6 = false;
                  v_4 = this.cursor;
                  let lab7 = true;
                  while (lab7 == true) {
                    lab7 = false;
                    // (, line 40
                    // literal, line 40
                    if (!this.eq_s(1, 'u')) {
                      break;
                    }
                    // ], line 40
                    this.ket = this.cursor;
                    if (!this.in_grouping(StemmerFr.g_v, 97, 251)) {
                      break;
                    }
                    // <-, line 40
                    if (!this.slice_from('U')) {
                      return false;
                    }
                    break lab6;
                  }
                  this.cursor = v_4;
                  let lab8 = true;
                  while (lab8 == true) {
                    lab8 = false;
                    // (, line 41
                    // literal, line 41
                    if (!this.eq_s(1, 'i')) {
                      break;
                    }
                    // ], line 41
                    this.ket = this.cursor;
                    if (!this.in_grouping(StemmerFr.g_v, 97, 251)) {
                      break;
                    }
                    // <-, line 41
                    if (!this.slice_from('I')) {
                      return false;
                    }
                    break lab6;
                  }
                  this.cursor = v_4;
                  // (, line 42
                  // literal, line 42
                  if (!this.eq_s(1, 'y')) {
                    break lab5;
                  }
                  // ], line 42
                  this.ket = this.cursor;
                  // <-, line 42
                  if (!this.slice_from('Y')) {
                    return false;
                  }
                }
                break lab4;
              }
              this.cursor = v_3;
              let lab9 = true;
              while (lab9 == true) {
                lab9 = false;
                // (, line 45
                // [, line 45
                this.bra = this.cursor;
                // literal, line 45
                if (!this.eq_s(1, 'y')) {
                  break;
                }
                // ], line 45
                this.ket = this.cursor;
                if (!this.in_grouping(StemmerFr.g_v, 97, 251)) {
                  break;
                }
                // <-, line 45
                if (!this.slice_from('Y')) {
                  return false;
                }
                break lab4;
              }
              this.cursor = v_3;
              // (, line 47
              // literal, line 47
              if (!this.eq_s(1, 'q')) {
                break lab3;
              }
              // [, line 47
              this.bra = this.cursor;
              // literal, line 47
              if (!this.eq_s(1, 'u')) {
                break lab3;
              }
              // ], line 47
              this.ket = this.cursor;
              // <-, line 47
              if (!this.slice_from('U')) {
                return false;
              }
            }
            this.cursor = v_2;
            break golab2;
          }
          this.cursor = v_2;
          if (this.cursor >= this.limit) {
            break lab1;
          }
          this.cursor++;
        }
        continue replab0;
      }
      this.cursor = v_1;
      break;
    }
    return true;
  }

  r_mark_regions() {
    let v_1;
    let v_2;
    let v_4;
    // (, line 50
    this.I_pV = this.limit;
    this.I_p1 = this.limit;
    this.I_p2 = this.limit;
    // do, line 56
    v_1 = this.cursor;
    let lab0 = true;
    lab0: while (lab0 == true) {
      lab0 = false;
      // (, line 56
      // or, line 58
      let lab1 = true;
      lab1: while (lab1 == true) {
        lab1 = false;
        v_2 = this.cursor;
        let lab2 = true;
        while (lab2 == true) {
          lab2 = false;
          // (, line 57
          if (!this.in_grouping(StemmerFr.g_v, 97, 251)) {
            break;
          }
          if (!this.in_grouping(StemmerFr.g_v, 97, 251)) {
            break;
          }
          // next, line 57
          if (this.cursor >= this.limit) {
            break;
          }
          this.cursor++;
          break lab1;
        }
        this.cursor = v_2;
        let lab3 = true;
        while (lab3 == true) {
          lab3 = false;
          // among, line 59
          if (this.find_among(StemmerFr.a_0, 3) == 0) {
            break;
          }
          break lab1;
        }
        this.cursor = v_2;
        // (, line 66
        // next, line 66
        if (this.cursor >= this.limit) {
          break lab0;
        }
        this.cursor++;
        // gopast, line 66
        golab4: while (true) {
          let lab5 = true;
          while (lab5 == true) {
            lab5 = false;
            if (!this.in_grouping(StemmerFr.g_v, 97, 251)) {
              break;
            }
            break golab4;
          }
          if (this.cursor >= this.limit) {
            break lab0;
          }
          this.cursor++;
        }
      }
      // setmark pV, line 67
      this.I_pV = this.cursor;
    }
    this.cursor = v_1;
    // do, line 69
    v_4 = this.cursor;
    let lab6 = true;
    lab6: while (lab6 == true) {
      lab6 = false;
      // (, line 69
      // gopast, line 70
      golab7: while (true) {
        let lab8 = true;
        while (lab8 == true) {
          lab8 = false;
          if (!this.in_grouping(StemmerFr.g_v, 97, 251)) {
            break;
          }
          break golab7;
        }
        if (this.cursor >= this.limit) {
          break lab6;
        }
        this.cursor++;
      }
      // gopast, line 70
      golab9: while (true) {
        let lab10 = true;
        while (lab10 == true) {
          lab10 = false;
          if (!this.out_grouping(StemmerFr.g_v, 97, 251)) {
            break;
          }
          break golab9;
        }
        if (this.cursor >= this.limit) {
          break lab6;
        }
        this.cursor++;
      }
      // setmark p1, line 70
      this.I_p1 = this.cursor;
      // gopast, line 71
      golab11: while (true) {
        let lab12 = true;
        while (lab12 == true) {
          lab12 = false;
          if (!this.in_grouping(StemmerFr.g_v, 97, 251)) {
            break;
          }
          break golab11;
        }
        if (this.cursor >= this.limit) {
          break lab6;
        }
        this.cursor++;
      }
      // gopast, line 71
      golab13: while (true) {
        let lab14 = true;
        while (lab14 == true) {
          lab14 = false;
          if (!this.out_grouping(StemmerFr.g_v, 97, 251)) {
            break;
          }
          break golab13;
        }
        if (this.cursor >= this.limit) {
          break lab6;
        }
        this.cursor++;
      }
      // setmark p2, line 71
      this.I_p2 = this.cursor;
    }
    this.cursor = v_4;
    return true;
  }

  r_postlude() {
    let among_var;
    let v_1;
    // repeat, line 75
    replab0: while (true) {
      v_1 = this.cursor;
      let lab1 = true;
      lab1: while (lab1 == true) {
        lab1 = false;
        // (, line 75
        // [, line 77
        this.bra = this.cursor;
        // substring, line 77
        among_var = this.find_among(StemmerFr.a_1, 4);
        if (among_var == 0) {
          break;
        }
        // ], line 77
        this.ket = this.cursor;
        switch (among_var) {
          case 0:
            break lab1;
          case 1:
            // (, line 78
            // <-, line 78
            if (!this.slice_from('i')) {
              return false;
            }
            break;
          case 2:
            // (, line 79
            // <-, line 79
            if (!this.slice_from('u')) {
              return false;
            }
            break;
          case 3:
            // (, line 80
            // <-, line 80
            if (!this.slice_from('y')) {
              return false;
            }
            break;
          case 4:
            // (, line 81
            // next, line 81
            if (this.cursor >= this.limit) {
              break lab1;
            }
            this.cursor++;
            break;
        }
        continue replab0;
      }
      this.cursor = v_1;
      break;
    }
    return true;
  }

  r_RV() {
    if (!(this.I_pV <= this.cursor)) {
      return false;
    }
    return true;
  }

  r_R1() {
    if (!(this.I_p1 <= this.cursor)) {
      return false;
    }
    return true;
  }

  r_R2() {
    if (!(this.I_p2 <= this.cursor)) {
      return false;
    }
    return true;
  }

  r_standard_suffix() {
    let among_var;
    let v_1;
    let v_2;
    let v_3;
    let v_4;
    let v_5;
    let v_6;
    let v_7;
    let v_8;
    let v_9;
    let v_10;
    let v_11;
    // (, line 91
    // [, line 92
    this.ket = this.cursor;
    // substring, line 92
    among_var = this.find_among_b(StemmerFr.a_4, 43);
    if (among_var == 0) {
      return false;
    }
    // ], line 92
    this.bra = this.cursor;
    switch (among_var) {
      case 0:
        return false;
      case 1:
        // (, line 96
        // call R2, line 96
        if (!this.r_R2()) {
          return false;
        }
        // delete, line 96
        if (!this.slice_del()) {
          return false;
        }
        break;
      case 2:
        // (, line 99
        // call R2, line 99
        if (!this.r_R2()) {
          return false;
        }
        // delete, line 99
        if (!this.slice_del()) {
          return false;
        }
        // try, line 100
        v_1 = this.limit - this.cursor;
        var lab0 = true;
        while (lab0 == true) {
          lab0 = false;
          // (, line 100
          // [, line 100
          this.ket = this.cursor;
          // literal, line 100
          if (!this.eq_s_b(2, 'ic')) {
            this.cursor = this.limit - v_1;
            break;
          }
          // ], line 100
          this.bra = this.cursor;
          // or, line 100
          let lab1 = true;
          lab1: while (lab1 == true) {
            lab1 = false;
            v_2 = this.limit - this.cursor;
            let lab2 = true;
            while (lab2 == true) {
              lab2 = false;
              // (, line 100
              // call R2, line 100
              if (!this.r_R2()) {
                break;
              }
              // delete, line 100
              if (!this.slice_del()) {
                return false;
              }
              break lab1;
            }
            this.cursor = this.limit - v_2;
            // <-, line 100
            if (!this.slice_from('iqU')) {
              return false;
            }
          }
        }
        break;
      case 3:
        // (, line 104
        // call R2, line 104
        if (!this.r_R2()) {
          return false;
        }
        // <-, line 104
        if (!this.slice_from('log')) {
          return false;
        }
        break;
      case 4:
        // (, line 107
        // call R2, line 107
        if (!this.r_R2()) {
          return false;
        }
        // <-, line 107
        if (!this.slice_from('u')) {
          return false;
        }
        break;
      case 5:
        // (, line 110
        // call R2, line 110
        if (!this.r_R2()) {
          return false;
        }
        // <-, line 110
        if (!this.slice_from('ent')) {
          return false;
        }
        break;
      case 6:
        // (, line 113
        // call RV, line 114
        if (!this.r_RV()) {
          return false;
        }
        // delete, line 114
        if (!this.slice_del()) {
          return false;
        }
        // try, line 115
        v_3 = this.limit - this.cursor;
        var lab3 = true;
        lab3: while (lab3 == true) {
          lab3 = false;
          // (, line 115
          // [, line 116
          this.ket = this.cursor;
          // substring, line 116
          among_var = this.find_among_b(StemmerFr.a_2, 6);
          if (among_var == 0) {
            this.cursor = this.limit - v_3;
            break;
          }
          // ], line 116
          this.bra = this.cursor;
          switch (among_var) {
            case 0:
              this.cursor = this.limit - v_3;
              break lab3;
            case 1:
              // (, line 117
              // call R2, line 117
              if (!this.r_R2()) {
                this.cursor = this.limit - v_3;
                break lab3;
              }
              // delete, line 117
              if (!this.slice_del()) {
                return false;
              }
              // [, line 117
              this.ket = this.cursor;
              // literal, line 117
              if (!this.eq_s_b(2, 'at')) {
                this.cursor = this.limit - v_3;
                break lab3;
              }
              // ], line 117
              this.bra = this.cursor;
              // call R2, line 117
              if (!this.r_R2()) {
                this.cursor = this.limit - v_3;
                break lab3;
              }
              // delete, line 117
              if (!this.slice_del()) {
                return false;
              }
              break;
            case 2:
              // (, line 118
              // or, line 118
              var lab4 = true;
              lab4: while (lab4 == true) {
                lab4 = false;
                v_4 = this.limit - this.cursor;
                let lab5 = true;
                while (lab5 == true) {
                  lab5 = false;
                  // (, line 118
                  // call R2, line 118
                  if (!this.r_R2()) {
                    break;
                  }
                  // delete, line 118
                  if (!this.slice_del()) {
                    return false;
                  }
                  break lab4;
                }
                this.cursor = this.limit - v_4;
                // (, line 118
                // call R1, line 118
                if (!this.r_R1()) {
                  this.cursor = this.limit - v_3;
                  break lab3;
                }
                // <-, line 118
                if (!this.slice_from('eux')) {
                  return false;
                }
              }
              break;
            case 3:
              // (, line 120
              // call R2, line 120
              if (!this.r_R2()) {
                this.cursor = this.limit - v_3;
                break lab3;
              }
              // delete, line 120
              if (!this.slice_del()) {
                return false;
              }
              break;
            case 4:
              // (, line 122
              // call RV, line 122
              if (!this.r_RV()) {
                this.cursor = this.limit - v_3;
                break lab3;
              }
              // <-, line 122
              if (!this.slice_from('i')) {
                return false;
              }
              break;
          }
        }
        break;
      case 7:
        // (, line 128
        // call R2, line 129
        if (!this.r_R2()) {
          return false;
        }
        // delete, line 129
        if (!this.slice_del()) {
          return false;
        }
        // try, line 130
        v_5 = this.limit - this.cursor;
        var lab6 = true;
        lab6: while (lab6 == true) {
          lab6 = false;
          // (, line 130
          // [, line 131
          this.ket = this.cursor;
          // substring, line 131
          among_var = this.find_among_b(StemmerFr.a_3, 3);
          if (among_var == 0) {
            this.cursor = this.limit - v_5;
            break;
          }
          // ], line 131
          this.bra = this.cursor;
          switch (among_var) {
            case 0:
              this.cursor = this.limit - v_5;
              break lab6;
            case 1:
              // (, line 132
              // or, line 132
              var lab7 = true;
              lab7: while (lab7 == true) {
                lab7 = false;
                v_6 = this.limit - this.cursor;
                let lab8 = true;
                while (lab8 == true) {
                  lab8 = false;
                  // (, line 132
                  // call R2, line 132
                  if (!this.r_R2()) {
                    break;
                  }
                  // delete, line 132
                  if (!this.slice_del()) {
                    return false;
                  }
                  break lab7;
                }
                this.cursor = this.limit - v_6;
                // <-, line 132
                if (!this.slice_from('abl')) {
                  return false;
                }
              }
              break;
            case 2:
              // (, line 133
              // or, line 133
              var lab9 = true;
              lab9: while (lab9 == true) {
                lab9 = false;
                v_7 = this.limit - this.cursor;
                let lab10 = true;
                while (lab10 == true) {
                  lab10 = false;
                  // (, line 133
                  // call R2, line 133
                  if (!this.r_R2()) {
                    break;
                  }
                  // delete, line 133
                  if (!this.slice_del()) {
                    return false;
                  }
                  break lab9;
                }
                this.cursor = this.limit - v_7;
                // <-, line 133
                if (!this.slice_from('iqU')) {
                  return false;
                }
              }
              break;
            case 3:
              // (, line 134
              // call R2, line 134
              if (!this.r_R2()) {
                this.cursor = this.limit - v_5;
                break lab6;
              }
              // delete, line 134
              if (!this.slice_del()) {
                return false;
              }
              break;
          }
        }
        break;
      case 8:
        // (, line 140
        // call R2, line 141
        if (!this.r_R2()) {
          return false;
        }
        // delete, line 141
        if (!this.slice_del()) {
          return false;
        }
        // try, line 142
        v_8 = this.limit - this.cursor;
        var lab11 = true;
        while (lab11 == true) {
          lab11 = false;
          // (, line 142
          // [, line 142
          this.ket = this.cursor;
          // literal, line 142
          if (!this.eq_s_b(2, 'at')) {
            this.cursor = this.limit - v_8;
            break;
          }
          // ], line 142
          this.bra = this.cursor;
          // call R2, line 142
          if (!this.r_R2()) {
            this.cursor = this.limit - v_8;
            break;
          }
          // delete, line 142
          if (!this.slice_del()) {
            return false;
          }
          // [, line 142
          this.ket = this.cursor;
          // literal, line 142
          if (!this.eq_s_b(2, 'ic')) {
            this.cursor = this.limit - v_8;
            break;
          }
          // ], line 142
          this.bra = this.cursor;
          // or, line 142
          let lab12 = true;
          lab12: while (lab12 == true) {
            lab12 = false;
            v_9 = this.limit - this.cursor;
            let lab13 = true;
            while (lab13 == true) {
              lab13 = false;
              // (, line 142
              // call R2, line 142
              if (!this.r_R2()) {
                break;
              }
              // delete, line 142
              if (!this.slice_del()) {
                return false;
              }
              break lab12;
            }
            this.cursor = this.limit - v_9;
            // <-, line 142
            if (!this.slice_from('iqU')) {
              return false;
            }
          }
        }
        break;
      case 9:
        // (, line 144
        // <-, line 144
        if (!this.slice_from('eau')) {
          return false;
        }
        break;
      case 10:
        // (, line 145
        // call R1, line 145
        if (!this.r_R1()) {
          return false;
        }
        // <-, line 145
        if (!this.slice_from('al')) {
          return false;
        }
        break;
      case 11:
        // (, line 147
        // or, line 147
        var lab14 = true;
        lab14: while (lab14 == true) {
          lab14 = false;
          v_10 = this.limit - this.cursor;
          let lab15 = true;
          while (lab15 == true) {
            lab15 = false;
            // (, line 147
            // call R2, line 147
            if (!this.r_R2()) {
              break;
            }
            // delete, line 147
            if (!this.slice_del()) {
              return false;
            }
            break lab14;
          }
          this.cursor = this.limit - v_10;
          // (, line 147
          // call R1, line 147
          if (!this.r_R1()) {
            return false;
          }
          // <-, line 147
          if (!this.slice_from('eux')) {
            return false;
          }
        }
        break;
      case 12:
        // (, line 150
        // call R1, line 150
        if (!this.r_R1()) {
          return false;
        }
        if (!this.out_grouping_b(StemmerFr.g_v, 97, 251)) {
          return false;
        }
        // delete, line 150
        if (!this.slice_del()) {
          return false;
        }
        break;
      case 13:
        // (, line 155
        // call RV, line 155
        if (!this.r_RV()) {
          return false;
        }
        // fail, line 155
        // (, line 155
        // <-, line 155
        if (!this.slice_from('ant')) {
          return false;
        }
        return false;
      case 14:
        // (, line 156
        // call RV, line 156
        if (!this.r_RV()) {
          return false;
        }
        // fail, line 156
        // (, line 156
        // <-, line 156
        if (!this.slice_from('ent')) {
          return false;
        }
        return false;
      case 15:
        // (, line 158
        // test, line 158
        v_11 = this.limit - this.cursor;
        // (, line 158
        if (!this.in_grouping_b(StemmerFr.g_v, 97, 251)) {
          return false;
        }
        // call RV, line 158
        if (!this.r_RV()) {
          return false;
        }
        this.cursor = this.limit - v_11;
        // fail, line 158
        // (, line 158
        // delete, line 158
        if (!this.slice_del()) {
          return false;
        }
        return false;
    }
    return true;
  }

  r_i_verb_suffix() {
    let among_var;
    let v_1;
    let v_2;
    // setlimit, line 163
    v_1 = this.limit - this.cursor;
    // tomark, line 163
    if (this.cursor < this.I_pV) {
      return false;
    }
    this.cursor = this.I_pV;
    v_2 = this.limit_backward;
    this.limit_backward = this.cursor;
    this.cursor = this.limit - v_1;
    // (, line 163
    // [, line 164
    this.ket = this.cursor;
    // substring, line 164
    among_var = this.find_among_b(StemmerFr.a_5, 35);
    if (among_var == 0) {
      this.limit_backward = v_2;
      return false;
    }
    // ], line 164
    this.bra = this.cursor;
    switch (among_var) {
      case 0:
        this.limit_backward = v_2;
        return false;
      case 1:
        // (, line 170
        if (!this.out_grouping_b(StemmerFr.g_v, 97, 251)) {
          this.limit_backward = v_2;
          return false;
        }
        // delete, line 170
        if (!this.slice_del()) {
          return false;
        }
        break;
    }
    this.limit_backward = v_2;
    return true;
  }

  r_verb_suffix() {
    let among_var;
    let v_1;
    let v_2;
    let v_3;
    // setlimit, line 174
    v_1 = this.limit - this.cursor;
    // tomark, line 174
    if (this.cursor < this.I_pV) {
      return false;
    }
    this.cursor = this.I_pV;
    v_2 = this.limit_backward;
    this.limit_backward = this.cursor;
    this.cursor = this.limit - v_1;
    // (, line 174
    // [, line 175
    this.ket = this.cursor;
    // substring, line 175
    among_var = this.find_among_b(StemmerFr.a_6, 38);
    if (among_var == 0) {
      this.limit_backward = v_2;
      return false;
    }
    // ], line 175
    this.bra = this.cursor;
    switch (among_var) {
      case 0:
        this.limit_backward = v_2;
        return false;
      case 1:
        // (, line 177
        // call R2, line 177
        if (!this.r_R2()) {
          this.limit_backward = v_2;
          return false;
        }
        // delete, line 177
        if (!this.slice_del()) {
          return false;
        }
        break;
      case 2:
        // (, line 185
        // delete, line 185
        if (!this.slice_del()) {
          return false;
        }
        break;
      case 3:
        // (, line 190
        // delete, line 190
        if (!this.slice_del()) {
          return false;
        }
        // try, line 191
        v_3 = this.limit - this.cursor;
        var lab0 = true;
        while (lab0 == true) {
          lab0 = false;
          // (, line 191
          // [, line 191
          this.ket = this.cursor;
          // literal, line 191
          if (!this.eq_s_b(1, 'e')) {
            this.cursor = this.limit - v_3;
            break;
          }
          // ], line 191
          this.bra = this.cursor;
          // delete, line 191
          if (!this.slice_del()) {
            return false;
          }
        }
        break;
    }
    this.limit_backward = v_2;
    return true;
  }

  r_residual_suffix() {
    let among_var;
    let v_1;
    let v_2;
    let v_3;
    let v_4;
    let v_5;
    // (, line 198
    // try, line 199
    v_1 = this.limit - this.cursor;
    let lab0 = true;
    while (lab0 == true) {
      lab0 = false;
      // (, line 199
      // [, line 199
      this.ket = this.cursor;
      // literal, line 199
      if (!this.eq_s_b(1, 's')) {
        this.cursor = this.limit - v_1;
        break;
      }
      // ], line 199
      this.bra = this.cursor;
      // test, line 199
      v_2 = this.limit - this.cursor;
      if (!this.out_grouping_b(StemmerFr.g_keep_with_s, 97, 232)) {
        this.cursor = this.limit - v_1;
        break;
      }
      this.cursor = this.limit - v_2;
      // delete, line 199
      if (!this.slice_del()) {
        return false;
      }
    }
    // setlimit, line 200
    v_3 = this.limit - this.cursor;
    // tomark, line 200
    if (this.cursor < this.I_pV) {
      return false;
    }
    this.cursor = this.I_pV;
    v_4 = this.limit_backward;
    this.limit_backward = this.cursor;
    this.cursor = this.limit - v_3;
    // (, line 200
    // [, line 201
    this.ket = this.cursor;
    // substring, line 201
    among_var = this.find_among_b(StemmerFr.a_7, 7);
    if (among_var == 0) {
      this.limit_backward = v_4;
      return false;
    }
    // ], line 201
    this.bra = this.cursor;
    switch (among_var) {
      case 0:
        this.limit_backward = v_4;
        return false;
      case 1:
        // (, line 202
        // call R2, line 202
        if (!this.r_R2()) {
          this.limit_backward = v_4;
          return false;
        }
        // or, line 202
        var lab1 = true;
        lab1: while (lab1 == true) {
          lab1 = false;
          v_5 = this.limit - this.cursor;
          let lab2 = true;
          while (lab2 == true) {
            lab2 = false;
            // literal, line 202
            if (!this.eq_s_b(1, 's')) {
              break;
            }
            break lab1;
          }
          this.cursor = this.limit - v_5;
          // literal, line 202
          if (!this.eq_s_b(1, 't')) {
            this.limit_backward = v_4;
            return false;
          }
        }
        // delete, line 202
        if (!this.slice_del()) {
          return false;
        }
        break;
      case 2:
        // (, line 204
        // <-, line 204
        if (!this.slice_from('i')) {
          return false;
        }
        break;
      case 3:
        // (, line 205
        // delete, line 205
        if (!this.slice_del()) {
          return false;
        }
        break;
      case 4:
        // (, line 206
        // literal, line 206
        if (!this.eq_s_b(2, 'gu')) {
          this.limit_backward = v_4;
          return false;
        }
        // delete, line 206
        if (!this.slice_del()) {
          return false;
        }
        break;
    }
    this.limit_backward = v_4;
    return true;
  }

  r_un_double() {
    let v_1;
    // (, line 211
    // test, line 212
    v_1 = this.limit - this.cursor;
    // among, line 212
    if (this.find_among_b(StemmerFr.a_8, 5) == 0) {
      return false;
    }
    this.cursor = this.limit - v_1;
    // [, line 212
    this.ket = this.cursor;
    // next, line 212
    if (this.cursor <= this.limit_backward) {
      return false;
    }
    this.cursor--;
    // ], line 212
    this.bra = this.cursor;
    // delete, line 212
    if (!this.slice_del()) {
      return false;
    }
    return true;
  }

  r_un_accent() {
    let v_3;
    // (, line 215
    // atleast, line 216
    {
      let v_1 = 1;
      // atleast, line 216
      replab0: while (true) {
        let lab1 = true;
        while (lab1 == true) {
          lab1 = false;
          if (!this.out_grouping_b(StemmerFr.g_v, 97, 251)) {
            break;
          }
          v_1--;
          continue replab0;
        }
        break;
      }
      if (v_1 > 0) {
        return false;
      }
    }
    // [, line 217
    this.ket = this.cursor;
    // or, line 217
    let lab2 = true;
    lab2: while (lab2 == true) {
      lab2 = false;
      v_3 = this.limit - this.cursor;
      let lab3 = true;
      while (lab3 == true) {
        lab3 = false;
        // literal, line 217
        if (!this.eq_s_b(1, '\u00E9')) {
          break;
        }
        break lab2;
      }
      this.cursor = this.limit - v_3;
      // literal, line 217
      if (!this.eq_s_b(1, '\u00E8')) {
        return false;
      }
    }
    // ], line 217
    this.bra = this.cursor;
    // <-, line 217
    if (!this.slice_from('e')) {
      return false;
    }
    return true;
  }

  innerStem() {
    let v_1;
    let v_2;
    let v_3;
    let v_4;
    let v_5;
    let v_6;
    let v_7;
    let v_8;
    let v_9;
    let v_10;
    let v_11;
    // (, line 221
    // do, line 223
    v_1 = this.cursor;
    let lab0 = true;
    while (lab0 == true) {
      lab0 = false;
      // call prelude, line 223
      if (!this.r_prelude()) {
        break;
      }
    }
    this.cursor = v_1;
    // do, line 224
    v_2 = this.cursor;
    let lab1 = true;
    while (lab1 == true) {
      lab1 = false;
      // call mark_regions, line 224
      if (!this.r_mark_regions()) {
        break;
      }
    }
    this.cursor = v_2;
    // backwards, line 225
    this.limit_backward = this.cursor;
    this.cursor = this.limit;
    // (, line 225
    // do, line 227
    v_3 = this.limit - this.cursor;
    let lab2 = true;
    lab2: while (lab2 == true) {
      lab2 = false;
      // (, line 227
      // or, line 237
      let lab3 = true;
      lab3: while (lab3 == true) {
        lab3 = false;
        v_4 = this.limit - this.cursor;
        let lab4 = true;
        lab4: while (lab4 == true) {
          lab4 = false;
          // (, line 228
          // and, line 233
          v_5 = this.limit - this.cursor;
          // (, line 229
          // or, line 229
          let lab5 = true;
          lab5: while (lab5 == true) {
            lab5 = false;
            v_6 = this.limit - this.cursor;
            let lab6 = true;
            while (lab6 == true) {
              lab6 = false;
              // call standard_suffix, line 229
              if (!this.r_standard_suffix()) {
                break;
              }
              break lab5;
            }
            this.cursor = this.limit - v_6;
            let lab7 = true;
            while (lab7 == true) {
              lab7 = false;
              // call i_verb_suffix, line 230
              if (!this.r_i_verb_suffix()) {
                break;
              }
              break lab5;
            }
            this.cursor = this.limit - v_6;
            // call verb_suffix, line 231
            if (!this.r_verb_suffix()) {
              break lab4;
            }
          }
          this.cursor = this.limit - v_5;
          // try, line 234
          v_7 = this.limit - this.cursor;
          let lab8 = true;
          lab8: while (lab8 == true) {
            lab8 = false;
            // (, line 234
            // [, line 234
            this.ket = this.cursor;
            // or, line 234
            let lab9 = true;
            lab9: while (lab9 == true) {
              lab9 = false;
              v_8 = this.limit - this.cursor;
              let lab10 = true;
              while (lab10 == true) {
                lab10 = false;
                // (, line 234
                // literal, line 234
                if (!this.eq_s_b(1, 'Y')) {
                  break;
                }
                // ], line 234
                this.bra = this.cursor;
                // <-, line 234
                if (!this.slice_from('i')) {
                  return false;
                }
                break lab9;
              }
              this.cursor = this.limit - v_8;
              // (, line 235
              // literal, line 235
              if (!this.eq_s_b(1, '\u00E7')) {
                this.cursor = this.limit - v_7;
                break lab8;
              }
              // ], line 235
              this.bra = this.cursor;
              // <-, line 235
              if (!this.slice_from('c')) {
                return false;
              }
            }
          }
          break lab3;
        }
        this.cursor = this.limit - v_4;
        // call residual_suffix, line 238
        if (!this.r_residual_suffix()) {
          break lab2;
        }
      }
    }
    this.cursor = this.limit - v_3;
    // do, line 243
    v_9 = this.limit - this.cursor;
    let lab11 = true;
    while (lab11 == true) {
      lab11 = false;
      // call un_double, line 243
      if (!this.r_un_double()) {
        break;
      }
    }
    this.cursor = this.limit - v_9;
    // do, line 244
    v_10 = this.limit - this.cursor;
    let lab12 = true;
    while (lab12 == true) {
      lab12 = false;
      // call un_accent, line 244
      if (!this.r_un_accent()) {
        break;
      }
    }
    this.cursor = this.limit - v_10;
    this.cursor = this.limit_backward; // do, line 246
    v_11 = this.cursor;
    let lab13 = true;
    while (lab13 == true) {
      lab13 = false;
      // call postlude, line 246
      if (!this.r_postlude()) {
        break;
      }
    }
    this.cursor = v_11;
    return true;
  }
}

StemmerFr.methodObject = new StemmerFr();

StemmerFr.a_0 = [
  new Among('col', -1, -1),
  new Among('par', -1, -1),
  new Among('tap', -1, -1)
];

StemmerFr.a_1 = [
  new Among('', -1, 4),
  new Among('I', 0, 1),
  new Among('U', 0, 2),
  new Among('Y', 0, 3)
];

StemmerFr.a_2 = [
  new Among('iqU', -1, 3),
  new Among('abl', -1, 3),
  new Among('I\u00E8r', -1, 4),
  new Among('i\u00E8r', -1, 4),
  new Among('eus', -1, 2),
  new Among('iv', -1, 1)
];

StemmerFr.a_3 = [
  new Among('ic', -1, 2),
  new Among('abil', -1, 1),
  new Among('iv', -1, 3)
];

StemmerFr.a_4 = [
  new Among('iqUe', -1, 1),
  new Among('atrice', -1, 2),
  new Among('ance', -1, 1),
  new Among('ence', -1, 5),
  new Among('logie', -1, 3),
  new Among('able', -1, 1),
  new Among('isme', -1, 1),
  new Among('euse', -1, 11),
  new Among('iste', -1, 1),
  new Among('ive', -1, 8),
  new Among('if', -1, 8),
  new Among('usion', -1, 4),
  new Among('ation', -1, 2),
  new Among('ution', -1, 4),
  new Among('ateur', -1, 2),
  new Among('iqUes', -1, 1),
  new Among('atrices', -1, 2),
  new Among('ances', -1, 1),
  new Among('ences', -1, 5),
  new Among('logies', -1, 3),
  new Among('ables', -1, 1),
  new Among('ismes', -1, 1),
  new Among('euses', -1, 11),
  new Among('istes', -1, 1),
  new Among('ives', -1, 8),
  new Among('ifs', -1, 8),
  new Among('usions', -1, 4),
  new Among('ations', -1, 2),
  new Among('utions', -1, 4),
  new Among('ateurs', -1, 2),
  new Among('ments', -1, 15),
  new Among('ements', 30, 6),
  new Among('issements', 31, 12),
  new Among('it\u00E9s', -1, 7),
  new Among('ment', -1, 15),
  new Among('ement', 34, 6),
  new Among('issement', 35, 12),
  new Among('amment', 34, 13),
  new Among('emment', 34, 14),
  new Among('aux', -1, 10),
  new Among('eaux', 39, 9),
  new Among('eux', -1, 1),
  new Among('it\u00E9', -1, 7)
];

StemmerFr.a_5 = [
  new Among('ira', -1, 1),
  new Among('ie', -1, 1),
  new Among('isse', -1, 1),
  new Among('issante', -1, 1),
  new Among('i', -1, 1),
  new Among('irai', 4, 1),
  new Among('ir', -1, 1),
  new Among('iras', -1, 1),
  new Among('ies', -1, 1),
  new Among('\u00EEmes', -1, 1),
  new Among('isses', -1, 1),
  new Among('issantes', -1, 1),
  new Among('\u00EEtes', -1, 1),
  new Among('is', -1, 1),
  new Among('irais', 13, 1),
  new Among('issais', 13, 1),
  new Among('irions', -1, 1),
  new Among('issions', -1, 1),
  new Among('irons', -1, 1),
  new Among('issons', -1, 1),
  new Among('issants', -1, 1),
  new Among('it', -1, 1),
  new Among('irait', 21, 1),
  new Among('issait', 21, 1),
  new Among('issant', -1, 1),
  new Among('iraIent', -1, 1),
  new Among('issaIent', -1, 1),
  new Among('irent', -1, 1),
  new Among('issent', -1, 1),
  new Among('iront', -1, 1),
  new Among('\u00EEt', -1, 1),
  new Among('iriez', -1, 1),
  new Among('issiez', -1, 1),
  new Among('irez', -1, 1),
  new Among('issez', -1, 1)
];

StemmerFr.a_6 = [
  new Among('a', -1, 3),
  new Among('era', 0, 2),
  new Among('asse', -1, 3),
  new Among('ante', -1, 3),
  new Among('\u00E9e', -1, 2),
  new Among('ai', -1, 3),
  new Among('erai', 5, 2),
  new Among('er', -1, 2),
  new Among('as', -1, 3),
  new Among('eras', 8, 2),
  new Among('\u00E2mes', -1, 3),
  new Among('asses', -1, 3),
  new Among('antes', -1, 3),
  new Among('\u00E2tes', -1, 3),
  new Among('\u00E9es', -1, 2),
  new Among('ais', -1, 3),
  new Among('erais', 15, 2),
  new Among('ions', -1, 1),
  new Among('erions', 17, 2),
  new Among('assions', 17, 3),
  new Among('erons', -1, 2),
  new Among('ants', -1, 3),
  new Among('\u00E9s', -1, 2),
  new Among('ait', -1, 3),
  new Among('erait', 23, 2),
  new Among('ant', -1, 3),
  new Among('aIent', -1, 3),
  new Among('eraIent', 26, 2),
  new Among('\u00E8rent', -1, 2),
  new Among('assent', -1, 3),
  new Among('eront', -1, 2),
  new Among('\u00E2t', -1, 3),
  new Among('ez', -1, 2),
  new Among('iez', 32, 2),
  new Among('eriez', 33, 2),
  new Among('assiez', 33, 3),
  new Among('erez', 32, 2),
  new Among('\u00E9', -1, 2)
];

StemmerFr.a_7 = [
  new Among('e', -1, 3),
  new Among('I\u00E8re', 0, 2),
  new Among('i\u00E8re', 0, 2),
  new Among('ion', -1, 1),
  new Among('Ier', -1, 2),
  new Among('ier', -1, 2),
  new Among('\u00EB', -1, 4)
];

StemmerFr.a_8 = [
  new Among('ell', -1, -1),
  new Among('eill', -1, -1),
  new Among('enn', -1, -1),
  new Among('onn', -1, -1),
  new Among('ett', -1, -1)
];

StemmerFr.g_v = [
  17,
  65,
  16,
  1,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  128,
  130,
  103,
  8,
  5
];

StemmerFr.g_keep_with_s = [
  1,
  65,
  20,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  128
];

module.exports = StemmerFr;

},{"@nlpjs/core":59}],102:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const { Stopwords } = require('@nlpjs/core');

class StopwordsFr extends Stopwords {
  constructor(container, words) {
    super(container);
    this.name = 'stopwords-fr';
    this.dictionary = {};
    const list = words || [
      'être',
      'avoir',
      'faire',
      'a',
      'au',
      'aux',
      'avec',
      'ce',
      'ces',
      'dans',
      'de',
      'des',
      'du',
      'elle',
      'en',
      'et',
      'eux',
      'il',
      'je',
      'la',
      'le',
      'leur',
      'lui',
      'ma',
      'mais',
      'me',
      'même',
      'mes',
      'moi',
      'mon',
      'ne',
      'nos',
      'notre',
      'nous',
      'on',
      'ou',
      'où',
      'par',
      'pas',
      'pour',
      'qu',
      'que',
      'qui',
      'sa',
      'se',
      'ses',
      'son',
      'sur',
      'ta',
      'te',
      'tes',
      'toi',
      'ton',
      'tu',
      'un',
      'une',
      'vos',
      'votre',
      'vous',
      'c',
      'd',
      'j',
      'l',
      'à',
      'm',
      'n',
      's',
      't',
      'y',
      'été',
      'étée',
      'étées',
      'étés',
      'étant',
      'suis',
      'es',
      'est',
      'sommes',
      'êtes',
      'sont',
      'serai',
      'seras',
      'sera',
      'serons',
      'serez',
      'seront',
      'serais',
      'serait',
      'serions',
      'seriez',
      'seraient',
      'étais',
      'était',
      'étions',
      'étiez',
      'étaient',
      'fus',
      'fut',
      'fûmes',
      'fûtes',
      'furent',
      'sois',
      'soit',
      'soyons',
      'soyez',
      'soient',
      'fusse',
      'fusses',
      'fût',
      'fussions',
      'fussiez',
      'fussent',
      'ayant',
      'eu',
      'eue',
      'eues',
      'eus',
      'ai',
      'as',
      'avons',
      'avez',
      'ont',
      'aurai',
      'auras',
      'aura',
      'aurons',
      'aurez',
      'auront',
      'aurais',
      'aurait',
      'aurions',
      'auriez',
      'auraient',
      'avais',
      'avait',
      'avions',
      'aviez',
      'avaient',
      'eut',
      'eûmes',
      'eûtes',
      'eurent',
      'aie',
      'aies',
      'ait',
      'ayons',
      'ayez',
      'aient',
      'eusse',
      'eusses',
      'eût',
      'eussions',
      'eussiez',
      'eussent',
      'ceci',
      'cela',
      'cet',
      'cette',
      'ici',
      'ils',
      'les',
      'leurs',
      'quel',
      'quels',
      'quelle',
      'quelles',
      'sans',
      'soi',
    ];
    this.build(list);
  }
}

module.exports = StopwordsFr;

},{"@nlpjs/core":59}],103:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
const { Tokenizer } = require('@nlpjs/core');

class TokenizerFr extends Tokenizer {
  constructor(container, shouldTokenize) {
    super(container, shouldTokenize);
    this.name = 'tokenizer-fr';
  }

  innerTokenize(text) {
    const replaced = text.replace(/’/gi, "'");
    const slices = replaced.split(/[\s,.!?;:([\]’'"¡¿)/]+/).filter((x) => x);
    return slices;
  }
}

module.exports = TokenizerFr;

},{"@nlpjs/core":59}],104:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

function registerTrigrams(container) {
  const language = container.get('Language');
  if (language) {
    language.addModel(
      'Latin',
      'fra',
      ' dees de ionnt et tio etent lala e don ne oite lle  les de pt datiroi drdroit  à  coté ns te e smenre  tocon l’touque qules sodesson peons uns ls e prue  pae ct lts onn aue aemee e liontantoututet àresers sace  a trepera dctier libité enux  reen rsoà l ou inlleun natou nnen dune d’ separnteus ur s sansdana pr lproitsés t piree ts psa  déondé da lnceertauxommnalme  na foiqu certéectalebert as a dammeibesane r pocomal s cquiourt e nee nousr daliter difone oau  chairui ell eslits nissératessocautociêtrienintdu estététrapou plratar ranrais oonaainclaégaancrs eurprin ce ms tà u dourebreut  êtage étnsisureinsenserndiensessntrir  macian pst a c dul e sublige rés rée qassndapeuée l’a tea statil tésaisu dineindé equ’ acs in tt cn al’ht qsoit scunrit égoir’enntahom onn e moie ignrelnnat il n trillples él’ereca rotesseuniidéives ut êinsact fan s vigal asligssapréleue flicdisver nutenssirottecs mabl'
    );
  }
}

module.exports = registerTrigrams;

},{}],105:[function(require,module,exports){
module.exports={
  "Latin": {
    "spa": " de|os |de | la|la | y | a |es |ón |ión|rec|ere|der| co|e l|el |en |ien|cho|ent|ech|ció|aci|o a|a p| el|a l|al |as |e d| en|na |ona|s d|da |nte| to|ad |ene|con| pr| su|tod| se|ho |los| pe|per|ers| lo|o d| ti|cia|n d|cio| es|ida|res|a t|tie|ion|rso|te |do | in|son| re| li|to |dad|tad|e s|est|pro|que|men| po|a e|oda|nci| qu| un|ue |ne |n e|s y|lib|su | na|s e|nac|ia |e e|tra| pa|or |ado|a d|nes|ra |se |ual|a c|er |por|com|nal|rta|a s|ber| o |one|s p|dos|rá |sta|les|des|ibe|ser|era|ar |ert|ter| di|ale|l d|nto|hos|del|ica|a a|s n|n c|oci|imi|io |o e|re |y l|e c|ant|cci| as|las|par|ame| cu|ici|ara|enc|s t|ndi| so|o s|mie|tos|una|bre|dic|cla|s l|e a|l p|pre|ntr|o t|ial|y a|nid|n p|a y|man|omo|so |n l| al|ali|s a|no | ig|s s|e p|nta|uma|ten|gua|ade|y e|soc|mo | fu|igu|o p|n t|hum|d d|ran|ria|y d|ada|tiv|l e|cas| ca|vid|l t|s c|ido|das|dis|s i| hu|s o|nad|fun| ma|rac|nda|eli|sar|und| ac|uni|mbr|a u|die|e i|qui|a i| ha|lar| tr|odo|ca |tic|o y|cti|lid|ori|ndo|ari| me|ta |ind|esa|cua|un |ier|tal|esp|seg|ele|ons|ito|ont|iva|s h|d y|nos|ist|rse| le|cie|ide|edi|ecc|ios|l m|r e|med|tor|sti|n a|rim|uie|ple|tri|ibr|sus|lo |ect|pen|y c|an |e h|n s|ern|tar|l y|egu|gur|ura|int|ond|mat|l r|r a|isf|ote",
    "eng": " th|the| an|he |nd |and|ion| of|of |tio| to|to |on | in|al |ati|igh|ght|rig| ri|or |ent|as |ed |is |ll |in | be|e r|ne |one|ver|all|s t|eve|t t| fr|s a| ha| re|ty |ery| or|d t| pr|ht | co| ev|e h|e a|ng |ts |his|ing|be |yon| sh|ce |ree|fre|ryo|n t|her|men|nat|sha|pro|nal|y a|has|es |for| hi|hal|f t|n a|n o|nt | pe|s o| fo|d i|nce|er |ons|res|e s|ect|ity|ly |l b|ry |e e|ers|e i|an |e o| de|cti|dom|edo|eed|hts|ter|ona|re | no| wh| a | un|d f| as|ny |l a|e p|ere| en| na| wi|nit|nte|d a|any|ted| di|ns |sta|th |per|ith|e t|st |e c|y t|om |soc| ar|ch |t o|d o|nti|s e|equ|ve |oci|man| fu|ote|oth|ess| al| ac|wit|ial| ma|uni| se|rea| so| on|lit|int|r t|y o|enc|thi|ual|t a| eq|tat|qua|ive| st|ali|e w|l o|are|f h|con|te |led| is|und|cia|e f|le | la|y i|uma|by | by|hum|f a|ic | hu|ave|ge |r a| wo|o a|ms |com| me|eas|s d|tec| li|n e|en |rat|tit|ple|whe|ate|o t|s r|t f|rot| ch|cie|dis|age|ary|o o|anc|eli|no | fa| su|son|inc|at |nda|hou|wor|t i|nde|rom|oms| ot|g t|eme|tle|iti|gni|s w|itl|duc|d w|whi|act|hic|aw |law| he|ich|min|imi|ort|o s|se |e b|ntr|tra|edu|oun|tan|e d|nst|l p|d n|ld |nta|s i|ble|n p| pu|n s| at|ily|rth|tho|ful|ssi|der|o e|cat|uca|unt|ien| ed|o p|h a|era|ind|pen|sec|n w|omm|r s",
    "por": "os |de | de| a | e |o d|to |ão | di|ent|da |ito|em | co|eit|as |dir|es |ire|rei| se|ção|ade|a p|dad|e d|s d|men|nte|do |s e| pr| pe|dos| to| da|a a|o e| o |o a|ess|con|tod|que| qu|te |e a| do|al |res|ida|m d| in| ou|er |sso| na| re| po|a s| li|uma|cia|ar |pro|e e|a d| te|açã|a t| es| su|ou |ue |s p|tos|a e|des|ra |com|no |ame|ia |e p|tem|nto| pa|is |est|tra|ões|na |s o|oda|das|ser|soa|s n|pes|o p|s a|o s|e o| em| as| à |o o|ais|ber|ado|oa |o t|e s|man|sua|ua | no| os|a c|ter|çõe|erd|lib|rda|s s|nci|ibe|e n|ica|odo|so |nal|ntr|s t|hum|ura| ao|ona|ual| so|or |ma |sta|o c|a n|pre|ara|era|ons|e t|r a|par|o à| hu|ind|por|cio|ria|m a|s c| um|a l|gua|ran| en|ndi|o i|e c|raç|ion|nid|aci|ano|soc|e r|oci| ac|und|sen|nos|nsi|rec|ime|ali|int|um |per|nac| al|m o|r p| fu|ndo|ont|açõ| ig|igu|fun|nta| ma|uni|cçã|ere| ex|a i| me|ese|rio|l d|a o|s h|pel|ada|pri|ide|am |m p|pod|s f|ém |a f|io |ode|ca |ita|lid|tiv|e f|vid|r e|esp|nda|omo|e l|naç|o r|ant|a q|tad|lic|iva| fa|ver|s l|ial|cla|ngu|ing| ca|mo |der| vi|eli|ist|ta |se |ati|ios|ido|r o|eci|dis| un|e i|r d|ecç|o q|s i|qua|ênc|a m|seu|sti|nin|uer|rar|cas|aos|ens|gué|ias|sid|uém|tur|dam|sse|ao |ela|l e|for|tec|ote| pl|ena| tr|m c|tro| ni|ico|rot",
    "ind": "an |ang| da|ng | pe|ak | ke| me|ata| se|dan|kan| di| be|hak|ber|per|ran|nga|yan|eng| ya| ha|asa|gan|men|ara|nya|n p|n d|n k|a d|tan| at|at |ora|ala|san| ba|ap |erh|n b|rha|ya | ma|g b|a s|pen|eba|as |aan|uk |ntu| or|eti|tas|aka|tia|ban|set| un|n s|ter|n y| te|k m|tuk|bas|iap|lam|beb|am | de|k a|keb|n m|i d|unt|ama|dal|ah |ika|dak|ebe|p o|sa |pun|mem|n h|end|den|ra |ela|ri |nda| sa|di |ma |a m|n t|k d|n a|ngg|tau|man|gar|eri|asi| ti|un |al |ada|um |a p|lak|ari|au | ne|neg|a b|ngs|ta |ole|leh|ert|ers|ida|k h|ana|gsa|dar|uka|tid|bat|sia|era|eh |dap|ila|dil|h d|atu|sam|ia |i m| in|lan|aha|uan|tu |ai |t d|a a|g d|har|sem|na |apa|ser|ena|kat|uat|erb|erl|mas|rta|ega|ung|nan|emp|n u|kum|l d|g s| hu|ka |ent|pat|mba|aga|nta|adi| su|eni|uku|n i|huk|ind|ar |rga|i s|aku|ndi|sua|ni |rus|han|si |car|nny| la|in |u d|ik |ua |lah|rik|usi|emb|ann|mer|ian|gga|lai|min|a u|lua|ema|emu|arg|dun|dip|a t|mat|aya|rbu|aru|erk|rka|ini|eka|a k|rak|kes|yat|iba|nas|rma|ern|ese|s p|nus| pu|anu|ina| ta|mel|mua|kel|k s|us |ndu|nak|da |sya|das|pem|lin|ut |yar|ami|upu|seo|aik|eor|iny|aup|tak|ipe|ing|tin| an|dik|uar|ili|g t|rse|sar|ant|g p|a n|aks|ain| ja|t p| um|g m|dir|ksa|umu|kep|mum|i k|eca|rat|m p|h p|aba|ses|m m",
    "fra": " de|es |de |ion|nt |et |tio| et|ent| la|la |e d|on |ne |oit|e l|le | le|s d|e p|t d|ati|roi| dr|dro|it | à | co|té |ns |te |e s|men|re | to|con| l’|tou|que| qu|les| so|des|son| pe|ons| un|s l|s e| pr|ue | pa|e c|t l|ts |onn| au|e a|eme|e e| li|ont|ant|out|ute|t à|res|ers| sa|ce | a |tre|per|a d|cti|er |lib|ité| en|ux | re|en |rso|à l| ou| in|lle|un |nat|ou |nne|n d|une| d’| se|par|nte|us |ur |s s|ans|dan|a p|r l|pro|its|és |t p|ire|e t|s p|sa | dé|ond|é d|a l|nce|ert|aux|omm|nal|me | na| fo|iqu| ce|rté|ect|ale|ber|t a|s a| da|mme|ibe|san|e r| po|com|al |s c|qui|our|t e| ne|e n|ous|r d|ali|ter| di|fon|e o|au | ch|air|ui |ell| es|lit|s n|iss|éra|tes|soc|aut|oci|êtr|ien|int|du |est|été|tra|pou| pl|rat|ar |ran|rai|s o|ona|ain|cla|éga|anc|rs |eur|pri|n c|e m|s t|à u| do|ure|bre|ut | êt|age| ét|nsi|sur|ein|sen|ser|ndi|ens|ess|ntr|ir | ma|cia|n p|st |a c| du|l e| su|bli|ge |rés| ré|e q|ass|nda|peu|ée |l’a| te|a s|tat|il |tés|ais|u d|ine|ind|é e|qu’| ac|s i|n t|t c|n a|l’h|t q|soi|t s|cun|rit| ég|oir|’en|nta|hom| on|n e| mo|ie |ign|rel|nna|t i|l n| tr|ill|ple|s é|l’e|rec|a r|ote|sse|uni|idé|ive|s u|t ê|ins|act| fa|n s| vi|gal| as|lig|ssa|pré|leu|e f|lic|dis|ver| nu|ten|ssi|rot|tec|s m|abl",
    "deu": "en |er |der| un|nd |und|ein|ung|cht| de|ich|sch|ng | ge|ie |che|ech| di|die|rec|gen|ine|eit| re|ch | da|n d|ver|hen| zu|t d| au|ht | ha|lic|it |ten|rei| be|in | ve| in| ei|nde|auf|den|ede|zu |n s|uf |fre|ne |ter|es | je|jed|n u| an|sei|and| fr|run|at | se|e u|das|hei|s r|hte|hat|nsc|nge|r h|as |ens| al|ere|lle|t a| we|n g|rde|nte|ese|men| od|ode|ner|g d|all|t u|ers|te |nen| so|d d|n a|ben|lei| gr| vo|wer|e a|ege|ion| st|ige|le |cha| me|haf|aft|n j|ren| er|erk|ent|bei| si|eih|ihe|kei|erd|tig|n i|on |lun|r d|len|gem|ies|gru|tli|unt|chu|ern|ges|end|e s|ft |st |ist|tio|ati| gl|sta|gun|mit|sen|n n| na|n z|ite| wi|r g|eic|e e|ei |lie|r s|n w|gle|mei|de |uch|em |chl|nat|rch|t w|des|n e|hre|ale|spr|d f|ach|sse|r e| sc|urc|r m|nie|e f|fen|e g|e d| ni|dur|dar|int| du|geh|ied|t s| mi|alt|her|hab|f g|sic|ste|taa|aat|he |ang|ruc|hli|tz |eme|abe|h a|n v|nun|geg|arf|rf |ehe|pru| is|erf|e m|ans|ndl|e b|tun|n o|d g|n r|r v|wie|ber|r a|arb|bes|t i|h d|r w|r b| ih|d s|igk|gke|nsp|dig|ema|ell|eru|n f|ins|rbe|ffe|esc|igu|ger|str|ken|e v|gew|han|ind|rt | ar|ieß|n h|rn |man|r i|hut|utz|d a|ls |ebe|von|lte|r o|rli|etz|tra|aus|det|hul|e i|one|nne|isc|son|sel|et |ohn|t g|sam| fa|rst|rkl|ser|iem|g v|t z|err",
    "jav": "ng |an |ang| ka|ing|kan| sa|ak |lan| la|hak| ha| pa| ma|ngg|ara|sa |abe|ne | in|n k|ant| ng|tan|nin| an|nga|ata|en |ran| ba|man|ban|ane|hi |n u|ong|ra |nth|ake|ke |thi| da|won|uwo|ung|ngs| uw|asa|gsa|ben|sab|ana|aka|beb|a k|g p|nan|nda|adi|at |awa|san|ni |dan|g k|pan|eba| be|e k|g s|ani|bas| pr|dha|aya|gan|ya |wa |di |mar|n s| wa|ta |a s|g u| na|e h|arb|a n|a b|a l|n n| ut|yan|n p|asi|g d|han|ah |g n| tu| um|as |wen|dak|rbe|dar| di|ggo|sar|mat|k h|a a|iya| un|und|eni|kab|be |art|ka |uma|ora|n b|ala|n m|ngk|rta|i h| or|gar|yat|kar|al |a m|n i|na |g b|ega|pra|ina|kak|g a|a p|tum|nya|kal|ger|gge| ta|kat|i k|ena|oni|kas| pe|dad|aga|g m|duw|k k|uta|uwe| si| ne|adh|pa |n a|go |and|i l| ke|nun|nal|ngu|uju|apa|a d|t m|i p|min|iba|er | li|anu|sak|per|ama|gay|war|pad|ggu|ha |ind|taw|ras|n l|ali|eng|awi|a u| bi|we |bad|ndu|uwa|awe|bak|ase|eh | me|neg|pri| ku|ron|ih |g t|bis|iji|i t|e p| pi|aba|isa|mba|ini|a w|g l|ika|n t|ebu|ndh|ar |sin|lak|ur |mra|men|ku | we|e s|a i|liy| ik|ayo|rib|ngl|ami|arg|nas|yom|wae|ut |kon|ae |rap|aku| te|dil|tin|rga|jud|umu| as|rak|bed|k b|il |kap|h k|jin|k a| nd|e d|i s| lu|i w|eka|mum|um |uha|ate| mi|k p|gon|eda| ti|but|n d|r k|ona|uto|tow|wat|gka|si |umr|k l|oma",
    "vie": "ng |̣c |́c | qu| th|à |nh | ng|̣i | nh|và| va|̀n |uyê| ph| ca|quy|ền|yề|̀i | ch|̀nh| tr| cu|ngư|i n|gươ|ườ|́t |ời| gi|ác| co|̣t |ó |c t|ự |n t|cá|ông| kh|ượ|ợc| tư| đư|iệ|đươ|ìn|́i | ha|có|i đ|gia| đê|pha| mo|ọi|mọ|như|n n|củ| ba|̣n |̉a |ủa|n c|̀u |̃ng|ân |ều|ất| bi|tự|hôn| vi|g t| la|n đ|đề|nhâ| ti|t c| đô|ên |bả|hiê|u c| tô|do |hân| do|ch |́ q|̀ t| na|́n |ay | hi|àn|̣ d|ới|há| đi|hay|g n| mô|ốc|uố|n v|ội|hữ|thư|́p |quô| ho|̣p |nà|ào|̀ng|̉n |ị |́ch|ôn |̀o |khô|c h|i c|c đ| hô|i v|tro| đa|́ng|mộ|i t|ột|g v|ia |̣ng|ản|ướ|ữn|̉ng|h t|hư |ện|n b|ộc|ả |là|c c|g c| đo|̉ c|n h|hà|hộ| bâ|ã |̀y | vơ|̣ t|̉i |iế| cô|t t|g đ|ức|iên| vê|viê|vớ|h v|ớc|ực|ật|tha|̉m |ron|ong|áp|g b|hươ| sư|a c|sự|̉o |ảo|h c|ể |o v|uậ|a m|ế |iá|̀ c|cho|qua|hạ|ục| mi|̀ n|phâ|c q|côn|o c|á |i h|ại| hơ|̃ h| cư|n l|bị| lu|bấ|cả|ín|h đ| xa|độ|g h|c n|c p|thu|ải|ệ | hư|́ c|o n| nư|ốn|́o |áo|xã|oà|y t|hả|tộ|̣ c| tâ|thô| du|m v|mì|ho |hứ|ệc|́ t|hợ|án|n p|cũ|ũn|iể|ối|tiê|ề |hấ|ợp|hoa|y đ|chi|o h|ở |ày|̉ t|đó|c l|về|̀ đ|i b|kha|c b| đâ|luâ|ai |̉ n|đố|ết|hự|tri|p q|nươ|dụ|hí|g q|yên|họ|́nh| ta| bă|c g|n g|thê|o t|c v|am |c m|an ",
    "ita": " di|to | de|ion| in|la |e d|di |ne | e |zio|re |le |ni |ell|one|lla|rit|a d|o d|del|itt|iri|dir| co|ti |ess|ent| al|azi|tto|te |i d|i i|ere|tà | pr|ndi|e l|ale|o a|ind|e e|e i|gni|nte|con|i e|li |a s| un|men|ogn| ne|uo | og|idu|e a|ivi|duo|vid| es|tti| ha|div| li|a p|no |all|pro|za |ato|per|sse|ser| so|i s| la| su|e p| pe|ibe|na |a l| il|ber|e n|il |ali|lib|ha |che|in |o s|e s| qu|o e|ia |e c| ri|nza|ta |nto|he |oni|o i| o |sta|o c|nel| a |o p|naz|e o|so | po|o h|gli|i u|ond|i c|ers|ame|i p|lle|un |era|ri |ver|ro |el |una|a c| ch|ert|ua |i a|ssi|rtà|a e|ei |dis|ant| l |tat|a a|ona|ual| le|ità|are|ter| ad|nit| da|pri|dei|à e|cia| st| si|nal|est|tut|ist|com|uni| ed|ono| na|sua|al |si |anz| pa| re|raz|gua|ita|res|der|soc|man|o o|ad |i o|ese|que|enz|ed | se|io |ett|on | tu|dic|à d|sia|i r|rso|oci|rio|ari|qua|ial|pre|ich|rat|ien|tra|ani|uma|se |ll |eri|a n|o n| um|do |ara|a t|zza|er |tri|att|ico|pos|sci|i l|son|nda|par|e u|fon| fo|nti|uzi|str|utt|ati|sen|int|nes|iar| i |hia|n c|sti|chi|ann|ra | eg|egu|isp|bil|ont|a r| no|rop| me|opr|ost| ma|ues|ica|sso|tal|cie|sun|lit|ore|ina|ite|tan| ra|non|gio|d a|e r|dev|i m|l i|ezz|izi| cu|nno|rà |a i|tta|ria|lia|cos|ssu|dal|l p| as|ass|opo|ve |eve",
    "tur": " ve| ha|ve |ler|lar|ir |in |hak| he|her|bir|er |an |arı|eri|ya | bi|ak |r h|eti|ın |iye|yet| ka|ası|ını| ol|tle|eya|kkı|ara|akk|etl|sın|esi|na |de |ek | ta|nda|ini| bu|ile|rın|rin|vey|ne |kla|e h|ine|ır |ere|ama|dır|n h| sa|ına|sin|e k|le | ge|mas|ınd|nın|ı v| va|lan|lma|erk|rke|nma|tin|rle| te|nin|akl|a v|da | de|let|ill|e m|ard|en |riy|aya|nı | hü| şa|e b|k v|kın|k h| me|mil|san| il|si |rdı|e d|dan|hür|var|ana|e a|kes|et |mes|şah|dir| mi|ret|rri| se|ola|ürr|irl|bu |mak| ma|mek|n e|kı |n v|n i|lik|lle| ed| hi|n b|a h| ba|nsa| iş|eli|kar| iç|ı h|ala|li |ulu|rak|evl|e i|ni |re |r ş|eme|etm|e t|ik |e s|a b|iş |n k|hai|nde|aiz| eş|izd|un |olm|hiç|zdi|ar |unm|ma | gö|ilm|lme|im |n t|tir|dil|mal|e g|i v| ko|lun|e e|mel|ket|ık |n s|ele|la |el |r v|ede|şit|ili|eşi|yla|a i| an|anı| et|rı |ahs| ya|sı |edi|siy|t v|i b|se |içi|çin|bul|ame| da|miş|may|tim|a k|tme|r b|ins|yan|nla|mle| di|eye|ger|ye |uğu|erd|din|ser| mü|mem|vle| ke|nam|ind|len|eke|es | ki|n m|it | in| ku|rşı|a s|arş| ay|eml|lek|oru|rme|kor|rde|i m| so|tür|al |lam|eni|nun| uy|ken|hsı|i i|a d|ri |dev|ün |a m|r a|mey|cak|ıyl|maz|e v|ece|ade|iç |şma|mse|te |tün|ims|kim|e y|şı |end|k g|ndi|alı| ce|lem|öğr|ütü|k i|r t| öğ|büt|anl| bü",
    "pol": " pr|nie| i |ie |pra| po|ani|raw|ia |nia|wie|go | do|ch |ego|iek|owi| ni|ści|ci |a p|do |awo| cz|ośc|ych| ma|ek |rze| na|prz| w |wo |ej | za|noś|czł|zło|eni|wa | je|łow|i p|wol|oln| lu|rod| ka| wo|lno|wsz|y c|ma |ny |każ|ażd|o d|stw|owa|dy |żdy| wy|rzy|sta|ecz| sw|dzi|i w|e p|czn|twa|na |zys|ów |szy|ub |lub|a w|est|kie|k m|wan| sp|ają| ws|e w|pow|pos|nyc|rac|spo|ać |a i|cze|sze|neg|yst|jak| ja|o p|pod|acj|ne |ńst|aro|mi | z |i i|nar| ko|obo|awa| ro|i n|jąc|zec|zne|zan|dow| ró|iej|zy |zen|nic|ony|aw |i z|czy|no |nej|o s|rów|odn|cy |ówn|odz|o w|o z|jeg|edn|o o|aki|mie|ien|kol| in|zie|bez|ami|eńs|owo|dno| ob| or| st|a s|ni |orz|o u|ym |stę|tęp|łec|jed|i k| os|w c|lwi|ez |olw|ołe|poł|cji|y w|o n|wia| be|któ|a j|zna|zyn|owe|wob|ka |wyc|owy|ji | od|aln|inn|jes|icz|h p|i s|się|a o|ją |ost|kra|st |sza|swo|war|cza|roz|y s|raz|nik|ara|ora|lud|i o|a z|zes| kr|ran|ows|ech|w p|dów|ą p|pop|a n|tki|stk|gan|zon|raj|e o|iec|i l| si|że |eka| kt| de|em |tór|ię |wni|lni|ejs|ini|odo|dni|ełn|kow|peł|a d|ron|dek|pie|udz|bod|nan|h i|dst|ieg|taw|z p|z w|zeń|god|iu |ano|lar| to|y z|a k|ale|kla|trz|zaw|ich|e i|ier|iko|dzy|chn|w z|by |ków|adz|ekl|ywa|ju |och|kor|sob|ocz|oso|u p|du |tyc|tan|ędz| mi|e s| ta|ki ",
    "gax": "aa |an |uu | ka|ni |aan|umm|ii |mma|maa| wa|ti |nam| fi|ta |tti| na|saa|fi | mi|rga|i k|a n| qa|dha|iyy|oot|in |mir|irg|raa|qab|a i|a k|kan|akk|isa|chu|amu|a f|huu|aba|kka| ta|kam|a a| is|amn|ami|att|ach|mni|yaa| bi|yuu|yyu|ee |wal|miy|waa|ga |ata|aat|tii|oo |a e|moo| ni| ee|ba | ak|ota|a h|i q| ga| dh|daa|haa|a m|ama|yoo|a b|i a|ka |kaa| hi|sum|aas|arg|man| hu| uu|u n| yo| ar| ke| ha|ees| ba|uf |i i|taa|uuf|iin|ada|a w|i f|ani|rra|na |isu| ad|i w|a u|nya|irr|da |hun|hin|ess| ho| ma|i m|und|i b|bar|ana|een|mu |is |bu |f m| ir| sa|u a|add|aad| la|i d|n h|eeg|i h|sa |hoj|abu| ya|kee|al |udh|ook|goo|ala|ira|nda|itt|gac|as |n k|mum|see|rgo|uum|ra |n t|n i|ara|muu|ums|mat|nii|sii|ssa|a d|a q| da|haw|a g|yya|asu|eef|u h|tum|biy| mo|a t|ati|eny|gam|abs|awa|roo|uma|n b|n m|u y|a s|sat|baa|gar|n a|mmo|nis| qo|nna| ku|eer| to|kko|bil|ili|lis|bir|otu|tee|ya |msa|aaf|suu|n d|jii|n w|okk|rka|gaa|ald|un |rum| ye|ame| fu|mee|yer|ero|amm|era|kun|i y|oti|tok|ant|ali|nni| am|lda|lii|n u|lee|ura|lab|aal|tan|laa|i g|ila|ddu|aru|u m|oji|gum|han|ega| se|ffa|dar|faa|ark|n y|hii|qix|gal|ndi| qi|asa|art|ef |uud| bu|jir| ji|arb|n g|chi|tam|u b|dda|bat|di |kar|lam|a l| go|bsi|sad|oka|a j|egu|u t|bee|u f|uun",
    "swh": "a k|wa |na | ya| ku|ya | na| wa|a m| ha|i y|a h|a n|ana|ki |aki|kwa| kw|hak| ka| ma|la |a w|tu |li |a u|ni |i k|a a|ila| ki|ali|a y|ati|za |ili|ifa| mt|ke | an|kil|kat|mtu|ake|ote|te |ka |ika|ma |we |a s|yo |fa |i n|ata|e k|ama|zi |amb|u a|ia |u w| yo|azi|kut|ina|i z|asi| za|o y|uhu|yak|au |ish|mba|e a|u k|hur|ha |tik|wat| au|uru| bi|sha|mu |ara|u n| as|hi | hi|ru |aif|tai|cha|ayo|a b|hal| uh| ch|yot|i h| zi|awa|chi|atu|e n|ngi|u y|mat|shi|ani|eri| am|uli|ele|sa |ja |e y|a t|oja|o k|nch|i a|a j| nc|ima| sh|ami| ta|end|any|moj|i w|ari|ham|uta|ii |iki|ra |ada|wan|wak|nay|ye |uwa| la|ti |eza|o h|iri|iwa|kuw|iwe| wo|fan| sa|she|bu |kan|ao |jam|wen|lim|i m|her|uto|ria| ja| ni|kam|di | hu|zo |a l|da |kaz|ahi|amu|wot|o w|si |dha|bin|ing|adh|a z|bil|e w|nya|kup|har|ri |ang|aka|sta|aji|ne |kus|e m|zim|ini|ind|lin|kul|agu|kuf|ita|bar|o n|uu |iyo|u h|nad|maa|mwe|ine|gin|nye|nde|dam|ta | nd|ndi|rik|asa| ba|rif|uni|nga|hii|lez|bo |azo|uzi|mbo|sil|ush|tah|wam|ibu|uba|imu| ye|esh| ut|taa|aar|wez|i s|e b| si|ala|dhi|eng|aza|tak|hir|saw|izo|kos|tok|oka|yan|a c|wal|del|i b|pat| um|ndo|zwa|mam|a i|guz|ais|eli|mai|laz|ian|aba|man|ten|zin|ba |nda|oa |u m|uku|ufu| mw|liw|aha|ndw|kuh|ua |upa| el|umi|sia",
    "sun": "an |na |eun| ka|ng | sa|ana|ang| di|ak | ha|nga|hak|un |ung|keu|anu| ba| an|nu |a b| bo| je|a h|ata|asa|jeu|ina| ng|ara|nan|awa|gan|ah |sa |a k| na|n k|kan|aha|a p|a s|ga |ban| ma|a n|ing|oga|bog|sar| pa| ku|man|a a|ha |san|ae |bae|din|g s|aga|sah|ra |tan|n s| pe|ala| si|kat|ma |per| ti|aya|sin| at| pi| te|n a|aan|lah|pan|gar|n n|u d|ta |eu |ari|kum|ngs|a m|n b|n d|ran|a d|gsa|wa |taw|k h|ama|ku |ike|n p|eba|bas| ja|al |a t|ika|at |beb|kab|pik|asi|atu|nda|una|a j|nag|e b|n h|en |g k|oh |aba|ila|rta|aku|boh|ngg|abe|art|ar |n j|di |ima|um |ola|geu|usa|aca|sak|adi|k a|udu|teu|car|tin| me| ay|h k| po|eh |u s|aka|rim|ti |sac|k n|ngt|jen|awe|ent|u a|uma|teh|law|ur |h s|dan|bar|uku|gaw|aru|ate|iba|dil|pol|aja|ieu|ere|jal|nar| hu|n t|nya|pa |are|upa|mas|ake|ut |wan| ge|kal|nus| so|ngk|ya |yan|huk| du|tun| mi|mpa|isa|lan|ura|u m|uan|ern|ena|nte|rup|tay|n m| ke|ka |han|und|us |h b|kud|ula|tut| tu| ie|hna|kaw|u k|lak|gam|mna|umn|g d| nu|yun|ri |ayu|wat| wa|eri|g n|a u|i m|u p| ta|du |dit|umu|k k|ren|mba|rik|gta| be|ali|h p|h a|eus|u n|alm|il | da|sas|ami|min|lma|ngu|nas|yat|rak|amp|mer|k j|sab|mum| ra|rua|ame|ua |ter|sal|ksa|men|kas|nge|k d|ona| bi|bis|sio|ion|nal|taa| de|uh |gal|dip|we |bad",
    "ron": " de|și | și|re | în|are|te |de |ea |ul |rep|le |ept|dre|e d| dr|ie |în |e a|ate|ptu| sa|tul| pr|or |e p| pe|la |e s|ori| la| co|lor| or|ii |rea|ce |au |tat|ați| a | ca|ent| fi|ale|ă a|a s| ar|ers|per|ice| li|uri|a d|al | re|e c|ric|nă |i s|e o|ei |tur| să|lib|con|men|ibe|ber|rso|să |tăț|sau| ac|ilo|pri|ăți|i a|i l|car|l l|ter| in|ție|că |soa|oan|ții|lă |tea|ri |a p| al|ril|e ș|ană|in |nal|pre|i î|uni|ui |se |e f|ere|i d|e î|ita| un|ert|ile|tă |a o| se|i ș|pen|ia |ele|fie|i c|a l|ace|nte|ntr|eni| că|ală| ni|ire|ă d|pro|est|a c| cu| nu|n c|lui|eri|ona| as|sal|ând|naț|ecu|i p|rin|inț| su|ră |e n| om|ici|nu |i n|oat|ări|l d| to|tor| di| na|iun| po|oci|tre|ni |ste|soc|ega|i o|gal| so| tr|ă p|a a|n m|sta|va |ă î|fi |res|rec|ulu|nic|din|sa |cla|nd | mo| ce| au|ara|lit|int|i e|ces|uie|at |rar|rel|iei|ons|e e|leg|nit|ă f| îm|a î|act|e l|ru |u d|nta|a f|ial|ra |ă c| eg|ță | fa|i f|rtă|tru|tar|ți |ă ș|ion|ntu|dep|ame|i i|reb|ect|ali|l c|eme|nde|n a|ite|ebu|bui|ât |ili|toa|dec| o |pli|văț|nt |e r|u c|ța |t î|l ș|cu |rta|cia|ane|țio|ca |ită|poa|cți|împ|bil|r ș| st|omu|ăță|țiu|rie|uma|mân| ma|ani|nța|cur|era|u a|tra|oar| ex|t s|iil|ta |rit|rot|mod|tri|riv|od |lic|rii|eze|man|înv|ne |nvă|a ș|cti",
    "hau": "da | da|in |a k|ya |an |a d|a a| ya| ko| wa| a |sa |na | ha|a s|ta |kin|wan|wa | ta| ba|a y|a h|n d|n a|iya|ko |a t|ma |ar | na|yan|ba | sa|asa| za| ma|a w|hak|ata| ka|ama|akk|i d|a m| mu|su |owa|a z|iki|a b|nci| ƙa| ci| sh|ai |kow|anc|nsa|a ƙ|a c| su|shi|ka | ku| ga|ci |ne |ani|e d|uma|‘ya|cik|kum|uwa|ana| du| ‘y|ɗan|ali|i k| yi|ada|ƙas|aka|kki|utu|n y|a n|hi | ra|mut| do| ad|tar| ɗa|nda| ab|man|a g|nan|ars|and|cin|ane|i a|yi |n k|min|sam|ke |a i|ins|yin|ki |nin|aɗa|ann|ni |tum|za |e m|ami|dam|kan|yar|en |um |n h|oka|duk|mi | ja|ewa|abi|kam|i y|dai|mat|nna|waɗ|n s|ash|ga |kok|oki|re |am |ida|sar|awa|mas|abu|uni|n j|una|ra |i b| ƙu|dun|a ‘|cew|a r|aba|ƙun|ce |e s|a ɗ|san|she|ara|li |kko|ari|n w|m n|buw|aik|u d|kar| ai|niy| ne|hal|rin|bub|zam|omi| la|rsa|ubu|han|are|aya|a l|i m|zai|ban|o n|add|n m|i s| fa|bin|r d|ake|n ‘|uns|sas|tsa|dom| ce|ans| hu|me |kiy|ƙar| am|ɗin| an|ika|jam|i w|wat|n t|yya|ame|n ƙ|abb|bay|har|din|hen|dok|yak|n b|nce|ray|gan|fa |on | ki|aid| ts|rsu| al|aye| id|n r|u k|ili|nsu|bba|aur|kka|ayu|ant|aci|dan|ukk|ayi|tun|aga|fan|unc| lo|o d|lok|sha|un |lin|kac|aɗi|fi |gam|i i|yuw|sun|aif|aja| ir|yay|imi|war| iy|riy|ace|nta|uka|o a|bat|mar|bi |sak|n i| ak|tab|afi|sab",
    "fuv": "de | e |e n|nde| ha|la |e e| ka|akk| nd| wa|ina|al |hak|na | in|ndi|kke|ɗo |di |ii |ade|aad|um |ko |i h|ala| mu| ne|lla|mum|ji |wal| jo| fo|all|eɗɗ| le|neɗ|e h|kal| ko|taa|re | ng|aaw|e k|aa |jog|e w|ley|ee |ke |laa|e m|eed|e l|nnd|aag|ɗɗo|ol | ta|o k|gu |kee|le |waa|ond|gal|a j|ogi|am |eji|dee|m e|ti |nga|e d|ɗe |awa|ɓe | wo|gii|eej|ede|gol|aan| re| go|i e|agu|e t|ann|fot|eyd|oti|ɗee|pot| po|maa|naa|oto|ydi| he|i n|ni |taw|enn|een|dim|to |a i|e f|e j|goo|a k|der| fa| aa|ele| de|o n|dir| ba|er |ngu|oot|ndo|i k|ota|ima| sa|won|ay |ka |a n|oor|a f|ngo|tee| ja|i f| to|o f|e ɓ|i w|wa |ren|a e|nan|kam|hay|ma |eyɗ|o t|awi|yɗe|ore|o e|too|and|fof|i m|a w|ñaa|e y|hee| do|eel|ira|nka|aak|e g|e s|l e|of |aar| ɓe|dii| la|ani|e p|tin|a t| te| na|e i| so|o w|ral|e r|are|ooj|awo|woo|gaa| ma|u m|kaa|faw| ña|dow| mo|oo | ya|aam|nge|nng| yi|und| ho|en |i l|so | mb| li|o i|e a| nj| o |ude|e b|o h|igg|ɗi |lig|nda|ita|baa| di|iin| fe|iti|aaɗ|ama|inn|haa|iiɗ|a h| no|tii|den|tal| tu|tuu|yan|l n|yim|do |non|imɓ|bel| je|ine| hu|njo|ugn|guu|no | da|edd|uug|mii|nee|jey|a d|ano| ke|lit|lli|go |je |ank|tde|amt|ent|eɗe|ɓam| ɓa|mɓe|y g|aga|alt|ɗɗa|ind|wit| su|nna| ɗe|ree|ŋde|i a|m t|aŋd|l h|jaŋ|ago|ow |ete| ɗu",
    "bos": " pr| i |je |rav| na|pra|na |da |ma |ima| sv|a s|nje|a p| da| po|anj|a i|vo |va |ko |ja | u |ako|o i|no | za|e s|ju |avo| im|ti |sva|ava|i p|o n|li |ili|i s|van|ost| ko|vak|ih |ne |a u| sl|nja|koj| dr| ne|jed| bi|i d|ije|stv|u s|lob|im |slo| il|bod|obo| ra|sti|pri| je| su|vje|om |a d|se |e i| ob|a n|i i| se|dru|enj| os|voj|cij|e p|a b|su |o d|uje|u p|raz|i n|a o| od|lo |u o|ova|u i|edn|i u| nj|ovo|jen|lju|ni |oje|nos|a k|ran|dje|iti|o p|aci|žav|a j|i o|e o|pre|pro|bra|nih|ji | ka|e d|jeg|og |sta| tr|tre|bud|u n|drž|u z|rža|bit|svo|ija|elj|reb|e b|mij|jem|avn|pos| bu|ka |aju| iz|ba |ve |rod|de |aro|e u|iva|a z|em |šti|ilo|eni|lje|ći |red|bil|jel|jer| ni|odn|m i|du |tva|nar|gov| sa|oji| do|tu |vim|u d| st|o k|e n|a t|za |nim| dj| sm|ući|ičn|dna|i m|oda|vno|eba|ist|nac|e k|čno|nak|ave|tiv|eđu|nov|olj|sno|ani|aln|an |nom|i b|stu|nst|eno|oj |osn|a r|ovj|nap|smi|nog|čov|oja|nju|ara|nu |dno|ans|ovi|jan|edi|m s| kr|h p|tup| op| čo|iko|jek|tvo| vj| mi|tel|vu |obr|živ|tit|o o|una|odu| mo| ov|kri|ego|din|rug|nik|rad|pod|nji|sam|sto|lja|dst|rim|ite|riv| te|m n|vol|i v|e t|vni|akv|itu|g p| ta|ašt|zaš|svi|ao |te |o s|ak |mje|a č|odr|udu|kla|i t|avi|tno|nič| vr|nic|dni|u u|ina| de|oba|od |jih|st ",
    "hrv": " pr| i |je |rav|pra|ma | na|ima| sv|na |ti |a p|nje| po|a s|anj|a i|vo |ko |da |vat|va |no | za|i s|o i|ja |avo| u | im|sva|i p| bi|e s|ju |tko|o n|li |ili|van|ava| sl|ih |ne |ost| dr|ije| ne|jed|slo| ra|u s|lob|obo| os|bod| da| ko|ova|nja|koj|i d|atk|iti| il|stv|pri|om |im | je| ob| su| ka|i i|i n|e i|vje|i u|se |dru|bit|voj|ati|i o|ćen|a o|o p|a b|a n|ući| se|enj|sti|a u|edn|dje|lo |ćav| mo|raz|u p| od|ran|ni |rod|a k|su |aro|drć|svo|ako|u i|rća|a j|mij|ji |nih|eni|e n|e o| nj|pre|pos|ćiv|oje|eno|e p|nar|oda|nim|ovo|aju|ra |ći |og |nov|iva|a d|nos|bra|bil|i b|avn|a z|jen|e d|ve |ora|tva|jel|sta|mor|u o|cij|pro|ovi|za |jer|ka |sno|ilo|jem|red|em |lju|osn|oji| iz|aci| do|lje|i m| ni|odn|nom|jeg| dj|vno|vim|elj|u z|o d|rad|o o|m i|du |uje| sa|nit|e b| st|oj |tit|a ć|dno|e u|o s|u d|eću|ani|dna|nak|nst|stu| sm|e k|u u|an |gov|nju|juć|aln|m s|tu |a r|ćov|jan|u n|o k|ist|ću |te |tvo|ans|šti|nu |ara|nap|m p|nić|olj|bud| bu|edi|ovj|i v|pod|sam|obr|tel| mi|ina|zaš|e m|ašt| vj|ona|nji|jek| ta|duć|ija| ćo|tup|h p|oja|smi|ada| op|oso|una|sob|odu|dni|rug|udu|ao |di |avi|tno|jim|itu|itk|će |odr|ave|meć|nog|din|svi| ći|kak|kla|rim|akv|elo|štv|ite|vol|jet|opć|pot|tan|ak |nic|nac|uće| sk| me|ven",
    "nld": "en |de |an | de|van| va| en| he|ing|cht|der|ng |n d|n v|et |een| ge|ech|n e|ver|rec|nde| ee| re| be|ede|er |e v|gen|den|het|ten| te| in| op|n i| ve|lij| zi|ere|eli|zij|ijk|te |oor|ht |ens|n o|and|t o|ijn|ied|ke | on|eid|op | vo|jn |id |ond|in |sch| vr|aar|n z|aan| ie|rde|rij|men|ren|ord|hei|hte| we|eft|n g|ft |n w|or |n h|eef|vri|wor| me|hee|al |t r|of |le | of|ati|g v|e b|eni| aa|lle| wo|n a|e o|nd |r h|voo| al|ege|n t|erk| da| na|t h|sta|jke|at |nat|nge|e e|end| st|om |e g|tie|n b|ste|die|e r|erw|wel|e s|r d| om|ij |dig|t e|ige|ter|ie |gel|re |jhe|t d| za|e m|ers|ijh|nig|zal|nie|d v|ns |d e|e w|e n|est|ele|bes| do|g e|che|vol|ge |eze|e d|ig |gin|dat|hap|cha|eke| di|ona|e a|lke|nst|ard| gr|tel|min| to|waa|len|elk|lin|eme|jk |n s|del|str|han|eve|gro|ich|ven|doo| wa|t v|it |ove|rin|aat|n n|wet|uit|ijd|ze | zo|ion| ov|dez|gem|met|tio|bbe|ach| ni|hed|st |all|ies|per|heb|ebb|e i|toe|es |taa|n m|nte|ien|el |nin|ale|ben|daa|sti| ma|mee|kin|pen|e h|wer|ont|iet|tig|g o|s e| er|igd|ete|ang|lan|nsc|ema|man|t g|is |beg|her|esc|bij|d o|ron|tin|nal|eer|p v|edi|erm|ite|t w|t a| hu|rwi|wij|ijs|r e|weg|js |rmi|naa|t b|app|rwe| bi|t z|ker|ame|eri|ken| an|ar | la|tre|ger|rdi|tan|eit|gde|g i|d z|oep",
    "srp": " pr| i |rav|pra| na|na |ma | po|je | sv|da |a p|ima|ja |a i|vo |nje|va |ko |anj|ti |i p| u |ako|a s| da|avo|i s|ju |ost| za|sva|o i|vak| im|e s|o n|ava| sl|nja| ko|no |ne |li |om | ne|ili| dr|u s|slo|koj|a n|obo|ih |lob|bod|im |sti|stv|a o| bi| il| ra|pri|a u|og | je|jed|e p|enj|ni |van|u p|nos|a d|iti|a k|edn|i u|pro|o d|ova| su|ran|cij|i i|sta|se | os|e i|dru| ob|i o|rod|aju|ove| de|i n| ka|aci|e o| ni| od|ovo|i d|ve | se|eni|voj|ija|su |u i|žav|avn|uje| st|red|m i|dna|a b|odi|ara|drž|ji |nov|lju|e b|rža|tva|što|u o|oja| ov|a j|odn|u u|jan|poš|jen| nj|nim|ka |ošt|du |raz|a z| iz|sno|o p|vu |u n|u d|šti|osn|e d|pre|u z|de |ave|nih|bit|aro|oji|bez|tu |gov|lje|ičn| sa|lja|svo|lo |za |vno|e n|eđu| tr|nar| me|vim|čno|oda|ani|đen|nac|nak|an |to |tre|ašt| kr|stu|nog|o k|m s|tit|aln|nom|oj |pos|e u|reb| vr|olj|dno|iko|ku |me |nik| do|ika|e k|jeg|nst|tav|em |i m|sme|o s|dni|bra|nju|šen|ovi|tan|te |avi|vol| li|zaš|ilo|rug|var|kao|ao |riv|tup|st |živ|ans|eno|čov|štv|kla|vre|bud|ena| ve|ver|odu|međ|oju|ušt| bu|kom|kri|pod|ruš|m n|i b|ba |a t|ugi|edi| mo|la |u v|kak| sm|ego|akv|o j|rad|dst|jav|del|tvo| op|nu |por|vlj|avl|m p|od |jem|oje| čo|a r|sam|i v|ere|pot|o o|šte|rem|vek|svi| on|rot|e r",
    "ckb": " he| û |ên | bi| ma|in |na | di|maf|an |ku | de| ku| ji|xwe|her| xw|iya|ya |kes|kir|rin|iri| ne|ji |bi |yên|afê|e b|de |tin|e h|iyê|ke |es |ye | we|er |di |we |ê d|i b| be|erk|ina| na| an|î û|yê |eye|î y|kî |rke|nê |diy|ete|eke|ber|hem|hey| li| ci|wek|li |n d|fê | bê| te|ne |yî | se|net|rî |tew|yek|sti|af | ki|re |yan|n b|kar|hev|e k|aza|n û|wî | ew|i h|n k|û b|î b| mi| az|dan| wî|ekî|î a|a m|zad|e d|mir|bin|est|ara|iro|nav|ser|a w|adi|rov|n h|anê|tê |ewe|be |ewl|ev |mû | ya|tî |ta |emû| yê|ast|wle| tê|n m| bo|wey|s m|bo | tu|n j|ras| da| me|din|î d|ê h|n n|n w|ing|st | ke| ge|în |ar | pê|iye|îna|bat|r k|ema|cih|ê b|wed|û m|dî |û a|vak|ê t|ekh|par| ye|vî |civ|n e|ana|î h|ê k|khe|geh|nge|ûna|fên|ane|av |î m|bik|eyê|eyî|e û| re|man|erb|a x|vê |ê m|iva|e n|hî |bûn|kê | pa|erî|jî |end| ta|ela|nên|n x|a k|ika|f û|f h|î n|ari|mî |a s|e j|eza|tên|nek| ni|ra |ehî|tiy|n a|bes|rbe|û h|rwe|zan| a |erw|ov |inê|ama|ek |nîn|bê |ovî|ike|a n| ra|riy|i d|anî|û d|e e|etê|ê x|yet|aye|ê j|tem|e t|erd|i n|eta|ibe|a g|u d|xeb|atê|i m|tu | wi|dew|mal|let|nda|ewa| ên|awa|e m|a d|mam|han|u h|a b|pêş|ere| ba|lat|ist| za|bib|uke|tuk|are|asî|rti|arî|i a|hîn| hî|edi|nûn|anû|qan| qa| hi| şe|ine|n l|mên|ûn |e a",
    "yor": "ti | ní|ó̩ | è̩|ní | lá|̩n |o̩n|é̩ |wo̩|àn | e̩|kan|an |tí | tí|tó̩| kò|ò̩ |̩tó| àw| àt|è̩ |è̩t|e̩n|bí |àti|lát|áti| gb|lè̩|s̩e| ló| ó |àwo|gbo|̩nì|n l| a | tó|í è|ra | s̩|n t|ò̩k|sí |tó |̩ka|kò̩|ìyà|o̩ | sí|ílè|orí|ni |yàn|dè |̩‐è|ì k|̩ à|èdè| or|ún |ríl|è̩‐|í à|jé̩|‐èd|àbí|̩ò̩|ò̩ò|tàb|nì |í ó|n à| tà|̩ l|jo̩| ti|̩e |̩ t| wo|nìy|í ì|ó n| jé| sì|ló |kò |n è|wó̩| bá|n n|sì | fú|̩ s|í a|rè̩|fún| pé| òm|̩ni|gbà| kí| èn|ènì|in |òmì|ìí |ba |nir|pé |ira|mìn|ìni|n o|ràn|ìgb| ìg|bá |e̩ | rè|̩ n|kí |n e|un |gba|̩ p|í ò|nú | o̩|nín|gbé|yé | ka|ínú|a k|fi | fi|mo̩|bé̩|o̩d|dò̩|̩dò|ó s|i l|̩ o|̩ ì|wà |í i|i ì|hun|bò |i ò|dá |bo̩|o̩m|̩mo|̩wó|bo |áà |̩ k|ó j|ló̩|àgb|ohu| oh| bí| ò̩|bà |ara|yìí|ogb|írà|n s|ú ì| ìb|pò̩|í k| lè|bog|i t|à t|óò |yóò|kó̩|gé̩|à l|ó̩n|rú |lè | yó|̩ ò|̩ e|a w|̩ y|ò̩r|̩ f| wà|ò l|í t|ó b|i n|ó̩w|̩gb|yí |í w|ìké|̩ a|láà|wùj|àbò|i è|ùjo|fin|é̩n|n k|í e|i j|ú à| ìk|òfi| òf| ar|i s|mìí|ìír| mì| ir|rin|náà| ná|jú |̩ b| yì|ó t|̩é̩| i |̩ m|fé̩|kàn|rí |ú è|à n|wù |s̩é|é à| mú| èt|áyé|í g|̩kó|̩dá|è̩d|àwù|è̩k| ìd|irú|í o|i o|i à|láì|í n|ípa| kú|níp| ìm|a l|ké̩|bé |i g|de |ábé|ìn |báy|̩è̩|ígb|wò̩|níg|mú |láb| àà|n f|è̩s|̩ w|ùn |i a|ayé|èyí| èy|mó̩|á è| ni|n b| wó|je̩| ìj|gbá|ò̩n|ó̩g",
    "uzn": "lar|ish|an |ga |ar | va| bi|da |va |ir | hu|iga|sh |uqu|shi|bir|quq|huq|gan| bo| ha|ini|ng |a e|r b| ta|lis|ni |ing|lik|ida|oʻl|ili|ari|nin|on |ins| in|adi|nso|son|iy | oʻ|lan| ma|dir|hi |kin|har|i b|ash| yo|boʻ| mu|dan|uqi|ila|ega|qla|r i|qig|oʻz| eg|kla|a b|qil|erk|ki | er|oli|nli|at | ol|gad|lga|rki|oki|i h|a o| qa|yok|lig|osh|igi|ib |las|n b|atl|n m| ba|ara| qi|ri | sh|iya|ala|lat|in |ham|bil|a t|a y|bos|r h|siy|n o|yat|inl|ik |a q|cha|a h| et|eti|nis|a s|til|ani|h h|i v|mas|tla|osi|asi| qo|ʻli|ati|i m|rni|im |uql|arn|ris|qar|a i|gi | da|n h|ha |sha|i t|mla|rch| xa|i o|li |hun|bar|lin|ʻz |arc|rla| bu|a m|a a| as|mum| be| tu|aro|r v|ikl|lib|taʼ|h v|tga|tib|un |lla|mda| ke|shg| to|n q|sid|n e|mat|amd|shu|hga| te|tas|ali|umk|oya|hla|ola|aml|iro|ill|tis|iri|rga|mki|irl| ya|xal|dam| de|gin|eng|rda|tar|ush|rak|ayo| eʼ| so|ten|alq| sa|ur | is|imo|r t| ki|mil| mi|era|zar|hqa|aza|k b| si|nda|hda|kat|ak |oʻr|n v|a k|or |rat|ada|ʻlg|miy|tni|i q|shq|oda|shl|bu |dav|nid|y t|ch |asl|sos|ilg|aso|n t|atn|sin|am |ti |as |ana|rin|siz|yot|lim|uni|nga|lak|n i|a u|qon|i a|h k|vla|avl|ami|dek| ja|ema|a d|na | em|ekl|gʻi|si |i e|ino| ka|uch|bor|ker| ch|lma|liy|a v|ʼti|lli|aka|muh|rig|ech|i y|uri|ror",
    "zlm": "an |ang| ke| se|ng | da|dan|ada|ara| pe|ak | be|ran|ber| me|ah |nya|hak|per|n s|ata|ala|ya |a s|kan|asa|n k|lah| di|da |aan|gan|nga|dal| ma|n d|erh|eba|rha|a p| ha|kep|pad|yan| ya|ap |ama| ba|nda| te|ra |tia|man|eng|a b|a d|ora|men|n p|ter|iap|san|epa| or|pen|eti| ad| at|a a|n a|set|tan|h b|tau|sia|n t|apa|dak|pa |sa |au |ta |ela|bas|at | sa|n b|beb|n m|keb|h d|p o|end|ega|aka|a k|am |sam|gar|ana|leh|lam|ole| un|neg|k k|ban|g a|di |n y|eh |a m|eri|aha|han| ti|a t|ma |any|uan|seb|ebe|ngs|atu|mas|bag|car|mem|ing|ian| ne|kes|i d|gsa|ia |ika|mat|agi|ert| de| la|emb|und|nan|asi|emu|ers|epe|na |anu|gi |ung|erk|n h|ngg|tu |ind|pem|i m|g b|kla| in|iha|pun|i s|erl|akl|era|as |dap|eca|sec|al |k m|bar|nus|usi|lan|tin|si |awa|nny| su|bol|sas| as|ini|rta|rat|ena|sem|aya|ni |den|g m|g t|kem|i k|adi|ai |ti | ap| ta|in | he| bo|had|uka|tar| an|hen|ann|ain|ka |rka|ri |ema|k h|n i|g s|dia|dun|ira|rsa|elu|nta|a n|mel|iad|uk |mpu|ua |har|kat|aga|lai|enu|ses|emp|ntu|k d|ent|un |mba|rma|jua|uat|k a|mar|rak|h m|ila|lua|i a|aja|ker|dil|g d|uma|rli|lin|esi|sua|nak|ndu|l d| pu|t d|erm|ser|ar |ese|ati|tuk|rga|i p|dar|esa|bah| ol|ari|ngk|ant|sek|gam|raa|mbe|ida|sat|iri|kea|i b|saa|dir|g u|erj|tik|unt|eka|rja",
    "ibo": "a n|e n|ke | na|na | ọ | bụ| n |nwe|ere|ọ b|re |nye| nk|ya |la | nw| ik| ma|ye |e ọ|ike|a o|nke|a m|ụ n| ya|a ọ|ma |bụl|ụla| on| a |e i|kik|iki|ka |ony|ta |bụ |kwa| nd|a i|i n|di |a a|wa |wer|do | mm|dụ |e a|ha | ga|any| ob|ndi| ok|he |e m|e o|a e|ọ n|ite|rụ |hi |mma|ga‐|wu |ara| dị|aka|che|oke|we |o n| ih|n o|adụ|mad|obo|bod|a g|odo| ka| ez|te |hị |be |ụta|dị | an|zi | oh|a‐e|akw|gba|i m|me | ak|u n|nya|ihe|ala|ohe|ghi|ri | ọz|her|ra |weg| nt| iw| mb|ba |pụt| si|ro |oro|iwu|chi|a‐a|rị |ụ i|ụ ọ| eb|iri|ebe|ụrụ|zọ | in|a y|ezi|e ị|kpa|le |ile|ịrị|n e|kpe|mba| ha|bi |sit|e e|inw|nil|asị| en|mak|a u| ni|apụ|chị|i i|ghị|i ọ|i o|si | e |ide|o i|e y|ụ m|a s|u o|kwu|ozu|yer|ru |enw|ụ o|ọzọ|gid|hụ |n a|ahụ|nkw|sor|egh|edo|a ụ|tar|n i|toz|ị o|pa |i a| me|ime|uru|kwe| mk|tu |ama|eny|uso|de | im|ọ d|osi|hed|a d| kw|mkp|wet| ọr| ọn|obi|ọrụ| ịk| to|gas| ch|ịch|nha|ọnọ|nọd| nc| al|n ụ|ị m| us|nọ |u ọ|nch| o |eta|n u| ot|otu|sir|sịr| nh|a k|ali|o m| ag| gb|e s|ọta|nwa|ị n|lit|ega|ji |ọdụ|e k|ban|e g|ị k|esi|agb|eme|hu |ikp|zu |pe |nta|na‐|chọ|u a|a b|uch|n ọ|onw|ram|kwụ|ekọ|i e| nọ| ug|ọch|u m|gwu|a h|zụz|ugw|meg|ị e|nat|e h|dịg|o y|kpu|pụr|cha|zụ |hịc|ich| ng|ach| og|wap|wan|ịgh|uwa| di| nn|i ị",
    "ceb": "sa | sa|ng |ang| ka|an | pa|ga | ma|nga|pag| ng|a p|on |kat|a k|ug |od | ug|g m| an|ana|n s|ay |ung|ata|ngo|a m|atu|ala|san|ag |tun|g s|g k|god|d s|a s|ong|mga| mg|g p|n u|yon|a a|pan|ing|usa|tan|tag|una|aga|mat|ali|g u|han|nan| us|man|y k|ina|non|kin| na|syo|lan|a b|asa|nay|n n|a i|awa| ta|taw|gaw|nsa|a n|nas| o |ban|agp|isa|dun|was|iya| gi|asy|adu|ini|bis| ad|ili|o s| bi|g a|nah|nag|a t| ki|lin|lay|ahi|sam|al |wal| di|nal|asu| ba|ano|agt| wa|ama|yan|a u| iy|kan|him|n k|gan|ags|n a|kag| un|ya |kas|gpa|g t| su|aha|wha|agk|awh|gka|a g|kal|l n|gla|gsa|sud|gal|imo|ud |d u|ran|uka|ig |aka|aba|ika|g d|ara|ipo|ngl|g n|uns|n o|kau|i s|y s|og |uta|d n|li | si|gik|g i|mta|ot |iin| la| og|o a|ayo|ok |awo|aki|kab|aho|n m|hat|o p|gpi|a w|apa|lip|ip | hu| ga|a h|uba|na | ti|bal|gon|la |ati|wo |ad |hin|sal|gba|buh| bu| ub|uha|agb|hon|ma |nin|uga|t n|ihi| pi|may| pu|mak|ni | ni|d a|pin|abu|agh|ahu|uma|as |dil|say| in|at |ins|lak|hun|ila|mo |s s|sak|amt|o u|pod|ngp|tin|a d|but|ura|lam|aod|t s|bah|ami|aug|mal|sos|os |k s| il|tra| at|gta|bat|aan|ulo|iha|ha |n p| al|g b|lih|kar|lao|agi|amb|mah|ho |sya|ona|aya|ngb|in |inu|a l| hi|mag|iko|it |agl|mbo|oon|tar|o n|til|ghi|rab|y p| re|yal|aw |nab|osy|dan",
    "tgl": "ng |ang| pa|an |sa | sa|at | ka| ng| ma|ala|g p|apa| na|ata|pag|pan| an| at|ay |ara|ga |a p|tan|g m|mga| mg|n n|pat| ba|n a|aya|na |ama|g k|awa|kar|a k|lan|rap|gka|nga|n s|g n|aha|g b|a a| ta|agk|gan|tao|asa|aka|yan|ao |a m|may|man|kal|ing|a s|nan|aga| la|ban|ali|g a|ana|y m|kat|san|kan|g i|ong|pam|mag|a n|o a|baw|isa|wat| y |lay|g s|y k|in |ila|t t| ay|aan|o y|kas|ina|t n|ag |t p|wal|una|yon| o | it|nag|lal|tay|pin|ili|ans|ito|nsa|lah|kak|any|a i|nta|nya|to |hay|gal|mam|aba|ran|ant|agt|on |t s|agp| wa| ga|gaw|han|kap|o m|lip|ya |as |g t|hat|y n|ngk|ung|no |g l|gpa|wa |lag|gta|t m|kai|yaa|sal|ari|lin|a l|pap|ahi| is| di|ita| pi|pun|agi|ipi|mak|a b|y s|bat|yag|ags|o n|aki|tat|pah|la |gay|hin| si|di |i n|sas|iti|a t|t k|mal|ais|s n|t a|al |ipu|ika|lit|gin| ip|ano|gsa|alo|nin|uma|hal|ira|ap |ani|od |i a|gga|y p|par|tas|ig |sap|ihi|nah|ini| bu|ngi|syo|o s|nap|o p|a g| ha|uka|a h|aru|a o|mah|iba|asy|li |usa|g e|uha|ipa|mba|lam|kin|kil|duk|n o|iga| da|dai|aig|igd|gdi|pil|dig|pak| tu|d n|sam|nas|nak|ba |ad |lim|sin|buh|ri |lab|it |tag|g g|lun|ain|and|nda|pas|kab|aho|lig|nar|ula| ed|edu| ib|git|ma |mas|agb|ami|agg|gi |sar|i m|siy|g w|api|pul|iya|amb|nil|agl|sta|uli|ino|abu|aun|ayu| al|iyo",
    "hun": " sz| a |en | va|és | és|min|ek | mi| jo|jog|ind|an |nek|sze|ság| az|gy |sza|nde|ala|az |den|a v|val|ele| el|oga|mél|egy| eg|n a|ga |zab| me|zem|emé|aba|int|van|bad|tel|tet| te|ak |tás|ény|t a| ne|gye|ély|tt |n s|ben|ség|zet|lam|meg|nak|ni | se|ete|sen|agy|let|lyn|s a|yne|ra |z e|et | al|mel|kin|k j|eté|ok |tek| ki|vag|re |n m|oz |hoz|ez |s s|ett|gok|ogy| kö|mbe|es |em |nem|ely| le|ell|emb|hog|k a|atá|köz|nt | ho|yen|hez|el |z a|len|dsá|ásá|tés|ads|k m| ál| em|a s|nte|a m|szt|a t|áll|ás |y a|ogo|sem|a h|enk|nye|ese|nki|ágo|t s|lap|ame|ber|ló |k é|nyi|ban|mén|s e|i m|t m| vé|lla|ly |ébe|lat|ág |ami|on |mze|n v|emz|fel|a n|lő |a a|eki|eri|yes| cs|lle|tat|elő|nd |i é|ég |ésé|lis|yil|vet|át |kül|ért| ke|éte|rés|l a|het|szo|art|alá| ny|tar|koz| am|a j|ész|enl|elé|ól |s k|tár|s é|éle|s t|lem|sít|ges|ott| fe|n k|tko|zás|t é|kel|ja | ha|aló|zés|nlő|ése|ot |ri |lek|más|tő |vel|i j|se |ehe|tes|eve|ssá|tot|t k|olg|eze|i v|áza|leh|n e|ül |tte|os |ti |atk|zto|e a|tos|ány|ána|zte|fej|del|árs|k k|kor|ége|szá|t n| bi|zat|véd|nev|elm|éde|zer|téb|biz|rra|ife|izt|ere|at |ll |k e|ny |sel| né|ába|lt |ai |sül|ház|kif|t e| ar|leg|d a|is |i e|arr|t t|áso|it |ető|al | má|t v| bá|bár|a é|esü|lye|m l| es|nyo",
    "azj": " və|və |ər |lar| hə|in |ir | ol| hü| bi|hüq|üqu|quq|na |lər|də |hər| şə|bir|an |lik| tə|r b|mal|lma|ası|ini|r h|əxs|şəx|ən |arı|qla|a m|dir|aq |uqu|ali| ma|una|ilə|ın |yət| ya|ara|ikd|əri|ar |əsi|əti|r ş|rin|yyə|n h| az|dən|nin|ərə|tin|iyy|mək|zad| mü|sin| mə|ni |nda|ət |ndə|aza|rın|ün |ını|ə a|i v|nın|olu|qun| qa| et|ilm|lıq|ə y|ək |lmə|lə |kdi|ind|ına|olm|lun|mas|xs |sın|ə b| in|n m|q v|nə |əmi|n t|ya |da | bə|tmə|dlı|adl|bər| on|əya|ə h|sı |nun|maq|dan|inə|etm|un |ə v|rlə|n b|si |raq| va|ə m|n a|ınd|rı |anı| öz|əra|nma|n i|ama|a b|irl|ala|li |ins|bil|ik | al| di|ığı|ə d|lət|il |ələ|ə i|ıq |nı |nla|dil|müd|n v|ə e|unm|alı| sə|xsi|ə o|uq |uql|nsa|ətl| də|ili|üda|asi| he|ola|san|əni|məs| da|lan| bu|tər|həm|dır|kil|iş |u v| ki|min|eyn|mi |yin| ha|sos|heç|bu |eç | ed|kim|lığ|alq|xal| as|sia|osi|r v|q h|rə |yan|i s| əs|daf|afi| iş|ı h|fiə| ta|ə q|ıql|a q|yar|sas|lı |ill|mil|əsa|liy|tlə|siy|a h|məz|tün|ə t| is|ist|iyi| so|n ə|al |ifa|ina|lıd|ı o|ıdı|əmə|ır |ədə|ial| mi|əyi|miy|çün|n e|iya|edi| cə| bü|büt|ütü|xil|üçü|mən|adə|t v|a v|axi|dax|r a|onu| üç|seç| nə| se|man|ril|sil|əz |iə |öz |ılı|aya|qan|i t|şər|təm|ulm|rəf|məh| xa|ğın| dö| ni|sti|ild|amə|qu |nam|n o|n d|var|ad |zam|tam|təh",
    "ces": " pr| a |ní | ne|prá|ráv|ost| sv| po|na |ho |ch | na|nos|o n|ání| ro|ti |neb|vo |má |ávo|ebo|kaž|ažd| ka|ou | má|bo | za| je| př|ždý|dý |svo|a s|sti| st|á p| v |obo|vob|bod| sp| zá|pro|rod|ých|ván|ého| by|ý m|ení|né | ná|spo|ová|o p|ter|mi |ně |í a|roz|to |a p|by |jak|nár|áro| li| ja|a z|í p|i a| vš|lid|kte|ny |u p|o v|ím |odn|at |mu | vy| ma| so|li |zák| kt|kla|í n|tní|a v|ví |oli|pod|mí |en |je | do|stá|byl|t s|do |em |áva|pol|být| bý|o s| ve|vše|í s|it |í b|čin|rov|dní|tví| se| k |ýt |vol|sou|a n|ejn|nou|se |ran|nýc|nes|stn|ci |i s|vé |ým |kol|pří|ova|ích|žen|du |ečn|stv|e s|mez|své|ají|tát|ké |u s|jeh|eho|ným|va |ním|ech|eré|o z|maj| ze|ole| i |ému|i v|y s|ids|kon|hra|nu |ave|í v| to|m p|o d|i n|len|pra|chn|esm|že | ta| ni| os|vat|sta|dsk|st | že|ovn|rac|lad|i p|chr|aby|m a| ab|ako|aké|néh|sob|smí|áv |bez|dy |čen|lně|í m|vou|leč|a m|t v|lní| ji|při|áln|oci|rav|i k|ými| či|ens|odu|m n| s |jí |ákl|zem|kdo|och| oc|ste| vz|ven|ky |oko|tej|jin|slu|ivo|zen|inn|ské|y b|zac|a j|věd|ezi| me|nez|u a|ský|stu|a o|oln|iál|nit|řís|níc|í z|u k|pln| tr|u o|svě|nik|ikd| od|ože|anu|vin|i j|cho|aci|děl| pl|ává|a t|odi|í k| vo|adn|est|tup| mu|obe|ve |din|odů|h n|u v|nem|por|hov|čno|kéh| vý|tak|jno",
    "run": "ra |we |wa | mu|e a|se | n |a k|ira|ntu|tu | ku| um|ko |a i|mu |iri|mun|hir|ye |unt|ing|ash|ere|shi|a n|umu|zwa| bi|gu |ege|a a|za |teg|ama|e k|go |uba|aba|ngo|ora|o a|ish| ba| ar|ung|a m| we|e n|na |sho|ese|nga| ab|e m|mwe|ugu| kw|ndi| gu|ate|kwi|wes|riz|ger|u w| at|di |gih|iza|n u|ngi|ban|yo |ka |e b|a b| am| ca|ara|e i|obo|hob|ri |u b|can|nke|ro |bor| in|bah|ahi|ezw|a u|gir|ke |igi|iki|iwe|rez|ihu|hug|aku|ari|ang|a g|ank|ose|u n|o n|rwa|kan| ak|nta|and|ngu| vy|aka|n i|ran| nt| ub|kun|ata|i n|kur|ana|e u| ko|gin|nye|re | ka|any|ta |uko|amw|iye| zi|ga |ite| ib|aha| ng|era|o b|ako|o i| bu|o k|o u|o z| ig|o m|ho |mak|sha| as| iv|ivy|n a|i b|izw|o y| uk|ubu|aga|ba |kir|vyi|aho| is|nya|gan|uri| it| im|u m|kub|rik|hin|guk|ene|bat|nge|jwe|imi| y |vyo|imw|ani|kug|u a|ina|gek|ham|i i|e c|ze |ush|e y|uru|bur|amb|ibi|agi|uza|zi |eye|u g|gus|i a| nk|no |abi|ha |rah|ber|eme|ras|ura|kiz|ne |tun|ron| zu|ma |gen|wo |zub|w i|kor|zin|wub|ind| gi|y i|ugi|je |iro|mbe| mw|bak| ma|ryo|eka|mat| ic|onk|a z| bo|ika|eko|ihe|ukw|wir|bwa| ry| ha|bwo| ag|umw|yiw|tse| ya|he |eng| ki|nka|bir|ant|aro|gis|ury|twa| yo|bik|rek|ni | ah| bw|uro|mw |tan|i y|nde|ejw| no|zam|puz|ku |y a|a c|bih|ya |mur|utu|eny|uki|bos",
    "plt": "ny |na |ana| ny|y f|a n|sy |aha|ra |a a| fa|n n|y n|a m|an | fi|tra|any| ma|han|nan|ara|y a| am|ka |in |y m|ami|olo| ts|lon|min| mi| sy| na|a t| ol|fan| ha|a i|man|iza| iz|ina|ona|y h|aka|o a|ian|a h|reh|etr|a s|het|on |a f|ire|fah|tsy|mba| ar| hi|zan|ay |ndr|y o|ira|y t| an|ehe|o h|afa|y i|ren|ran| zo|ena|amb|dia|ala|amp|zo |ika| di|tan|y s|y z| az|ia |m p|rin|jo |n j| jo| dr|zy |ry |a d|ao |and|dre|haf|nen|mpi|rah| ka|eo |n d| ir|ho |am |rai|fa |elo|ene|oan|omb| ta| pi| ho|ava|azo|dra|itr|iny|ant|tsi|zon|asa|tsa| to|ari|ha |a k|van|n i|fia|ray| fo|mbe|ony|sa |isy|azy|o f|lal|ly |ova|lom| vo|nat|fir|sam|oto|zay|mis|ham|bel| ra|a r|ban|kan|iha|nin|a e|ary|ito| he| re| no|ita|voa|nam|fit|iar| ko|tok|isa|fot|no |otr|mah|aly|har|y v|y r| sa|o n|ain|kam|aza|n o|oka|ial|ila|ano|atr|oa | la|y l|eri|y d|ata|hev|sia|pia|its|reo| ao|pan|anj|aro|tov|nja|o s|fam|pir| as|ty |nto|oko|y k|sir|air|tin|hia|ais|mit|ba | it| eo|o t|mpa|kon|a z|a v|ity|ton|rak|era|ani|ive|mik|ati|tot|vy |hit|hoa|aho|ank|ame|ver|vah|tao|o m|ino|dy |dri|oni|ori| mo|hah|nao|koa|ato|end|n t| za|eha|nga|jak|bar|lah|mia|lna|aln|va | mb|lan| pa|aov|ama|eve|za |dro|ria|to |nar|izy|ifa|adi|via|aja| va|ind|n k|idi|fiv|rov|vel",
    "qug": "una|ta | ka|na |ka |ash|cha|a k|ari|ish|kun|kta|ana|pak|hka|shk|apa|mi |ach|hay|akt|shp|man|ak | ch| ha|rin|ata|tak|lla|ita|ami|ama|aku|har| pa|pas|ayñ|yñi|ina| ma| ru|uku|sh |hpa|run|all|kuy|aka|an | tu|tuk|yta|chi|chu|a c|ñit|in |nak|a h|nka|ris|tap|kan| ki|ayt|pi | sh|pa |i k|a p|nap|kam|kaw|pay|nam|ayp|aws|iri|wsa|a s|ank|nta|uy |a t|hin|a m|ay | li|ant|lia|kay|nat|a r|shi|iak|lak|uya| wa|yuy|say|kis|y r|ypa|hun|a a| yu|n t|tam| ti|yay|n k| ya|a w|hpi|lli| al|api|yku|un |ipa|a i|iku|ayk|shu| sa|ush|pir|ich|kat|hu |huk| il|ill|kas|a y|rik|yac|a l| ku|kac|hik|tan|wan|ypi|ink|ika| ni|ila|ima|i c|yll|ayl| wi|mac|nis| ta|i y|kus|tin|n s|i p|yan|llu|la |iks|tik|kpi| pi|awa|may|lan|li | ri|kll|yas|kin|kak|aya|ksi|k h|aym|war|ura| ay|lat|ukt|i t|iya|ull|mas|sha|kir|uch|h k|nch|akp|uma|pip|han|kik|iki|riy|aki| ii|i s|n p|h m|kar|nal|y h|tac| su|nac|mak|n m|nki|k a|mam|iwa|k t|k k|i m|yma| ña|wil|asi|nmi|kap|pal|sam|pam|k i|k l|i i|pan|sum|i w| hu|his| mu|iia|mun|k m|u t|pik|was|ik |ma |hat|k r|akl|huc| im|mal|uyk|imi|n y|anc|y k|a n|iñi| iñ|wak|unk|yka| mi|iña|a u|has|ywa| ak|llp|ian|ha |tar|rmi|i a|arm|las|ati|pur|sak|ayw|hap|yar|uti|si |iyt|uri|kim| ar|san|h p|akk|iy |wat|wpa|y i|u k",
    "mad": "an |eng|ban|ng | sa| ka|dha| ba|ren|ak |ang| se| ha|hak| dh|na | pa|se |adh|a s|aba|n s|ara|ngg|are|ha |aga|sa | or|ore|asa|sar|ana| ma|aan|a k|ale|gi | ag|gad|a b|n o|n k|eba|ala|ra |gan| ke|dhu|ota|aja|bas|n b|ka |man|tab|dhi|beb|sab|ama|ako|abb|at |ggu|nga| ta|pan|wi |huw|uwi|eka|ata|a d|san| ot|agi|lak|hal|ba |bba|i h|ong|em |kab|g a|lem|a o| pe| na|ane|par|ngs|nge|gar|a a|tan|gsa|a p|ran|i s|k h|n p|uy |guy|ken|n a|al |ada| ga|apa|pon|e d| e |nek| an|g s|ta |kaa|on |kal|a m|ssa|ona|abe|kat| la|a e|e e|sal|ate|jan|ri |nan|lab|asi|sad|i p|e a|lan|aka|a h|ari| bi|ena|si |daj| ng|ton|e k|har|oss|gen|i k|g k|car|ase|ano|era|kon| be|nya|n d|nag|bad|ar |epo| da|mas| kl| al|n t|mat|nos|n n|ela|g e|a n|k k|uwa|adi|pad|ggi|uan|i d|ne | so|hi |sae|oan|wan|as |le |gap|ter|yat|om |kla|k a|e b|ina|ah |k s|koa|i a|ega|neg|n h|m p|aha| as| ja|abi|ma |kas|bi | mo|aon| di|one| ep|per|aya|e s|nto|te |bat|epa|nda|n e| ca|int|pam|di |ann| ra|aen|k d|amp|a t|nta|and|e p|rga|pen|yar|mpo|ste|dra|ok |oko|ila|g p|k b|i b|set|to |isa|nao|nna|n m|ett| a |bis|hid|bin|i m|nas| ho|kar|t s| po|dil| to|aju|ika|kom|arg|ant|raj|a l|das|tto|ost|mos|lae|ga |rek|idh|tad|hig|en |rny|arn|ndh|eta|adu| dr|jat|jua|gam",
    "nya": "ndi|ali|a k|a m| ku| nd|wa |na |nth| mu| al|yen|thu|se |ra |nse|hu |di |a n|la | pa|mun| wa|nga|unt| la|a u|u a|e a|ons|za | ma| lo|iye|ace|ce |a l|idw|ang| ka|kha|liy|ens|li |ala|ira|ene|pa |i n|we |e m|ana|dwa|era|hal|ulu|lo |ko |dzi| ci|yo |o w|iko|ga |a p|chi| mo|lu |o l|o m|oyo|ufu| um|moy|zik| an|ner|and|umo|ena| uf|dan|iri|ful|a a|ka |to |hit|nch| nc|a c|ito|fun|dwe| da|kuk|wac| dz|e l|a z|ape|kap|u w|e k|ere|ti |lir| za|pen|tha|aye|kut|mu |ro |ofu|ing|lid| zo|amu|o c|i m|mal|kwa|mwa|o a|eza|i p|o n|so |i d|lin|nso| mw|iro|zo | a |ati| li|i l|a d|ri |edw|kul|una|uti|lan|a b|iki|i c|alo|i k| ca|lam|o k|dza|ung|o z|mul|ulo|uni|gan|ant|nzi| na|nkh|e n|san|oli|wir|tsa|u k|ome|ca |gwi|unz|lon|dip|ipo|yan|gwe|pon|akh|uli|aku|mer|ngw|cit| po| ko|kir|mba|ukh|tsi|bun|iya|ope|kup|bvo|han| bu|pan|ame|vom|ama| ya|siy| am|rez|u n|zid|men|osa|ao |pez|i a| kw| on|u o|lac|ezo|aka|nda|hun|u d|ank|diz|ina|its|adz| kh|ne |nik|e p|o o|ku |phu|eka| un|eze|mol|ma | ad|pat|oma|ets|wez|kwe|kho|ya |izo|sa |o p|kus|oci|khu|okh|ans|awi|izi|zi |ndu|iza|no |say| si|i u|aik|jir|ats|ogw|du |mak|ukw|nji|mai|ja |sam|ika|aph|sid|isa|amb|ula|osi|haw|u m| zi|oye|lok|win|lal|ani| ba|si | yo|e o|opa|ha |map|emb",
    "zyb": "bou|aeu|enz|nz |eng|iz |ih |uz |uq |oux|ing| bo| di| ca|z g|dih|ux |ngh|cae|gen|euq|z c|you|ng |ung|ngz|ij | gi| mi|miz|aen| ge|z d| ci|gya| yi| de|ouj|uj | gu|cin|ngj|ien|mbo|dae| mb|zli| se|gij|j g|ang|ouz|z y|j d|nae| cu| ba| da|h g|oz |yin|de |z b|nzl|li |nj |euz|x m| cw|iq | yo|gz |q g|yau|inh|vun|x b|h c| ga|ix |cwy|wyo| ro|rox|oxn|vei|nda|i c| nd|z m|gh |j b|wz | si| gy|hoz|unz|xna|cun|gue| li|ei |z h|yen|bau|can|inz|q c|dan| hi|gj |uh |yie| vu|faz|hin| bi|uek|goz|zci|nh |aej|ya |ej | fa|gun|ciz|au | go| ae|h m|ngq|den|gva|ouq|nq |z s|q d|ekg|q s| do|h d|kgy|eix| wn|ci |az |hu |nhy| ha|j c|u d|j n|z l|auj|gai|gjs|lij|eve|h s|sen|sin|sev|ou |sou|aiq|q y|h y|jso|bin|nei| la|en |ouh|din|uen|enj|enh|i b|z r|awz|q n|vih|j y|anj|bwn|sei|z n| ne|ozc|hye|j s|i d|awj|liz|g g|bae|wng|g b|eiq|bie|enq|zda| ya|n d|h f|x d|gak|hix|z v|h b|oen|anh|u c|in |i g|ghc|zsi|hci|siz|anz|ghg|ez |dun|cou| du|ngg|ngd|j m|cuz| ho|law|eiz|g c| dw|aw |g d|izy|hgy|ak |nde|min|dei|gda|ujc|wn |env|auy|iuz|ai |wnj|a d|hen|ozg|nzg|ek |g y|gzd|gzs|yaw|e c|yuz|daw|giz|jhu|ujh| co|nvi|guh|coz| ve| he|i m|sae|aih|x l|iet|iuj|dwg|iqg|qgy|gih|yai| na| fu|uyu|zbi|zdi|q b|cie|inj|zge|wnh|jsi|uzl| bu| le|eij|izc|aq ",
    "kin": "ra | ku| mu|se |a k|ntu|nga|tu |umu|ye |li | um|mun|unt|a n|ira| n |ere|wa |we | gu|mu |ko |a b|e n|o k|e a|a u|a a|u b|e k|ose|uli|aba|ro | ab|gom|e b|ba |ugu| ag|omb|ang| ib|eng|mba|o a|gu | ub|ama| by| bu|za |ihu|ga |e u|o b| ba|kwi|hug|ash|ren|yo |ndi|e i| ka| ak| cy|iye| bi|ora|re |gih|igi|ban|ubu| nt| kw|di |gan|a g|a m|aka|nta|aga| am|a i|ku |iro|i m|ta |ka |ago|byo|ali|and|ibi|na |uba|ili| bw|sha|cya|u m|yan|o n| ig|ese|no |obo|ana|ish|kan|sho| we|era|ya |aci|wes|ura|i a|uko|e m|n a|o i|kub|uru|hob|ber|ran|bor| im|ure|u w|wo |cir|gac|ani|bur|u a|o m|ush| no|e y| y |rwa|eke|nge|ara|wiy|uga|zo |ne |ho |bwa|yos|anz|aha|ind|mwe|teg|ege|are|ze |n i|rag|ane|u n|ge |mo |u k|bul| uk|bwo|bye|iza|age|ngo|u g|gir|ger|zir|kug|ite|bah| al| ki|uha|go |mul|ugo|n u|tan|guh|y i| ry|gar|bih|iki|atu|ha |mbe|bat|o g|akw|iby|imi|kim|ate|abo|e c|aho|o u|eye|tur|kir| ni|je |bo |ata|u u| ng|shy|a s|gek| ru|iko| bo|bos|i i| gi|nir|i n|gus|eza|nzi|i b|kur| ya|o r|ung|rez|ugi|ngi|nya| se|mat|eko|o y| in|uki| as|any|bis|ako|gaz|imw|rer|bak|ige|mug|ing|byi|kor|eme|nu | at|bit| ik|hin|ire|kar|shi|yem|yam| yi|gen|tse|ets|ihe|hak|ubi|key|rek|icy| na|bag|yer| ic|eze|awe|but|irw| ur|fit|ruk|ubw|rya|uka|afi",
    "zul": "nge|oku|lo | ng|a n|ung|nga|le |lun| no|elo|wa |la |e n|ele|ntu|gel|tu |we |ngo| um|e u|thi|uth|ke |hi |lek|ni |ezi| ku|ma |nom|o n|pha|gok|nke|onk|a u|nel|ulu|oma|o e|o l|kwe|unt|ang|lul|kul| uk|a k|eni|uku|hla| ne| wo|mun| lo|kel|ama|ath|umu|ho |ela|lwa|won|zwe|ban|elw|ule|a i| un|ana|une|lok|ing|elu|wen|aka|tho|aba| kw|gan|ko |ala|enz|o y|khe|akh|thu|u u|na |enk|kho|a e|zin|gen|i n|kun|alu|mal|lel|e k|nku|e a|eko| na|kat|lan|he |hak| ez|o a|kwa|o o|ayo|okw|kut|kub|lwe| em|yo |nzi|ane|obu| ok|eth|het|ise|so |ile|nok| ba|ben|eki|nye|ike|i k|isi| is|aph|esi|nhl|mph| ab|fan|e i|isa| ye|nen|ini|ga |zi |fut| fu|uba|ukh|ka |ant|uhl|hol|ba |and|do |kuk|abe|za |nda| ya|e w|kil|the| im|eke|a a|olo|sa |olu|ith|kuh|o u|ye |nis| in|ekh|e e| ak|i w|any|khu|eng|eli|yok|ne |no |ume|ndl|iph|amb|emp| ko|i i| le|isw|zo |a o|emi|uny|mel|eka|mth|uph|ndo|vik| yo|hlo|alo|kuf|yen|enh|o w|nay|lin|hul|ezw|ind|eze|ebe|kan|kuz|phe|kug|nez|ake|nya|wez|wam|seb|ufa|bo |din|ahl|azw|fun|yez|und|a l|li |bus|ale|ula|kuq|ola|izi|ink|i e|da |nan|ase|phi|ano|nem|hel|a y|hut|kis|kup|swa|han|ili|mbi|kuv|o k|kek|omp|pho|kol|i u|oko|izw|lon|e l| el|uke|kus|kom|ulo|zis|hun|nje|lak|u n|huk|sek|ham| ol|ani|o i|ubu|mba| am",
    "swe": " oc|och|ch |er |ing|för|tt |ar |en |ätt|nde| fö|rät|ill|et |and| rä| en| ti| de|til|het|ll |de |om |var|lig|gen| fr|ell|ska|nin|ng |ter| ha|as | in|ka |att|lle|der|sam| i |und|lla|ghe|fri|all|ens|ete|na |ler| at|ör |den| el|av | av| so|igh|r h|nva|ga |r r|env|la |tig|nsk|iga|har|t a|som|tti| ut|ion|t t|a s|nge|ns |a f|r s|män|a o| sk| si|rna|isk|an | st|är |ra | vi| al|t f| sa|a r|ati| är| me| be|n s| an|tio|nna|lan|ern|t e|med| va|ig |äns| åt|sta|ta |nat| un|kli|ten| gr|vis|äll| la|one|han|änd|t s|stä|t i|ner|ans|gru| ge|ver| må| li|lik|ihe|ers|rih|r a| re|må |sni|n f|t o| mä| na|r e|ri |ad |ent|kla|det| vä|run|rkl|da |h r|upp|dra|rin|igt|dig|n e|erk|kap|tta|ed |d f|ran|e s|tan|uta|nom|lar|gt |s f| på| om|kte|lin|r u|vid|g o|änn|erv|ika|ari|a i|lag|rvi|id |r o|s s|vil|r m|örk|ot |ndl|str|els|ro |a m|mot| mo|i o|på |r d|on |del|isn|sky|e m|ras| hä|r f|i s|a n|nad|n o|gan|tni|era|ärd|a d|täl|ber|nga|r i|enn|nd |n a| up|sin|dd |örs|je |itt|kal|n m|amt|n i|kil|lse|ski|nas|end|s e| så|inn|tat|per|t v|arj|e f|l a|rel|t b|int|tet|g a|öra|l v|kyd|ydd|rje| fa|bet|se |t l|lit|sa |när|häl|l s|ndr|nis|yck|h a|llm|lke|h f|arb|lmä|nda|bar|ckl|v s|rän|gar|tra|re |ege|r g|ara|ess|d e|vär|mt |ap ",
    "lin": "na | na| ya|ya |a m| mo|a b|to | ko| bo|li |o n| li|i n| pe|i y|a y|a n|ngo|ki | ba| ma|kok|pe |la |a l|zal|oki|ali|nso|oto|ala|ons|so |mot|a k|nyo|eng|kol|go |nge| ny|yon|o e|ang|eko|te |o y|oko|olo|ma |iko|a e|e m|e b|lik|ko |o a|ako|ong| ye|mak|ye |isa| ek|si |lo |aza|sal|ama| te|bat|o p|oyo|e n| az|a p|ani|sen|o m|ela|ta |amb|i k|ban|ni | es|yo |mi |mba|osa| oy|aka|lis|i p|eli|a t|mok|i m|ba |mbo| to| mi|isi|bok|lon|ato|ing|o b| nd|ota|bot| ez|ge |nga|eza|o t|nde|ka |bo |gel|kan|e k|lam|sa |ese|koz| po|den|ga |oba|omb|oli|yan|kop|bon|mos|e e|kob|oka|kos|bik|lin|po |e a| lo| bi|kot|’te|ngi|sam| ’t|omi|e y|ti |i b| el|elo|som|lok|esa|gom|ate|kam|i t|ika|a s|ata|kat|ati|wa |ope|oza|iki|i e| ka|bom|tal|o l|bek|zwa|oke|pes| se|bos|o o|ola|bak|lak|mis|omo|oso|nza| at|nda|bal|ndi|mu |mob|osu|e t|asi|bis|ase|i l|ele|sus|usu|su |ozw|and|mol|tel|lib|mbi|ami| nz|ne |ene|kel|aye|emb|yeb|nis|gi |obo|le |kum|mal|wan|a ’|pon| ep|baz|tan|sem|nya|e l| ta|gis|opo|ana|ina|tin|obe| ti|san| ak|mab|bol|oku|u y|mat|oti|bas|ote|mib|ebi|a o|da |bi | mb|lel|tey|ibe|eta|boy|umb|e p|eni|za |be |mbe|bwa|ike|se | et|ibo|eba|ale|yok|kom| en|i a|mik|ben|i o| so|gob|bu |son|sol|sik|ime|eso|abo| as|kon|eya|mel",
    "som": " ka|ay |ka |an |uu |oo |da |yo |aha| iy|ada|aan|iyo|a i| wa| in|sha| ah| u |a a| qo|ama| la|hay|ga |ma |aad| dh| xa|ah |qof|in | da|a d|aa |iya|a s|a w| si| oo|isa|yah|eey|xaq|ku | le|lee| ku|u l|la |taa| ma|q u|dha|y i|ta |aq |eya|sta|ast|a k|of |ha |u x|kas|wux| wu|doo|sa |ara|wax|uxu| am|xuu|inu|nuu|a x|iis|ala|a q|ro |maa|o a| qa|nay|o i| sh| aa|kal|loo| lo|le |a u| xo| xu|o x|f k| ba|ana|o d| uu|iga|a l|yad|dii|yaa|si |a m|gu |ale|u d|ash|ima|adk|do |aas| ca|o m|lag|san|dka|xor|adi|add| so|o k| is|lo | mi|aqa|na | fa|soo|baa| he|kar|mid|dad|rka|had|iin|a o|aro|ado|aar|u k|qaa| ha|ad |nta|o h|har|axa|quu| sa|n k| ay|mad|u s| ga|eed|aga|dda|hii|aal|haa|n l|daa|xuq|o q|o s|uqu|uuq|aya|i k|hel|id |n i| ee|nka| ho|ina|waa|dan|nim|elo|agu|ihi|naa|mar|ark|saa|riy|rri|qda|uqd| bu|ax |a h|o w|ya |ays|gga|ee |ank| no|n s|oon|u h|n a|ab |haq|iri|o l| gu|uur|lka|laa|u a|ida|int|lad|aam|ood|ofk|dhi|dah|orr|eli| xi|ysa|arc|rci|to |yih|ool|kii|h q|a f| ug|ayn|asa| ge|sho|n x|siy|ido|a g|gel|ami|hoo|i a|jee|n q|agg|al | di| ta|e u|o u| ji|goo|a c|sag|alk|aba|sig| mu|caa|aqo|u q|ooc|oob|bar|ii |ra |a b|ago|xir|aaq| ci|dal|oba|mo |iir|hor|fal|qan| du|dar|ari|uma|d k|ban|y d|qar|ugu| ya|xay|a j",
    "hms": "ang|gd |ngd|ib | na|nan|ex |id | ji|ad |eb |nl |b n|d n| li|ud |jid| le|leb| ga|ot |anl|aot|d g|l l|b l| me|ob |x n|gs |ngs|mex|nd |d d| ne|jan|ul | ni|nja| nj| gu| zh|lib|l n|ong| gh|gao|b j|b g|nb |l g|end|gan| ad| je|jex|ngb|gb |han|el | sh| da|ub |d j|d l|t n| nh|nha|b m|is |d z|x g| ya|oul|l j| wu|she|il |nex| ch|b y|d s|gue|gho|uel|wud|d y| gi|d b|hob|nis|s g| zi| yo|lie|es |nx |it |aob|gia|ies| de|eib|you| ba| hu|ian|zib|d m|s j|oud|b d|chu|ol |ut | do|t j|nen|hud|at |s n|hen|iad|ab |enl| go|dao| mi|t g|zha|b z|enb|x j| ze|eit|hei|d c|nt |b s| se|al | xi|inl|hao| re| fa|d h|gua|yad|ren| ho|anb|gx |ngx|ix |nib|x z|and|b h|b w|fal| xa|d x|t l|x m|don|gou|bao|ant|s z|had|d p|yan|anx|l d|zhe|hib| pu|ox | du|hui|sen|uib|uan|lil|dan|s m| di| we|gha|xin|b x|od |zhi|pud| ju| ng|oub|xan| ge|t z|hub|t h|hol|t m|jil|hea|x l| ma|eud|jul|enx|l z|l s|b a| lo| he|nga|d r|zen| yi|did|hon|zho|gt |heb|ngt|os |d a|s l|aos| si|dei|dud|b b|geu|wei|d w|x c|x b|d k|dou|l h|lou| bi|x a|x d|b c| sa|s a| bo|eut|blo| bl|nia|lol|t w|bad|aod| qi|ax |deb| ja|eab| nd|x s|can|pao| pa|gl |ngl|che|sat|s y|l m|t s|b f|heu|s w| to|lia| ca|aox|unb|ghu|ux | cu|d f|inb|iel| pi|jib|t p|x x|zei|eul|l t|l y|min|dad",
    "hnj": "it | zh| ni|ab |at | sh|ang|nit|os | do|uat|ox |ax |nx |ol |ob | nd|t d|x n|nf |zhi|as | ta|tab|ef |if |d n|ad | mu| cu|uax|cua|mua|b n|uf |ib |s d|dos|id |enx|nb |hit| lo|f n|t l|ngd|gd |us |inf|ux |ed | go|she|b d|b z|t n| ho|x z| yi|aob|l n|ong|t z| zi|ix |nda|d z|ut |yao|uab|enb| de|dol|f g| dr|zhe| yo| le|euf|x d|inx|nen|das| ne|dro|gb |ngb|d s| ge|hox|f z|uef|s n|len|b g| ua|ud |nd |gox| na|il | du|x j|oux|f y|f h|ndo|x c|han|of |zha|uad|s z| da| ny| ja| gu|heu| ji|ik | bu|shi|lob|od | ya|gf |t g|hai|ged|ngf|b h|you| hu|ex |bua|out|nil|hen|rou|yin|zhu|ous|nya|enf|f d|is | re|b c|lol|nad|dou|af | xa| id|t s| ha|uk |jai|xan|sha|b y|hua|aib|s s|d d| la| qi|ren|x l|hue|l m|x g|ot | xi| ba| zo| kh| dl|jua| ju|aod|zif|ait|bao| di| ga|x y| nz|b s|x s|xin| li|aof|b b|ngx|gx |eb |b l|x t|x m|hed| be|dax|b t|s t|hef|las|d j|gua| pi|t y|f b|d l|l d|nzh| ib|hif|t h|dus|t r|hou|f l|hun|und|s l|el |aik|d y|aos|f t| mo| bi|hab|ngt|gai| za|uas|x h|gt | zu|ros|aid|zos| gh|end|pin|k n|k z| ao|iao|s b|dex|x b|due|ak |d g| fu|s x|deu|s y|mol|x i|f s|hik| hl| bo|l b|eut|lb |uaf|zho|d b| lb|s m|lan|al |b k|t b| ch|d p|x x|f x|ub |t c|d m| ro| nt|d h|et |uak|aox|gon|tua|yua|t t|zis|deb|d t| we|shu",
    "ilo": "ti |iti|an |nga|ga | ng| pa| it|en | ka| ke| ma|ana| a | ti|pan|ken|agi|ang|a n|a k|aya|gan|n a|int|lin|ali|n t|a m|dag|git|a a|i p|teg|a p| na|nte|man|awa|kal|da |ng |ega|ada|way|nag|n i| da|na |i k|sa |n k|ysa|n n|no |a i|al |add|aba| me|i a|eys|nna|dda|ngg|mey| sa|pag|ann|ya |gal| ba|mai| tu|gga|kad|i s|yan|ung|nak|tun|wen|aan|nan|aka| ad|enn| ag|asa| we|yaw|i n|wan|nno|ata| ta|l m|i t|ami|a t| si|ong|apa|kas|li |i m|ina| an|aki|ay |n d|ala|gpa|a s|g k|ara|et |n p|at |ili|eng|mak|ika|ama|dad|nai|g i|ipa|in | aw|toy|oy |ao |yon|ag |on |aen|ta |ani|ily|bab|tao|ket|lya|sin|aik| ki|bal|oma|agp|ngi|a d|y n|iwa|o k|kin|naa|uma|daa|o t|gil|bae|i i|g a|mil| am| um|aga|kab|pad|ram|ags|syo|ar |ida|yto|i b|gim|sab|ino|n w| wa| de|a b|nia|dey|n m|o n|min|nom|asi|tan|aar|eg |agt|san|pap|eyt|iam|i e|saa|sal|pam|bag|nat|ak |sap|ed |gsa|lak|t n|ari|i u| gi|o p|nay|kan|t k|sia|aw |g n|day|i l|kit|uka|lan|i d|aib|pak|imo|y a|ias|mon|ma | li|den|i g|to |dum|sta|apu|o i|ubo|ged|lub|agb|pul|bia|i w|ita|asy|mid|umi|abi|akd|kar|kap|kai| ar|gin|kni| id|ban|bas|ad |bon|agk|nib|o m|ibi|ing|ran|kda|din|abs|iba|akn|nnu|t i|isu|o a|aip|as |inn|sar| la|maa|nto|amm|idi|g t|ulo|lal|bsa|waw|kip|w k|ura|d n|y i",
    "uig": "ish| he|ini|ing|nin|gha|ng |ili| we|we |sh |in | bo|quq|oqu|ni |hoq| ho|ush|shi|lik|qil|bol|shq|en |lis|qa |hqa|n b|hem| qi|ki |dem|iy | ad|ade|igh|e a|em |han|liq|et |ge |uq |nda|din| te| bi|idi|let|qan|nli|ige|ash|tin|ha |kin|iki|her|de | er| ba|and|iti|olu|an | dö|döl|aq |luq| ya|me |lus|öle|mme|emm| qa|daq|rki|lgh|erq|erk|shk|esh|rqa|iq |uqi|ile|rim|i w|er |ik |yak|aki|ara|a h| be|men| ar|du |shu|uql|hri|hi |qlu|q h|inl|lar|da |i b|ime| as|ler|etl|nis| öz|ehr|lin|e q|ar |ila| mu|len| me|qi |asi|beh|a b|ayd|q a|bir|bil| sh|che|rli|ke |bar|hke|yet|éli|shl|tni|u h|ek |may|e b| ké|h h| ig|ydu|isi|ali|hli|k h| qo|iri|emd|ari|e h|ida|e t|tle|rni| al|siy|lid|olm|iye|anl| tu|iqi|lma|ip |mde|e e|tur|a i|uru|i k|raw|hu |mus|kil| is|i a|ir |éti|r b|özi|ris|asa|i h|sas| je|he | ch|qig|bas|n q|alg|ett|les| xi|tid| él|tes|ti |awa|ima|nun|a a| xe| bu|hil|n h| xa|adi|dig|anu|uni|mni| sa|arl|rek|ére| hö|kér| ji|min|i q|tis|rqi| iy|elq|xel|p q| qe|y i|i s|lig| ma|iya|i y|siz|ani| ki|qti| de|q w|emn|met|jin|niy|i i|tim|irl| ti|rin|éri|i d|ati|si |tew|i t|tli|eli|e m|rus|oli|ami|gen|ide|ina|chi|dil|nay|ken|ern|n w| to|ayi| ij|elg|she|tti|arq|hek|e i|n a|zin|r a|ijt|g b|atn|qar|his|uch|lim|hki|dik",
    "hat": "ou |an | li|on |wa |yon| po|li |pou|te | yo|oun| mo|un |mou|ak | na|en |n p|nan|tou|syo| dw| to|yo | fè|dwa| ak| ki|ki | pa| sa|out| la| ko| ge|ut |n s|gen| de|se |asy|èt |i p|n d| a | so|n l|a a|fè |n k| se|pa |e d|u l| re|ite|sa | ch|kon|n n|e l|t p|ni |cha|a p|nn |ans|pi |t m| ka| an|nm |fèt|i s|son|man| me|n m|n a|e p|swa|sou|e k|hak|òt |n y|men|i l|epi| pe|ote|san| ep|i k| si|yen|eyi|a l| ap|i a|yi |pey|je |n t|e a|k m|e s| ni|lib|e n|i t|lit|ran|lè |enn|al |a s| pr|a f|ns | lò|ap |lòt|enm|k l|n e|t l|kla|anm|e y|a k| ma|e t|ay |i m|ali| lè|è a|ye |a y|ant| os| ba|i g| tè|aso|u t|a n| pw|ras| pè|n f|nas|ka |n g|osw| ta|dek|i d|pwo|e m| di| vi|la |i n|u s|sos|bli| te|o t| tr|lwa|ète|a t|le |u y|i f|tan|a c|lar|a m|ete|ara|t k| pi|ibè|bèt|re |osy|de |ati|ke |res|tis|i y|tè |nen| fa|ekl|ze |nal|ons|ksy|ini|che| le|e r|a d| en|aye|he |o p|alw| kò|lal| no|esp|a g|ava|kou|las|way|u f|isy| za| ok|oke|kal|ken|sye|ta |onn|k k|nje|pra|van|esi|pès|kot|ret|sya|n v|lek|jan|ik |a b|eks|wot|è n|di |òl |tra|u k|i r|nou| as|k a|u d|ist|èso|ib | ne|iti|ti |is |y a|des|è l|a r|ont| ke|nsa|pat|rit|sit|pòt|ona|ab |è s| sw|ond|ide| ja|rav|t a|ri |bon|viv| sè|pre|vay|k p|l l|kòm|i o| ra|era|fan|dev",
    "aka": "sɛ |a a| sɛ|ne |ra |a n| wɔ| a |ara|an |eɛ |no | ne| bi| no| as|iar|bia|yɛ |mu |aa | an|ɛ s|e a|ma | ho|bi |man|deɛ| mu|ho |ɛ a|na |a ɛ| ob|obi|e n|a b|n a|so |o n|pa |ama|ɛ o|o a|ipa|nip|ɛ n|naa| na|a w|ana| so| ad| nn|ɛ ɔ|ɛde|asɛ|kwa| on|oni|wan| am|a ɔ|sɛd|wɔ | ah|ɛyɛ| ny|oɔ | n |mma|i a| mm|nni| kw|ie |wɔn|ɛ w|de | ɛy| ba|ase|ɔ n|o b|i m|ɔ a|uo |n n|a m|o s|iri| yi|ni |e s|nyi|di |u n|a o|aho| de|tum| ɛn|ɔn |nya|i n|ɔma|e m|adw| yɛ|umi|die|mi |ɛ ɛ|o k| ab|ɛm |a s| ma|nam| ɔm| ɛs|yin| at| bɔ|o d|ina|pɛ |sɛm|ua |n s|bɔ |adi|ya |e h|aso|mar|ani|kuo|rɛ |fa |a k|ɔde|a h|ba |n b|re |uma|wum|om |ɔ h|m n|yi |u a| sa|se |dwu|ɔ b| nt|m a|erɛ| kɔ|a y|orɔ| nk| bɛ| ɔd|ten|rɔ |hyɛ|saa|ka |ɛ b|e b|i s|ade|am |nka|kor|i ɛ|ene|ena| ns|ban|ɛns| ku|ɛsɛ|ane|nsɛ|fof|ɛɛ | fi|gye|ɔtu| di|ano|i k|o m| ɔt| ko|yɛɛ|bir| ak|im |kye| pɛ|a d|yie|ko |nti|i b|ete|ofo|amm|ye |ri |foɔ|kɔ |bom|abo|ɔ s|ɔne| ɛb|soɔ|for|isɛ|m k|asa|nod|ɛ m|fir|ti | da|e y|sua| be|nii|seɛ|wa |ber| aw|dwe|n f| fo|o ɛ|i h|u b|ɔ m| mf|hɔ |kab|wɛ |to |rib|hwɛ|ibi| dw|dis|nso|ans|tir|u ɛ| ti| hɔ|sa |e o| tu|odi|ɛ y|ia |ofa| ɔn|o w|ɛbɛ|aba| ka|ii |wen|ɛsi|m m|sia|ada|yer|ian|da |set| gy|dua|i d|som|mfa|ɔ w| af|i y|any|ora|rim|wɔd|dwa|nsi",
    "hil": "nga|ang| ka|ga |ng | sa|an |sa | ng| pa| ma|ag |on |san|pag| an|ung|kag|a p|n s|a k|n n|a m|ata|kat| ta|gan|g p|ay |tar|g k|ags|run|ala|aru|gsa|tag|a s|g m| mg|mga|n k|a t|od |kon|g s|a n|ing|a i|man|g t|agp|tan| si|n a|y k|mag|gpa|may|hil|pan|ya |ahi|la |g a|sin|gin|ina|aya|ana|ili| pu|han|g i|yon|nan| in|way|uko|gka| gi|aha| uk|ilw|lwa|asa|apa|kas|syo|at |ban|lin|iya|kah|n p| na|o n|lan|a a|in |ngk|g n|ini|aba|pat|pun|a g|ali|o s| iy|yan|agt|tao|ngs|gba|kab|wal|ngo|al |nag|agk|o m|ni |i s|aga|ano| wa|isa|abu|kal|a h|dap|ong|a d|mat| tu|gso|no |aho|aki|sod|agb| da|asy|ila|d k|pas| hi|agh|d s|n m|na |lal|yo |di |til| la|o k|s n|non|gay|sal|a b|god|ao |ati|aan|uha| is|ka |aka|asu|ngb|o a|ama|ato|atu|uga|paa|but|una|n u|bah|uan|iba| di| ba|pah|bat| du|ulo|os |y s|nah| ko|aag|agi|sil|gi |i m|hay|yag|gon|y n|sta|n d|ot |oha|tun|ida| pr| su|a l|uta|m s| al|do |uli|sug|n t|as |lon|sul|og |pam|pro|him|gua|alo|lig| bi|bis|asi|ula|ton|ksy|gtu|a e|k s| ib|n b|maa|ugu|ko |lib|ron|i a|hi |hin|tek|lab|abi|ika|mak|bot|aoh|ok | hu|ghi|ind|ote|tok|i n|t n|g e|eks|dal|uma|ubo|tum|hat|to |ado|kin| ed|rot|ho |ndi|inu|ibu|y a|nta|ad |gko|lah|duk|abo|iko|nda|aro|gal|mo |g o| bu|int| o |n o|aay|da |gsu",
    "sna": "wa |a k|ana|ro |na | ku| mu|nhu|dze|hu |a m| zv|mun|oku|chi|a n|aka|dzi|ka |zer|ero| ch|che|se |unh|odz|rwa|ra |kod|zvi| ne| pa|kan| we| dz| no|ika|va |iri| an|kut|nyi|o y|yik|van|nek|ese|eko|zva|idz|e a| ka|ane|ano|ngu|eku|cha|ung| yo|ri |ake|ke |ach|udz|iro|a z|u w| va|ira|wes|ang|ech|nge|i p|eng|yok|nok|edz|o i|irw|ani|ino|uva|ich|nga|ti |zir|anh|rir|ko |dza|o n|wan|wo |tan|sun|ipi|dzw|eny|asi|hen|zve|kur|vak|a p|sha|unu|zwa|ita|kwa|e k|rud|nun|uru|guk|a c|a d| ya|a y|bat|pas|ezv|ta |e n|uti| kw|o k|o c|o m|ara| ma|si |ga |uko|ata|ose|ema|dzo|uch|hip|kuv|no |rus|hec|omu|i z|wak|o r|kus|kwe|ere|re | rw| po|o a|mwe|yak|mo |usu|isi|za |sa |e z|uta|gar| in|hin|nem|pac|kuc|we |ete| ye|twa|pos|o d|a i|hur|get|ari|ong|pan|erw|uka|rwo|vo | ak|tem|zo |emu|emo|oru| ha|uit|wen|uye|kui| uy|vin|hak|kub|i m|a a|kud| se| ko|yo |and|da |nor|sin|uba|a s|a u| ic|zvo|mut|mat|nez|e m|a w|adz|ura|eva|ava|pi |a r|era|ute|oko|vis| iy|ha |u a|han|cho|aru|asa|fan|aan|pir|ina|guv|ush|ton| hu|uny|enz|ran|yor|ted|ait|hek| ny|uri|hok|nen|osh| ac|ngi|muk|ngo|o z|azv|kun|nid|uma|i h|vem|a h|mir|usa|o p|i n|a v|i k|amb|zan|nza|kuz|zi |kak|ing|u v|ngw|mum|mba|nir|sar|ewo|e p|uwa|vic|i i|gwa|aga|ama|go |yew|pam",
    "xho": "lo |lun|oku|nge|elo|ntu|tu |e n|ele| ku|nye|ye |nga|ung|la | ng|lek|a n|o n|yo |o l|e u|nel|gel|a k|ko |ho |ulu|ke | ne| na|lul|we |le |wa |ngo| kw|ule|kub| no|a u|onk| um|nke|o e| lo|ela|kun|ama|any|unt|ang|eko|uba|elu|ezi|mnt| wo|a i|eyo|alu|lel|umn|lwa|kwe|olu|ba | uk|kuk|won|ukh|une|uku|gok|nok|enz| un|khu| ok|the|e k|zwe|kan|eki|aph|ane|uny|ile|o z|aku|ley|lok| ez|het|eth|ath|oka|pha|sel|ala|o y|kul|akh|kil|enk| in|esi|o k| yo|use|hul|u u|tho|obu|wen|ana|nku|khe|o o|e a|na |kho|ban|a e|ise|ent|gan|uth|ni |kel| zo|he |izw|o w|hi |elw|nam|ing|eli|fun|za |lwe|eng|ya |kwa|fan|isa|o a|ndl|ntl|ayo|eni|gen|hus|uhl|iph|tha|nzi|isw|sa |phi|aba|ben|und|ume|thi|ha |alo|ka |ink|hla|lal|wan|i k| lw|i n|bel| ba|o u|azi|e o|swa|ngu|bal|pho| ab|man|kut|emf|e i|mfa|a a|e e|een|int|uph|eka|ebe|seb|lan|nee|zi |o i|mal|sha|sek|dle|ziz|mth|nen|zel| se|okw|tya|ike|lin|tla|ene|sis|ima|ase|yal|ubu| ak|ant|sen|olo|wak| ko|a o|mfu|ezo|sid|nay|oko| ub|ulo|zo |do |isi|wez|iso|han|nte| ph|zim| ya|ga |li | le|iba|ham|ube|kup|aza|jik| ul| en|eem|phu| ol|and|imf| es|o s| im|kuf|u k|kwi|nak|ma |nan|ety|kuh|kus|yol| am|hel|idi| so|lis| nj|nje|jen|tsh|aka|zin|kuz|‐ji|no |ufu|ale|ong| el|bo |a y|e l|men|yen|lum",
    "min": "an |ak |ang| ma| da| ka| sa|ara| ha|yo |nyo|hak| ba|ran|dan|man|nan|ng | pa| di|kan|ura| na|ata|asa|ok |nda|ala| pu|pun|uak|ntu|n d|k m| ti|ah |o h|n s|k u|n k| ur| un|tua|n b|and|unt| ta|uny|n p|tio|iok|ama|pan|ek |ban|jo |n m|k h|k d|ado|nga|aan|g p|tan|aka|ind|at |dak|dap|o p|tau|pek|uan| at|amo|mar|ape|au |kat|mo |sas|ari|asi|di |o s|ia |ngg|bas|ika|sam|am |lia|o d|san|gan|sia|tar|n n| jo| su|anu|lam|gar|o t| in|par|sua|dek|sar|k s|ri |o m|ana|bat|asu|ko |ai | la|ant|dal|lak|aga|alu|iah|o u|n a|tu |k a|adi|rad|i m|mal|dok|usi|aku|i d|k k|al |aro|eka|neg|ega|ato|to | ne|mam|o b|eba|ian|beb|n u|um |si |aba|rat|uah|ro |mas|ila|a d|ali|uka|ard|kam|ti |atu|nus|dar|ami|n t|sa |in |amp|kal|car|lan|aha|kab|so |rde|un |i k|gsa|das|ngs|aca|yar|ka |ati|ar | an|uku|ras| ko|sya|mat|k n|aya|nta|lo |any|sur|kaa|dil|kar|o a|u d|k t|pam|dia|ra |iba|lai|i t|lah| bu|mpa|kum|abe|n h|ili|nny| as|u p|aki|amb|sac|as |k b|h d|uli|ajo|a n|raj|n i|dua|ndu|k p|i p|itu|lin|han|huk|o k|rik|a b| li|ik |ggu|jam|bai|a a|i a|nia| ad|i j| hu|gam|sal|aso|ngk|sad|apa|ann| mu|ony|dik|bad|ain|did|min|l d|ada|bul|rga|tin|ga |ani|alo| de|arg|ahn|sio|hny|n l|sti|awa|uju|per|bak| pe|tik|ans| pi|a s| um|bag|ndi|anj|mba",
    "afr": "ie |die|en | di| en|an |ing|ng |van| va|te |e v|reg| re|n d| ge|ens|et |e r|e e| te| be|le |ver|een| in|ke | ve| he|eg |het|lke|lik|n h|de |nie|aan|t d|id |men| vr|nde|eid|e o| aa|in |of |der|hei|om |g v| op| ni|e b| el|al |and|elk|er | me|ord|e w|g t| to| of|ers| we| sa| vo|ot |erk|n v|vry|ge |kee|asi|tot| wa|sie|ere| om|aar|sal|dig|wor|egt|gte|rdi|rd |at |nd |e s|ede|ige| de| ’n|n a|eni| wo|e g| on|n s|’n |e t|erd|ns |oor|bes|ond|se |ska|aak|nig|lle|yhe|ryh|is |eli|esk|ien|sta|vol|ele|e m| vi|ik |r d|vir|edi|kap|g e|ir |es |sy |ang|din| st|ewe|gem|gel|g o| is|el |e i|op |ker|ak |uit|ike|nse|hie|ur |eur| al|e a|nas|e n|nge|ier|n o|wer|e d|ap | hu|ale|rin| hi|eme|deu|min|wat|n e|s o| as| so|as |e h|del|d v|ter|ten|gin|end|kin|it | da| sy|per|re |n w|ges|wet|ger|e k|oed|s v|nte|s e|ona|nal|waa|d t|ees|soo| ma|d s|ies|tel|ema|d e|red|ite| na|ske|ely|lyk|ren|nsk|d o|oon|t e|eke|esi|ese|eri|hul| gr|ig |sio|man|rde|ion|n b|n g|voo|hed|ind|tee| pe|rso|t v|s d|all|n t|rse|n i|eem|d w|ort|ndi|daa|maa|t g|erm|ont|ent|ans|ame|yke|ari|n m|lan|voe|n ’|nli|rkl|r m|sia|ods|ard|iem|g s|wee|r e|l g|taa|sek|bar|gti|n n|lin|sen|t o|t a|raa|ene|opv|pvo|ete| ty|arb| sl|igh|dee|g a|str|nsl|sel|ern|ste",
    "lua": "ne |wa | ne|a m| ku|a k| mu|di | bu|a b| di|e b|tu |nga|bwa|ntu| bw|udi|a d|e m|i b| ba| ma|shi|adi|u b|a n|la |ons|mun|i n|ung|nsu|ga |yi |ya |na |unt| dy|idi|e k|buk|mu |ika|esh|su |u m|ku |nde|any| bi|lu |nyi|end|yon|dik|ba | ci| ka|ang|u n|u y| mw|ka |i m| yo|we |oke|tun|de |kes|hi |kok|mwa| kw|e n|ban|dya|sha|u d|ken|kwa|ji |ha |wen|dit| ud|a a| an|mwe|itu| pa|le | a | wa|nji|kan|kum|ibw|bwe|a c|ant|ena|yen|mba|did|e d|ala|u u|ish|mak|bul|i a|nda|enj|u a|ila|pa |ako|ans|uke|ana|nso|amb|hin|umw|kal|uko|i k|bad|aka|ela|ele|u w|u k|du |ja |bu | mi|ind|ndu|kwi| ns|mbu|atu|bud|dil|ile|sun|eng|ula|enz|nan|nsh|kad|alu| cy|bis|kud|lon|u c|gan|dib|da |dye|bid| by|ukw|i d|aa |ngu|a p|sam|isa| aa|ilu| na|aba|lel|ye |dim|cya|kub|so |ond|kus|mat|nge|e c| bo|aku|bak|mus|ta |umb|ulo|elu|man|iki|mon|ngi|abu|mud|kuk|omb| mo|und|diy|kwe|umu|mal| ke|ush|gil|uba|imu|dis|wil|wu |san|gad|uka|bon|ma |aci|mik|wik| me|pan|iku|nza|ben|ulu|ifu|iba|kak|ata|som|ong|e a|apa| tu|o b|umo|bya|utu|uja|yan| be|ke |akw|ale|ilo|uku|cil|tup|kul|cik|kup|upe|bel|amw|ona| um|iko|awu|and|za |ike|a u|ima|muk| ya|mum|me |map|ita|iye|ole|lum|wab|ane| lu|nu |kis|mbe|kab|ine|bum|lam|pet| ad|fun|ama| mb|isu|upa|ame|u p|ubi",
    "fin": "en |ise|ja |ist| ja|on |ta |sta|an |n j|ais|sen|n o|keu|ike|oik|lis| va|ell|lla|n t|uks| on|ksi| oi|n k| ka|aan|een|la |lli|kai|a j| ta|sa |in |mis| jo|a o|ään|än |sel|n s|kse|a t|a k|tai|us |tta|ans|ssa|kun|den|tä |eus|nen|kan|nsa|apa|all|est| se|eis|ill|ien|see|taa| yh|jok|n y|vap|a v|ttä|oka|n v|ai |itt|aa |aik|ett|tuk|ti |ust| ku|isi|stä|ses| tä| tu|lai|n p|sti|ast|n e|n m|tää|sia|unn|ä j|ude|ä o|ste|si |tei|ine|per|a s|ia |kä |äne| mi|maa| pe|a p|ess|a m|ain|ämä|tam|yht| ju|jul|yks|hän|ä t| hä|utt|ide|et |llä|val|sek|stu|n a|lä |ami|hmi| ke|ikk|lle|iin|sä |euk|täm|ihm|tee| ih|lta|pau| sa|isk|mää|ois|un |tav|ten|dis|hte|n h|iss|ssä|a h|ava| ma|a y| ei| te| si| ol|ekä|sty|alt|toi|att|oll|tet| jä| ra|vat| mu|iel| to|mai|sal|isu|a a|kki|at |suu|n l|väl|ää |uli|tun|tie|eru| yk|etu|vaa|rus|muk| he|ei |a e|kie|sku|eid|iit| su|nna|sil|oma|min| yl|lin|aut|uut|sko| ko|tti|le |sie|kaa|a r| ri|sii|nno|eli|tur|saa|aat|lei|oli|na | la|oon|urv|lma|rva|ite|mie|vas|ä m| ed|tus|iaa|itä|ä v|uol|yle| al|lit|suo|ama|joi|unt|ute|i o|tyk|n r|ali|lii|nee|paa|avi|omi|oit|jen|kää|voi|yhd|ä k| ki|eet|eks| sy|ity|ilö|ilm|oim|ole|sit|ita|uom|vai|usk|ala|hen|ope| pu|auk|pet|oja|i s|rii|uud|hdi|äli|va | om",
    "slk": " pr| a |prá|ráv| po|ie |ch |ost| ro|ho | na|vo |ani|na | ne|nos|ažd|kto|kaž| ka|má |né |ávo|om | má|ebo|ti | v | al|ale|leb|bo | je| za|ých|o n|ždý|dý |ia | sl|mi |ova|sti|nie|van|to |eni|ne |áva|lob|ého|slo|rod|tor|rov| sp| zá|á p|o v|a p| kt|ý m| sv|voj|bod|obo|nia| ná| vy|ej |je |ať |o p|a v|a s|áro|a z| sa| ma|a n|e a|e s|mu |mie|kla|nár|svo|spo| by|ovn|by |roz|sa |ľud|iť |odn| vš|ov |i a|néh|vše|o s|va |o a| ľu|oci|pre|nu |a m|u a|ený|e v|ný |nes|a k|zák|pod|ným| do|u p| k |u s|áci|ajú|byť|yť |nýc|eho|ran|pol|tát|stn|jeh|a r|šet|ými|lad|čin|ému|a o|edz|ť s|kon|stv|oré| sú| ni|e z|pri|och|ny |štá|sť |oje|vna|tre|u k| či|ko |é p|maj|smi|a a|etk|nak|ým |med|dov|prí| ob|iu |uds|osť|esm|e b|m a|hra|i s|rác|bez|vať|chr|e p| ab|jú | št|žen| ho|čen| de|i p|ť v| vo|dsk|pro|nom| in|ou |du |že |aby|est| bo|ré |bol| so|nú |olo|kej|áln| oc|obe|ky |dzi|dom|áv |por|lne|rav|aké|ens|pra|ok | že|tné| ta|ako|res| vz|i k|ami| tr| ak|ní |len|o d|del|ský|cho|ach|ivo|h p|ože|iál|inn|slu|kra|loč|očn|ju | os|anu|oju|voľ|ákl|str|é s|ené| ži|niu|sta| st|ved|tvo| me|dno|m p|de |ké |kým|ikt|stu|é v|i v|vyh| to|v a|odu|hoc|a t|ím |ly |hov|y s|soc|júc|ú p|odi|vod|liv|aní|ciá| ve|rej|ku |ci |ske|sob|čno|oso",
    "tuk": "lar| we|we | bi|yň |ary|ada|da | he| ha|an |yny|kla|dam|de | ad|yna|er |na | ýa|ir |dyr|iň |bir|r b|ydy|ler|ara|am |yr |ini|lan|r a|kly|lyd| öz|mag|nyň|öz |her|gyn|aga|en |ryn|akl|ala|dan|hak|eri|ne |uku|ar |r h|ga |ny |huk| de|ili|ygy|li |kuk|a h|nda|asy|len| ed|bil|atl|ine|edi|niň|lyg| hu| ga|e h|nde|dil|ryň|aza|zat|a g|‐da|a‐d|eti|ukl| gö|ly | bo|tly|gin| az|lma|ama|hem|dir|ykl|‐de|e d|ile|ýan|a d|ýet|ýa‐|ynd|lyk|aýy|e a|ünd|ge | go|egi|ilm|sy |ni |etm|em‐|lme|m‐d|aly|any| be|tle|syn|rin|y b|let|mak|a w|a ý|den|äge|ra | äh|mäg| du|n e|bol|meg|ele|ň h| et|igi|ň w|im |iýa| ýe| di|r e|ek | ba|ak |esi|ril|a b|in |p b|deň|etl|agy| bu| je|bu |e ö|y d| hi|mez| es|ard| sa|ähl|e b|yly| ka|esa|mek| gu|n a|e t|lik| do|e g|sas|ill|nma|ň a|ram|ola|hal|y w|ýar| ar|anm|mel|iri|siý|ndi|ede|gal|end|mil|rla|göz| ma|n b|e ý|öňü|ňün|n h| tu|hiç|yýe| ge|my |iç | öň|n ý|tla|ň ý|lin|rda|al |lig|gar| mi|i g|dal|rle|mal|kan|gat|tme|sin|and|ň g|gor| ta|öwl|ýle|y g|e w|ora|tiň|ekl| yn|alk|döw| dö|ere|m h| me|dur| er|asi|tut|at |çin|irl|umy|eli|erk|nme|wle|gur|a ö|aýa| çä|nun| ki|ras|aml|up |ýaş|tyn| aý|ry |ň d|baş|ip |gi |z h|kin|z ö|n w|ter|inm|eýl|i ý|kim|nam|eň |beý|dol| se| te|r d|utu|gyý|ez |umu|mum",
    "dan": "er |og | og|der| de|for|en |et |til| fo| ti|ing|de |nde|ret| re|hed|il |lig| ha|lle|den| en|ed |ver|els|und|ar | fr| me|se |lse|and|har|gen|ede|ge |ell|ng |at | af|nne|le |nge|e f|ghe|e o|igh|es |af |enn| at|ler| i |ske|hve|e e|r h|ne |enh|t t|ige|esk| el| be|ig |tig|fri|or |ska|nin|e s|ion| er|nhv|re |men|r o|e a| st|ati| sk| in|l a|tio| på|ett|ens|al |tti|med|r f|om |end|r e|del|g f|ke | so|på |eli|g o| an|r r|ns | al|nat|han| ve|r s|r a| un| he|t f|lin| si|r d|ter|ere|nes|det|e r| ud|ale|sam|ihe|lan|tte|rin|rih|ent|ndl|e m|isk|erk|ans|t s|kal| na|som|hol|lde|ind|e n|ren|n s|ner|kel|old|dig|te |ors|e i| hv|sni|sky|ene|vær| li| sa|s f|d d|ers|ste|nte|mme|ove|e h|nal|ona|ger| gr|age|g a|vil|all|e d|fre|tel|s o|g h|t o|t d|r i|e t| om|arb|d e|ern|r u| væ|d o|res|g t|klæ|øre|n f| vi| må|ven|sk | la|gte|kab|str|n m|rel|e b|run|rbe|bej|t i|ejd|kke|t e|g d|rkl|ilk|gru|ved|bes| da|nd | fu|lær|æri|rdi|ærd|ld |t m|dli|fun|sig| mo|sta|nst|rt |od | ar| op|vis|igt|ære|tet|t a|emm|g e|mod|rho|ie |g u|ker|rem| no|n h| fa|rsk|orm|e u|s s|em |d h| ge|ets|e g|g s|per| et|lem| tr|i s|da |dre|n a|des|dt |kyt|rde|ytt|eri|hen|erv|l e|rvi|ffe|off|isn|r t| of|ken|l h|rke|g i|tal|må |r k|lke|gt |t v|t b",
    "nob": "er | og|og |en | de|for|til|ing|ett| ti|et | ha| fo| re|ret|il |het|lle|ver|tt |ar |nne| en|om |ell|ng |har| me|enn|ter|de |lig| fr| so|r h|ler|av |le |den|and| i | er|som| å |hve|or |t t|ne | el|els|re | av|se |esk|enh|nge|ska|nde|e o|ete|gen|ke |lse|ghe|ten|men| st|r s|fri|igh|ig | be|e e|nhv|r r|tte|ske|te | på| ut| sk|al | in|sjo|på |der|e s|ner|rin|jon|t o|unn|e f|han|asj|tig|ed |es |g f|sam|ent|tti|ene|nes|med|ge | al|r o|ens|r e|eli|isk|lin| ve|nin|g o| sa| an|t f|itt|lik|end|kal|r f|t s|rih|ihe|nas|nte|e r|ns | si|lan|g s|mme|ige|l å|erk|dig| gr|n s|ren|r a|all| na|kte|erd|ere|e m|und|r u|res|tel|ste|gru|inn|lær|ers| un|det|t e|arb|ale|del|ekt|ven|t i|g e|bei|eid|e a|n m|e d| ar|rbe|e g| bl|ans|klæ| li| he|g t|æri|sky|run|rkl| la|sta|sni|kke|m e|rt |mot| mo|e n|tat|at |e h|e b|ove|e t|jen|t d|str| må|r m|n e|ors|rel|ker| et|n a|bes|one| vi|nn |g r|e i|kap|sk |ot |ndi|nnl|i s| da|s o| no|id |ger|g h|vis|n o|bar|s f|ndl|t m|g a|opp|t a|dis|nal|r d|per|dre|ona|ære|rdi|da |ute|nse|bli|ore|tet|rit| op|kra|eri|hol|old| kr|ytt|kyt|ffe|emm|g d|l f| om|isn| gj|å d|ser|r b| di| fa|n t|r k|lt |set| sl|dom|rvi|me |l e|gre|å s|må | tr|nd |m s|g i|ikk|n h| at|tes|vil|dli|g b|d d| hv|rav",
    "suk": "na | mu| bu| na|a b|ya |hu |a n|we | gu|nhu|a g| ba|a m|ili|wa | ya|li |unh| bo|mun|ali|bul|han|bo |i m|ilw|uli|ang|lil|la |i b|e n|ga | wi|kil|mu | al| se|u a|ge |kge|ekg|sek|lwe|ose|le |lo |bi |ulu|e y|kwe|ila|and|e b|i n|yo |ng’|a s|nga| ns|si |abi|nsi|ina|lin|aki|se |ban| ly| gw|dak|lu |ngi|gil|a w|o g|akw|u b|ile|anh|ka |ilo|a l|ubi|e g| nu|o n|ja |gan| ng| ma|lya|nul|g’w|ani|ndi|u m|iya|wiy| ji|jo | ka|yab|lwa|ada|o b|e k| ad|gwi|ho |gub| ku|ing|o a|o l|ula|ika|a i|u n|dik|iha|shi|ayo|gun| ja|ha |biz|o j|lag|ma |wen| sh|ele|ung|o s|gi |gul|mo |lan|iwa|a k|ala|iki|jil|ola|ji |a a|yak| li|nil|iza|agi|aha|man|bos|iga|kuj| ha|ana| lu| gi|iti| mh|uga|uyo|win| ga|za |a y|ki | nd|oma|ene|o w|a u|mah|yos|sol|hay| mi|iko|ong|aga|iku|gwa|i a|ndu|pan|u g|e i| ab|ujo|ida|nya|ibi|duh|but|i y|u w|iji|nhy| we|nik|aya|uhu|nda| il|je |abo|aji|lel|ubu|nay|ba |lug|lon|ale|mil|da |a j|dul|o m|mha|aka|e u|g’h|udu|lyo|e m|e a|gik|bus|bal|sha|wit|twa|ngh|nek|wig| um|okw|any|uma|ima|uso|bud|’we| ij|hil|bil|a h|imo|ita|no | ih|gut|nha|ne |iso|ulo|uno|yom|’ha|u l|elo|eki|wel|hya|ngu|omb|som|mbi|i g|o i|u i|bak| is|ugu| yi|utu|eni|tum|umo|u s|tog|inh|’wi|lit|waj|e j|ule|jiw|u u|kub|kul|lik|uto| uy|upa",
    "als": "të | të|dhe|he | dh|në |ë d|e t| e |et |ë t|imi|për|ejt|dre|rej| pë| dr| në|it |gji|sht|ve |jit|ë p| gj|ith| sh| i | li|het|e p| nj|t t|ër |ë n|in | ve|me |jtë|e n| ka|ara|e d|ush|n e|tet| pa|jer|hku|a t|re |ën |ë s|sh | ku|së |t d|ë m|kus|mit|lir|ka |ë k|jë |se | si| që| ba|etë|që |ë b|si |ë g|eri|thk|nje|eve|e k|e s|jet|ose|bas|ohe| os|ra | mb|iri|h k|min|shk|ash|rim|ndë| nd|një|jta|e m| me|eti|do | du|es |rë |e l|mi |anë|tar|t n| as|dër|hte|end|tën|vet|uar|und|ësi|kom|tje|duh|ndi|at |ave| ko|ri |ta |ë v|shm| de|ar |omb|i d| kë|i p|jes| ng|uhe|nga|i n|en |ë e|ga | ar|e a|ës |hme|bar| pe|htë|ë l|ur |ë i|isë|ime|sim|ris|tës|art|ëm |cil|tim|tyr|ësh| ma|shë|or |t a|kët|gje| ci|r n|e v|par|nuk|ëta|rgj|i i|ish|uk | nu|ë r|are| je|ë c| pu|atë|lim|lli| ës|ë a|i t|mar|ore| së|tit|lar|per|t p|rat|ite|inë|t s|riu|ke |ërg|a n|edh| pr|esi|irë|ërk| po|hë |ë j|i s|a e|ht |mba|roh|im |ari|e b|lit|ti |asn|tav|snj|t e|ik |tij|k d|qër|hëm|ras|res|otë|nal|mun| an|kla|ven|e q|tat|t i| fa|ij | tj|igj|te |ali|bro| di|roj| ti|uri|ojë|ë q|çdo|det|n p| pl|ekl|ind|erë|vep|dek|nim|ive|ror|sho|hoq|oqë|ëri|pri|r d|shp|esë|le |a d|shi| mu|dis|r t|ete| t |ë f|ëzo|zim| çd|mbr| re|e f|jen|i m|iut|n k|tha|s s|lot",
    "sag": "tî | tî|na | na| ng|a n|ngb|gö |ngö|nga|nî | lo|lo |zo |bi |la |gbi|ang| sô|sô |î l|gan|ö t| zo|o n| wa|a t|îng|i t|ngü|gü | al|lîn| nd|a l|ê t| kû|äng|î n| te|wal|ala|alî|î k|ë t|î m|â t|î â|ô a|î b| mb|ûê |gâ |örö|ngâ|kûê| lê|o k|a â|e n|ko |î s| kö|ter|dör|köd|ödö|ï n|a k|lêg|gë |ôko|ëpë|mû |pëp| pë|o a|êgë|eke|yek|ke |ü t|î t| ay|o t|bên|ê n|rê |pëe|ra |ëe |erê|rö |tï |kua|aye| nî| ôk|ua |a z|ä t| âl|â n|ïng|î d|ö n|âng|ênî| am|î z|ten|âla| yâ|ê a|mbê|a m|û n|a y|ne |ene|rä |î g|a s|bê | ku|arä|ndi|ga |diä|ëng|iä | du| ân|amû|dut|öng|yâ |utï|ro |önî|lï |a p| gï|oro|lë |î a| âm|ndo| sê|ngô|do |i n|o s|ndö|âra|e t| bê|gba|ûng| mä|sâr| sï|î p| gb|ö k|e a|yê |a a| âk|dö |ara|ba |ï t| tö|a w|zar|tön|î w|war|ndâ|a g|ana|në |ênd| të|ta |ban| lë|zön|î f|nzö| sâ|sï |tën|o w| nz|sên| âz| da| za|îrî| në|nën|ate|ä s|bâ | at|o l|ënë|o ô|fa | kp| ma|o p| mû|kân|a b|bat|ata|ô n|se | kâ|alë| ko|ông|da |ë s|üng|ë n|ibê|rös|mbë|bët|ëtï|âmb|mbâ|ïgî|mba|gî |tän| po|bûn|gï |amb|ü n|gbï|ôi |gôi| af|rë |erë|lê | as|afa|âzo|i p|sor| ad|i s| ba|gïg|ä n|bät|dë |ö â|kûe|ûe |kpä|päl|älë|e z|ätä|ö w|ngi| yê|köt|ötä|tä |ê s|kod| hï|hal|hïn|lëz|ëzo|ngä|gän|odë|ö m|mar|sär|pä |ärä|îan|rän|bîa|a h|gi |bor|du ",
    "nno": " og|og | de| ha|er |en |ar |til| ti|lle|ett|il |ret|om |et | re|le |har|enn| me| al|all| fr|ne |tt |re | å | i |nne|and|ing|ska| sk|men| fo|det|den|ver|for|ell|t t|dom| so|de |e s| ve| ei|ere| på|al |an |e o|e h|fri|sam| sa|l å|på |leg| el|ler|som|ein|ei |nde|av | st|dei|or |ten|esk|kal|gje|n s|tte|je |ske|rid|r r|i s|te |nes| gj|eg |ido|med|e f|r s|st |ke |jon| in|r f|sjo|asj|nas|ter|unn|ed |kje|han|ona| er|t o|t e|g f|ski|e m|ast|ane|e t| av| gr|lan|ste|tan|å f| na|der| sl|t s|seg|n o|r k|nga|ge | an|g o|at |na |ern|nte|ng | ut|lik|e a|bei|gru|e i|arb|kil|g s|lag|eid|r a|e d|g d| si| få|ame|a s|e r|rbe|jen|n m|r d|n e|nn |e n|erd| tr| må| bl| mo|ren|run|nin|bli|kra| kr| at|ege|n i|me |nsk|ins|år |frå|in |lov|v p|end|mot|ale|e v|å a|få |rav|int|nal| ar|sta|e k|t f|ome| la|ot |t a|sla| ik|nle|itt| li| kv|id |kkj|ikk| lo|nad|å v|tta| fa| se|gen|ld |å s|kan|g t| ka|r l|god|n a|lin|jel|ild|dig|ha |l d|kap|ve |ndr|g i|g a|inn|var|rna|r m|r g|a o|dre|d a|n t|ag |kår|mål|ig |va |i d|t m|e e|n d|tyr| om|g e|eve|då |e u| då|und| no|ir |gar|g g|l h|se |ga |d d|l f|ker|r o|å d|eld|ige|t d|t i|t h|oko|nnl|rel|nok|rt |lt |åse|jer|ta |ik |ial|eig|r p|i e|olk|bar|osi|kte|sos|lir|opp| un|ad | be",
    "mos": " n |ẽn| a | se|a t|sẽ|̃n | ne|a s| ye|e n| ta| tɩ|n t| pa|tɩ | la| so|nin| ni| b | fã|fãa|ãa |ng |a n| bu| tõ|la |ẽ | te|tõe|ne |ye |a a|or | ya| to|ed |ned|pa |e t|õe |tar|em |tẽ|g n|ã n|n m|aan| ma|sor|buu|n y|maa|uud|a y|r n|ins|n p|ud |ra |paa|ɩ n|a b| wa|d f| na|me |n d|ara|n b|sã |taa|n w|bã |an |yel|eng|aal|ɩ b|n n|gẽ|̃ng|og | ka| bɩ|bɩ | tʊ|gã | yɩ|na |am |e b|ame|wa |g a|d b|aam|ab |mb | bã|ãmb| ba|m n|wã |aab|a m|aa |saa|ga |nsa|yaa| wã|a l|tog|ore|n s|nd |ʊʊm| sõ| sã|ãng|seg|egd|d s|el |tʊʊ|ngã|ba | tũ| da|ã t| me|b s|re |dat|l s|d n|ɩ y|ã y|dɩ |aoo|g t| kã|m t|ing|r s|a p|b y|b n|gdɩ|men|dã |vɩɩ| vɩ|lg |oor|ã s|n k|al |rã |nga|ar | le|gr |d a|neb|̃nd|ɩɩm|ĩnd|yɩ |lem| pʊ| bʊ|pʊg|nge|to |b t|ɩ s|g s| mi| ke|a k|bãm| we|kao|ilg|wil| zĩ| no|kẽ| ra|m b|ʊge|b k| bũ|oog|ã p|bũm|ngr|at | wi|gam| ko|eb |g b|sõn|ãad|ã f|õng|ɩm |m s| yi|ũmb| yã|ʊm |oy |wẽ|noy|ʊmd|da |ren|a z|ya | gã|le |b p|ɩ t|n g| f |ni |soa|oab|i t| sɩ|lag| ti|te |o a|s n|oga|go |tũ |gem|age|a w|̃ n|in | yõ|a g|b b|aor|ka |ẽe|tũu|aas|a r|e y|ag |eg |r t|e a|ã k|iid|e p|neg|o t|ate|oa |e s|ũ n|mã |ms |ell|eem|ẽm|b w|̃ms|too|ik | zã|zĩn|kog|bao|r b|s a|bui|uii|ogl|aba|alo|loa|kãa|od |l b|ll |nda|kat|aka",
    "cat": " de| i |es |de |la | la| a | pe|per|ió |ent|tat| se|nt |ret|ts |dre|at | el|ls | dr|men|aci|a p|ció|ona| co|a l|al |na |s d|que|en |el | to|s i| qu| en|e l|ns |tot|et |t a|ers| pr|t d|ons|er | ll|ion|a s|ta |a t|con|els|s e| l’|rso|res|als|son| un|est|cio| re|pro|ita|cia| in|les| o |ue |del|lli|té | té|ia |ame|é d|sev|ota|nac|i l| al|s p|a d|ar |a i|ual|nal|a c|ant|nci| le|ert|sta|rta|ser|t i|i a|l d| no|va |ats| d’|s n|re |s a|e c|eva| na|rà | ca|ues|com|lib|és | so|ibe| es|ets|ber|da |r a|no |una|l’e|s l|ter|sen|ran|ure|des|man|i e|l p|t e|n d|e d|e e|om | di|cci|igu|a a|s t| pa|i d|tra|s o|aqu|tre|vol|ect|a u|l i|gua|ide|s s|ada|ene|ial|nta|ntr|ens|soc|cte|ra |oci|hum|uma|cla|ali|lit|erà|cti| aq| hu|ici|pre|era|ess|uni|nte| fo| ni|ble|sse|tes|alt|eme|ass|ica|seg|o s|ote|rac| ig| po|ans| és|a e|un |us |mit| ma|r s|se |ssi|s h|a m|r l|nit|l t|ènc|ó d|ten| te|ir |i p|tal|eta|dic|i i|hom|t q|par|egu|s f| as|n l|ria| mi| ac|lic|int| tr|act|eix|n e|s c|ont|nse|ecc|t t|ltr|amb|qua|l’a|eli|ura|an |ist|e t|ó a|one|nam|ing|lar|o p|esp|rec|lig|a f| ha|iva| am|lle|t s|rot|mat|liu|tiu|iur|n a|fon|ots|inc|ndi|e p|seu|olu|gur|i c|més|der|rna|ina|for|igi|cie|bli|ic |mb |in |art|ol |rom|nin|omp",
    "sot": " le|le |ng |ho | mo| ho| bo|a h| e |lo |ya |ba |e m|a l| ya| ts| ba|na |ong| ka|a b|tho|e t|sa |elo|olo|a m|ets| di|o e|la |mon|oth|tsa|o y|ka |eng|a k|oke|kel|a t|g l|tok|ang|o t|tla|mot| se|o l|e b| na| ha|lok|wa |e h| tl| a |aba|o b|tse|ha | o |hab|e k|tjh|a d|tso|jha| to|se |so |oko|e e|tsh|dit|pa |apa|o n|e l|loh|kol| ma|o m|a e|ela|ele|ana|a s|let|bol|ohi|a a|tsw|kap| ke|hi |g o|ohl|eo |ke |ona|set|o k|o s|di | kg|e d|aha|lan|bot|bo |ito|o h| mm|hle|eth|ena|i b|ala|ats|moh|swa|lwa|g k|atl|abe|g m|ola|phe|bat|ane|a n|mel| me|o a| ph|ebe|ell|hlo|tlo|etj|mat| sa|g t| th|g y|lat|mol|g b|g h| en|she|the|seb|nan|lek|boh|hae|kgo|hel|e s|edi|wan|me |kga|ae |to |a f|ath|lao| hl|han|ile|nah|we |ume|kan|otl|len|aka|efe|ire|bel|bet|rel|swe|mme|sen|a p| ko|g e|atj|lel|its|bon|oho|eha|shi|man|ano|nts|he |lal|eka| fu|o f|heo|got|all|ao |het|hat|get|ban|hal|kge| wa|a y|lla|fum|mmo|kar|alo| ef|thu|e y|wal|tha|san|hon|tlh| he|e n|ben|hla|ing|uma|pha|o o|si | tu|tum|llo|lle| ta|pan|hen|mo |nen|hir| lo|son|ots|tab|ama|ato|din|lap|hil| eo|dis|oka|elw|tsi|llw|i m|hol|pel|iso|no |e a|fet|lwe|adi| fe|fen|hwa|opa|kop|are|amo|ret|emo|i k|isa|o p|o d|i l|gat|dik|i t| nt| la|ame|shw|hah| am|nya|ita|mab",
    "bcl": "an | sa|in | na|ng |sa | pa|na |nin|ang| ka| ni| ma| an|pag| as|sin|asi|n s|ion|n n|cio|a m|on |ban| de|n a|ga |kan| mg|a p|mga|a n|os |rec|ere|der|cho|ech|n p|aci|aro|n m|man|a s| la|n d|o n|asa|n k|g s|kat|sar|ata|ay |o s|al |ong|n l| o |a a|ho |a k|igw|tal|gwa|amb|kas|sai|mba|wa |ara| ig|agk|o a|lam|ro |o i|gka|ali|apa|nac|san|aba|g p|ina|a d|iya|yan|ing|lin|may|ink|aiy|nka| ba|aka|a i|yo | in|ag |abo| da|aha|ini| ga|tan|s n|nta|ano|agt|s a|kai|ad |hay|ida|hos|o m|og |ia |iba|ent|han| ta|par|n i| hu|at |ron|a b|g n|ant|g m|nal|ayo|a g|dap|mag|no |sta|aya|iri| pr|nga|ran|cia|g k|es |pat|li | co|dad|l n|y n|bos| si|mak|pro|ala|men|gan|aki|nte|lan|o k|con|t n|gab|a l|g d|ona|n b|ta |do |nda|aan|as |uha|agp|a c|uli|awo|taw|pan|n o| so|hul|i n|ter|ado|ags|g a|tra|min|anw|tay|kam|nwa|waa|g o|a o|kap|ain|bal|bil|ami|g i|d a|res|ra |nag|gta|ton|n e|ba |nan| mi|kab|en |bas|gpa|nes|o p| di|pin|ika|l a|n g|ind|isa|cci|ili|ial|ecc|tec|nci|ios|bah| es|one|pak|om |imi|agi|ico| re|ana| bi|a e|nid|rim|rar| se|rab|s s|hal|i a|buh|sab|cri|ubo|bo |gi |wo |rin|int|agh|ipa|sii|ibo|ani|to |sad|hon| le|iis|a t|ast|say|lar|n c|aag|ote|rot|n t|y m|ici|paa|ley|ey |yag|aen|dan|ni | pu|atu|lab|sal|ica| gi",
    "glg": " de|os |de | e |ión| a |da |to |ció|ere|ón |der|ito|en |a p| co|ent|eit|n d| se|rei|ade|as |aci|dad|s d| pe|per|o d|s e|e a|e d|men| da|nte|ers| pr| te|do |al |rso|ida|es |ten|soa|oa |que| to| po| o |a t| in|a e| li| do|cia|te |tod|res|o a|pro| re|tos|est|ra | es| ou|dos|lib|con|a d|nci|o e| na|e e|a a|a s|ber| á |oda| pa|e o| qu|e c|ue |ar |nac| en| sú|tra|s p| un|súa|com|ou |ia |nto|ser|a c|er |ns |a o|se |des|is |ter|s n| ca|ado|or |óns|sta|úa | no|rda|s s|ibe|rá |erd|era|no |nal| as|ica|e p|eme|erá|pre|sen|das|e n| ni|e s|por|ais|par|ant|ara|ame|cci|ona|io |o p|n p| di|cto|s t| so|o t|o á|nin| me| os|cio|enc|unh|n e|n c|nha|ha |ntr|ion|n s|á s|n t|s o|ese|nta|ect|e i|o s|e l|so |nid|oci|soc|ont|dic|ici|e t|tad| ac|tiv|ndi|ali|gua|l e|rec|a l| ig|omo|cas|o m|re | ma|ing|na |igu|vid|eli|ngu|und|s i|rac|a n|cla|cti|seu|ria|on |ase|o n|lic|s c|man|lid|a u|uni|ta | ó |ual|ido|ori| fu|ind|nda|ste|s a|tes| tr|act|ial|fun|dis|ecc|o ó|cal|mo |un |e r|iva|n o|ca |n a|o c|esp|ome|o o|seg|sti|r a|tor|r d|egu|ada|lo |nde|r o|uma|ote| el|alq|lqu|uer|spe|a i|tar|bre|tri|hum|olo|cie|ren|ena|ari|mat| fa|med|ura|lar|edi|ver|ixi|á p|ibr|gur|int|pen|rot|a f|cac|s f|ili|rio|ma |a v| vi|rim|len|ita",
    "lit": "as |ir | ir|eis|tei| te|s t|os |uri|ti |us |is |iek| pa|ai | vi|vie|tur| ki|ri |žmo| tu| žm|ien|ės |ių |ali|ais|mog|vis| ka|lai| la|ini|i t|s i|s ž|sę | į |isę|ena| ne| pr| bū| jo|pri|kie| ta|kvi|nas| su|ekv|mas|gus|būt|tin|isv|s s|ogu|isi|mą |mo |ant| ar|s k|ama|kai|ūti|s a|s v|aci| ti|s n| sa|s p|oki|cij|inė|ar |val|ms |tai|jo |i b| na|gal|sav|kur|aus|men|rin| ap|imą|ma |sta|ę į|ina|i p|imo|nim|i k| nu|ima|oti|mis| ku|jos|lyg|dar|išk|je | at|tas|kad|r t|tų |ad |tik|i i|nės|arb|i v|ijo|eik|aut|s b| įs| re|iam|sin|suo| be|isu| va|li |sty|asi|tie|ara|lin|isė|i s|ą i|jų | ly| ga|vo |si |r p|tuo|aik|rie| mo|din|pas|mok|ip |i n|rei|ybė|mos|aip|r l|ntu|įst|į t|gyv| iš|nti|tyb|ų i|pag|kia|kit|es |uot| sk|jim|tis| or|aud|yve|ven|mų |als|ų t|nac|avo|dam|ą k|i a|s j|oje|agr|kla|gau|neg|nių|o k|ega|iki|aug|ek |tat|ieš|tar|ia | ši|ios|ška|sva| to|tau|int|sau|uti| as|io |oga|san|mon|omi|kin|ito|s g|ome|r j| ve|aty|kim|nt |iai|lst| da|ją |min|r k|o t|nuo|tu |ver|kal|am |usi|o n|o a|ymo|tym|vę |ati| ji|o p|tim|ų n|paž|ter|s š| vy|alt|ksl|ing|ų s|oma|šal|ran|e t| ni| ša|ava|avi|nie|uom|irt|elg|jam|ipa|kių|tok|eka|tos|oja|kio|eny|nam|s d|ndi|amo|yti|gri|svę| gy|lie|ėmi|ats|ygi|soc|sie|oci|pat|cia",
    "umb": "kwe|oku|a o| ok|nda| kw| om|da |wen|e o|a k|la |ko | ly|end|nu |ka |o l|oko|mun|omu|unu|kwa|wa | ko|a v|o y|omo|mok|ali| vy|eka|olo|i o|osi| yo|lyo|mwe|si |okw|we |lo |iwa|o k|i k|le |te |a e|ete|gi |kut|sok|ong|iso| ya|vo |ang| ey|wet|ata|a y|o o|yok|ofe|fek|kuk|ela|a l|ilo| wo|owi|nga|iñg|kul|oka|vyo|uli|u e| va|li |ñgi|kal|wat|ta |u o|eci|ngi|ovo|ye |so | li|oci|yo |wiñ|nde|ga |ing| nd|ili|nge|ci |eye|ala|vya|e k|kol|isa|a a|lom|lon|go |avo|ako|ovi|pan| ol|uka|ngo|lya|ti |o v|akw|yal|olw|uti|imw|eli|alo|ge |ung| ku|a u|lis| al|onj|ati|wal|ale|e l|sa |i v|and| ov| yi|ika|ukw|ele|lil|yos|he | oc|yov|iha|ikw|omb|val|lin|lim|ahe|apo| ka| ye|yom| vo|lik|i l|kok|wav|aka|cih|o e|tiw| ke|yi |i w|ama|e y|lof|yow|yol| ek|kov|ole|vak|vik|tav|omw|a c|upa| el|ila| lo|aso|su |e v|lyu|ava|ñgo|lwa| wa|gis|gol| ce|tis|ave| on| es|po |wil|va |eso|kup|co | la|yam| ak|wam|iyo|ekw|e e|i c|tat|i a|a n|yah|eko|lwi|ita|lit| ec|kwi|upi|i y|epa|kan|kiy|nja|dec|asi|e u|yav|asu|mak|lap|yim|tya|vos|kas|cit| ha|lel|u c|a w|emb|u y|ola|yon| os|win|lye| ca|eyo| uk| ci| ow| yu|ayi|vel|liw|has|iti|sil| et|yuk|o w|umb|ulu|ya |wi |anj|kat|ngu|wom|o a|uva|esu|usu|mbo| co| of|mat|o c|ca |cel|vi |u l|ba |kon|mbe|wiw",
    "tsn": " le|le |go | mo|ng | ts| go|lo | bo|ya |we | di|gwe| ya|ong|ngw|sa |olo|elo|a b|tsa|tsh| e |tlh|a l|o t|e t|a g|e m|wa |a t|o y|eng|na |e l| kg|wan|kgo|mo |o n|tse|a k| tl|ets|ane| ba|dit|mon|ele|hwa|shw|la |ka |a m|nel| na| ka|e d|o l| o |o m|ba |se |e g|e e|bot|a d| a |di | ga|ots|tla|otl| se|lol|o b|tho|so |lho|tso|o g|ang|got|e b|ga |lel|seg|o e|its|gol|ose|ho |oth|let|e o|lha|ego|aba|hab|e k|ano|los|a n| nn| ma|eka|g l|šha|tšh|kan|alo|ola|lhe|ela|aka|sen|gat|tsw|kga| nt|mol|o a|nng|o o|o k|aga|atl|o s|bat|tlo|agi|yo |len|g y|edi|e y| th|g m|dik|to |tir|e n| ja|a a|mel|o d|ana|ire|g k|rel|swe| yo|bon|gag|lek|e s|mot|kwa|i l| te|a s|he |agw|ats|iwa|i k|itš|ona|no |a e|mai|any|lao|ikg|she|ntl|lwa|dir|g t|lon|ale| sa|ao |hel|shi|tle| wa|ume|log|jwa|itl|pe |hir| jw|non|iti|a y|set|hok|ira| ti|odi| me|gi |e j|tek|etl|a p|ko |ath|ala|hol|bod|tet|mog|han|nya| mm|g g|nag|i t|adi| lo|oag|i b|nna| ko|the|lan|re |thu|wen|hot|nyo|hut|o i| ne|pol|me |tum|ope|ame|gan|emo|ore|wel|nts|oko|okg|iro|ro |tha|elw|amo|gor|ing|jal|isi|nan|ogo| it|jaa|si |oga|heo|gon|diw|pa |opa| kw|lat|are|bo |o j| ke|ke |ile|gis|o f|rag| ph|bok|aak|kar|rwa|nye|g a|atš|mok|ago|okw|hag|ate|ato|uto|gwa|mme| fa|fa | op",
    "vec": " de|to |ssi| di| e |de |ƚa |ass| in|e d|ƚe |ón |ión|e e|o d|sió|ent| co|rit| so|dir|el |iri|re |eƚa|tà |e a|ti |à d|so |men|te |ess|in |a s| a | gà|gà |ito|deƚ| pr|i d|ion| el|sa |aƚe|a d|e i|nto|e p|o a|nte|ame|mo | na|con|sio|hom| te|omo|ni |are|a p|pro|e s|da | ke|ke | i |o e|nas|ƚi |aƚa| pa|gni|ssa|aƚi|xe |se |o i|i s| aƚ|ar | eƚ| un|e l| da| ho|on |ia | og| si|sia|e n| al|o s|a e| li|ogn| se| o | ri|n t| l’|i i|naƚ|i h|dei|dis|ei |na |à e|del|o c|ont|iti|tut|ibe|ber|nsa| es|par|iss|res|e c|o g|ona|ond|ità|un |ri | tu|lib|sar|n d|ras|a c|nda| st|ens|i e| cu|nit|e o|egn|a n|do |ari|ta |eƚe|ro | xe|gua|ne |a l|n c|a i|n e|i p| re|cia|al |tra|e f|man|n s|no | po|ers|i g|uni|pre| fo|uti|n p|eri| ma|era|l s|ani| fa|per|soc|oci|o o|rtà| no|l d| pe|pri|e r|ter|si |a a| as|ndo|i a|fon|a u|end|e k|sen|o p|iaƚ|teƚ|e g|ico|n u|ert|io |l’a|a t|ra | me|ugu|ati| ne|uaƚ|dar|o t|com|asi|e t|iar| ƚe|nta|sta|teg|o n|ant| ug|ins|nse| pu|seg| le|ori|ura|ndi|tri|alt|ist|o k|ƚo |kia|e u|rar|tes|ita|ans|rso|ltr| su|l m|n o|ƚit|a r|ai |uma|ici|ato|opo|bli| ca|eƚi|l r|ica|ria|tro|isp|sun|cua|ind|co |vit|cur|cas|int|ute|ric| ra|gna|rse|dam|lic|ono|ere|riv|ite| um|for|avo|sic|vor|icu|ris|eƚ |eto|cos|ntr",
    "nso": "go | le|le | go|a g|lo |ba | di|ka |o y|ya | ka| ya|ng | ma|a m| mo| tš|elo|etš|e g|a l|o l| bo|a k|a b|e t|na |o t|tok|wa |e m|a t| ga|la |ang| a | ba| se|man|tše|oke|o k|ša |kel|dit|tša|tho|we |ele|a d|o g|o a|a s|o b|gwe|e d|ho |o m|ego|e l| na|tšh| to|šo |še |oko|ga |di | o |olo| e |let|ong|gob| ye|oba|ago| tl|tšw|mo |e b|re |g l|ngw|aba|tšo|swa|šha|ane|tla|hab|o n|ona|ito|ela| kg|ogo| th|oth|wan|eo |e k| sw|lok|kgo|log|ye |o d|a n|ola|g o|e s|set|hlo|kol|se | wa|lel|ao |eng|o s|šwa|mol| ts|eth|net|ano| bj|a y|o e| ke|thu|hut|šwe|ge |itš|leg|rel|alo|to |ohl| ge|mog|kan|e e|ire|nag|ke |eba|aka|pha|gag|bot|o w|aga|a a|mot|are|mok| yo|gor|oka|ko |gon|no |ore|ana|agw| wo|bon|bat|lwa|tse|bja| ph|din|yo |e r|šeg|e y|ath|nya|get|lao|sa |wo | re|wag|odi| sa|seb| me|utš|oph|mel|iti|kge|ato|kar|o o|šom| la|o f|phe|edi|hir|ala|pol|lat|ušo|i g|a p|g y|the| fi|ume|wel|bop|hel|emo| du|ile|gwa|bo |ale|tle|lwe|lek|ban|ta | lo|lon|o š|dir|mae| mm|tlh|god|pel|a w|weg|eka|elw|atš|išo|aem|šhi| ko|gam|rwa|mmo|boi|e n|ntl|pan|amm|i l|i b|hle|hla|leb| am|šon|jo |len|i s|kop|ret|gel|ing|opa|yeo|dum|sen|e a|ape|ase|kwa|lef|mal|amo|oge|bjo|oik|mon|kga|okg|a f|tsh|boh|uto|ika|ahl|ja |adi|iša|gab|hom|abo",
    "ban": "ng |an |ang| sa|ing|san| ma| pa|ane|rin|ne |ak |hak| ha| ka|n s| ri| ke|nga| ng|man|in |lan|a s|ara|ma | ja|n p|n k| pe|g s|g p|pun|asa|uwe|gan|n m|nin|sal|pan| la|alu|iri|sa |lui|jan|adi|a m|adu|uir|ra |yan|mad|kan|wan|duw|ur |tan|g j|anm|we | tu|nma|ika|awi|nge|ah |tur|ih |ban|ka |e h| ne|n n|en |nte|un |ngs|eng|anu|beb|aya|ani|ana|ian|a p|ala|bas|nan|gsa|ngg|uta| da|gar|aka|eba|da |apa|asi|ama|lih|aha| wa|ten| ut| ta|a n|ebe|are| wi|han|aje|keb|oni|nik|ent|aki|uni|ata|wia|iad|g n| pu|jer|ero|ron|aan|k h|saj|din|sak|a t|nus|dan|n w|pen|usa| ba|ngk| pi|ant|sam|e p|taw|n r|ate|wi |nen|i m|ega|neg|iwa|pat|atu|e s|ami|ipu|g k|ina|mar|kat|kal|aga|sar|ran|kin|per|g r|ndi|arg|ar |ksa|e m|ren|nya|al |tat|ida|ela|h p|aks|ntu|ngu|ado|lak| ny|oli|at |wen|ep |i k| se|dos|h s|n l|dad|gka|eka|a k|rep|eda|n h|par|upa|ena|swa| sw| in|nay|ewa|ung|era|ali|a u| mu|eh |nip|r p|e k|n t|k p|ras|i n|uku|n i|wah|eri|g m|pak|n b|r n|ayo|nda|mal|mi |um |dik|os |osa| mi|yom|na |teh|awe|k r|lar|car|tah|sia|g h|ti | hu|ut |huk|kum|sti|ewe|tuk| me|rga|pin|h m| su|gi |ari|n d|a w|ta |uan|gaw|gen|h r|on |war|tut|lah|pag|gay|r m|n u|ada|ira|a b|ngi|end|kew|g t|min|ggi|gda|jag|as |rap|agu| an|e n|ngd|s k|ila|eta",
    "bug": "na |eng|ng | na| ri|ang|nge|nna|ngn|gng|ge |sen|a r| ma| pa| si| ta| ha|ri |hak|app|tau|ak |au |ddi|a t|ase|edd|ale|a n|nap|gen|len|ass|pa |e n|ai |ria|enn|ega| ru|upa|rup|ias|a a|ing|inn|a s|pun|ngi|nin|e p|ini|nai|ga |lal|gi |sin|ppu|are|ae |ye | ye|ana|g n|sed|ada|le | as|i h|a p|ama|g r|i r|man| se|una|ara|ra |di |ssa|ren|a m|pad|e r|ila|ban|asa| ke|san|din|e a|ura| la|ane| de|nas|e s|i a|ipa|pan|u n|ann|i l| ad|da |ala|aji|ole|att| pu| e |ong|i s| ba|pur|aga|lai|i p|lan|g a|ngs|sal|ola|gsa|g s|a b|i n|ppa|rip| we|a k|g m|asi|wed|akk|mas|i m|ril|u r|reg|g p| pe|ung|gar|neg|sse| po|e m|k h| ar|pas| ne|map|ian| te|nar|pol|ett|ran| ja|bas|eba|jam|beb|ena|par| al|sib|ebe|ngk|uru|keb| sa|ain|ttu| mo|aka|unn|add|iba|sa |gan|gka|nen|bbi|i t| at|atu|kan|nan|uan|leb|rus|de |e d|ton|ata|tu |ssi|ro |e y|cen|kun|awa|ell| wa|k r|mak|wa |uwe|ire|ebb|gag|apa|sae| tu| ia|tte|mat|sim| to|a d|o r|ta |nat|ece|tur|la |ie |dec|ko |kel| di| hu|nca|caj|pak|rel|ma |lu |g t|bol|uku|e e|ter|jaj|tta|we |bir|deg|huk|e h|dan|ure|baw|kol|rit|kko|ele|arg|rga|llu|oe |lin|use|ari|auw|pat|mul|elo|ula|iti|gau|an |u p|nga|g y|a h|ekk|sil|ka |e w|ade|anc|iga|sip|ten|a y|e t| me|nre|aja|ji |rek|a w|dde|per|iko|sik",
    "knc": " a |ro |be |nzə|ye |a a| ha| kə|abe|akk| ka|zə |adə|a n|a k|kki|hak|mbe| la| ad|ndu| nd|wa |ben|en |ma |də | ya|o a|əbe|ə a|ga |e a|əga|lan|əna|lar|aye|aro|kin|inz|rdə|ard|ana|yay| ga|əla|kəl|ji |awa| mb|bej|eji|kən| ba|an |uro|du | na| ku|anz|dəg|nəm|kal| nə|e m|na |gan| du| sh|shi|amb|n k| su|ara|u y| ta|so |a d|kam|wo | ye| sa|e h|a s|sur|aso|au | au|iwa|nyi|kur|a l| da|kar| as|dəb|iya|kiw|o k|obe|e s|ada|ama|and|u a|aa |ta |ima|n n|la |əwa|nga| ci|ba | ab| nz|əgə| fa|ənd|ata|ndo|ya |tə |nza|ə n|ndi|a g|in |nam| fu|ə k|aya|a t|tən|a b|təg|ru |uru|inb|am |e k|al |ida|mga|aar|a h|baa|ə s|nab|dəw|dun|asa|nya|owu|gad|taw|o w|gən|a y|kat|dam| sə|o h|əra|e n|awo|ade|əmk| wa| wo|amg|dən| tə|a f|ala|i a|zəg|o n|uny|iga|zən|əli|wur|u k|o s|wan|za |din|utu|e l|san|i k|uwu|wu |awu|n a|on |de |da |nba|mka|yi |gay|tam| ng|laa|gin|azə|bem|gai|taa|ibe|rad|adi|fut| mə|wow|wak|ali|kun| an|mər|o t|yab|nad|aim|əgi|i n| aw|liw|cid|u s|edə|atə|any|do |apt|lka|alk|dar|rta|bed|tu |ela|ndə|uwo|gal|yir|wum|n y|ayi|n d|mma|zəb| yi|nan|ltə|lmu|ilm|mar|bel|raj| il|ero|m a|utə|enz|iro|alw|uma|umm| um|e g|how|kka|o f| ny| ho|fuw|ə h|ang|tin|zəl|o g|ema|ən |no |a i|a m|wal|əny|iwo|lil|ədə|ə f|rtə|hi |diy|mu ",
    "kng": " ya|na |ya |a k| na|a y|a m| ku|a n|a b| ba|u y|and|ka | mu|yin|wan|tu | lu|aka| mp|ve | yi|la |ntu| ki|mpe|pe |nda|a l|si |yan|ana|so | ke|e n|ons|nso|di |da |ndi|i y|u n|lu |mun|alu|unt|ina|e y|nza|luv|ala|uve| ma|u m|ke |za |ayi|sal|o m|ban|ndu|ta |isa|kan|ulu|i m|amb|ma |kim|u k|fwa| ny|nyo|yon|ama|ti |ang|anz|du |kus|o y| me|i n|to |ins|nsi|wa |usa| mo|kon|uta|end|i k|uka| bi|a d| ko|mbu|mos|sa | ve|ika|mu |osi|e k|uti|kuz|imp|a v|e m|und|ind| fw|ila| to|pwa|mpw|ngu|bal|adi|ba | sa|len|sam|sik|mab|tin|vwa|mba|kuk| di|yay|a t|yi | le|ant| ka|ata|isi|olo|kis|mut|ula|lo |bu |su | bu| at|amu|o n|dya|kut|dil| nz|ngi|abu|usu|but| nt|ni |bak|kul|e b|nga|e l|inz|imv|gu |wu | dy|lus|awu| ti|lak|bay|bun|kat|ngo|tal|i b|utu|kak|o k|bim|uzi|uza|mvu| ng|nak|iku|baw|esa|kin|ken|yak|mpa|luz|umu|nu |nta|dis|dik|vuk|u f|tan|sad|ati|nka|ank|luk|mak|ong| mb|ani|i l|lwa|aba|luy|uya|yal|ing|zwa|kuv|idi|ku |ga |zit|bis|uvw|uzw| ni|swa| nk|iti|mef|fun|ibu|nsa|aku|ufu|kub|lam|met|i a|mus|eta|a a|u t|twa|atu|tuk|fum|uko|iki|don|kol|kun|bam|eng|uku|ndo| ns|a s|ela|usi|pam|mvw|u b|i t|zo |anu|tis|uke|sul|te |gid|dib|yam|ilw| mf|ola|umb|uso|kam|gi |mbi|oko|nzi|i s| nd|mfu|luf|dus|bum|lut|mam|ded|wil|tad",
    "ibb": "ke | nd| mm|me | ke|e u|ndi|o e| em|mme|de |en |e n|owo| en| ow|wo |i e|mi |ye |emi|nye| un|e e|edi|ene| ek|yen|eny| ed|e m|nen|une|ana|n e|e o|e i| ye| uk|et |n n|eke|na |e k| mb|em |ne | id| es|un |kpu|ede|iet|ndo| nk|o k|di |kpo|ukp|did|am |an |kie|nam|kem|esi|o u| nt|idu|eme|o n|t e|no |yun|mo | uf|ho |mmo|nyu| in|o m|kpe|o o|sie|oho| kp|do |din|ie |ono|kpa|m e|ri |nkp|dib|on |e a|uke| ki|boh|a k| et|po |ida|dut|m u|ked|ded| ub| of|ond|ru |uru|pur|in |ut |du |eko|a u|ina| ot|mbe|n o|bet|iny|man| ak|op |idi|ikp|i o|edu|kon|ade|om | us|uan|wem|a m|uwe| uw|puk|ak |ode|ro |t m|a e|oro|a n|n k|u o|to |te |bo |akp|ufo|ok |dik|pan|mbo|bio|i m|ide|ini|fur|uri|ban|ofu|ubo|n i|o i|uto|iso|dom|omo|ema|diy|fen| nw|dis| ny| is|ni |usu|n m|u u|fin|tom|eto|pem|ed |m m|ibo|oto|o a|sua|wed|nwe|m n| ut|mde|dud| eb|ara| as|i n|oki| ob|nte|mok| ik| an|kar|m k|o y|t k| on|i u|nwa|n y|asa|ama|re |ufi|uka|io |nek|i k| or|pon|top|sun|ion|se |aha|t o|k n|e y|ere| ef|mba|mad|isu| mi|kor|ra |ian|i a|ka |a a|k m|ko |da |t i|ena|obi| ey|ha |dia|ti |aba|uk |u m|d e|dem|san|a o| se|pa | ab|tod|n u|p m|ude|fok|k u|efe|uku|nti|nka|ibi|son|he |pe |nto|dak|a y| od|nde|eye|anw|ndu|mbu|so |ebi|bie|nda|sin|med|tu ",
    "lug": "a o| ok| mu|oku|mu |wa |nga| ob|ga |tu |ntu|a e|na |bwa|a a|ang|ra |aba| n |ba |a m|wan|a n| ng| ab|li |obu|unt|a k|era|ibw|dde|oba|a b|u n|za |la |mun|ban|ali|ka |emb|iri|bul|ate|mbe|i m| ek|tee|eek|uli| bu|u a|edd|sa | ku|ant|ana|eki|u b|be |dem| eb|ama|n o| om|ira|omu| ki| ed|ye |ala|amu| am|e o|gwa|nna| er|kuk|y o|kwa| en|okw|eer| ly|inz|ula|kus|kir|u e| ba| em|eri| ky|any|onn| wa| ye|ggw|ina|kol|n e|awa| bw|uyi|u k|eka|yo |bwe|ola|o e|usa|o o|kwe|mus|yin|bal|i e|u m|ngi|e m|bir|riz|ere|ri |ebi|kul|aga|nza|kub|ekw| eg|ko |a y|u o|we |kut|mat|e l|e e|a l|aan|ger|no |kan|sin|nka|gir|uso| at|a g|iza|gan|nyi|zes|uku|wo |nge|zib|isa|izi|ya |egg|ufu|rir|lin|wam|wal|eby|a w|i o|bee|oze|esa|eta|iko|ebw| ma|ako|bon|tuu|kin|uki|de |zi |kug|yen|ino|e b|obo|aka|ulu| te|ne |lwa|ma |y e|lye|kuy|nsi|i y|gi |utu|ly |imu|e n|taa|asa|enk|ku |o n|o b|sob|si |una|bun|usi|san|e k| ag|uka|uga|ata| ol|rwa|wen|ing|wat|kik|o k| by|nya|ong|kye|by |kyo| bo|ewa|yam|bye|ubi|ngo|kis|ani|boz|kit|i n| aw|ky | al|sib|muk|awo|uko|umu|ibi|uma|afu|olw|eky|tab|ung|buy|ini|uum|saa|y a|lal|mag|ro |end|add|enn|kib|ens|ole|ni |mbi|o a|i k|gat| og|maw|and|kuu|a z|wet|igi|yig|emu| ne| gw|a t|nzi|n a|gya|amb|uwa|ulw| ey",
    "ace": "ng |an |eun|ang| ha|peu|oe |ak |on |nya| ny|yan| ta|ngo|ung|gon|na |ah | pe|reu| ng| ba| ke|hak|meu|keu| me|eut|at |ure| na|ban|ee | di|teu|roe|ata| ur|ara| be|seu|han|a h| sa|am |dro|eur|um |n n|tie|iep| ma| la|ala|nan|g n|ut |ong|a n|ep |tan| te|tap|jeu| ti|eul|eub|eu |eug| da|eum|eh |euk|ra |ih |n p|uga|ai |n b|a t|e n|lam|eba| se|beb|n t|awa|om |a b| ka|asa| at|eus|and|nyo|oh |ta |ka |h t|n k|p u|man|e t|n d|n h|ana|dan| pi|ape|a s|neu|nda| si|t n|bah|ula|yoe|a k|h n|dum|euh|g d|e p|eng|e b| le| pa|ngs|sia|ran|ma |g k|un | wa|ndu|lan|una|heu|ura|n m|lah|sa |n a| ra|aba|g s|a p|ia |und| je|wa |kat|bak|k n|anj| dr|asi| bu|nga|beu|uny|yar|sya|hai|k m|k t|k a|ama|aan|ek |a m|ok |g h|aka|sab|g p|i n|uta|khe|h p|ue |uka|har|ari|di |e d| su| um|t t|a l|ya |san|e s|gan|uko|gsa|e u| li|kan|bat|lee|aro|ot |n s|leu|ina|h d|lak|oih|yat|n u|kom|pat|ate| ne|ngg|nje|taw|mas|uma|sid|anu|umu|aja|si |uh |h m|rat|aya|sal|et |soe|t b|n l|aga|taa|usi| ja|ute|m p|en |dek|ila|a d|ube|dip|gam|any|lin|tam|don|ika|usa| ji|rak|idr|h b|nus|adi| as|dar|ame|n j|ngk|m n|eup|h h|bue|k h|huk|euj|g b|gar|eka|gah|upa|ile|sam| bi|h s| de| in|mum|‐ti|t h| hu|k k|pho|dil|ep‐|nta| ge|geu|h l|hat|ie |tha|use|ieh|sas",
    "bam": " ka|ni |a k|ka |an | ni|kan| bɛ|n k| la|i k|ya |la |ye |ɔgɔ|na | ye|bɛɛ|ɛɛ |en |li |sir|ɛ k|ama| ma|ira|a d|ra |ali|’a | da|man|a n|a b| i |ma | kɛ| wa|gɔ |wal|mɔg|ana|n n| ba| ja|ɔrɔ| mi| kɔ| k’| mɔ| jo| si|min|iya|dan|len|i m|’i |in |kɔn|ko |aw |den| sa| o | n’|ara|bɛ |i n|jam|ɔnɔ| na|ɛrɛ|a s|i j|ani|n b|a m|i d| fɛ| tɛ| an|osi|jos|a y|kɛ |a l|iri| ko| di|ɛ b|ada|ila|ɛ m|i t| fa|nɔ | de| ha|asi|tɛ |ari|a j|raw|a t|ɛ s|ale|a f|tig|ɛn |aya|dam|a i|i b|sar|si |riy|ɲa |n y|nu |inn|e k|ɔn |rɔ |ang|a w|o j|w n|nnu|k’i|nti|nɲa|ade|abi|bil|ala|hɔr|kal|had|igɛ|i s|a a|mad| a |aga|u k|kab|a ɲ|aba| ti|olo| hɔ|o b|ɛ j|i f| ta|ɔ k|aar|baa|ɛ n|n’a|kun|ugu|iɲɛ|diɲ|n j|k’a|a h|rɛ |ati|ɔ m| se| cɛ|ɲɔg|bɔ | tɔ|i y|lan|i h| ɲɔ|tɔn|don|nɛ |inɛ|ga |i l|ɲɛ |ile| fo|o k|ɛ l|nna|ili|un |gɔn|maa|fɛn|n d|ant|n i|aay|go |da | jɛ|u b|ri |rɔn|aka|lak|ɔnɲ|e m|ɔ b|nin|nw |cɛ |w k|yɔr|n o|o f|nga|jo |o m|nen|n’i|on |ɛ t| ku|o l|igi|ɲɛn|anb|fɛ |ɔ s| bɔ|n m|e b|afa|nka|n f|nma| fi|’u |ɔ n| ɲɛ|fan|i ɲ|ti |a o|dil|ɛ d|uya| sɔ|ago|ɛ y|e f|ɛmɛ|mɛn|aju|e d|bɛn| jɔ| fu|til|bag|fur|n t|uru|kar|atɔ|be | d’| du|d’a|oma|lom| u | do|riw|taa|w l|mɛ |gɛ |imɛ|n w|iir|nni|iim|amu|so |bal| ɲa| b’|gu |ɛɛr|’o |iwa|n s|wol|ele|ɲan",
    "tzm": "en |an | ye| d | n |ad |ur | ad|n i| s |agh|ḥe|n t| i |dan| ta| lh|lḥ|d y| gh|ell|n a|ra |̣eq|i t|eqq|s l|mda|ett|n d|d t|akk|la | ti|qq |hur|di | di| am|gh |ghu| is|t i|r s|in |nag| na|a y|is | te|a d|n n|yet|n g|ll |ara|ghe|ma | we| ar| wa|n s|l a|n l|sen|edd| ak|it |li | le|dd |ull|lla| id|d a| ur|rfa|erf|kul| yi| ku|as | se| ma|zer|amd|a n|lli|lel|men|t a|kw | de|t t|nt |kkw| im|fan|a i|a t|eg |n w|i d|q a|rt |ar |gar| ag|es | tl|ize|emd|i w|i l|deg| as|ken| dd|n u|lan|d i|a a|wak|tta| tm|d u|er | tu|wem|at |ddu|tle|w d|n y|t n|sse|r a|mur|s t|tam|gi | tt|yes|wan|r i|tim|na |wen|twa|d l|ttu|kke|wa |nen| iz|iḥ| u |win|d n|ame|s d|ent|ḍe|hel|a l|hed|ess|t d|mga|arw|i n|ḥu|mi |mad|agi|i g|der|udd|s n|rwa|̣en|awa|i i|ya |h d|iya|s y|msa|uḥ|idd|urt|un |n m|ane|em |sef|lsa|ili|q i|qan|leq|siy| ik|el |err| in|yed| la|ant|den|tag|man|g w|mma|yen|len|tmu|i u|aw |taw|r y|wad|edm|ṣe|hla|t l|̣er|ala|asi|ef |u a|tte|ddi|ttw| lâ|imi|l n|til|al | ne|am |̣ud| lq|iḍ| ya|dda|̣ṛ|med|ren| ss|gra|m a|ghl| il|chu|tem| ll|khe|way|eln|lna|ana|ukl|duk|gha|lt |ni |all|i a|tal|ray|nes|s k|tes|naw|ert|ila|awi|lqa|kra|anu|nun| kr|ikh|ezm|n k|iwe|iwi|ima|net|ser|s u|ir |yeh| an|aya|ehw|hwa|esk|dde",
    "kmb": "a k| ku|ya |la |ala| mu| ki|a m| o |u k|ni |o k| ni|kal| ky|mu | ya|lu |dya| dy|a o|ang|kya|a n|tok|i k|oso|so |kwa|nge|xi |na |elu|nga| kw|wa | wa|a d|hu |kut|thu|uka|oka|mut| ka|a i|mba|uth|ka |gel|ba |u m|u y|ku |ene|u n|ga |kuk|ban|ixi|i m|e k|wal|oke| mb|kik|kel|ne |u w|ela|uto|i y|ana| ng|iji|a y|kit|ma | ji|nda|ngu|yos|kum|ulu|ji |i d|isa|und| it|and|ong| mw|u i|iba|ika|wen| di|ten|ilu|ila|ndu|ye |sa |kub|aka|ena|amb|ung|olo|a w|ngo|kil|oxi|lo |muk|ke |sok|du |mox|ate|o w|kus|wat|ta | wo|gu | ph|u d|ito|ita|e m|alu|a j|kis|tun|uma|wos|luk|o m|san|mwe|a a|di |imo|ula|wan|nji|jix|i j|a t|kij|idi|kan|uku|gan|kul|e o|kye|adi|ato|o i| ja| ix|da |nu |o n|uta|kud| yo|i n|udi|ki |su |tal|a u|lun|e y|u u| ye|jin|iki|pha|hal|wij|we |a s|lak|ikw|go |tes|fol|itu|eng| ke| uf|yen|ing|yat|ele|utu|kyo|o y|kwe|kwi|uba| en|kib|ite| we|dal|i o|yan|ge |eny|tan|uki| ik|dib| im|esu|lon|kat|atu|e n|ja |i u|jya|vwa|kam|i w|ute|ini|uke|lel|esa| se|xil| ut|fun|unj|ufo|mbo| a |uso|kim|mun|u p|nen|ukw|u o|i i|umu|han|gon| il|lan|ata|te |i a| ko|jil|o a|nde|nyo|eka| at|o d|exi|ijy|tu |usa|tul|kuz|ilo|dis| un|u j|dit|ufu|ote| ib|ivw|mwi| bh| ha|se |bul|ubu|win| os|imb|bha|ama| to|axi|inu| uk|sak|kos|bot",
    "lun": "la | mu|ng | ku|a k|tu |ntu|chi| ch|a n|aku|di |mun|ma |unt|a m|g a| a | na|ela|ndi|aka| we|ima|jim|shi|eji|u w|i k| ni|ind|wu |i m|a w| in|a i|u m|hi |awu|na |kul|wej|lon|cha| ja|sha| kw|a c|i n|nak|ala|mu |wa |ing|ka |ung|kum|a h|ulo|him|mbi|muk|u c| wa|hak|iku|nsh|yi | ha|bi |amu|imb|ewa|wen|kwa|ang|adi|idi|kut|esh|ana|g o|ila|ha |tun|u j|ong|nik|kuk|tel|ovu| ov|u n|han| an|ate|vu |a a|kal|ula|kwi|jak|u a| ya|a y|ilu|u k| he|ham|and|uch|kus|ond|eka|hel|kew|zat|del|hin|uku|nde|i j|enk|i a|uka|eng|ach|lu |nat|nji|ona|mon|awa|nke|umo|ins| yi|a d|ama|udi|wak|i h|ati|i c|wan|ta |bul|mwi|ata|ayi| ak|uma|i y|ina|ich|itu|uza|kuz|nin| mw|ku |kin|wun|sak|naw|nyi|ni |ant|muc|wal|ish|u y|mul|kud|waw|uke|wes|uki|i i|kam|yid|wit|da |akw|kad|yan| di|ken|uta|ika|imu|iya|nda| ns|mbu|ya |ule|dil|iha|kuy| ko|hik|eni|ahi|kuh|si |kun|ush|umu|atw|g e|his|dik|ji |any|li | ye|dim|kos|osi|hih|wat|eyi|ney| ne|amb|twe|til|wil|nu |kwe|u h|etu|tiy|ja |nan|ash|mwe|win|was|hit|iti| wu|iwa|wah|lem|g i|tam|din|hu |haw|nga|kay| ka|hid|yin|isa|iki| ma|jaw|jil|che|mpe|omp|eta|tan|jin|hiw|usa|umb|eme|inj| hi|ulu|ubu|nam|wik|mpi| da|ale|ite|tal|twa|ahu|end|nka|mba| at|ga |mes|dic|iwu|yej|kan|kuc|iyi|sem|emb|lun|una",
    "war": "an |ga |nga| ka| ng| pa| ha|han|pag|in |ata| hi| an|mga| mg| ma|kat|hin|a m|ay |a p|ya |ung|a k|gan|on |n h|n n|ug |n p|n k| ug|n m|da |a h|n i|ha |iya|adu|dun|tad|a n| ta|ada|sa | iy|ara| na| di| o |pan|may|a t|ang|ud |ana|n a|o h|o n|taw|n u|ags|yon|y k|al |tag|asa|kad|o p|man| ba|awo|gsa|wo |ag |gad| in|a a|a u|ina|syo|a i|a s|od |ing|agp|ala|asy|ngo|n b|ali|nas|san|aka|a d|ra |g a|was|g h|aha|gpa|agt|to |ad |n t|tun|ng |usa| wa| tu|ini|iri|tan|ahi|kan|ray|nal|war|dir|i h|gka| us|god|g p|ri |a b|nan|ida|o a|i n|bal|y h|kas|uga|hat|tal|nah|awa|ni |pin|uha|buh|o m| bu|gud|aba|at |no | pi|bah|g m|ili|him|aya|atu|d h|agi| su|agk|lwa|mo |d a|alw|sya|uma|ano|int|kal|upa|mag|yo |o u|agb|n d|asu|lin|a o| ko|ona|did|hiy| bi|as | ki|l n|sud|iba|hi |o k|kon|ira| la|gba|pam|amo|g i|ton|gin|n o|uro|ho |os |la |g k|gtu|d m|aud|aag|t h|gi | gu| ig| ir|n g|abu|aho|ami| sa|ati|par|kau|ern|ban|tra|gar|ama|ras|yan|adt|tum| un|ka |aga|aso|api|dto|kin|tik|mil|iko|rin|sal|ika|a g|ila|mah|lip|rab|non|agu|ak |dad|lau|d n|ko |it |pak|n e| ti|una|i m|lig|s h|bay|ro |sug|mak|n w|naa|g n| so| ag|yal|nte|lal|ba |aup|lan|ihi|y b|kah|tub|bye| am|ari|yer|uka|ani|uyo|oha|ito|n s|upo|ent| pu|sam|iin|til|mat|ato",
    "dyu": "a’ | kà| ká|kà |ye | ye| à |ya’|ni | bɛ|kán|la |án |ya |ɔgɔ| ni| la|ɛɛ |ká |na |a k| mɔ|bɛɛ|mɔg| i |nya|á k|n k|ɔrɔ|’ k| mí|’ l| kɛ|mín|’ y|ín | mà|à k|ɛ k|’ m|ma | ya|à m| wá| jà| ní| be|be | ò |i y|ní |i’ | lá|ra |iya|ɛrɛ|n’ |n n| há| kɔ|te |wál|àma|jàm| te|áli|a b|ima|man|à à|hák|e k|lim| kó|ɔnɔ|mà |n b|i k|ɛn |gɔ |e b|n y|ɔ’ |ana|’ n|o’ | sà|ɛ y|’ s|kɛ |à l|rɔ |e à|kɔn|li’|àni|a m| dí|aw |rɛ |ɔ k|’ b| bá|à b|a à|ákɛ|riy|e s|gbɛ|nɔ |a j| bɔ| ù | sɔ|bɛn| sí|à y|sàr|e m|ara|kó | fà|à s| àn|dún| là|en | sì|an’| fɛ|úny| dú|a n|a y|ɛya|àri| gb|in |kɛr|kan|’ t|dí | cɛ|nin|yaw| tá|na’|e w|mìn|ìna|lá |ɔn | mì| ɲá|à d|ali|n m|yɛr| yɛ|sɔr|gɔ’| tɔ|ama|báa|nga| dà|i m|i à|sìg|ìgi|yɔr|gɔn|w n|áar|a d| sé|ána|àng|len|à i|si |ɛra|á d|bɛr|a s|bɔ |ólo|a h|i b|ɔ s|ɛ l|den|ɛ’ |à t|àra|ɔya|gɔy|kɛy|ógo|u’ |aya|’ d| má| dɔ|ra’|a f|ɔny|’ f| ó |ili|sí | se|se |ko |cóg|a t| có|dén|hɔr|ɔɔn| hɔ|ma’|lan|ika|ina|kàl| a |àla|n s|ɛ m|i t|rɔn|tig|ànt|a w|tá |e n|i s|à n|nna| í |’à |ò k|a g|n d|an |ga |fɛn|ɔ à|li |e i|ɛɛɛ|kél|ati|so’| yé|i f|áki|dàn| k’|i n|k’à| nà|í i|í à|lik|yé |igɛ|e’ |e ò|go | lɔ| na|ɔ b|w l|í t|rɔ’| dò|ò b|min|ti |àga|ow |n t|mad| mi|ò l|éle|gi |ɲán|í y|kil|dɔ |nba|i ɲ|gu | wó|ɛli|i l|úru",
    "wol": " ci|ci | sa|am |sañ|añ | na| ak|ak |lu |it | mb| am|aa |na |al |ñ s|ñu |ne |mu |te |pp | ne| ko|m n|i a| ku| ñu| te| mu|baa|u n|ko |u a|mba|a s|e a|ay | wa| lu| do|ar | ni|u m|nit|oo |épp| ta|oom|gu |t k|i b|ku |u k| it|éew|rée| ré|u y|xal| aa|kk |i d| bu|doo|i w| bi|war|u c| yi|aay|llu| li|fee|loo| xe| xa| ya|taa| di|yi |ama|on |u j|yu |eex|ew | yo|boo|xee| bo| wà|àll|wàl|mi |o c|ir |mën| më|yoo|ul | gu|nn |en |oot| du| so|oon|e m|dam|een|u d|i n|uy |eet|i m|ara| ba|bu |a a|ata|okk|aad| lé| ay|ju |ada| nj|nam|und|axa|dun|m a|enn|r n|aar|ex |taw|ala| jà| pa|et |di |ën |ana|ral|ota|k s|awf|naa|wfe| gi|u l|igg|aju| dë|ma | aj|ti |u t| se|ax |gée|mbo| ja|ool|bii|li |a m| ke|see|m c| ye|i l| ng|yam|ngu| yu|w m|an |ken|n w| lo|i s| me| de|m m|i t|om |u x|n t| an| mi|jaa|laa|ee |bok|lig|p l|n m|t y|ggé|k l|a l|lép|àpp|jàp|aam| jë|aax|ekk|nd |góo|ewa|ndi|tax|a d| da|amu|éey|gi | su|k c|n n|l b|o n|k t|p n|jàn|àng|gir| jo|a c|n a|n c|ñoo|i ñ|a n|kaa|ba |m g|le |une|kan|e b|la |nda|lee|i j|ang|aat|k n|ey |ant|iir|a y|l a|e n|nan|añu|men|j a|ok |k i|nee|l x|omi|i c|oxa|aw |g m|dox|nte|opp|u w|ngi| mo|omu|y d|are|i k|aan|em |du |a b|njà|ñ ñ| ti|m r|kun|ddu|ali| së| la|eg | ma|ëra|ng |xam|mul",
    "nds": "en |un |at |n d| da| de| un|een|dat|de |t d|sch|cht| ee| he|n s| wa|n e| vu|vun|ech|rec|ht |er |ten| to|tt | si| re|ver| ge|nne|t w|n w|ett|n h|n v|k u|n u| el|gen|elk|lk |t u|ien|to |ch | ve|wat|sie|war|het|it | an|n f|ner| mi| in|ann|rn | fö|ör |r d| fr|t r|hte|orr|ich|för| sc|rie|eit| or|den|nsc|ege|fri|rer| st|t g| up|aar|t a|nd | is|ll |rre|is |up |t e|chu|rt |se |ins|daa|lt |on |t h|oon|che|all|n g| ma|rrn|min| se|ell|hei| na|t s|n i|n a|nn |len| sü|in |rd |nen| we| bi|n m|e s|ven|ken|doo|sse|ren|aat|e m|ers|n t|s d|n b|lle|ünn|t t|n o|ik |kee|e g|t v|n k|hen|arr| dr|heb|lie|ebb|e v| al|e a|llt| ke|hn |he | wi|cho|ehe|ok |ard|sta|men|ill|gel|tsc| ok| do|an |düs|ene|erk| gr| dü|weg|ie |ede|ieh|r s|sün|üss|und|raa| dö|röf|drö|t m|ats|öff|e f|ünd|e w|dör|ens| gl|rch|sik|ig |kt |örc|ere|gru| ün|ff |ahn|nre|mit|st |al |aal|hon|ert|kan|nat|der|dee|enn|run| so|eih|lic|ehr|upp|iht|nwe| fa|pp |eke|e r|unw|t n|taa|hup| ka| be|bbt| wo|p s|el |as |t f|bt |e e|nee|maa|huu|eve|nst|ste|mee| ni|inn|n n|ern|iet| me|hör|dde|ent|n r|t o|öve|are|arb|ite|ter|l d|ach|nic|bei| as|lan|t b|d d|t i|ang|ame|rbe|utt| ut|pen| eh|uul|iek|hr | ar|r t|ul |e d|art|n ü|one|eer|na |nte|mut|ete|üd | mu|üüd|lüü",
    "fuf": " e | ha| ka|de |ndi|al |and|han|he |di | no|nde|no |e d| ma|e n|dyi|o h|dhi|aa |re | dh|yi | bh|i e|dhe|eed| nd|hi | wo|bhe| ne|dho|a n| dy|ala|un |ko |maa|edd|ho |gol|ka |la |ddh|won|e h|ned|ii |e e|kal|taa|e m|ann|ni | le|o k|aad|eyd|haa|ol | ta|ede|ley| fo|aan| mu|dan|nnd|mun|e k| ko| sa|i k|en |i n|ond|tta|aar| he|dya| fa|e f|e b|i m|ee |are| go|gal|het|ett|taw|ndh|nda| hu|ani| fi|na |ow |ydh|tal|o n|sar|e t|bha|fii|dir|ita|i d|e l|a d|a k|adh|faa|ira|iid|idy|ral|naa|oni|nga|yaa|ana|iya|aak|riy|ina|ydi|ngu|i w|dyo| wa|ari| ad|i h|laa|oo |uud|hen|fow|n n|ude|ady|ke |in | ng|ree|yan|dha|huu|le |akk|dii|e w|adu|ugo|fot|i f|a h|on |a e|aam|goo|l n|e a|ya |oto| on|n f|udh|er |l e| an|i t|ank|tan|o f|e s|dun|una|ore|ama|e g|dhu|den|der|dee|awe|nta| la|yam|an |to |kko|oot|mak|o w|l m|l d|nan|ubh|bhi|bhu|waa|hin|n k|n e|o e|a o|oll|hun| da| mo|n m|a b|yee|udy|ant|oor|wee|ku | si|i b|n h| o |ere|tor|ta | ke|ewa|mo | na| ho|a t| fe|hoo|o b|und|i s|aaw|awa|a m| bo| ny|amu|ott|l l|mu | ya|ake|edy|a w|awt|te |nya|a l|aal|l h|bon|ri |tin|i a|ire|att| do|yng|nee|lle|woo|ndu|ota|ago| se|rew|lli|tii|a f|ma |nke|ata| de|oon|gur|int|onn|iin|mii|dud|l s|eyn| su|too| ga|uwo|wti| ku|o t|din|rda|guu",
    "vmw": "tth|la |thu|a e|na |hu |kha|a m|we |ana| mu|a o|awe|ela|ni |ala|hal|edi|to | ed|ire|dir|eit|ito|rei|ya |a n|wa |mut|a w| wa| ni|akh|aan|u o| on|o y|okh|utt|a a|haa| n’|wak|nla| wi|ari| yo| si| ok| ot|iwa|ka |iya| sa|ne |apo|lap|ale|le | oh|oth|att|the|mul|aka|oha|kun| el|aku|oni|mwa|ha |e s|unl|tha|ott|ele|ett|e m|o s| va|ene|e n|e o| ya|oot|hav|ade|ihi|iha|ihe|de |o o|e a|eli|hen|amu|e w| aw|hel|dad|ra | at|po |i m|lel|wi |o n|owa|e e|ula| en|ta |o a|i a|moo|waw|ina| ak|ota| mo|sa |a s| so|han|ara|var| kh|a i|ri |aya|itt|anl|row| mw| et|i o|ika|’we|nro|i e|n’a|her|lan|nak|sin|lo |elo|vo |u e|eri|n’e|oli|thi|u a|a’w|ida| ah|a v|liw|kan|him|lib|yar|riy|ona|onr|erd|wal|hiy|aa |ibe|rda|wan|ber|era|avi|hiw|nna|i v|hwa|lei|mih|vih| ep|khw|ntt| na|ko |ia |sik|aha|iwe|e k|hun|una|mu |avo|ikh|laa|riw| ma| an|e y|kel|’el|huk|u y|phe|kho|pon|i s|nid|upa|ath|ila|yot|eko|ali|tek| es| it|o e|uku|wih|nan|tte| a |mur|’at|i w|ani|ulu|nih|wel|lik|ira|ane|a y|nkh|saa|ro |n’h|wir|i n|ile|som|u s|hop|inn|ei |ont|kum|yaw|saw|iri| eh|tel|tti|ola|aki|mak|ret|uth|nnu|a k|nuw|ahi|enk| il| nn|ena|va |yok|ute|soo| pi|lal|ohi|hik|mpa|uwi|lih|har|kin|aph|ma |ope|man|ole|uma| oo|mpw| v’|nal|ehi|nin|uni| ek|khu",
    "ewe": "me |ame|e a|le |wo |kpɔ| am|ɖe |ƒe | si| me| wo|be |si | le|sia|esi|la | la|e d| ɖe| kp|pɔ |aɖe|e l| be|e w| ƒe|e e|dzi|na |nye|a a| du|ye | ŋu| na|duk| dz|ukɔ|e s|ome| mɔ|e n| aɖ|kpl|nya|gbe|e b|e m|ple|ɔkp|ɔ a|pɔk|woa|ɔ m|kɔ |evi|nɔ |ŋu |ke | nu|ɔ l|mes|awo| o |iwo|ɔnu|e ɖ| ab|ya |ekp|e k|ɔwɔ|u a| al|nu |ia |ɖek|e ŋ|kpe|ɔme|o a|iny|zi |dze| ny|o k|eme|eƒe|o n|iam|egb|mɔn|blɔ|i n|wɔ |a m| eƒ|o d|alo|siw|ɔɖe|lo |o m|eke|e g| bu|eny|ubu|ŋut|ɔ s|bub|lɔɖ|enɔ|meg|akp|abl| ha|e t| ta| go|mek|eɖo|ukp|li |nɔn|to |any|a l|etɔ|ɔ ƒ| ey|e h|nuk|gom|ɔ ɖ|ɔe |bɔ |ɖo |i s| to|anɔ|a k|ɔnɔ|e x|awɔ|e ƒ|tɔ | ƒo|mev| es| ɖo|ɖes| xe|i w|tso| wò|wɔw|mɔ |iaɖ|i l| ag| li|ã |o ƒ|odz|a s|agb|yen| ts|bu | he|bet| gb|o e|ewo|a e|ɔna|i d|ti |ele|dɔw| ka|i a|uti|peɖ|ta | an|afi|a ŋ|a ƒ| ad|ƒom|se |ɔwo|xex|exe|oma| ma|vin| dɔ|o l|wɔn|eye|a n|i t|vi |ɔ b|so |edz|gbɔ|ɖev|ado| se|ɔ n|oto|ene|eɖe|xɔ |nan|ɖod| af|ben|zin|ee |de |ɖok|dzɔ|gɔm|adz|ɔ k|wom| gɔ|uwo|i ɖ|a d| vo|a t|o g|i b| xɔ|oɖo|i m|e v|ats|o ŋ|sɔ |ovo|i e| at|vov|ne |ɔ e|kat|o s| ne| aw|da |wòa|eŋu| as|asi| el|o t|yi | sɔ|men|a b|ze |mee|uny|te |dom| ak|man|ẽ |i o|ie |ana|ata|ui |axɔ|u k|ɖoɖ|tsi|ema|rɔ̃|ded|ɔ g|ena| en|kɔm|met|u s| eɖ|oku|kui|mew|xem",
    "slv": " pr|in | in|rav|pra|do |anj|ti |avi|je |nje|no |vic| do|ih | po|li |o d| za| vs|ost|a p|ega|o i|ne | dr| na| v |ga | sv|ja |van|svo|ako|pri|co |ico|i s|e s|o p| ka|ali|stv|sti|vsa| ne| im|sak|ima|jo |dru|nos|kdo|i d|akd|i p|nja|o s|nih| al|o v|ma |i i| de|e n|pre|vo |i v|ni |red|obo|vob|avn|neg| bi|ova| iz|ove|iti|lov|ki |jan|a v|na | so|em | nj|a i|se | te|tva|oli|bod|ruž|e i| ra| sk|ati|e p|aro|i k| ob|a d| čl|eva|rža|drž| sp|ko |i n| se| ki|ena|sto|e v|žen|nak|kak|i z|var|ter|žav| mo|di |gov|imi|va |kol|n s| z |mi |ovo|rod|voj| en|nar|ve | je|pos|a s|ego|vlj|jeg| st|h p|er |kat|člo|ate|a z|enj|n p|del|i o|lja|pol|čin|a n|ed |sme|jen|eni| ta|odn| ve| ni|e b|en | me|jem|kon|nan|elj|sam|da |lje|zak|ovi|šči|raz|ans|ju |bit|ic | sm|ji |nsk|v s| s |n v|tvo|ene|a k|me |vat|ora|krš|nim|sta|živ|ebn|ev |ri |eko|o k|n n|so |za |ičn|ski|e d| va|o z|aci|cij|eja|elo|dej|si |nju|vol|kih|i m|nst|kup|kov|uži|la |mor|vih| da|h i|lju|otr|med|o a|sku|rug|odo|ijo|dst|spo|tak|zna|edn|vne|ara|ršn|itv|odi|u s|čen|boš|nik|avl|akr|e o|vek|dno|oln|o o|ošč|e m|ta |vič|bi |pno|čno|mel|eme|olj|ode|rst|rem|ov |ars| bo|n d|ere|dov|ajo|kla|ice|vez|vni| ko|ose|tev|bno|užb|ava|ver|e z|ljn|mu |a b|vi |dol|ker|r s",
    "ayr": "apa|nak|aka| ja| ma|ata|ana|aña|asi|aqe|cha|aki|ñap|jha|mar|aw |kan|ark| ch|una|aru|paw|ti |jh |pat|jaq|rka| ta|a j| ar|hat|ama|tak| wa|ach|iw |a a|ani|a m|spa|na |kap|ki |taq|pa |jan|sa | uk|qe |kis|kas|ha |ina|niw|may| kh| am|at |ati|pan|i j| ya| mu|iti|ka |ayn|t a|as |amp|ch |a u|an |pjh|yni|mun|iña|uka|ajh|ru |w k|hit|ñan|h a|is |isp|qen|khi|isi|has|ejh|e m|sis|atä|oqa|nch|rus|kam|siñ|han|mpi|kañ|qha|sin|asp| in|ham| uñ|ñat|hañ|qat| sa|yas|yat|ita|äña|ska|tap|asa|kha|sit|täñ|tha|arj|ma |a t|ta |tas|nka|sti|iri|sna| ji|a y|ara|pas| as|ñja|rjh| ku| ut|hap|tat|kat|tis|pi |apj|jam|noq|aya|i t|i u|ukh|ura| ka| ju|ans|qas|uñj|asn|a c|nin|aqa|kaj|nañ|sip|i a|us |i m|kun|w u|anc|api|ino|ili|uya|pac|tan|jil|ña |lir|utj|w j|s a|ipa|chi|kiw|w m|kak|muy|pis|rak|hac|isa|njh| lu|mas|amu|ena|nsa|w t|nan|ali|s j|ink|tay| a |upa|wak|a k|way|wa |in | ay|tañ|s m|jas|mp |lur|ank|khu|rañ|h j|t m|iru|eqa|ayt|yt |heq|che|anq|en |lan|rin|ipj|i c|mat|qpa|aqh|tja|awa|uki|k a|qej|anj|sap|pam|usk|yaq|kar|nip|llu|wal|run|yll| aj|lin|a w|ayl|n m|jac|isk|naq|ast|h u|ni |ath|a i|ayk|jhe|aqp|h k|uch|inc|hus|sar|s u|s w| pa|nap|ap | un|ak |n j|tir| ak|ns |s c|ust|arm|ask|war|ri |man|pit|qer|juc|sir|n w|hik|ika",
    "bem": " uk|la |uku|wa |a i|a u| mu|kwa|ali|ya |shi|a n|amb| na|sam| pa|ula|ta |nsa|fya| no|nga| ya|mbu|bu |ata| in| ku|a m|lo |se |nse| ba|ntu|kul|ons|ala|ang|ins|aku|li |wat|mo |tu |alo|a a|ngu|ili|nok|ika|na |nan|a p|ing|a k| al|mu |gu |o n|sha| ca|ila|oku|e a|ikw|yak|ka |lik| um|ana|lin|yal|ga | ci|aba|lwa|ku |ish| fy|uli|a b|u u|unt|i n| on|kal|lil|u y|ba |hi |ukw|amo|po |ulu|kan| sh|kup|ko |we |and|a c|aka|le |u n|cal|o u|ha |ile|ama|umu|bal|kus|akw|u m|mul| if|o a|kut|nsh|o b|ung|apo|e n|kub|mun|uci|yo |mbi|nka|cit|bul| ab|any| bu|pa |ne |u c|u b| ka|abu|ndu| fi|e u|a f|ton| ne|ant|no |i u|u a|ban|o i|cil|cin|ify| ng|pan|tun|gan|nda|kuc|kwe| ns|o c|ngw|o f|ans|fwa|a l|pam|tan|ti | am|kum|kuk|lan|u s| is|wil|du |nya|und| ic|e k|wal|aya|bi |bil|ubu|ush|fwi|int|nta|utu|twa|wab|afw|ela|o m|uko|ako| ta|lam|ale|gwa|win|u k|apa|ma |onk|way|kap|i k|imi|a o|upo| im|iwa|mba|o y|ngi|ici|pak|lul|ind| ma|e p|de |nde|gil|e b|iti|uti|ilw|a s|imb|da | li|uka|hiw|umo|pat|afu|kat|ine|eng|fyo|bun| af|uma|kuf|alw|til|ita|eka|afy|mas|e y|tul|but|nto|usa|kwi|mut|i i| ak| ap|bom|umw|sa |ont| wa|ilo|u f|baf|fik|ina|kab|ano|pal|ute|nab|kon|ash|bwa|ifi| bo| bw|lya|atu|ubi|bik|min|aik|cak|nak|men|ubo|ye |hil",
    "emk": " ka|a k|ka | la| a |la |an |kan| ma|a l|ni |ya |na |ama|a a|lu |n k| di|ɛɛ |di |a m|ma | bɛ| ja|ana|a b|aka|bɛɛ|man|iya|a d|ara|dɔ |jam|alu|en |a s| si| sa| mɔ|mɔɔ|ani| ye| dɔ| tɛ|ye |i s|i a|den| ba|riy|tɛ |sar|ɔɔ |da | al| kɛ| ni|ari|ila|a j| i |a t|n d|ɛn |ɲa |kak|ra |ada|ɛ k|i k|i d|len|u d|ele|nna|sil|n n|n m|olo| se| bo|ade|aar|ɔdɔ|ɛ d| kɔ|ɔ a|ank|ɔn | fa|fan|a ɲ|se |lak|lo | da| na|bol|kel|e k| wo|i m|aya| ke|ko | ad| mi|nu |baa| sɔ|dam|nda|ɔnɔ|mɛn| ko|a f|and|ala|ɛ y|ɔ b|ɛ s|le |ɛ m|i l|i b| wa|n s|a i| de|ina|li |ɔya|mad| mɛ|aba| le|n a| ha|a n|ɔ s|u l|nɲa|han|n b|sɔd|dɔn|kɔn|kɛ |ata|nɔ |kar|dan|in |u k|ɔ m|kɛd|ɛda|i j| su|nnu|a w|ɔ k|nka|lat| gb|ɲɔɔ|aji| an|a h|nin|olu|u m|kun|a g|on |asa| ku|ibi|jib|don| lɔ|i t|waj|bɛn|ɛnn|ban|ɔrɔ|wo |ran|si |ɛ b|ɛnɛ|ɛ l|mak|suu|e m|ii |i f| ɲi|e a|o m|ɲin|enn|usu|ba |ɛdɛ|yan|taa|nan|u b|u t| ɲa|nal|nba|ɲɛ | ɲɔ|law|ati|nad|rɔy|hɔr|a y|iri|sii| hɔ|mir|ti |enɲ|bɔ |u s|n t|u y|ini| te|ta |kol|enb|awa|bat| fu|nki|kil|ili| du|bar|ɛ j|fɛn|fɛ | do| dɛ|gbɛ|su |uus|aam| ta|afɛ|may|lɔ |nni|ɔnn|lɔn|maf|o a|e d| bɔ|din|sab| fɛ|ɔ j|o y|i w|tan|ɔɔy|dɛɛ|bɛd|kad|min|ɔlu|dal|ɔɔl| tɔ|ɔɔn|e f|biy|ali|e b|kɔd|te |wol|bi |e w| mu|ida|du |ant|nɛn|dɛ |ɛ a|dah",
    "bci": "an |be | be| ɔ |un | i |ran|sra|wla| sr|kwl|in |la | kɛ|n b|kɛ |n s|n k| kw| ng|n n|lɛ |a b|n m|le | nu|a k|nun|i s| a |man|n i|ɛn |e k|ɛ n|kun|n ɔ|mun| ni| ti| mu|nin|nga|ti | n |ɛ ɔ|e n|ɔ n| su|ga |ɔ f| fa| ku| li|e s|su |a n|a s|a ɔ|ɛ b|i n|e a| sɔ|wa |sɔ |i k| ma| le|ɛ i|tin|ɔ k|di | at|ata|ta |ɔ l|fat| mɔ|ati|mɔ |lik|akw|ɛ m| sɛ|lak|e w| sa|dɛ |ndɛ|mɛn|i b| mm| yo|iɛ |ba | nd|nvl| nv| kl|vle|sɛ |a a| mɛ| fi|ke |und| wu|ɛ s|n a|mml|liɛ|mla| ka|ike|yo |ɔ t|ngb|i a|e b|a m| an|ɔ ɔ| di| yɛ| si| bo|e t|ndi|bo | ye|o n|n t|e m|fin|e y|n f|sa |ɔ b| fɔ|dan|n y|fa |i i|uma|yɛ | ju| ny|ɔ i|nan| na|kan|ɔun| tr|wun| b | o |n l| aw|a y|b a| wa|fɔu|i f|ɛ a|ing|ge |uɛ |i w|a w|nge|klu|ka |gba|e i|awa|o m|jum|ɔ y|ɛ k|wie|a i|ie | fl|e f| wl|tra| ba|lo |lun| ak|ang|ye | wi|e l| kp|uan|i m| uf|uwa|n w|sie|flɛ|kpa|alɛ|luw|flu|o i|kle|ua | da|nyi|nzɛ|wuk|ɔ s|wo |e ɔ|ika| wo|wan|bɔ |ian| bl|wlɛ| bu|anz|o ɔ| af|aci|u b|bu | ya|ɛ w|ufl|bɔb|te |zɛ |ɔ d|a t|elɛ|i t|ci |nua|fuɛ|ɔbɔ|u i|anm|i l| w |w a| bɔ|o b|lu |se |u m|ilɛ|iɛn| ja|a j|afi|i ɔ|n u| se|unm|nda|yek|bɛn|gbɛ|eku|ɛ l|nma|kac|u s|san|ko |o y|o s|a l|u n|si |anu|aka|any|ɛ d| ko|n j|ɔ w|u a|fi | yi|anw|i j|uka|fiɛ|a d|o a|lel| kɔ|ɔlɛ|ɔn |a f",
    "bum": "e a|an |od | mo|e n|ne |am |mod|se |e m| me| ab|ai | ai|na | os|e e| na|a a| ak| ng| an|ose|a n| y | en|nna|y a| nn|le |nam| dz| be|a m|d o|nde|i a|iñ |n a|ane|i n| a |de |ie |ele|end| as|e d|nyi|bel|abe| ya|ven|a b|li | bo|mve|ki |asu|ya | et| ay|ge |da |su |be | bi|ngu|bia|i m| e |m a|ia | mi|ul |yiñ|gul|ene|eny| ki|oe |bod| mb|ili|dzi|e b|yia|ian|ebe|i e|en |l y|ala|og | mv|e y|oñ |ege|nge|ñ a|om |ayi|la |dzo|mem|ve |a e| nd|bog|eti|ñ m|d m| ma| fi|fil|nda| ek|tob|bo |e k|emv| at| te|n e|ñ n|o a|min| ny|m e|e v|ban|fe |abo|woe|u m|uan| to|g a|ga | fe| wo|e f|ben| nt|mbo|abi| se| si|nga| da|lug| ve|oan|beb|d b|k m| ad|ulu|lu |aye|zie|d a|añ |a f|ial|akō|kōk|n m|ato|ōk |eku|a s|ñ b| al|di |zen|o e|n k|tie|zia|n b| ba|men|te | nk|m y| vo|ese|si |e t|man|do |óñ |u e|o m|e o|ma |ad |sie|eñ |noñ|lad|ela|ae |kua|gan|aka|i b|obo|alu|ug |m m| eb|me |e s|em | ze|ond|ama|sog| no|teg| ey|u a| es|yóñ|edz| mf|m w| fu|oba|ako|eyó|e z| di|m o|ye |ali|to |vom| el|ñ d|bi |mis|n n|n y|kom|dze|inn|i d|tso|is | so|ñ e|l a|m n|boa| fa|fam| zi|zo |ii |ing|dza|ndo|sal|mam|s m|ui |d e|any|ndi|kal| ye|s a|esa|nts|eyo|oga|ses|mey|ete|ziñ|ol |uma|i s|ake| ev|u n|voe|yoñ|a o|zom|m s|yae| ob|bon|kam|ó m|kya",
    "epo": "aj | la|la |kaj| ka|oj | de|on |de |raj| ra|iu |ajt|as |o k| ĉi|e l|j k| li| pr|eco|aŭ |ĉiu|jn |ia |jto|est| es| al|an | ki|pro|io | ko|en |n k|kon| ti|co |j p|o d| po|ibe| aŭ|ro |tas|lib|ber|aci|toj| en|a p| ne|cio|ere|ta | in|to |do |o e|j l|n a|j d| se|a k|j r|ala|j e|taj| re|rec|iuj|kiu| pe|o a|ita|ajn|ado|n d|sta|nac|a a|nta|lia|ekt|eni|iaj|ter|uj |per|ton|int| si|cia| ha|stu|a l|je | je|al |o ĉ|n p|jta|tu | ri|vas|sen|hav|hom| di| ho|nte|a e|ali|ent| so|nec|tra|a s|ava|por|a r| na|igi|tiu|sia|o p|n l|ega|or | aj|soc|j ĉ|s l|oci|no | pl|j n|kto|evi|s r|j s|ojn|laj|u a|re | eg|j a|gal|ers|ke |pre|igo|er |lan|n j|pri| ku|era|ian|rim| fa|e s| ju|e a|ika|ata|ntr|el |is |u h|li |ioj|don|ont|tat|ons| el| su|go |un | ke|ebl|bla|n s|oma|ĉi |raŭ|kla|u r|ne |ili|iĝo|o t|s e|tek|men|nen|j i|nda|con|a d|ena|cev|moj|ice|ric|ple|son|art|a h|o r|res| un|u s|coj|e p|ĝi |for|ato|ren|ara|ame|tan| pu|ote|rot| ma|vi |j f|len|dis|ive|ant|n r| vi|ami|iĝi|sti|ĝo |r l|n ĉ|u l| ag|erv|u e|unu|gno| ce| me|niu|iel|duk|ern| ŝt|laŭ|o n|lab|olo|abo|tio|bor|ŝta|imi| ed|lo |kun|edu|kom|dev|enc|ndo|lig|e e|a f|tig|i e| kr| pa|na |n i|kad|and|e d|mal|ono|dek|pol|oro|eri|edo|e k|rso|ti |rac|ion|loj|j h|pli|j m",
    "pam": "ng |ing|ang| ka|an | pa|g k| at|ala|g p|at |apa| ma|kar|lan| ki|ata|kin|pam|g m|ara|tan|pan|yan| a |pat| in| ba|aya|n a|g a|ung|rap|ama|man|g b| ni| di|nin|din|n k|a a|tin|rin|a k|ami| la|tun|n i|ari|asa|nga|iya|ban|ati| me|nan| da| sa| na|t k|gan|g s|bal|etu|mag|a i|met|sa |la |ant|kal| iy|kap|a n| mi|in |ya |aka|tau| o |san|n d|au |lay|ana|mak|yun|na |ika|a m|ipa|ran|atu| al|n n| ta|ti |ila|g l|ali|kay|nsa|aga|a p|iti|g t|par|u m|ans|nu |al |g i|t p|iwa|a d|syu|t m|sab|anu|un |uli|mip|ra |aki|aba|u a|mal|as |mil| it|una|bla|abl|ita|awa|kat|t a|ili|kas|g n|lag|da |tas|i a|wa |n l|lal|dap|mas|bat| pr|abi|ap |a b| e |mik|ani|sal|li |ad | an|ral|ira|gal|a r|lin|g d|nte| li|ale|kab|e p|ula|wal|lit|nti|s a|lip|nta|pro|te |ie |wan|ag |tu |upa| ya|g e|tek|usa|g g|bie|o p|it |pun|ian| bi|lat|aku|be |n p|sas|iba|yat|alu|tul|e m|kan|l a|nap|t i|lir|u k|isa|pag|abe|len|e k|rot|en |bil|mam|ksy|ngg|lam|p a|ily|liw|eks|ote|n o|gga|u i|eng|ipu| tu|lya| ri|aul|pas|dan|uri|ema|lab|ta |lak|are| ar|ail|tam|o a| ke|ril| pe|sar| ra|ina|asi|ka |art|pak|sak|mit|rel|i k|gaw| ul| re|inu|i i|mun|abu|asy|mba| pi|ags|obr|gpa|a o|am |n m|mem|o k|isi| mu| nu|mis|nun|era|ndi|ga |agp|aun|mab|anm|lub|gla|e a|nme",
    "tiv": "an | u | sh| na|nan|en | a |ha |sha|shi| i |er |a i| er|or | ma|ar |gh |n i|n u|a m| ve| ci|n s|han|u n| ke|lu |man| lu|n m|yô |a u|u a|n a|r n|a k|mba|in |ii | ha|kwa|ken|n k|na |hin| mb|a a| kw|n n| ga|ga |cii|agh|a n|aa |wag|ve |a s| yô|nge|ba |r u|u i| gb|ana| or|a t|mao|r i|ity|ma |aor|anm|nma|gen|oo | ta|ir |ren| kp|i n|ang|r m|e u|gba| ng|r s| ia|ere|ugh| it|ian|doo|ese|uma|kpa| la|u k|n g|ngu|gu |om |oug|on |ol |a h|ior| ts| he| ne|tar|h u| ka|la |n t|se |e n|r a|a v|hen| ku|aha|mac|yol|i u|ace|ge |ce | de|ish|u t| io| do|tom|hi |a e|u u|o u|i m|iyo|i d|bar|ave|ua |u s| te|igh|a l|e a|m u|a w|un |n c|n e|ne |ev |r k|ind|ene|sen| is|ndi|ker|era| to|a o|ima|u v|a g|paa|n h| wo|di |yar|tya|ase|e s|de |n y|ee |end|him|tes| mk|u m|ka |tyô| mz|won|u e| um|u h| wa| mi|yan|tin|ran|ie |hie|a c|hir|i a|e k|i v|mak| in| za|r c|nen|e l| ig|i k|kur|nah|tse| ik|ves|eng|rum|mzo|men|zou|i l|e i|a d|i e|i i| ya| vo|mlu|ô i|inj|nja| as|vou|ura|ron|gbe| iy|r t|ôro|a y|oru|e e| zu| ti|ra |n l|ci |u l|ver|kpe| fa|was| ml|e m|em |io |mi |da |civ|môm|ant|see|ivi|wan|vir|nda| ij|soo|zua|lun|ea |vea|wa |ôm |av |hio|ake|a f|igb|l i|u z|r l|zan|nta|e g|hem|h s| mt|ded|iky|o s|r g|do |ndo|iji| hi|e h",
    "tpi": "ng |ong|lon| lo|im | ol| na|la | ma|pel|ela|ri |at | bi|ait|na | yu|ol |gat| ra|bil| ka|ilo|man|rai|t l|it |eri|mer| o |wan| i |mi |umi| wa|ing|yum|ta |t r|tin|eta|get|lge|olg|iga| ig| sa|ara|em |rap|i o|ap |nme|anm|in |ain|an |a m|ant|ape|nar|m o|i n| no|g o|g k|i i|as |ini|mas| me|n o|sim|tri|kan|kai|ntr| ga| st|a s| pa|gut| ha| wo|g y|yu |a l|g s|ama|m n|ok |g w|wok|spe|a k|i b|i m|g l|i l|sin|sam|pim|m l|kam| gu|l n|amt|tpe|g n| in|ts |a i|mti|utp|isp|kim|its| la|isi|aim|api|lo |o m|g b|tai| di|a o|dis|a t|p l|en |map|t w|s b| lu|luk|sem|no |tim|lai| ko| ki|ave|ols|nog|m k|lse|sav|nem|ve |a p| fr| em|nim|tu |i y|nka|et |m y| ti|g t|nap|g p|sta|tap|aun|a n| tu|un |asi|fri|pas|n m|m g|l i|aut|ane| sk|kau|t n|nta|sen|n s|oga|i g|g g|m i|kis|o i| ba|tok|os |usi|m s|ngt|anp|a w|s n|a h|s i|iki|i s|sai|l m|npe|ari|o l|o b|g r|ik |uti|iti|gti|aik|ut | to|a g|ili|a y| pi| ta|kin|ni |n b|lim| ye|yet| we|k b|ina|g m|uka|str|ins|rid|a b|anw|nsa|nwa|m w|m m|dom|ot |hap|ido|aus|i w| ne| si|n i|t o|dau|ese|rau|ank|sap|o k|m b|nin|pos|o n|am |go |s o|s l|u y|pik|vim|ivi|es | go|n n|kot|ron|ple|g d|a r|kul|ali|sku|apo|om |g h|l l|s s|ti |les|t m|gav|eki|nai|mek|kom| as|ind|nda|ip |liv|ul |ati",
    "ven": "na | na| vh|a m| mu|ha | u |wa |tsh|a n|a u|we |hu | ts|vha|nga| ya|ya |a v|lo |vhu|ṅwe| dz|thu|ane|ho |ana|o y| kh|shi|a t|ga | pf|e n| zw|elo|uṅw|sha|muṅ|nel|a p|ne |fan| ng|pfa|uth|a k|edz|kha|u n|dza|ele| a |mut|aho|zwa|a h| ha| ka|kan|o n|a z| hu| mb|dzi|la |vho|wo |za |zwi|ang|i n|fho|han|hum|u v|lwa|ela|a d|e u|u m|o d|u t|mul|olo|aka|ḓo | wa|o v|hol|e a|ofh|u s|no |si |gan|mbo|hi |ano|he |zo |shu|o k|ula|hak|low|zi |ka |led|lel| ḓo| ma| sh|bof| i |o m|hat|e k|dzw|yo |o t|o h|ngo|owo|elw|tsi|rel|ath|o i|a s|hon|its|sa |dzo| te|awe| mi| nd|go |a i|mba|avh|umb|isa|wi |hil|iṅw|ing|nah|unz|ni |and|i h|ine|a l|mis|e v| lu|i k|e m|swa|ṱhe| ḽa|li |mbu|i t|a y|vel|a ḓ|one|dzh| ḓi|ush|evh| fh|lan|hut|uts|alo| si|oṱh|het| an|amb| it|sir|ire|vhe|u k|nḓa|ea |mo |eth|tea|ḓa |u a|wan| bv|o a|ila|nda|ri | sa|o ḽ|i m|hus|zan|ndu|fha|uri|ou |ḽa |ivh|umi|ulo|adz|a a| ur|wah|fun|khe|a ṱ|isw|le |i v|ayo|she|e y|kon|hen|hul|o u|o w|ule|zit|anḓ|thi| ny|hun|hel|ung|i ḓ|uvh|a f|u d|bve|kat|hal|hav|ura|u w|nyi|pfu|lay| ho|iwa|tel|u h| ṱh|oni| o | ko|mbe|mus|hin|alu| th|san|u ḓ|zwo|huk| fa|u i| ṱa|zhi|du |o z|hit|udz| yo|usi|a w| ḽi|pha|lev|mir|eli|i i|u ṱ| iṅ|hoṱ|win|hed|so |ira|hir|ṱho|mur|ala| li",
    "ssw": "nge|eku|a n|ntf| le|e n| ng|tfu|lo |la |nga| ku|fu | ne|o l|khe|tsi|nkh|le |he |unt|elo| lo|si |ele|a l|ni |ung|mun|ma |lun|lel|wa |lek|nom| um|eni|oma| no|kut|hla|onk|a k|e l|ent|e k|gel|ela|ko |eli| ba| la|pha|ats| em|o n|ang|ema|eti|nel|nye|ban|ulu|uts|hul| na|aka|tfo|e u|lan|oku|lok|won|khu|esi|lul|a e|ule|ala|umu|tse|akh|ye |ve |i l|nek|ana|ane|lil|kwe|aph|na |we |ke |aba| wo|nti|ndl|ale|i n| ye|ba |ilu|gek|gan|lab|any|hat| li|tin|wen|gen|kel|len|ndz|fo |and|let|eko|e b|lwa| ka|te |set|nem| kw|mal|ka |ant|alu|ne |phi|ing| un|u u| ek|ise|une|e e|kul|nal|lal|mph|o y|uhl|fan|‐ke|ile|i k|kub|ukh|ben|kan|ako|a b|kat|eke|ive| ti|sek|nak|sit|seb|u l|alo|yel|kho|wo |kha|les|o e|ngu|kus|lom|ini|ikh|elw|isa|sa |fun|e w|ebe|o k|jen|iph|eng|kwa|ahl|uph|emb|be |tis|lwe| si|etf|isw|uma| se|ene|ta |nan| im|i e|enk|e a|abe|kun|ume|hak|nen|dle|ase|sen|kuv|tel|ebu|omu| in|lin|sel|tfw|nhl|a i|e i|kuk|uba|ti |kuf|mhl|bon|ula|sin|int|fut|dza|lak| wa|ind|ave|ali|yen|ete|to |ngo|use|kuh|hol|ze |a‐k|ona|a a|se |nje|und|swa|lon|eki|ike|i a|lis|tsa|gab|sim|i w|its|fol|e t|o m|hi |ndv|phe| ya|ma‐|utf|sik|liv|bun|cal|nta|ata|gal|mel|ute|wem|gap|han|uny|oba|alw|ili|a w|mbi| bu|gob| at|awo|ekw|dze|u n|emp",
    "nyn": "omu| om|ntu|tu | ku|a o|ra | ob|wa |obu|ari|a k|mun|a n|unt|mu |uri|nga| mu|aba|ri |a e| na|e o|gye|rik|ho |a a|han|ang|re |ga |iri|bwa|oku|aha|bur| bu|na |eki|ka |iku|ire|uga|ndi|ush|ban|ain|ere|ira|we |kur|sho| ek| ab|ne |ine|a b|and| ni|u a|e k|sa |u b|iha|i m|e n|kir|be |aho|bug|ibw| eb| ba|ing|ura|gir|u n|kut|ung|ant|abe| ah|ye |e b|i n| bw|kwe|ebi|era|iki|ba |ro | kw| ok|uba|gab| no|zi |bir|i k|u o|o o|rwa|o e|kub|end|ama|mer|eka|kug|ate|tee|di |rir|bus|kuk|rin|ish|sha|i b|wah|ha |u m|bwe|ngi| ai|ara|kwa|kan|o g|za |ngo|kuh|ana|i a|eme|eek|i o|baa| ka|go | gw|nib|zib|ash| or|iro|she|o k|u k|iin|o b|iba|oon|gan|agi|ngy|hem|mwe|ona|oro|bwo| ar|ya |i e|uru|nar|eir|uta|tar|kwi| ti|egy| n |hi |bar|isa|ute|o a|shi|ora|e e| en| ki| nk|riz|nda|da |ja |si |nsi|wen|yes|tek|yen|aga| am|o n|rei|rag|ki |obw|mur| ha|ris|wee|amb|aab|bya|kus|ugi|a y|ind|ata| ne|bas| ky|ija|hob|ikw|mus|gar|a g|eky|dii|bor|aar|ibi| we|aka|ham|emi|ekw|rer|ini|har|gi | bi|naa|kor| er|gwa|n o|iza| by|eih|yam|iho|rih|i y|ete|o m|eby|but|a r|ika|mag|ozi| em|ong|iik|iko|uka|nik| yo|sib|eri|utu|tuu|amu|uko|irw|nka|ani|yaa|u e|mut|roz|mub|ens|aij|nis|uku|kye|nde|der|e a|nok|nko|asa|aas|hab|obo|ent|ahu|rye|oba|kih|yob",
    "yao": "chi|ndu| wa|du | ch|a m|aku|akw|ni |kwe|und| mu|wak|wan|mun| ku|la |e m|wa |ulu|amb| ak|kut|u w|ali|mbo|lu |we | ma|le |ufu|ful|ila|a k|bo |a n| ga| ni|amu|kwa|se | na|ose|hil|nga|go |aka|and|ang|na | uf| pa|ete|uti|jwa|kul| jw|son|ngo|lam|e u|ne |kam|oni| so|u j|e a|ele|a c|ana|wal|ti |isy|cha| yi|gan|te |ya |mwa|lij|wet|che|ga |yak|ili|pa |e n| ya|o s|nda|i m|ula|jos|i a|ile|ijo|li |e k|o c|a u| mw|ich|mul|uch|o m|asa|ala|kas| ka|i w|ela|u a|ach|his|nam|lan|yin|i k|ind|ani|sye|yo |si |pe |gal|iwa|man|sya|aga|a w|o a|ule|ikw|asi|kus|ope|ma |gak|e w|jil|kap|hak|ika|ite|aji|mba|u g|ase|mbi|kum|uli|any|ape|a y|ekw|mal|imb|ja | al|end| ng| ja|mas|usi|kup|e c|pen|ye |anj|ka |a j|a p|lem|o n|ama|him|ago|sen|eng|ane|ako|mch|ola|och|oso|ena| kw|sop|lek|pel|gwa|hel|ine|gam|u y| mc|i y|awo|ons| mp|ole| li|wo |i u|hik|kol|auf|mka|tam|syo|e y|mpe|ten|ati|mau|nji|wam|muc|ong|i g|kan|uma|je |iku|nag|kwi|da | ul|cho|ngw|ene|iga|ano|esy|ion|upi|pag|o k|eka|wu |uwa|kuw|sa | un|a l|bom|iya|uni|jo |ale| ji|apa|yil|lil|uku|i n|o g|a a|o w|waj|mus|ipa|pan|pak|one|i c|ujo|duj|emw|nya|tio|jak|oma|nja|hiw|dan|apo|e j|poc| wo|lic|alo|eje|ing| mi|e p|lo |lig|a s| yo|ung|no | m |upa|ata| bo|nde|he |i j|was",
    "lav": "as |ība| un|un |tie|ies|bas|ai | ti|esī|sīb|ien| vi|bu | ir|vie|ir |ību| va|iem|em | pa| ne|s u|am |m i|šan|u u|pie|r t| ci| sa|ās |vai| uz| ka| pi| iz|brī|rīv| br|dzī|cij|ena|uz |ar | ar|es |s p|isk|nam| ap| at|ot |āci|inā|viņ|kvi|ikv| ik|vis|i i| no|s v|pār| ie|ju |u a|nu |edr| pr|vīb|īvī|drī|iju|dar|ilv| st|cil|lvē|iņa|s i|s t| la|ana|u p|i a|kā |n i|īdz|s s|tīb|ija|vēk|jas|cie|ka |aiz|īgu|tu |gu |iec|ām |arb|ied|ībā|s b|val|bai|līd|īgi|s n| jā|umu|zīb|t p|u v|lst|als|ska|kum|mu |a p|st |vēr|n p|gi |s l|aut|jot| tā|ama|arī|n v|stā| ai|izs|kas|anu|sta|u n| da| ta|s a|u k|ojo|ba |ņa |nīg|ā v|jum|stī|sav|m u|u i| kā|s d|not|u t| so|iev|a u|cīb|son|ā a|mat|i u|līb|u d|a s|nāt|nīb|nāc|i n|s k|ajā|rīk|rdz| dz|ned|kat|pil| pe|per|ēro|kst|i v|īks|cit|līt|pam|ekl|os | re|tau| li|evi|evē|i p|jā |ma |u s|t v|bā |kur|rīb|ras|bie| pā|a a|tis|a v| be|jeb|ciā|skā|oci| ve|soc|roš|abi|rso|būt|bez|zsa|ers|āda|t s|atr|t k|ieš| je|sar|nev|ais|oša|īša|nas|kād|enā|n b|uma|a t| lī|eci|lik|iku|ebk|mie|nod|roj|īga|ts |ēt |arp|tar|iet|aul|du |sab| de|tīt|iāl|ard|āt |tās|glī|zgl|ant|izg|tik|ta |isp|r j|spā|na |paš|tra|tot|pre|ret|ecī|eja|lie|ā u| ku|īst|ikt|ier|kt |eno|ēka|dro|oši|t t|klā|i k|rie|tā |arā",
    "quz": "una|an | ka|nan|cha|ana|as |apa|pas|man|lla|aq |sqa|ta | ru|run|kun|ach|qa | ll|pa |paq|na |nta|chi|npa| ma|nch|aku|anp| ch|in |a r|ant|hay|mi |taq|ay |ama|asq|qan|tin|kuy|chu|lap|a k|yta|a a|ima|wan|ata|spa|all| wa|n k| ja|ipa| ya|nin|ina|aqm|his|qmi|a m| ju|pi |anc|nap|iku|aus|usa|kau|pan|nak|kan| mu|naq|aqt| pa|kam|aqa|kay|i k|kus|un |ank|isq|nku|may|yku|ayn|a j|a l|ayt|qta|ati|a p| pi| ri|aci|lli|lin|ayk|uku| al| at|n r|yac|ion|pip|han|inc|n j|ayp|yni|qpa|nac|say|asp|uy |mac|s m|cio|awa|a c|laq|tap| yu| im|a y|yoq|n m|asi|mun| de|has|n a| as|n c|int|uch|nma|s k|oq |ari|q k|hu | na|ypa| tu|tuk|tun|atu|rim|q r| sa|jat|yan| ji|nat|anm|jin|a s|api|hik|uya|nti|pac|tan|ash|mas|n p|n l|k a|ura| su|a q|yuy|n y|ech|q j|unt|yay|ypi|is |lan| qa|usp|kas| an|a w|s w|inp|sin| ta|ma |a t|shw|q a|hwa|uyt|nmi|sim|ere|rec|der|uma|s t|isp|n t|ña | ni| ay|upa|nam|hur|war|waw|imi|nka|sap|kaq|s j|was|y r|usq|kin| un|inm|qas| si|ani|tiy|t a|sta|pay|pis|maq|hin|ha |arm|npi|rmi|ink|aqp|q c|la |i p|nis|yma|nk | ku|aym|nal|hak|rik| ti|unc|niy|y s|iyo|juc| qh|ist|pap| aj|s y|cho|onq| re|ayo|iqp|n s|s p|os |i m|t i|ras|ita|piq|qsi|ku |yqa|mik|q y|eqs|pat|tak| pu|lak|i r|ipi|iya|ywa|muc|a n| qe|san|jun|y l",
    "src": " de|de |e s|os | sa|tzi|tu | su|one| a |sa |ne | e | in|ent|ion|der|su |zio|ere|as |e d|a s|u d|ret|es | cu|ess| pr| so|s d|men|ale|ade|atz| s |re |e c|sos|in |s i|chi| un|nte|ten|etu|er | pe|et |e e|ida| te|le | is| ch|ene|are| es|a p| si|u s|a d|pro|hi |dad|te |sse|tad|zi |e t| on|e i|s e|nt |nzi|u a|sso|onz| co|ame|cun|tos|e a|sas|a c|ntu|net|na |e p|at |nes|du | li|t d|n s|son|s a| o |ber|ro |pes|u e|int|zia|nat|i p|ia |res|nu |un | re|sta|s p|ter|era| po| di|per|s c|t s|rar|ser| at|e o|s s|ibe|lib|si |tra|ust|u c|rta|unu|cus|ntz|adu| to|da |nal| na|ant|egu|eto|und|ine|i s|a e|otu|u p|t a|ert|est| da|a a| fa|ist|ona|pod|s o|pre|iss|ra | ma|ica|tot|les|ntr|una|sua|con|dae|ae |s n|man|sia|ndi|nid|ada|a l|nta|o s|a i|ua |ide| ne|otz|min|rat|iat| pa|nde|ode|dis|ren|ali|a u|ta |u o|sot|u t|ime|ssi| as|o a|pet|e u|nsi|fun|lid|epe|eru|unt|st |t e|end|us | fu| ca|ner|dos|s f|ass|nda|uni|das|iu |ind|a t|ial|a f|ghe|gua| eg|a n| se|ont|etz|s m|s ò|sti|t p|ual|nen| me|sen|com|ura|a b|lic|a o|pen|ado|nos|inn|des|seg|e f|din|òmi|ire|a m| òm|e l|dep|ènt|for|ena|par| tr|u i|ara|cra|sid| no|s u|u r|suo|e n|pri|ina| fi|ria|gur|art|det|s t| bo|tar|emo|run|ama|icu|isp|dam|e r|itu|cum|tut|eli| bi",
    "rup": " sh|ri | a |shi|hi |i s|ti |ea |ari|i a| ca|rea|tsi|i c| s |a a|ndr|tu |câ |dre|i n|ept|ptu|rep|li | nd| di| un|a s|are|i u|ats|la | la|i l|ear| li|lje|di |ati|lui|ui |a l| tu|tat|â s|ei |sea| ti| câ|un |jei|or |caf|afi| lu|â t| ar|ali|i t|fi |ilj|a c|bâ |râ |car|ibâ|lor| cu|nâ |icâ|a n|i d|s h|hib|tâ | hi|â a|si |u c|eas|tur|tul|ber|â c| in| co|lib|u a|n a|cu |ibe|u s|tea|lu |tsâ|ul |tse|int|a p|i i| pr|u p|i p|url|i m|lji|min|sti|alâ| al| pi|sht|nal|â n| si|ji |â p|rar|ert|sii|ii |nat|til|u l|sâ |lâ |â l|sta| nu| ic|i f|nu |ist|mlu|ili|a t|ots|uni|rta|a d|its|â d|pri| ts|oml|i e| de| na|sia| po|gur|tut| st| at| ân|ura|al |ita|anâ| ma|ips|can|oat|tsl| su| as| so|ând|nts| ap| ea|sh |nit| mi|ent|a i|ate| ac|poa|ilo|sot|ina|ash|ona| lj|âts|rli|lip|â i|unâ|t c|iti|bli| u |nji| fa|zea|tât|ril| om|urâ|con|i b|sig|igu|ntr|pur|par|ntu|let|com|iil| ni|eal|ind|r s|hti|at |ucr|art|adz|arâ|itâ|rtâ|inj|uri| eg| sc|atâ|sin|ral|pse|asi| ba|r a|apu|âlj|ia |chi| va|sun|ter|rlo|ica| pu|luc|unt|i v|ise|ini|est|ast|gal|ega|act|nda|ead|uts|a u|imi|ma |ra |pis|s l|ets|a o|va |pi |lit|scâ|asc|ial|sa | ta|rim|tar|alt|idi|tlu| gh|era|ant|eri|aes|a m| nâ| ae|oar|nea|pro|apt|ana|ta |atl|lic|l s|iun|nte|mil",
    "sco": " th|the|he |nd | an|and| o |al | in|ae |in |es |ion|cht| ta|tio|or |t t|ric| ri|ich|tae|on |s a|is |e a| aw| be|s t| he|ati|ent|ht |ts |e r| co|er | na| fr|bod|ody|his|dy |hes| fo|e t|o t|for|it |ng |ty |n t| or|be |fre|ree| hi|l a|ing|awb|wbo| sh|s o|ter| on|sha|nat|r t|nal|an |n a| as|hal|e o|y a|d t|tit| pe|l b| re|y h|aw | ma|nt |men|air|ce | pr| a | ti|hts|e f|e c|le |eed|edo|dom|n o|e s|ons|d a|res|e w|man| wi|d f|ed |sta|ar |t o|ona| it|ity|at |as |her|ers|t i| de|con|til|il | st|nti|e p|e i|e g|nce|ny | so| di|nte|ony|ns |und|ith|thi| fu|ie |ir |oun|ont|e e| un|pro|oci|nae|y i|lit|soc|com|nin|en |ic |ne |r a| me|ly | wa|ear|ual| en|ame|uni|r i|e h|hum| is|ane|uma|ess|inc| fa|equ| hu|ver| eq|e m|hei|o h|ms |d o| ha|wi |t n|s f| no|t a|int|cla|rit|qua|d i|iti| se|rsa|y s|ial| le| te|e d|r o|ive|r h| la|nit|om |ite|s r|cie|s i|ali|cti|cia|re |aim|rat|ld |tat|hat|rt |per|s h|n f|dis|tha| pu| we|g a|oms|eil|ntr|fai|tri|ist|ild|e u|r s|dec|lea|e b|hau|imi|mai|s n| ac|elt|lt |l t|omm|d p| ga|din|war|law|eme|y t|era|eir|art|ds |s e|ral|nor|tel|ge |g o|eik|eli|rie|rou|nda| gr|lan|mei|ate| ge|n i|ten|id |s d|ors|iou|bei|sam|nta|sec|mmo|lar| tr|ful|ul |mon|s w|anc|l o|gar|ern|ara|d s",
    "tso": " ku|ku |ni |a k|hi | ni|a n| a |i k|ka |i n|wa | ya| ma|la |ya |na |a m| ti| hi|fan| sv|nel|hu |a t|ane|ela| ka|iwa|u n| na|svi|lo |nhu|a l|a h|ele|le |ndz|u k|va | xi|a w|vi |mbe| à |elo|wu | wu|eli| mu|u y|mun|i l| le|nga|umb|lan|nfa| va|u l|be |u h|li |kum|tik|ihi|iku|aka|unh| wa|a s|liw|isa|i m| fa|ma |anu|nu |u t|han| la| ng| wi|wih| ha|a x|yel|a a|lel| nf|i h|ta |ana|o y|e k| nt|u a|i a|eni| li|ndl|ga |any| ko| kh|van|u w|u v|amb|a y|ti |sa |pfu|i t|i w|in |lek|e y|ang|and|ati|yi | è |irh|sva|mat|ani|i s| nd|a v|mel|yen|hla|isi|hin| ye|eke|n k| lo|ulu|kwe|hul|thl| kw|nth|tin|mah|wan|ava| mi|ko |khu|u s|à n|dle|lul|ule|tir|o l|i y|aha|aye|kwa|inf|à k|è k|rhu|mba| th|fum|end|anh|xi |dzi|kel|a f|u f| lè|we |may|eka|nye|gan|dze|vu |ham|xim|mis|thx|aku|tà |xa |hlo| tà|eyi|ima|nti|eki|ngo| si|u p|vak|ngu|lak|ume|oko|lon|a è|o n|lok| ta|zis|hak|u m|i à|ke |i x|u x|rhi|ha |awu|dza|u à|za | là|n w|ung|e n|a à|i f|esv|les|vik|siw| y |à m|to |mha|ola|sav|ond|nya|kot|kol|uma|e h|mbi|e s|naw|ths| dj|fun|mu |a u|xiw| ts| hl|u d| lw|nyi|ki |ong|sun|lwe|ike|ind|nis|xih|e a|èli|imu|sel|sek|iph|zen|lum| pf| xa|sin|umu|sim|ave|kar|ala|wey|sik|o t|avu|wav|oni|ile|wak| yi|ali| hà|gul|e l|ba |i v",
    "rmy": " sh|ri | a |shi|hi |i s|ti |ea |ari|i a| ca|rea|tsi|i c| s |a a|ndr|tu |câ |dre|i n|ept|ptu|rep|li | nd| di| un|a s|are|i u|ats|la | la|i l|ear| li|lje|di |ati|lui|ui |a l| tu|tat|â s|ei |sea| ti| câ|un |jei|or |caf|afi| lu|â t| ar|ali|i t|fi |ilj|a c|bâ |râ |car|ibâ|lor| cu|nâ |icâ|a n|i d|s h|hib|tâ | hi|â a|si |u c|eas|tur|tul|ber|â c| in| co|lib|u a|n a|cu |ibe|u s|tea|lu |tsâ|ul |tse|int|a p|i i| pr|u p|i p|url|i m|lji|min|sti|alâ| al| pi|sht|nal|â n| si|ji |â p|rar|ert|sii|ii |nat|til|u l|sâ |lâ |â l|sta| nu| ic|i f|nu |ist|mlu|ili|a t|ots|uni|rta|a d|its|â d|pri| ts|oml|i e| de| na|sia| po|gur|tut| st| at| ân|ura|al |ita|anâ| ma|ips|can|oat|tsl| su| as| so|ând|nts| ap| ea|sh |nit| mi|ent|a i|ate| ac|poa|ilo|sot|ina|ash|ona| lj|âts|rli|lip|â i|unâ|t c|iti|bli| u |nji| fa|zea|tât|ril| om|urâ|con|i b|sig|igu|ntr|pur|par|ntu|let|com|iil| ni|eal|ind|r s|hti|at |ucr|art|adz|arâ|itâ|rtâ|inj|uri| eg| sc|atâ|sin|ral|pse|asi| ba|r a|apu|âlj|ia |chi| va|sun|ter|rlo|ica| pu|luc|unt|i v|ise|ini|est|ast|gal|ega|act|nda|ead|uts|a u|imi|ma |ra |pis|s l|ets|a o|va |pi |lit|scâ|asc|ial|sa | ta|rim|tar|alt|idi|tlu| gh|era|ant|eri|aes|a m| nâ| ae|oar|nea|pro|apt|ana|ta |atl|lic|l s|iun|nte|mil",
    "men": " ng|a n|i n|ɔɔ |ti | ti|i l| i | ma| nu| gb|ngi|a k|aa |gi | kɔ|ia |ɛɛ |ei | na| a |ma |hu | ye| ta|kɔɔ|a t|na | hu|a m| kɛ| nd|gbi|ya |bi |i y| lɔ|a h|ɛ n|ii |ɔny|u g|i h|nya|uu |lɔn| kp|i m|ngɔ|nga|la |i t|kɛɛ|lɔ |i k|ɔ t|mia| mi|a y|nge| ji|ee |gaa|a a|ɔ n|ɔ i|gɔ |ind|tao|ao | hi|num| le| yɛ|umu|mu |ung|nda|hin|ye |i g|hou|hug|e n|ugb|ni |a l|sia|ndɔ|nuu|a i|maa| ya|ahu|gba|u k|mah|oun|ɔma|le |da |i w|ɔlɔ|i j| va| ɔɔ|eng|i i|va |yei|dɔl|li |lei| sa|yɛ |kpɛ|yil|isi| la|bat|a w|u n|e t|ta |ahi| ki| wo|ɔ k|e a|ɛlɛ|saw| lo|o k|ji |gbɔ|pɛl|uvu|ili| ho|vuu| gu|nde|aho|gbu|ɛ t|ale|ila|nah|kɛ |ɛi |ndu|kpa| wa|nuv|ge |e m| ny|e k|atɛ|wei|awe|a g| ii|bua|ie |awa|wot|yek|kɔl|ulɔ|ing|ga |gul|tɛ |ɔle|u t|gbɛ|ɔ y|nun|wa |hei|ani|ɛ k| tɔ|bɔm|ɛ g|ein|taa| ha|ang|uni|u i|ekp|ɔ g|lɛɛ|kpɔ|a v|kpe|ote|i b|te |u m|tii|ɔ s| we|ɛ h|baa|pe |ɛ y| ɛɛ|i ɛ| ba|fa |a j|bu |ifa|kia|jif|u l|eke|ama|gen|u w|lee|lɛ | lɛ|ɛmb|a b|e y|aah|hii|ngo|bɛm|lek| wi|ui | yi|u y|bɛɛ| he|u a|e h|ɔ m|uah|o g|yen|yan|nyi|aal|hi |wu |yee|maj|ajɔ|jɔɔ|nye|mbo|e g|u ɔ|ong|ka |oi |lon|dun|uny|ɛng| sɔ|lɔl|nyɛ|lii|a p|oyi|iti| bɛ|lɔm|akp|e i|ɛ i| ka|jis|oko|i p|ɔla| wɛ|a s|ewɔ|iye|dɔɔ|lok|gua|ɛ b| li|u h|nin|wee|lah|ula| ga| du|i v",
    "fon": "na | na| e | ɖo|ɔn |ɖo |kpo| kp|nu |o n| ɔ | nu| mɛ| gb|mɛ |po |do |yi |tɔn| é | si|gbɛ|e n|in | to| lɛ|lɛ | tɔ|nyi| al|wɛ | do|bo |ɛtɔ| ny|tɔ |e ɖ|ɖe | bo|okp|lo |ee |ɖok|to |ɔ e|bɛt| wɛ| ac|a n|sin|acɛ|o t|o a|ɛn |i ɖ|o e|bɔ |ɔ ɖ| bɔ|cɛ |ɛ b| ɖe|a ɖ|ɔ n|ɛ ɔ|n b|an |nɔ |odo|ɛ ɖ|o ɔ|ɛ n|ɛ e|ɖɔ |ji | ɖɔ|lin|n n| en|bi |o ɖ|mɔ |n e|pod| bi|lɔ | mɔ|n a|nɛ |ɛ k|i n|un |ɔ m|i e|mɛɖ| hw| ji| ye|ɛɖe|enɛ| ǎ |alo|o s|kpl|u e|a d|ɔ b| nɔ|alɔ|ɔ é|ɔ g|ɖee|si |n m|gbɔ|a t|n k| yi|sɛn|jɛ |e k| wa|o m|e m|é ɖ| jl|hɛn|e e| hɛ| sɛ|nnu|nun|wa |n ɖ| ee|é n|kpa|unɔ|bɔn|ɔ t|a s|ɛ é|u k|ɔ w|inu|e s|i t|zɔn|o l|a y|o g|bɛ |ma |n t|e j|ɔ s|ɔ a|o b|a z| zɔ|jlo|i k|nuk|ɔ k|a e|ɔ l|u t|kɔn|xu |e ɔ| lo|hwɛ| ka|eɖe|o y|e w|jij|sis|n l|ixu|six| su|ali|isi|ukɔ|ɛ a| ay|ayi|su |n g|u a|a b|n d|dan|nmɛ| ta|n ɔ|etɔ|e g|o j| we|onu|wem|ba |ema|ɛ g|o h|ɛ s|ɛ t|i s|u w|n s| sɔ|bǐ | bǐ|hwe|a m|sɔ |lɔn|o d|u m|ple| ma|ɛ l|azɔ| az|tog|ye |i l|hun| jɛ|o w|ogu|o k|u g|kan|oɖo|elɔ|gbe| le| el|wu |ka |ɛ w|n w| li|sun|esu| hu| i |ɖó | ɖó|plɔ|ɖi |ɖè |ɛnn|pan|i m|yet|xo |iin|tii| ti| fi|e b|zan|i w|poɖ|ɖes|a j|ann|a g|gun| ɖi| tu|gan|ɛ m| wu|u s|ɔ y|a l| da|u n|u l|ɔnu|obo|ɔ h|vi |lee|ijɛ|ta |e a|ya |nuɖ|ɔ d|wen| tɛ| ga| ɛ | xo",
    "nhn": "aj |tla| tl| ti|ej |li |j t|i t| ma|an |a t|kaj|tij|uan|sej|eki| no|chi|ij | ua|ma | to| te|j m| ki|noj|ika| se|lis|j u|aka|laj|tle|pa |pan|j k|ka | mo|amp|ali|ech|uaj|iua|j n|man|oj |och|tek|tli|kua|ili|a k|se | pa|ano|ise|ual|mpa|tec|n t|en |len|iaj|is | ue|a m|jto|ajt|pia| am|uel|eli| ni|ya |oua|j i|ni |hi |tok|kin|noc|one|lal|ani|nek|jki|ipa|kit|oli|ati|amo|j s|kam|aua|ia |tim|mo | ku|ant|stl| ik| ke|opa|ase|nij|ama|i m|imo|ijp|ist|tl |ijk|tis|mej|itl|tik|mon|ok |lak|par|n n|ara|ra |tit|kej|jpi|a s|ojk|ki | o |alt|nop|maj|jya| ka|iti|cht|ijt|uam|a n|kiu|lat|leu|o t|ita|lau| ip|tep|kia|jka|n m|ana|lam|kij|nka|tou|epa|n s|til|i n|i u|e t| ak|s t|k t|lti|nem|lan|eyi|mat|nau|ose|emi|j a|ntl|uat|uey|jtl|nit|nti|kip|oka|onk| on|eui|i k|kat|j p|ini|toj|kem|ale|ajy|ame|ats|pal|iki|ema|uik|n k|eua|ach|e a|ijn| sa|mpo|tot|otl|oyo|mil|hiu|eka|tol|ajk|uak|ite|san|pam|atl|yek|tia|ate|ino|jua|a i|ipi|j o|tsa|oke|its|uil|o o|jne|oju|tos|kui|oui|a a|yi |kol|ote|a u|i i|n a|ken|chp|iko|as | ne|tin| me|ank|jti| ye|kon|ojt|aui|xtl|ine|tsi|kii|you|ko |ejk|o k|uas|poy|tst|ejy|nok|las| ya|yol|hti|pou|siu| in|nel|yok|mac|ak |hik|sij| si|sto|htl|jke|nko|jch|sek|mot|i a|ela|ui |kis|mel|axt| ax|ijc|nan",
    "dip": " ku|en |ic |ku | bi|bi | yi| ke|an |yic|aan|raa| ci| th|n e| ka| eb| ra|c k|c b|n a|ci |in |th |kua|ny |ka |i k|ŋ y|i l|ben|k e|ebe| ek| e |höm|nhö|öm | al|ai |kem| ye| nh|eme|m k|men|i y|t k|n k| la|c e|ith| er|lɛ̈|thi|alɛ|ua |t e|ek |ɛ̈ŋ| lo|ɔc |n t|ŋ k| ep|u l|it |yen|kɔc|̈ŋ |de |k k|pin|a l|i r|n y|epi|n b|lau|at |iny|aci|aai|u t|ken|au |ok | te|a c|ath| pi|ke | ac|e y|cin|u k|oŋ | lu| ti|a t|uat|baa|ik |tho|yit|ui |hii|u n|h k|e r|n c|te |kek| lö|l k|h e| lɛ|hin|thö|m e|ɛŋ |n r|n l| et| mi|ëk |i b|ekɔ|era|eŋ |e w|i t|el |ak |nhi|iic|a k|i e|pio| ny|ŋ e| aa|nde|u b|e k|kak|eba|ök |k a| ba| en|ye |lɛŋ| pa|iim|im |köu|e c|rot|e l| le|öŋ |ot |ioc|c t|i m|r e| kö| kɔ|eth|y k|oc |ŋ n|loo|la |iit| el| we| ey|i p|uny| ro|ut | tu|oi |e t|enh|thɛ|m b|hok|pan|k t|ëŋ | wi|yii|tha|wic|pir| li|u e|bik|u c|ën |ynh|y e|lui|eu |ir |y b|nyn|uc |n w|mit| ec|öun|any| aw|ɛt |ɛ̈ɛ| dh| ak|and|loi|wen|l e|höŋ|e e|thë|aku|̈ɛ̈|kut|am |eny|u m|i d|iek|k c| ko|tic|leu| ya|u y|tii| tö| ma|nyo|tö | ew|hök|den|t t|hëë|i n|k y|i c|cit|h t| ed|uee|bai|ɛ̈n|öt |eri|ɛ̈k|awu|rin|a p|cɛ̈|hai|kic|t a| të|tue|cii|hoŋ| bɛ|ooŋ|n p| cɛ|̈k |c l|u p|uk |c y|löi|i a|eke|dhi|wel|thk|eeŋ|öi |elo|n m|r k|ien|om |hom| wa|nho",
    "kde": "na | na| va| wa|la |nu |a k| ku|a w|ila|wa |a v|chi| mu|unu|e n|mun|van|a m|a n|ya |le |ele|sa | ch|asa|amb|ana|was|lam|mbo|ohe|ave| vi|ne |bo |aka|e v|a u|u a| n’|u v|e m|ke |anu| li|ve |vel|ake|ala|hil|ile| pa| av|ng’|a l|he |ing|ene|ela|ili|ika|vil|ngo|vak|ali| di|uku|wun|any|lan|a i|mbe|a a|uni|e a|ama| ma|go |nda|bel|emb|wak|kuw|nya| mw|ola|a d|den|lem|a c| il|ulu|kol|g’a|o v|nji|kan|ji |au |ma | au|lil|mbi|uwu|lik|ye |’an|kuk|din|ula|no |and|umi|kum|eng|ane|dya|ong|o l|ach|mwa|e w| ak|an’|a p|kal|nil|lew|mad|n’n|voh|ilo|wen|aya|apa| vy|kut|ale|va | al|ang|ava|kul|hin|o m|hel|e k|ond|hi | la|lin| lu|idy|dye|u l|da |ole|ka |ani|ndo|ton| in|ewa|lov|o c|dan|u m|cho|uva|ia |pan|kam|we |ove|nan|uko|bi |kav| ya|lim| um|eli|u n|nga|uli|lia|mil|o n|’ch| kw|li | an|aha|dil|ata| dy|e l|n’t|i v|tuk|hoh|u i|hev|ni |niw|und| ul|ade|lel|kay|lon|e u|ino|i n|nje|uwa|she|yik| ly|hum|ako|i w|uma|vya|kwa|ba |’ma|val|kil|mwe|mba|mu |pal|umb|wav|hih|ulo| ka|e c|nde|wal|ima|’ni|lun|ihu|a y|vin|yoh|e i|vyo|inj|u c|kup|kuv| ki| m’|a s|e p|dol|lek|awa|o u|n’c|iwa|imu|anj|mal|yen|u w|yac|bil|oja|o a|ha |utu|ech|i d|uka|taw|n’m|ita|awu|ina|m’m|i a|itu|hon|lu |atu|mak|iku|lya|lit|jel|evo| vo|i l|mah|hap",
    "snn": " ba|ye |bai| ye|ai |e b| ca|ai̱|ia |ji | ne| si|i̱ | go|goa|sia|i n|e c|a y|i y|̱ b| ja|se |aye|i j|a b|jë |iye|e g|re |oa |hua|yë |quë| gu|hue|e̱ |u̱i|gu̱|ne | ma|̱i |je̱|eo |e s| hu| ña|bay|o y|ñe |ja |ajë|to |aij|deo| ñe|a i|ayë|ba | ji|beo|cat| de| be|e j|i s|mai|e e|bi |a ñ| co| e |ato|uë |ña |i g|e ñ|i b| iy|cha|ë b|eba|coa|na | ts|e y|̱je|reb| i | ti|i t|ja̱|ach|ue |e i|i c|ni |oac|e t|a ë| re|je |aiy|oji|eoj|a̱j|oye| ë |ë t|cay|ija|ico|ihu| sa|i d|ere|a c| qu|ahu|iji|ca |ua | yë| to|a h|ase|ues|ë s|aca| se|uai|e d|ese|asi|caj| ai| tu|tut|utu|ë c|yeq|equ| na|cai| i̱|ti |mac|e m|ë g|ebi|a a|ani|tu |e n|yeb|eje|oya|toy|co̱|a m|̱ t|ije|sic|eso|eoy|a t| a | te|haj|cah|oas|are|i m|a s|ehu|añe| da|o b| do|i i|i r|e r|neñ|yer|huë|ë y| o |jai|a j|aje|a g|ibë|ëay|aña|aja|a o|coc|bëa|oca|sos|doi|oi |aco|eñe| jë|ë d|ë j|cas|ëca|hay|ea |̱ g|ari|tsi|yij|sai|̱ c|osi|teo|o h|co |̱re|nej|ëhu|o s|ose|jab|̱ni| me|rib|ñes|si |yaj|jëa|uaj|ë m|dar| yi|oe |e o|nes|i̱r|ma |nij|i h|oja|uëc|ama|ë i|i̱h|o̱u|̱uë|̱hu|aqu|ëco|e a|a̱ |ëja|̱ñe|o̱a|go̱| ëj|ñe̱|tia|abë|sih| bi|tsë|sëc| je| cu|̱ a|ned|cab|a d|ore|me | oi| ro|jay|tso|ë r|eye|ta |bë |ñaj|soe|̱ca|o̱c|año|o c|ire|ohu|uej|ñej|i a|ñas|ë q| ju|ban",
    "kbp": "aa | pa| se|se |na |nɛ | nɛ| yɔ| wa|yʊ | ɛy|ɛ p|ɖɛ |aɖɛ|a ɛ|a w|ɛwɛ|ɛna|yɛ |ala|ɛ ɛ|ɛ s|ɔɔ |yɔɔ|ɩ ɛ| ɛ |paa|e ɛ|e p|ɛyʊ|aɣ | pɩ| ɛw|a p|waɖ|ʊʊ |a n| ta|yɔ |yaa|yɩ |wɛn|la |taa|ʊ w| tɔ|a a|ɔ p|ɛya| kɩ| ɩ |ɩyɛ|a t|ʊ ɛ|a k|wɛɛ|tɔm|ɔm |ɛ t|wal|ʊ n| wɛ| ŋg| tɩ|ɛ n|ɛ k|kpe|ɛ ɖ|maɣ|zɩ | an|ʊ t|ɛ y| pʊ|nɩ | tʊ|ɛyɩ|ɩɣ |ɩ t| we|ɩ y|anɩ| pɔ|a s|gbɛ| pɛ| ɛs|pa |kpa|ɛɛ |wɛ | nɔ|daa|nɔɔ|ʊ y|ama|ya | kʊ|tʊ |pal|mɩy|ayɩ|ɩ p|ɩna|tɩ | ɖɩ|ʊ p|ɔ ɛ| ɛl| mb|ɔ s|ŋgb|a y|ɩma|ɖɩ |ʊ k|ɔɖɔ|ɩ n|bʊ |mbʊ| ɛk| kp|ɛja| ɛj|tʊm|jaɖ|paɣ|kɛ | ye|ɛyɛ|alɩ| na|i ɛ| ke| ya| ɖɔ|ɩ ɖ|ɔɔy|nda|ɖɔ |fɛy|ɣ ɛ|ɩ s|jɛy|yi |ɖɔɖ|ɛla|lɩ |kɩm|kɩ |aŋ |bɛy|pee| ñɩ|lab|ɩzɩ|pe |eyi|ŋ p|ɩ ɩ|ɛzɩ| fa|ɔyʊ|aʊ |ʊmɩ|ʊyʊ|ʊma|a l|sɔɔ|a ɩ|ekp|ʊ s| aj|ajɛ| ɛt|iya|wey|ɩ k|ʊ ŋ|ma |kan|ɩsɩ|laa|ɔyɔ|ɩm |li | kɛ| lɛ|and|sam| sa|ɣtʊ|ɔ k|day|ɔɔl|ɣ p|sɩ |ɔŋ |ɩfɛ|akp|pak|sɩn|pɩf|naa|ndʊ|kul| ha|aɣt|ɔ y|uli| ɖe| kɔ|eek| pe| sɔ|m n|ŋga|ee |ga |ɖʊ |maʊ|m t|e e|ɣna|ɣ s|ŋgʊ|abɩ|akɩ|a ñ|yaɣ|pɩz|eki| ɖo|maŋ| la|yee|ana|tɩŋ|ɣ t|pad|ñɩm| ca|ɛ a|a ɖ|pɩs|ina|dʊʊ|ɖe | ɖa|a m|lɛ |ked| ɛɖ|lak|aka|gʊ |asɩ|ʊ ɖ| ɛd|dʊ |nʊm| nʊ|ñɩn|ba |ɛpɩ|pʊ |ada|ɛhɛ|hal| a |le |zɩɣ|ɛɛn|ɛsɩ| le|aɣz|uu |nɖɩ|e t|ŋ n|ɛda|lɩm|e w|ɔ w|ɩ a| ɛp| nɖ|ɛkɛ|i p|ɣzɩ|alʊ|zaɣ|bɩ |ɛ l|ɩkɛ|ɔ t|e y|ɖam|aaa|pɛw",
    "tem": "yi | yi| ka|a ʌ| tə|uni|ni |wun| ɔ | aŋ| wu|ka | kə| kʌ| ʌŋ|nɛ |kə |tək| ʌm|əkə|ɔŋ |mar| ɔw|a k|ma |i k| a |wa | mʌ|i t|ri |ɔwa|thɔ| th| ma|ari|i m|a a|ʌma|aŋ | o | ba|tha|ba | kɔ|a y|ŋ k|ɔm |‐e | rʌ|lɔm|kɔ |i ɔ|kom|o w|ʌnɛ|te |mʌ | ŋa|i o|əm |hɔf|ɔf |alɔ|om |a m|ɔ b|ɔ y|aŋf|fəm|hal|kəp| mə|ŋfə|ʌth| tʌ|a t|a r|ŋ y|ŋth|ŋa | ʌt|ɔ k|e ɔ|ɛ t| ro|wan|ema| gb|ank| ye|th |yem|nko| mɔ|ʌwa| sɔ|kʌm|m a|kət|ʌmʌ|anɛ|rʌw|ɔ t|ʌme|ʌŋt|me |ʌte| bɛ|hɔ |a ɔ|ki |ʌŋ |m ʌ|m k|ar |ŋ ɔ|yɛ |əth|ɛ ʌ| ta|i a|ta | ʌk|ə k|thi|et |pet|pa |ŋɔŋ| te|ŋe |i ʌ|ra |i r|əpe| ŋɔ|ɛ k|ʌ k| yɔ| rə|kʌt|rʌ | yɛ|bɛ |e a|e t|ro |ɔ ʌ|akə|thə|ɔ m|a‐e|əpa|a w|kəl|ə b|yɔ |ə t|mɔ |bot|ŋ t|e y|əŋ |mʌs|gba|e m|m r| bo|ʌŋe| ak|ɛ a|nʌn|ləŋ|ələ|sɔŋ|ŋ b|təm|wop|ʌ a|ə y|kəs|sek|ə s|tʌt|li |ot | ko|ɛ ŋ|ŋ a|ekr| ra|ɔth|sɔt|ʌse|ath|ru |t k|ɛ m|e k|ɛth|ma‐|po | po| wo|ʌrʌ|i y|m t|m ŋ|tʌŋ|tɔŋ|e w|gbʌ|tə |nth|ʌyi|ʌlə|hən|ʌ ʌ|op |iki|ʌkə|rʌr|ʌru|ŋgb|sɔ |əyi|rʌn|gbə|ɔ a|ər |ɔkɔ| pə| ʌr|ənʌ|ləs|nka|ith|əli|ʌy |bəl|mʌy|ran|o ɔ|ɛ r|ant|f ʌ|mə |ti |f t| tɔ|əs |r k|hi |yik|ɔ ɔ|rək|kar|ʌ t|mʌt|lɔk|ayi|krʌ|pan|na |kʌr|mət|tət|tho|pi |mʌl| to|to | wa|ʌgb|thɛ|ə g|bas|eŋ |aŋk|ɔ r|thʌ|o t|ɛŋ |i‐e|kʌ |kʌs|mɔŋ|o d|kɔŋ|din|ɔ g|kəw|di |ŋ w|əma|ɛr |ʌ y|ək |ŋko",
    "toi": " ku|a k|wa | mu|a m|la |ali|ya |tu |i a|e k|a a|aku|ula|ntu|ang| al|lim|lwa|kwa|aan|mun|mwi|de |ulu|ngu|wi |imw|luk|gul|na |ele| ak|kub|ons|unt|kul|oon|se |ant|nse| oo|zyi|gwa|si | ba|ba | lw|zya|uli|ela|a b| ci| ka| zy|waa|and| an| kw|ili|uki|eel|uba|nyi|ala|kut|ide| ma|kid|isi|uny|i m|kun|cis| ya|li |i k|nga|a l|yin|kuk|ka | ul|kus|ina|laa|nte|ila|tel|mul|wab|wee|nda|izy|ede| am|led|amb|ban|we |da |ana|kwe|e a|lil| bu|o k|bwa|aka|ukw|o a|ati|uko|awo|yan|ko |uci|ilw|bil|bo |a c|wo |amu|law|mbu|i b|bul|umi|ale|abi|kak|e m|u b|akw|u o|ti |sal|kuy|ung|bel|wak| bw|o l|ga |kal|asy|e u|lan| mb|lo |usa|ika|asi|aam|a n|ule|bi |cit|bun|kup|egw|muk|igw|u k|u a|mbi|wii|kum|a z|aci|ku |yi | mi|yo |le |mas|yig|ubu|kka|i c| ab|ene|ne |no |a y| wa|abo|ndi|uta|syo|aya|aba|len|kuc|eya|o y|mal|ind|lem| lu|ukk|mo |eka|mil|mbo|ita|uka|ama|lik|u z|ndu|mu |nzy|zum|bal|abu|upe|bam|syi|u m|liz|int|ta |yak|ley|e b|nzi|lii|kab|uti|ube|uum|i n|cik|ezy|iib|iba|ani|iko|iin|ile|was| ca|zye|alw| aa|sya|uku|twa|min|tal|muc|umu| nk|du |azy|onz|lek|kon|buk|o m|yik|i z|lwe|u u|oba|kwi|imo|gan|zil|del|usu| we|peg|yee|ngw|sum|imb|ump|mpu|nde|end|i o|yoo|o n| nc|a u|mi |ano|uya|o c|di |mba|yil|yal|ako|a o|isy|izu|omb",
    "est": "sel|ja | ja|le |se |ust|ste|use|ise|õig|mis| va|gus|ele|te |igu|us |st |dus| õi| võ| on|on |e j| in|ini|nim|ma |el |a v|iga|ist|ime|al |või|da | te|lik| ig|adu|mes|ami|end|e k|e v|l o| ka|est| ra| se|õi |iku| ko|vab|aba|tus|ud |a k|ese| ku|l i|gal|tsi|lt |es |ema|ida|ks |a i|n õ|lis|atu|rah|tam|ast|sta|e t|s s| mi|ta |ole|stu|bad|ga |val|ine| ta|ne | pe|nda|ell|a t|ali|ava|ada|a p|ik |kus|e s|ioo|tes|ahe|ing|lus| ol|a a|is |vah|a s|ei | ei|kon|vas|tud|ahv|t k|as |a r|s t|e e|i v|eks|oon|t v|oni|kõi|s k|sio|sus|e a|gi |mat|min| pi|s v|oma|kul|dad| ni|e p| om|igi|tel|a j|e o|ndu|dse|lle|ees|tse|uta|vus|aal|aja|i t|dam|ats|ni |ete|pid|pea|e õ|its|lma|lev|nis|dis|ühi|sli|i s|nen|iel|des|de |t i|et |nin|eva|teg|usl|elt|ili|i m|ng | ee|tem|ses|ilm|sek|ab | põ|ait| ne|õrd|sed|võr|ul | üh| ki|abi| kõ|ega|rds| vä|ots| et| ri|põh|ed |töö|si |ad |i k| tä|ata| ab| su|eli| sa|s o|s j|sil|nni|ari|asu|nna| al|nud|uma|sik|hvu|onn|eab|emi|rid|ara|set|e m| ke|a e|täi|d k|s p|i e|imi|eis|e r|na | ül|a ü|koh|a o|aks|s e|e n| so|õik|saa|and|isi|nde|tum|hel|lii|kin|äär|sea|isk|een|ead|dum| kä|rii|rat|lem|umi|kor|sa |idu|mus|rit|har| si|vad|ita|ale|kai|teo| mõ|ade|üks|mas|lse|als|iaa|sia|sot|jal|iig|ite",
    "snk": "an | a | na|na |a n|ga | ga|en | su|re |a k| ka|su |a a|a s| ta|un | se|ta |ma | i |ama|do |e s|ere|ser|aan| do|nan|nta| ra|n s| ma| ki| ja|jam| da|taq|ne |a g|a d| ya|n d|ni | ku|ren|ri | si|ana|u k|n ŋ|ŋa | nt|e k|maa| ŋa|ndi|wa |aqu|ane| ba|ra |a r| sa|oro|n t|raa|tan| ke|oxo| xa|i s|di |a f|and|ti |a b| be|i k|gan|aax|aaw| go|iri|kit|awa|axu|sir|a i| du|a t|me |ara|ya |ini|xo |tta|i a|oll|ran|on |gol|e d|n g|a j|nde|aar|e m|be |a m|ari|u n|lli|ron| fa|qu | ti|n n|aad|axa| ña|o a| so|ke |nu | ko|din|lle|dan|a y|man|i g|sor|u r|i t| no|are|xar|kuu| wa|enm|ada|baa|de |qun|o k|yi |xun|i n|i x| an| ha|kan|fo |att|ang|n k|o s|dam|haa|da |n y|kat|e t|li | fo|i d| mo|nme|u b|i m|aba| fe|len| re|pa |ant|ayi|yan|e n|a x|e y|n b| di|ppa|app|kap|xa |u t|o g|mox|ure| xo|ond|i i|a ñ|n x|taa|du |ell| me|iti|xu |u d|udo|ind|uud|anu|nga|o b|nun|nox|n f|ku |aga|anŋ|dun|itt|eye|ye | bo|ore|ite|u a|oor| yi| ro|sar|saa|ill|e b| wu|le |riy|nma|ro |ken|edd|fed|bur| mu|mun|o n|iin|tey|sel| tu|u m|lla|la |ono|ñaa|den|faa|a w|te |inm|ka |aay| te|ina|xoo|o d|ira|u s|o t|nmu|nen|ban|ene| ni|ña |o i|uur|una|o m|xon|n w|kaf|gu |e g|a h|kil|yu |und|aqi|een| bi|bag|i j|n ñ|laa|i r|no |sig|igi|kor| o |i b|bat",
    "cjk": " ku|a k|yi | ny|nyi|la |wa | ci|a c|a n|we | mu| ha|i k|nga|ga |a m|kul|uli|esw|sa |ana|ela|ha |ung|a h|ze |tel|swe| ka|a u|mwe| wa|ci |ate|kwa|mbu|ya | ya|ma |uci|kut|han|u m| mw|mut| ul|nat|e m|e k|mu |uth| ca| ma|lit|aku|ang|thu|na |ca |ka |nji|i m|kup|pwa|hu |ji |kan|wes|i n|ina|li |ali|e n|asa|mba|a i|e a|ifu|fuc|amb|ize|ing|anj| mb|ita|bun| kw|uta|i u|cip|a y|awa|muk|i c|naw| ak| na|imb|lin|kus| ce|ite|ila| an|upw|ta |ula|ong|ulu|esa|a a|kha|wo |ba |ngu|ukw|lim|u c| xi|nge|kuh| un|umw|cif|lem|emu|ulo|o k|kun|aka|umu|ama|wik|ala|xim|o m|has|ikh|mwi|tam|te |o n|imw|uka|utu|lo | es|a w|ule|ku |ipw|usa| ng|i y|ili|wil|no |aci|e c|ko |kum| ye|bu |kuk|ufu|o w|mo |e u|pwe|cim|uha|e h|ngi|aze|imo|swa|yes|mil|ciz| mi| in|ulw|akw|e w|ika|so |lon|e y|iku|eny|mbi|o y|yum|isa|umb| li|aco|e i| iz| ja|cik|tan|lwi|kat|nda|i a|uni|wak|fun|uma|o c|a x|i h|aha|nal|u k|uze|was|ema|lum|pem|ngw|o u|wam|kal|co |kwo|uso|a e|apw|una|tum|sak|gul|umi|nin|ja |ces|iki| ik|tal|bi |ata|yul|nyu|zan|ile|ge |wan| uf| up|lik|le |wen|waz|kwe|ele| um|aso|wac| if|i w|hak|i i|man|mah|go | cy|oze|yoz|hal|ges|cin|kuz|uvu|iso|da |o l|gik|ngo|lul|eka|cyu|upu| yo| ut|ipe| uk|kol|ise|u i|vul|mun|ne |cen| it|kuc|mul|and",
    "ada": "mi |nɛ | nɔ| nɛ| e | he|he |nɔ | a |ɔ n|kɛ | kɛ|i k| ng|a n|i n|aa |e n|blɔ| bl|ɛ n|ɛ e|gɛ |ngɛ|e b|lɔ | ma| mi|ɛ h| ts| ko|hi |ɛ a| ɔ |ko |e h|ɛɛ |tsu| ni|ɔ k|a m|a k|i h|ma | ny|emi|a h|ami| be|be |i a|ya | si|e m|e j| ka|si |ɛ m|ɔ f| kp|nya| je|ni |oo |loo|o n| hi| fɛ|fɛɛ|a t|laa|a b|je |e k| pe|pee| ye|mɛ |umi|ɔ m| ha|a a|ɔmi|omi|kpa| wo|ɔ e|i t|ɛ ɔ|e s|i b|ɔ h| lo|ɛ k|ke |ha |bɔ |maa|mla|i m|ɔ t|ɔ́ |e p|kaa|ahi| sa|lɔh|ɔhi|sum|ɔ a|nɔ́|o e| na| gb|ee |e ɔ| ji|e a|i s| ml|ɛ s|sa | hɛ|ɔɔ |yem|u n|alo| jɔ| ku| lɛ| bɔ| to|a s|ɛ b|i l|lɛ |sua|o k|uaa|a j| su|ɛmi| ad|ɛ y|imi|ade| fa| al|jɔm|des|esa|eɔ |ihi|ji |ne |ɛ t|a e|ɛ j|ake|e e|kak|ngɔ|o a|eem|i j|e y|wo | bu|him|e w|́ k|ɔ y|tom|suɔ|ia |ane|mah| ya|o b| ke|e g|wom|gba|ue |ba | bi| gu|uo |e t|san|uu |pa |hia| tu| hu|suo| we|tsɔ|ɔ s|e f|kuu|gɔ |o m|a p| ja|ɛ p|fa |ɔ b|ɛ g|hɛɛ| ab|a l|hu |ye |na |tue|i ɔ|isi| sɔ|sɔs|jam|gu |ti |ɛ w|sis|o h|uɔ |li |a w| ba|sɔɔ|abɔ| ju| hl|ɔsɔ|hla|ɔ l|a y|sɛ | ɔm|ɔmɛ|i w|ɛti|pɛt|kpɛ|to | yi|asa| kɔ|nyu|akp|pak|kpe|sɔɛ|ɔɛ |u ɔ|yɛm|o s|uɛ | nu|pe |se | sɛ|o j|a g|ɔ w| wa|sem| pu|su |e l| mɛ|u k|hɛ |nih|kas| fɔ|kon|onɛ|bim|lam|imɛ|nyɛ| fi|hiɔ|usu|i p|bi | ní|yo |eeɔ|uam|bum|níh|íhi|o l|ula|kul|guɛ|naa",
    "quy": "chi|nch|hik|una| ka|anc|kun|man|ana|aq |cha|aku|pas|as |sqa|paq|nan|qa |apa|kan|ikp|ik |ech|spa| de|pa |cho|ere|der|rec|am | ru|an | ma| ch|kpa|asq|ta |na |nam|nak|taq|a k|qan|ina|run|lli|ach|nap|pi |mi | ll|yoq|asp|ima|hay|hin|aqa|nku|ant|ayn|oyo| hi| im|hoy|cio|nta|nas|q k|api|iw |wan|kuy|kay|liw|aci|ion|ipa|lla|oq |npa|ay |kas|a m|nac| na|inc|all|ama|ari|anp| ya|chu| hu|nin|pip|i k|qmi|hon|w r|ata|awa|a c|ota|in |yku|yna| wa|a h|has|a d|iku|a l| li|pan|ich|may| pi| ha|onc|a r|onk| ot|ku | qa|ank|aqm|mun|anm|hu |a p|nma| mu|qta|n h|pap|isq|yni|ikm|ma |wsa|aws|kaw|ibr|bre|lib|ayk|usp|nqa|e k| al|lin|n k|re |ara|nat|yac|kma|war|huk|uwa|yta|hwa|chw| sa|was|kus|yan|m d|kpi|q m|a i|q l|kin|tap|a a|kta|ikt|i c|a s|uy | ca|qaw|uku| tu| re|aqt|ask|qsi|sak|uch|q h|cas|tin|pak|ris|ski|sic|q d|nmi|s l|naq|tuk|mpa|a y|k c|uma|ien|ypi| am|qaq|qap|eqs|ayp|req|qpa|aqp|law|ayt|q c|pun| ni|a q|ruw|i h|haw|n c| pa|amp|par|k h| le|yma|ñun|ern|huñ|nni|n r|anq|map|aya|tar|s m|uñu|ten|val|ura|ita|arm|isu|s c|onn|igu| ri|qku|naw|k l|u l|his|ley|say|s y|rim|aru|rma|sun|ier|s o|qar|n p|a f|a t|esq|n a|oqm|s i|awk| va|w n|hap|lap|kup|i r|kam|uyk|sap| qe|ual|m p|ran|nya|gua| pe| go|gob|maq|sum|ast| su| ig",
    "rmn": "aj |en | te|te | sa| le|aka|pen| si| e |el |ipe|si |kaj|sar| th|and| o |sav|qe |les| ma|es | ha|j t|hak|ja |ar |ave| an|a s|ta |i l|ia |nas| aj|ne | so|imn|mna|sqe|esq|nd |tha|haj|e s|e t|e a|enq|asq|man| ja|kan|e m| i | ta|the|mes|cia|bar|as |isa|utn|qo |hem|o s|s s| me|vel|ark|i t| na|kas|est| ba|s h|avo| di|ard| bi| pe|rka|lo | ak|ika|e r|a a| pr|e k|qi |mat|ima|e p|a t| av|e d|r s|n s|anu|nuś|o t|avi|orr|o a| ka| re|n a|re |aja|e o|sqo|sti| ov|õl |l p|nqe|ere|d o|vor|so |no |dik|rel|ove|n t|ve |e b|res|tim|ren| de|àci|o m|i a|but|len|ali|ari|rre|de | pa|ver| va|sqi|ara|ana|vip|rak|ang|vi | ra|or |ker|i s|eme|e z|ata|e l|a e|rip|rim|akh|la |o p|kar|e h|a p|na |ane|rin|ste|j b|er |ind|ni |tne| ph|nip|r t| ke|ti |are|ndo| je|l a|uśi|e n|khi| bu|kon|lim|al |tar|ekh|jek|àlo|o k| ko|rde|rab|aba| zi|ri |aća|ćar|śik|dõl|dor|on |ano|ven| ni|śaj| śa|khe|ća |ast|j s|uti|uni|tni|naś|i d|mut| po|i p|a m| pu|a l|l s|som|n n|ikh|nik|del|ala|ris|pes|pe |j m|enć|e e|nća|ndi|rdõ|kri|erd|śka|emu|men|alo|nis|aśt|śti|amu|kh |tis|uj |j p|do |ani|ate|nda|o b|nge|o z|soc|a d|muj|o j|da |pri|rdo| as|cie|l t|ro |i r|kla|ing|a j| ze|zen|j e|ziv|hin|aśk| st|maś|ran|pal|khl|mam|i b|oci|rea|l o|nqo| vi|n e",
    "bin": "e o|ne | ne|be |an |en |vbe| o |wan|mwa|n n|e e|emw|evb|mwe|in |na |e n| na| em|omw|e a|n e|e i| vb|re | ke|gha|gbe|wen| gh|ie |wee| om|e u| kh|bo |hia| ir|ha |o k|nmw|tin|n o|vbo|he |eti|ia |kev| ev| we| et|win|ke |ee |o n| hi|a n|a r|o r|gie|ran| ya|ira|mwi|a m| mw|a g|ghe|ogh| a | re| uh|eke| og|n k| no|ro |ye |khe| ye|hek|rri|nog|een|unm|a k|ogi|egb|ya |ere|wun|hun|mwu| mi|mie|de | rr|a e| ar|a o|n y|e v|o g|un |ra | ot| gb|uhu| ok|n i|ien|a v|rhi|e k|n a|i n|a y| ru|khi|n m|hie| eg|oto|arr|ba |ovb|u a|e y|ru |ian|hi |kpa| ra|o m|nde|yan|e w|and|to |o e|o h| ni| rh|e r|n g| er|n h|ugb|we |hae|on | iy|dom|rue|u e| or| ik|ren|a i|aro|iko|o y|n w|ben|ene|rio|se |i k|uem|ehe| ov|otu|okp|kug|oba|iob| uw|aen| do|iru|ae |tu |ue | iw| ma|wu |rro|o o|rie|n v| ug|a u|nna| al|ugh|agb|pa | ay|o w|ze |uwu|ma | eb|iye|aya|ugi|inn|gho|rre|nii|aku|gba|khu| se|yi |onm|ho |a w|ii |iwi| uy|uyi|e d| i |hin|obo|u o| ak|beh|ebe|uhi|bie|ai |da |i r|gbo|o v|won|mwo|umw| ag|ode| ek| la| um|aan| eh|egh|yin|anm|mo | kp| bi|kom|irr|i e|a a|kha|oda|bon|a d| ow|owa|ghi|n u|o a|yen|eem|ieg| az|aze|hoe| yi|oe |e g|ele|le |lug| ka|aa | as|yaa|gue|a h|mu |nre| od|n r|ero|ese| ku|enr|lel|vbi|wa |u i|a b|oro|bi ",
    "gaa": "mɔ | ni|ni |kɛ |ɛ a| ak|lɛ |i a| he|ɛ m|akɛ| lɛ| ko|gbɛ|ɔ n|ɛɛ | mɔ| kɛ|yɛ |li |ɛ e|ko |ɔ k|i e|aa | yɛ|bɛ | ml|shi|ɛ h|egb| gb|ɔɔ |mli| fɛ|fɛɛ|heg|nɔ |a a|i n|aŋ |oo | nɔ|i k|he |ɛ n| es| am|ɛ k|ɔ y| sh| ma|esa|loo|ji |maŋ|amɛ|emɔ|ɔ f|fee| ek| al|ɛi |ii |ɔ m|ɔ a|bɔ |e n|ɔ l|amɔ| eh|alo|hi |naa|ee |ɔmɔ|oni| en|o n|kon|aji|i y|i m|sa |o a|eli|umɔ| bɔ| hu|yel|hu |eem|nɛɛ|tsu| ah| nɛ|sum|tsɔ| an|nii|o e|baa| as|mɛi|yɔɔ|gbɔ|aaa|na |i h|eye|ɛ g|eɔ |ɛji| at|ana|eko|ena|o h|ŋ n|kom| ts|ɔ e|maj|i s|i l|efe|ome| kp|a l|kwɛ|ku |ehe|toi|a n|saa|bɔm|ha |a m|kɛj|kpa|hew| ku| sa| na|hiɛ| hi|ane|gba|e e|i f| mɛ|ɛ t|bɛi|ash|ŋ k|e k| ej|hey|aka|ats|ne |its|e a|san| ay|ye | je| kr| ey|mla|eŋm|nit|a h|ɔ b|ɛ s|anɔ|ŋmɔ|a e|ɛ b|jeŋ|ɛ y|aan|kro| ab| af|any|iaŋ|ɔ g|a k| yɔ|uɔ |shw|ets|ekɛ|usu|ŋŋ |ŋma|esh|u l| ba| et|iɔ |i j|o k|suɔ|oko| yi|e s| ag|afe|agb|oi |ŋ a|rok|o s| aw|ai | ji|ɛ j|aye|ŋ h|ish|nyɛ|la | ad|o m| ef|tsɛ|sɛ |wɔ |ewɔ|mɔɔ|ehi|aŋm|hwe| bɛ| to|ɔ h|jɛ |aha| ja|paŋ|alɛ|awo|sɔ |ŋts|ɛŋt|iɛŋ|bii|diɛ| di|mɛb|eni|his| ny|e b|hik|u k|ate|i b|ŋmɛ|akw|o y|eŋ |ahe| lo|me |ade|ɔ j|kɛn|teŋ|yeɔ|ɔ s|des| su|wal|nyɔ| eb| eg|ŋ m|mef|saŋ|ɛ l|o l|u n|asa|sem|jia|wɛ | em|o b|gbe|hil|ihi|hih|ɔŋ |nak|e h|sus|e g",
    "ndo": "na |oku|wa | na|a o|a n|ka |ntu| uu|tu |uth| om|e o|mba|ong|omu|ba | ok|uut| ne|he |the|ang|hem|emb|unt|o o|a u| wo|nge| iy|ehe|kal| no|a w|o n|no |nga|e n|ko |mun|oka|lo |o i|lon|we |ulu|a m|ala| ke|la |a k|u n|han|ku |gwa|osh|shi|ana|ngu|ilo|ano|ngo|keh| mo|ga |nen|man|ho |luk|tha|ge |gul|u k|eng|ha |a y|elo|uko|a e|ye |hil|uka|li |go |wan|ath|wo |thi|dhi|uun| pa|kwa| ta|a p|ya | sh| ko|nka|lwa| os|mwe|oma|ta |ema|sho| ka|e m| yo|sha|wok|ika|po |o w|onk|e p|pan|ith|a i|opa|gel|hik|iya|hi |aan|una|o g|kuk|alo|o e|nok|ndj|le |a a|men|yom|a s|i n| li|and| po|pam|lat|kan|ash|waa|aka|ame|gam|umb|a t|ond|yuu|o k|olo|ane|ing|igw|aa |ele|kul|mon| gw|ilw|gan|o y|iil|iyo| el|kut|nin|oko|ike|o m| ku|adh| ye|amw|ome|yeh|aye| ga| on| yi|a g|lyo|ne | ng|mbo|opo|kug|eko|yok|wom| oy|non|iye| go|ulo|e e| we| e |ina|ant|omo|ene| a |i k|mok|him| dh|und|ndu| me|eho|wen|nek| op|alu|e g|ima|kat|ota|oye|ila|ngw|yop|wat|ela|o u|a l| ii| ay| nd| th|o l|yon|ili|oon|okw|yaa|taa|lwe|omb| ni|aku|i m|mo |ula|ekw|enw|iyu|pok|epa|uki|ke | wu| mb|meh|e t|uni|nom|dho|pau|eta|yi | ly|o a|ono|lun|lak|ola|yo |lol|ank|bo |i o|awa|nwa|a h|naw|hok|nem|kom|ndo|o s|u t|vet|mbu|ani|uga|ndi|ukw|udh|lok|e k|alw|kwe|kun| ya"
  },
  "Cyrillic": {
    "rus": " пр| и |рав|ств| на|пра|го |ени|ове|во | ка|ани|ть | в | по| об|ия |сво| св|лов|на | че|ело|о н| со|ост|чел|ие |ого|ет |ния|ест|аво|ый |ажд| им|ние|век| не|льн|ли |ова|име|ать|при|т п|и п|каж|или|обо| ра|ых |жды| до|дый|воб|ек |бод|ва |й ч|его|ся |и с|ии |аци|еет|но |мее|и и|лен|ой |тва|ных|то | ил|к и|енн| бы|ию | за|ми |тво|и н|о п|ван|о с|сто|аль| вс|ом |о в|ьно|их |ног|и в|нов|ако|про|ий |сти|и о|пол|олж|дол|ое |бра|я в| ос|ным|жен|раз|ти |нос|я и| во|тор|все| ег|ей |тел|не |и р|ред|ель|тве|оди| ко|общ|о и| де|има|а и|чес|ним|сно|как| ли|щес|вле|ься|нны|аст|тьс|нно|осу|е д| от|пре|шен|а с|бще|осн|одн|быт|сов|ыть|лжн|ран|нию|иче|ак |ым |ват|что|сту|чен|е в| ст|рес|оль| ни|ном|род|ля |нар|вен|ду |оже|ны |е и| то|вер|а о|зов|м и|нац|ден|рин|туп|ежд|стр| чт|я п|она|дос|х и|й и|тоя|есп|лич|бес|обр|ото|о б|ьны|ь в|нии|е м|ую | мо|ем | ме|аро| ре|ава|кот|ав | вы|ам |жно|ста|ая |под|и к|ное| к | та| го|гос|суд|еоб|я н|ен |и д|мож|еск|ели|авн|ве |ече|уще|печ|дно|о д|ход|ка | дл|для|ово|ате|льс|ю и|в к|нен|ции|ной|уда|вов| бе|оро|нст|ами|циа|кон|сем|е о|вно| эт|азо|х п|ни |жде|м п|ког|от |дст|вны|сть|ые |о о|пос|сре|тра|ейс|так|и б|дов|му |я к|нал|дру| др|кой|тер|ь п|арс|изн|соц|еди|олн",
    "ukr": "на | пр| і |пра|рав| на|ня |ння| за|ого| по|ти |го |люд| лю|во | ко| ма|льн|юди|их |о н| не|аво|анн|дин| св|сво|ожн|кож|енн|пов|жна| до|ати|ина|ає |а л| бу|аці|не |ува|обо| ос| як|має| ви|них|аль|або|є п| та|ні |ть |ови|бо | ві| аб|ере|і п|а м|вин|без|при|іль|ног|о п|ми |та |ом |ою |бод|ста|воб| бе|до |ва |ті | об|о в|ост| в | що|ий |ся |і с| сп|инн|від|ств|и п|ван|нов|нан|кон| у |ват|она|ії |но |дно|ій |езп|пер| де|ути|ьно|ист|під|сті|бут| мо|и і|ідн|ако|нні|ід |тис|що |род|і в|а з|ава| пе|му |і н|а п|соб|ої |а в|спр|ів |ний|яко|ду |вно|і д|ну |аро|и с| ін|ля |рів|у в| рі|и д|нар|нен|ова|ому|лен|нац|ним|ися|чи |ав |і р|ном| ро|нос|ві |вни|овн| її|ові|мож|віл|у п| пі| су|її |одн| вс|ово|ють|іст|сть|і з| ст|буд| ра|чен|про|роз|івн|оду|а о|ьни|ни |о с|сно|зна|рац|им |о д|ими|я і|ції|х п|дер|чин| со|а с|ерж|и з|и в|е п|ди |заб|осо|у с|е б|сі |тер|ніх|я н|і б|кла|спі|в і| ні|о з|ржа|сту|їх |а н|нна|так|я п|зпе| од|абе|для|ту |і м|печ| дл|же |ки |віт|ніс|гал|ага|е м|ами|зах|рим|ї о|тан|ког|рес|удь| ре|то |ков|тор|ара|сві|тва|а б|оже|соц|оці|ціа|осн|роб|дь‐|ь‐я|‐як|і і|заг|ахи|хис|піл|цій|х в|лив|осв|іал|руч|ь п|інш|в я|ги |аги| ді|ком|ини|а і|оди|нал|тво|кої|всі|я в|ною|об |о у|о о|і о",
    "bos": " пр| и |рав| на|пра|на |да |ма |има| св|а с|а п| да|а и| по|је |во |ко |ва | у |ако|но |о и|е с| за| им|аво|ти |ава|сва|и п|ли |о н|или|и с|их |вак| ко|ост|а у| сл|не |вањ| др|ње | не|кој|ња | би|ије|и д|им |ств|у с|јед|бод|сло|лоб|обо| ил|при| је|ање| ра|а д| об| су|е и|вје|се |ом |и и|сти| се|ју |дру|а б| ос|циј|вој|е п|а н|раз|су |у п|ања|о д|ује|а о|у и| од|и у|ло |ова|дје|жав|оје|а к|ни |ово|едн|ити|аци|у о|о п|нос|и о|бра| ка|шти|а ј|них|е о|пре|про|ржа| бу|буд|тре| тр|ог |држ|бит|е д|у з|ја |ста|авн|ија|е б|миј|и н|реб|сво|ђи |а з|ве |бил|ред|род|аро|ило|ива|ту |пос| ње| из|е у|ају|ба |ка |ем |ени|де |јер|у д|одн|њег|ду |гов|вим|јел|тва|за | до|еђу|ним| са|нар|а т| ни|о к|оји|м и| см| ст|еба|ода|ран|у н|дна|ичн|уђи|ист|вно|алн|и м| дј|нак|нац|сно|нст|тив|ани|ено|е к|е н|аве|ан |чно|и б|ном|сту|нов|ови|чов|нап|ног|м с|ој |ну |а р|еди|овј|оја|сми|осн|анс|ара|дно|х п|под|сам|обр|о о|руг|тво|ји | мо|его|тит|ашт|заш| кр|тељ|ико|уна|ник|рад|оду|туп|жив| ми|јек|кри| ов| вј| чо|ву |г п| оп|међ|њу |рив|нич|ина|одр|е т|уду| те|мје|ење|сви|а ч|у у|ниц|дни| та|и т|тно|ите|и в|дст|акв|те |ао | вр|ра |вољ|рим|ак |иту|ави|кла|вни|амо| он|ада|ере|ена|сто|кон|ст |она|иво|оби|оба|едс|как|љу ",
    "srp": " пр| и |рав|пра| на|на | по|ма | св|да |има|а п|а и|во |ко |ва |ти |и п| у |ако| да|а с|аво|и с|ост| за|о и|сва| им|вак|ава|је |е с| сл| ко|о н|ња |но |не | не|ом |ли | др|или|у с|сло|обо|кој|их |лоб|бод|им |а н|ју | ил|ств| би|сти|а о|при|а у| ра|јед|ог | је|е п|ње |ни |у п|а д|едн|ити|а к|нос|и у|о д|про| су|ање|ова|е и|вањ|и и|циј| ос|се |дру|ста|ају|ања|и о| об|род|ове| ка| де|е о|аци|ја |ово| ни| од|и д| се|ве |ује|ени|ија|авн|жав| ст|у и|м и|дна|су |ред|и н|оја|е б|ара|што|нов|ржа|вој|држ|тва|оди|у о|а б|одн|пош|ошт|ним|а ј|ка |ран|у у| ов|аро|е д|сно|ења|у з|раз| из|осн|а з|о п|аве|пре|де |бит|них|шти|ву |у д|ду |ту | тр|нар| са|гов|за |без|оји|у н|вно|ичн|еђу|ло |ан |чно|ји |нак|ода| ме|вим|то |сво|ани|нац| ње|ник|њег|тит|ој |ме |ном|м с|е у|о к|ку | до|ика|ико|е к|пос|ашт|тре|алн|ног| вр|реб|нст| кр|сту|дно|ем |вар|е н|рив|туп|жив|те |чов|ст |ови|дни|ао |сме|бра|ави| ли|као|вољ|ило|о с|штв|и м|заш|њу |руг|тав|анс|ено|пор|кри|и б|оду|а р|ла | чо|а т|руш|ушт| бу|буд|ављ|уги|м п|ком|оје|вер| ве|под|и в|међ|его|вре|акв|еди|тво| см|од |дел|ена|рад|ба | мо|ну |о ј|дст|кла| оп|как|сам|ере|рим|вич|ива|о о| он|вни|тер|збе|х п|ниц|еба|е р|у в|ист|век|рем|сви|бил|ште|езб|јућ|њен|гла",
    "uzn": "лар|ан |га |ар | ва| би|да |ва |ир | ҳу|ига|уқу|бир|ҳуқ|қуқ|ган| ҳа|ини|нг |р б|иш | та|ни |инг|лик|а э|ида|или|лиш|нин|ари|иши| ин|ади|он |инс|нсо|сон|ий |лан|дир| ма|кин|и б|ши |ҳар| бў|бўл| му|дан|уқи|ила|қла|р и|қиг|эга| эг| ўз|ки |эрк|қил|а б|оли|кла| эр|гад|лга|нли| ол|рки|и ҳ| ёк|ёки| қа|иб |иги|лиг|н б|н м| қи| ба|ара|атл|ри | бо|лат|бил|ин |ҳам|а т|лаш|р ҳ|ала| эт|инл|ик |бош|ниш|ш ҳ|мас|и в|эти|тил|тла|а ҳ|и м|а қ|уқл|қар|ани|арн|рни|им |ат |оси|ўли|ги | да|а и|н ҳ|риш|и т|мла|ли | ха|а м|ият| бу|рла|а а|рча|бар|аси|ўз |арч|ати|лин|ча |либ|мум| ас|аро|а о|ун |таъ| бе| ту|икл|р в|тга|тиб| ке|н э|ш в|мда|амд|али|н қ|мат|шга| те|сид|лла|иро| шу| қо|дам|а ш|ирл|илл|хал|рга| де|ири|тиш|умк|ола|амл|мки|тен|гин|ур |а ў|рак|а ё|имо| эъ|алқ| са|енг|тар|рда|ода| ша|шқа|ўлг|кат|сий|ак |н о|зар|и қ|ор | ми|нда|н в| си|аза|ера|а к|тни|р т|мил| ки|к б|ана|ам |ошқ|рин|сос|ас | со|сиз|асо|нид|асл|н ў|н т|илг|бу |й т|ти |син|дав|шла|на |лим|қон|и а|лак|эма|муҳ|ъти|си |бор|аш |и э|ака|нга|а в|дек|уни|екл|ино|ами| жа|риг|а д| эм|вла|лма|кер| то|лли|авл| ка|ят |н и|аъл|чун|анл|учу| уч|и с|аёт| иш|а у|тда|мия|а с|ра |ўзи|оий|ай |диг|эът|сла|ага|ник|р д|ция| ни|и ў|ада|рор|лад|сит|кда|икд|ким",
    "azj": " вә|вә |әр |лар| һә|ин |ир | ол| һү| би|һүг|үгу|гуг|на |ләр|дә |һәр| шә|бир|ан | тә|лик|р б|мал|лма|асы|ини|р һ|шәх|ән |әхс|ары|гла|дир|а м|али|угу|аг | ма|ын |илә|уна|јәт| ја|икд|ара|ар |әри|әси|рин|әти|р ш|нин|дән|јјә|н һ| аз|ни |әрә| мә|зад|мәк|ијј| мү|син|тин|үн |олу|и в|ндә|гун|рын|аза|нда|ә а|әт |ыны|нын|лыг|илм| га| ет|ә ј|кди|әк |лә |лмә|олм|ына|инд|лун| ин|мас|хс |сын|ә б|г в|н м|адл|ја |тмә|н т|әми|нә |длы|да | бә|нун|бәр|сы | он|әја|ә һ|маг|дан|ун |етм|инә|н а|рлә|си | ва|ә в|раг|н б|ә м|ама|ры |н и|әра|нма|ынд|инс| өз|аны|ала| ал|ик |ә д|ләт|ирл|ил | ди|бил|ығы|ли |а б|әлә|дил|ә е|унм|алы|мүд| сә|ны |ә и|н в|ыг |нла|үда|аси|или| дә|нса|сан|угл|уг |әтл|ә о|хси| һе|ола|кил|ејн|тәр|јин| бу|ми |мәс|дыр|һәм| да|мин|иш | һа| ки|у в|лан|әни| ас|хал|бу |лығ|р в| ед|јан|рә |һеч|алг| та|еч |и с|ы һ|сиа|оси|сос|фиә|г һ|афи|ким|даф| әс|ә г| иш|н ә|ији|ыгл|әмә|ы о|әдә|әса| со|а г|лыд|илл|мил|а һ|ыды|сас|лы |ист| ис|ифа|мәз|ыр |јар|тлә|лиј|түн|ина|ә т|сиј|ал |рил| бү|иә |бүт| үч|үтү|өз |ону| ми|ија| нә|адә|ман|үчү|чүн|сеч|ылы|т в| се|иал|дах|сил|еди|н е|әји|ахи|хил| ҹә|миј|мән|р а|әз |а в|илд|и һ|тәһ|әһс|ы в|һси|вар|шәр|абә|гу |раб|аја|з һ|амә|там|ғын|ад |уғу|н д|мәһ|тәм| ни|и т| ха",
    "koi": "ны |ӧн | бы|да | пр|пра|рав| мо|лӧн| да|быд|лӧ |орт|мор|ӧм |аво|ӧй | ве|ыд | не|нӧй|ыс |ын |сӧ |тӧм|сь |во |эз |льн|ьнӧ|тны|д м| ас|ыны|м п| по|сьӧ| и |то |бы | ӧт| эм| кы|аль|тлӧ|н э| от|вер|эм | кӧ|ртл|ӧ в| ко|воэ|ств|ерм|тшӧ| до|ола|ылӧ|вол|ас |ӧдн|кыт|ісь|ето|нет|тво|ліс|кӧр|ӧс | се|ы с|шӧм|а с|та |злӧ| ме| ол|аци|ӧ к|ӧ д|мед| вы|вны|а в|на |з в| на|ӧ б|лас|ӧрт| во| вӧ| сі|лан|рмӧ|дбы|едб|ыдӧ|оз |ась| оз| сы|ытш|олӧ|оэз|тир|с о| чу|ы а|оти|ция|ись|ӧтл| эт|рты| го|ы п|ы б|кол|тыс|сет| сь|рті|кӧт|о с|н б|дз |н н| мы| ке|кер|тӧн|тӧг|ӧтн|ис |а д|мӧ |ост|ӧ м| со|онд|нац|дӧс|итӧ|ест|выл| ви|сис|эта| уд|суд|нӧ |удж|ӧг |пон|ы н|н п|мӧд|а п|орй|ӧны|ӧмӧ|н м|ть |сыл|ана|ті |нда|рны|сси|рре|укӧ|з к|чук|йын|рез| эз|ысл|ӧр |ьӧр|с с|с д|рт |с в|езл|кин|осу|эзл|й о|отс| тӧ|ы д| ло| об|овн|лӧт|асс|кӧд|с м|ӧ о|нал|быт|она|ӧт |слӧ|скӧ|кон|тӧд|ытӧ|дны|а м|ы м|нек|ы к|ӧ н|асл|дор|ӧ п| де| за|а о| ов|сть|тра| дз|ь к|ӧтч|н к| ст|аса|етӧ|ьны|мӧл|умӧ|сьн| ум|ерн|код| пы|тла|оль|иал|а к|н о| сэ|а н|ь м|кыд|циа|са | ли|а б|езӧ|й д| чт|ськ|эсӧ|ион|еск|ӧ с|оци|что|ан |соц|йӧ |мӧс|тко|зын|нӧя|вес|енн| мӧ|ӧтк|ӧсь|тӧ |рлӧ|ӧя |оля|рйӧ|ӧмы|гос|тсӧ|зак|рст|з д|дек|ннё|уда|пыр|еки|ако|озь| а |исӧ|поз|дар|арс|ы ч",
    "bel": " і | пр|пра|ава| на|на | па|рав|ны |ць |або| аб|ва |ацы|аве|ае | ча|ння|анн|льн| ма| св|сва|ала|не |чал|лав|ня |ай |ых | як|га |век|е п| ад|а н| не|пры|ага| ко|а п| за|кож|ожн|ы ч|бод|дна|жны|ваб|цца|ца | ў |а а|ек |мае|і п|нне|ных|асц|а с|пав|бо |ам |ста| са| вы|ван|ьна| да|ара|дзе|одн|го |наг|він|аць|оўн|цыя|мі |то | ра|і а|тва| ас|ств|лен|аві|ад |і с|енн|і н|аль|най|аво|рац|аро|ці |сці|пад|ама| бы| яг|яго|к м|іх |рым|ым |энн|што|і і|род| та|нан| дз|ні |я а|гэт|нас|ана| гэ|інн|а б|ыць|да |ыі |оў |чын| шт|а ў|цыі|які|дзя|а і|агу|я п|ным|нац| у | ўс|ыя |ьны|оль|нар|ўна|х п|і д|ў і| гр|амі|ымі|ах | ус|адз| ні|эта|ля |воў|ыма|рад|ы п|зна|чэн|нен|аба| ка|ўле|іна|быц|ход| ін|о п| ст|ера|уль|аў |асн|сам|рам|ры | су|нал|ду |ь с|чы |кла|аны|жна|і р|пер|і з|ь у|маю|ако|ыцц|яко|для|ую |гра|ука|е і|нае|адс|і ў|кац|ўны|а з| дл|яўл|а р|аюч|ючы|оду| пе| ро|ы і|вы |і м|аса|е м|аду|х н|ода|адн|нні|кі | шл|але|раз|ада|х і|авя|нав|алі|раб|ы ў|нна|мад|роў|кан|зе |дст|жыц|ані|нст|зяр|ржа|зак|дзі|люб|аюц|бар|ім |ены|бес|тан|м п|дук|е а|гул|я ў| дэ|ве |жав|ацц|ахо|заб|а в|авы|ган|о н|ваг|я і|чна|я я|сац|так|од |ярж|соб|м н|се |чац|ніч|ыял|яль|цця|ь п|о с|вол|дэк| бе|ну |ога| рэ|рас|буд|а т|асо|сно|ейн",
    "bul": " на|на | пр|то | и |рав|да |пра| да|а с|ств|ва |та |а п|ите|но |во |ени|а н|е н| за|о и|ото|ван|не | вс|те |ки | не|о н|ове| по|а и|ава|чов|ни |ане|ия | чо|аво|ие | св|е п|а д| об|век|ест|сво| им|има|ост|и д|и ч|ани|или|все|ли |тво|и с|ние|вот|а в|ват|ма | ра|и п|и н| в |ек |сек|еки|а о| ил|е и|при| се|ова|ето|ата|воб|обо|бод|аци|ат |пре|оди|к и| бъ| съ|раз| ос|ред| ка|а б|о д|се | ко|бъд|лно|ния|о п| от|ъде|о в|за |ята| е | тр|и и|о с|тел|и в|нит|е с|ран| де|от |общ|де |ка |бра|ен |ява|ция|про|алн|и о|ият|ст |нов| до|его|как|ато| из|нег|а т|ден|а к|щес|а р|тря|а ч|ряб|о о|вен|ябв|бва|дър|гов|нац|ено|тве|ърж|е д|нос|ржа|а з|вит|зи |акв|лен| та|ежд|и з|род|е о|обр|нот| ни| с |т с|нар|о т|она|ез |йст|кат|иче| бе|жав|е т|е в|тва|зак|аро|кой|осн| ли|ува|авн|ейс|сно|рес|пол|нен|вни|без|ри |стр| ст|сто|под|чки|вид|ган|си |ди |и к|нст| те|а е|вси|еоб| дъ|сич|ичк|едв|жен|ник|ода|т н|о р|ака|ели|одн|елн|лич| че|чес|бще| ре|и м| ср|сре|и р|са |лни| си|дви|ичн|жда| къ|оет|ира|я н|дей| ме|еди|дру|ход|еме|кри|че |дос|ста|гра| то|ой |тъп|въз|ико|и у|нет| со|ави|той|елс|меж|чит|ита|що |ъм |азо|зов|нич|нал|дно| мо|ине|а у|тно|таз|кон|лит|ан |клю|люч|пос|тви|а м|й н|т и|изв|рез|ази|ра |оят|нео|чре",
    "kaz": "ен |не | құ|тар|ұқы| ба| қа|ға |ада|дам|құқ|ық | бо| ад|ықт|қта|ына|ар | жә|ың |ылы|әне|жән| не|мен|лық|на |р а|де | жа|ін |а қ|ары|ан | әр|қыл|ара|ала| ме|н қ|еме|уға|ның| де|асы|ам |іне|тан|лы |нды|да |әр |ығы|ста|еке| өз|ын |ған|анд|мес| бі| қо|ды |ің |бас|бол|етт|ып |н б|ілі|қық|нде|ері|е қ|алы|нем|се |бір|лар|есе|ы б|тын|а ж| ке|тиі|ост|ге |бар| ти|е б| ар|дық|сы |інд|е а|аты| та| бе|ы т|ік |олы|нда|ғын|ры |иіс|ғы | те|бос|луы|алу|сын|рын|еті|іс |рде|қығ|е ж|рін|дар|іні|н ж|тті|қар|н к|ім | ер|егі|ыры|ыны| са|рға|ген|ынд|аны|уын|ы м|лға|ана|нің|тер|уы |ей |тік|ке |сқа|қа |мыс|тық|м б|ард| от|е н|е т|мны|өзі|нан|гіз|еге| на|ы ә|аза|ң қ|лан|нег|асқ|кін|амн|кет|рал|айд|луғ|аса|ті |рды|і б|а б|ру | же|р м|ді |тта|мет|лік|тыр|ама|жас|н н|лып| мү|дай|өз |ігі| ал|ауд|дей|зін|бер|р б|уда|кел|біл|і т|қор|тең|лге| жү|ден|ы а|елі|дер|ы ж|а т|рқы|рлы|арқ| тү|қам|еле|а о|е ө|тін|ір |ең |уге|е м|лде|ау |ауы|ркі|н а|ы е|оны|н т|рыл|түр|ция|гін| то| ха|жағ|оға|осы|зде| ос|ікт|кті|а д|ұлт|лтт|тты|лім|ғда| ау| да|хал|тте|лма| ұл|амд|құр|ірі|қат|тал|орғ|зі |елг|сіз|ағы| ел|ң б|ыс | ас|імд|оты| әл|н е|ағд|қты|шін|ерк|е д|ек |ені|кім|ылм|шіл|аға|сты|лер|гі |атт|кен| кө|ым‐| кұ|кұқ|ра |рік|н ә| еш",
    "tat": " һә|лар|әм |һәм| ке| хо|кук|оку|хок|еше| бе|ләр|кеш|га |әр |рга|ан |кла| бу|ар |ең |нең|гә | то| ба|да |ргә| ти|ырг|һәр|ене|бер|ән |ен |р к|бул|укл|дә |а т|ары|тор|ире| үз|на |ган|ара| ка| ал|ә т|нә | ит| дә|ы б| ир|рын|ше |ын |енә|тие|лык|екл|ына|н т|иеш|бар|еле|ка |елә|а х|н б|кы |рек|ала|кар| та|ә к|нда|еш |лән|бел|укы|лан|ите|тә |шен|ле |лы |ез |ерг|н и|ә б|а к|клә|үз |тел|лыр|не |әрг|ы һ|е б| га| ха|алы|рне|м и|тен|әрн|а б|ның|ынд|ың |ләт|дан|сә | як|лга|улы|ел |а а| яи|яис|асы|ш т|а һ| са|рлә|лек|иге|ә х|гез|орм|ем |аны|р б|м а|р һ|рмы|мыш|сын|шка|ә һ|исә|тәр|үлә|әт |мәт|сен|сез|чен| ни|ә и|н м|илл|ять|ны |ылы|үзе| ки| эш| ту|алу|акы|ып |уга|ль |тан|н к|лу |бу |мас|рен|кә | тү| тә|түг|зен| җә|тын|ди |баш|кле|гән|ть | би|әре|штә|гын|әүл|ер |мил| ми|клы|гел|ыш |лер|ерл|әве|рдә|а я|р а| мә| рә|лем|хал| ан|ң т| аш|ык |ция|е х|стә|ә д|аль|рак|ек | де|рәв|тот|кән|улг|орг|веш|ешт|ни |итә|кка|м т|үге|шел|а и|ндә| да|рел|кер| кы|ерә|та |н я|еге|ый |а д|аци|р о|шла|тлә|әтл|н д|айл|ллә|ард|рда|кта|шкә| за|ге |ләш|ш б|әсе|кон|шыр|циа|нин|лау|уры|ры |оты|әне| тө|инд|нди| җи|оци|соц|лә |арт|якл|зак|тиг|рке| ди| со|ыкл|кем| ко|р и|ң б|әте|гыя|чар|үгә|ин |иле| сә| ил|мгы| ае|н а|аер|ыны|л һ",
    "tuk": " би|лар| ве|ве |да |ада|ары| хе|ир | ад|бир|дам|кла|ер |р б|ың | ха|ара|га |ен |лан|ыны|или|дыр|ам |ала| бо|хер|р а|ыр |лы |лер|ан |бил|иң |ыды|р х|акл|нда| өз|клы|ны |хук|ери| ху|уку|ага|не |лыд|ине|ына|лен|на |хак|де |‐да|ин |рын|атл| эд|маг|өз | де|асы|лыг|кук|е а|ынд|алы|лма|бол|дан|ини|а х| я‐|е х|ге |иле|я‐д|ар |ама|ли |ыгы|ети| ба| га|гын|ере|укл|лиг|ның|зат|лык|тлы|нде|ни |лик|ден|мак|сын|дил|ры |аны|кин|әге|п б|а г|хем|иги|эрк|аза|а д|мек| эр|мал|ыкл|мәг|сас| эс|екл| ма|рин|эса|ола|ы б|айы|н э|эди| гө| хи|сы | аз|баш|ы д|йда|шга|ашг|а в| до|ыет|ы в|дак|ниң|рки|гал|чин|гда|ак | җе|а б| эт|этм|кы |лет|йән| та|гин|ян |тме|хич|ич |мез| гу|хал|ылы|үнд|илм|дай|ягд| яг|и в|им |акы|ы г|ән |а а|рың|ги |тле|н м| го|ип |ал |еси| се|лме| ка|м х|дең|ң х|е д|дир|илл|рил| ал|кан|е г|лин|ра |дол| бе| ми|мил|ң д|н х|ели|н а|е м| ге|ы х| дө|ик | со|ң а|чил|дөв|е б| са|гар|е в|ең |н б|рма| ме|кли|үчи| дә| үч|ция|н в| дү|и б|айд|кле|сер|а я|соц|гор|оци|дал|мы |олм|циа|уң | он|уп |кда|дәл|ири| ди|еле|лип|алк|лим|гур|үни|нме| әх|н г| иш|ы ө|ң э|нун|еги|тин|ы а|рле|аци|ыз |з х|сыз|аха|м э|олы|рам| ту| ни|ып |ерт|алм|ора|и х|хли|әхл|к э|өвл|вле|тмә|ет |нли|ахс|гөз|гы |етл|ы ү|нуң|ону|сиз|емм|ек ",
    "tgk": "ар | ба| ҳа| да|ад | ва|он |ва | та|дар|ти | ин|ба | бо| ки|аро| до|ои |дор|ард|ки |бар|д ҳ|уқу| як|ин |ҳар|и о| на| ма|и м|ора| ҳу|як |ни |нсо|инс|и ҳ|аи |и б|сон|рад| му|ҳои|р я|ҳуқ|қуқ|ҳақ|ии |к и| ша|и д| аз|и и| оз|нд |яд |қ д|озо|аз |зод|анд|д б|ояд| ка|ият|она|да |амо|ақ |а б|ди | ё |гар|ат |дан|ҳам|оди|рда|моя| он|уда|қи | ху|бо |и т|дон|ст |нам|н ҳ|ода|и с|ан |н б|мил|и х|бош|они|оша|худ|ава|боя|аст|и а|ро | ме|а ҳ|имо|ила|оми|оба|ида|кар|н д|лат|д в|а ш|ҳо | ас|таҳ|рои|и н|д к|яти| ди|шад|ӣ в|ри |рдо|шав| ми|е к|роб|тар|та |кор| бе|о д|вад|мон|иҳо|ли |уд |оси|ошт|ми |р м|ати|т б| со|ӣ ё|нҳо|мин|шар|ара|таъ|ани|а в|иро|а д|дав|ят |даа| са|ама|дош|раф|шуд|лӣ |д а|оти|а м| фа|ист|ор |р ҳ|на |и к|р к|д т|и ҷ|и ш| эъ| су|н м|н в|и ӯ|фи |вар|диҳ|ига|зар| шу|ари|а т| иҷ| ақ| ҳи|асо|р б|т ҳ|а а|одо|мум|р в|а о| ӯ |рон|наз|диг| ни|бот| ҷа|авр| қа|яи |р д|уқи|лал|кас|шта|уна|еҷ |ино|тҳо|уни|або|сти| во|авл|и қ|вла|ун |у о|ӣ б| ҳе|дӣ |қу |чун|н и|сар|ояи|тав|маҳ|онҳ|қар|атҳ|тир|оҳ |ахс| қо|уқ |оли| ис|д д|и з| ко|аза|ори|фар|сос|ран|н к|р а|ҷти|ону|сӣ |ири|рра|рӣ |ҳеҷ| за|ид |ҳти|рии|ами|қон|уди|н н| од|иҷт|мия|ъло|лом|ию |наи|али|нда|оӣ |оят|янд| зи|оян|ӣ ҳ|и п|офи|киш|ҳим|рат|тим",
    "kir": " жа|на |ана|жан| би|уу |уку|га |бир| ук|ар |ен |луу|тар|кук|укт| ка| ад|ын |ада|ууг|дам| ме|уга|ык | ар|ене|мен|нен|ан |ары|олу| бо|ин |ам |ган|ир |бол| ал|ара|нда|н к|туу|р б|н ж| ба|анд| же|р а|кта|ына|ард|кту|эрк|үн |да |н б|н э| эр|нди|а т| ко|рды|н а|дык|рки|инд|а ж|кин|ала|а а|лар|аны|үү | өз|а к|тер|алу| та|а у|алы|а э|же |ук |ийи| ти|иш |тий| ма|гө |кыл|йиш|улу|нын|ке |н т|кар|бар|или|у м| кы|иги|рын|а б|үгө|рга|е а|ун |етт|дик| ту|дар|тта|баш|у а|н у| ээ|дын|им |рүү|гин|лык|ушу|нды|тур| са| эл| эм| мү|гон|лга|алд|икт|үүг| бе|ры |өз |нан|он | ан|кте|ул |дай|ерд|диг|р м|ери|үчү| не|атт|лды|еке|еги|үнө|лук|амд|у б|ынд|үнү|рди|тук|ка |кан|к ж| ки|м а|күн|не |ине|мда|рин|ого|кет| со|кам|дин|к м| эч| то|сыз|ылу|өзү| де|н м|ция|ээ |чүн|гиз|уп |нег|эч |руу|ыз |мес|эме| иш|лут|ы м|шка|ыкт|мам|ашк|лде| ке|лго| тү|ө ж|олг|ес |к т|кор|ге |бил|түү|угу|рал|алг|тын|кен| ул|лим|утт|ыгы|орг|н н|у ж|рде|нуу|тал|ч к|рго|мак| те| уш|уну|ктө|ди |акт|нүн| ди|зүн|иле| кө|кат|аци|мсы| эс|тык|е к|ей |тан|е э|ай |ер |соц|оци|циа|аты| жо|к к|амс|лан|а м|ири|ске|айд|ирд| мы|ылы|зги|ыны|ага|ген|е б|шул|тол|өнү|дыг|е ж|ү ү|з к|айы|раб|енд|абы|жал|ү ж|оо |уна|к а|кал|лек|ект|рма|дей| үч|тоо|мат|у э|бер",
    "mkd": " на|на | пр| и |во | се|то |ите|те |рав|та |а с|пра|ува|да | да| не|ва |а п|а н|и с|ата|о н|еко|а и| по|но |ој |кој| со| за| во|ств|ја |ње |ање|аво|ни | им|от |е п|е н|ма |ат |вањ|ост|а д|о с|е и|се |ова|ија|и п| сл|а о|има|сек|сло|ото|ли |о д|ава|обо|о и| ил|или| би|бод|и н|лоб| од|бид|ред|ен |при|вот|иде|а в|ста| об|и и|и д|пре|нос|ст |е с| ни| ќе|ове|аат|аци|ќе |со |ови|про|ј и|тво| ра|ест|што| де|т и|акв| ко|раз|гов|его|нег|ани|едн|ако|циј|бра|од |а з|е б|и о|а б|о п|ват| е | др|ето|ваа|как|ди |т с| ка| чо|ени|алн|одн|ено| си|чов| шт|а г|а е|вен|нит| ја|де |оди|е о|ран|и з|сно|нот| ед|тит|лно|ви |јат|ден|т н|нац| оп| до| ос|и в|осн|кон|дна|е д| ст|век|о о|род|сто|сит|еме|ара|дно|обр|ј н|пшт|еди|опш|за |ние|аро|нов|а к|вни|дру| ов|тве|жив|ште|д н|ие | ме|ед |иот|и м|о в|ќи |дат|шти|јќи|без|бед|ки |ков|ко |а р|нар|чно|дни| вр|ели|нак|ашт|ичн|ка |ема|цел|зем|еду|чув|тес|држ|ник|т п|луч|аа |деј|нст|не |а ч|руг|ода|ивн| це|нив|дин|авн| зе|нио|пор|а м|заш|лас|вит|дек|го |ине|ело|нет|ез |тен| ре| из|под|раб|або|бот|дув|нув| бе|ење|еде|он |њет|зов|иту|ван|н и|аѓа|е в|еѓу|рем|дел|о к|кот|им | жи|дос|вре|меѓ|олн|нап| го|емј|кри|уна|нем|оја| су|ита|азо|лит|тор|инс|ора|огл|ипа|пот|слу|кви",
    "khk": " эр|эрх| хү|ний|н б|эн |тэй|ийг|х э|эй | бо|хүн| бү|йн |ан |ах | ба|ийн|бол|ий | ха|бай|уул|рх |оло|й х|йг |гаа|эх |бүр|гүй|үн | бу|он |аар|рхт|үнд|хтэ|үр |лэх|ар | за|н х|лах|эр | хэ|й б|өлө|н э|лөө|эл | үн|аа | ул|ын |хий|үй | ор| ту|улс|ула|үлэ| чө|чөл|н т|үүл| ху|сэн| ни|ндэ|лон|гээ|р х|өөр|сан| нэ|ны | ёс|нь |эд | гэ| нь| ч | тө| тэ|лаг|оро|дэс|лс |г х|ох |үни|ээр|хам|х ё| ша|д х|р э|лго|лд | дэ|н а|бую|уюу|гуу|төр|ай |юу |тай|ээ |ж б|эг |лий|хан|ыг | эд| то|х б|дсэ|й э|рга| ал|хар|арг|ад |лга|рэг| зо|айг|ага| тү|л х|ал | хө|өөт| са|н н|йгэ|дэл|нд |гий|н з|ол |ава|лла| өө|рол|өтэ|гэр|г б|л б|бус|нэг|н д|аг |аал|н ү|алд|рла| үз|гэм|й а|н у| ол|хуу|х ч|эрэ|мга|олг|эс |хүү|той| ар|үү |лал| эн| мө|йх |ин |өрө|х т|луу|рий|сон| га|хэн|айх|эни| ам|гла|өр |аса|ана|амг| би|ард| ял|йгм|ой |лын|үрэ|эгт| ав|эдэ|оо |мий|х н|аан|үйл|арл|нха|тгэ|дээ|с о|рхи|лов|д н|тэг|өг |өн |хэр|лэн|өөг|үүн|вср|га |р т| хи|хүр|рон|ч б| хо|гөө| мэ|бие|н г|ура|бүх|ори|али| аж| үй| яв|өх |хээ|г н|ата| та|гш |г ү|эгш|вах|лох|эгд|длэ|х ү|гох|үх |энэ|лж |олц| шү|л т| да|дал|эж |д б|лан|й т|айл|л н|х а|агл|тоо| со|өри|йгу|гми|дил|ээн|дар|н ш|шүү|овс| ад|а х|р ч|ади|ааг|лаа|айд|амь|гтэ|н с|д т|ийт|лэл|х ш|н ч|унх",
    "kbd": "гъэ|ыгъ| къ| ху|ыху|ныг| зы|эм |ну |хуи|хуэ|ъэ | и |уит|эхэ|къы|гъу|тын| зэ|э з|ӏых|ым |ъэр|хьэ|эр | цӏ|цӏы|хэм|э и|ъуэ|эху|агъ|ыны|иты|нэ |къэ|зы |уэ | дэ|эу |м и|эгъ|эну|энэ|эны|рал|эра|эщ |хъу|м х|тхэ|этх|ӏэ |хэн|дэт|э х|у х|игъ|щхь|ы ц|зэх| гъ| хэ|кӏэ|рэ |ыну|ъэх|у з| щы|ум |уэф|щӏэ|эдэ|хэр|ъун|ми |хум|лъэ|уэд|іэ | ик|мрэ|уэн|ъэм|хэт|м к| нэ|и х|э щ|хуа|эмр|э к|псо|лъы|экӏ| мы| е |иіэ| иі| я |ъэп|у д|фащ| лъ|ащэ|къу|эры|зэр|р з|эфа|ӏи |ти |алъ|эти|ри |іэщ|э г|ал |уэх|ауэ|щіэ| хъ| щӏ|уну|ъым|ъэщ|езы|зых|экі|у к|м щ|кіэ|ӏуэ|ншэ|ъых|ху |ъыщ|щэх|алы|икӏ|зым|бзэ|у и|укъ|кӏи| пс|эщӏ| щх| ха|абз|м е|іуэ|и к|эгу| гу|уне|ней| ун|ыхэ|умэ|ӏэщ|нук|у щ|эпэ|ъум| иӏ|ьэн|иӏэ|хаб|щыт|эпс| ез|хъэ|лым|ыхь|и ц|риг|щӏы|ъэк|ъыт|зэг|эри|шэу|нэг|ъэж|эщх|ъэу|эхъ|у п|мы |ейп|дэ |эн |уу | ду|и з|сэн|ъэз| ам|йпс|пхъ|ама|мал|дун|алх|лхэ|мэн|дэу|ьэ |ьэп|э д|м з|ьэх|ылъ|ыщы|уэщ|іых|уна|ціы| ці| щі|э я|щіа|хур|эжы|эсэ|ту |э е|н х| зи|со |эты|ъэс|сом|ыкӏ|нэх|псэ|и л|апщ|хэг|ъуа|ынш|и н|лъх|жьэ|и д|ызэ|жын|пщӏ|пкъ|егъ|энш|ам |апх|ыр |ъэг| ир| те|иту|и и|р и|ным|м я|и щ|м д|псы|э п|эщі|ыт |хуе|кӏу|тэн|эзэ|джэ|э л|гуп| за|къе|ыдэ|уэм|афэ|ужь|жьы|уэт|и у|оми|ын |ыты|ытэ|раг|ур |ыкъ|сэх|пса|и я|р щ|эми|сэу|эпк|кэ "
  },
  "Arabic": {
    "arb": " ال|ية | في|الح|في | وا|وال| أو|ة ا|أو |الم|الت|لحق|حق |لى |كل |ان |ة و|الأ| لك|لكل|ن ا|ها |ق ف|ات |مة |ون |أن |ما |اء |ته |و ا|الع|ي ا|شخص|ي أ| أن|الإ|م ا|حري| عل|ة ل|من |الا|حقو|على|قوق|ت ا|أي |رد | شخ| لل| أي|ق ا|لا |فرد|رية| ول| من|د ا| كا| إل|خص |وق |ا ا|ة أ|ا ي|ل ف|ه ا|نسا|جتم|ن ي|امة|كان|دة | حق|ام |الق|ة م| فر|اية|سان|ل ش|ين |ن ت|إنس|ا ل| لا|ذا |هذا|ن أ|لة |ي ح| دو|ه ل|لك |ترا|لتع|اً |له |إلى| عن|ى ا|ه و|ع ا|ماع|د أ|اسي| حر|ة ع|مع |الد|نون| با|لحر|لعا|ن و|، و|يات|ي ت|الج| هذ|ير |بال|دول|لإن|عية|الف|ص ا| وي|الو|لأس| إن|أسا|ساس|ماي|حما|رام|سية|انو|مل |ي و|عام|ا و|تما| مت|ة ت|علي|ع ب|ك ا| له|ة ف|قان|ى أ|ول |هم |الب|ة ب|ساو|لقا|الر|لجم|ا ك|تمت|ليه|لتم|لمت|انت| قد|اد |ه أ| يج|ريا|ق و|ل ا|ا ب|ال |يه |اعي|لدو|ل و|لإع|لمي|لمج|لأم|تع |دم |تسا|عمل|اته|لاد|رة |اة |غير|قدم|وز |جوز|يجو|عال|لان|متع|مان|فيه|اجت|م و|يد |تعل|ن ل|ر ا| يع| كل|مم |مجت|تمع|دون| مع|تمي|ذلك|كرا|يها| مس|ميع|إعل|علا| تم| عا|ملا|اعا|لاج|ني |ليم|متس|ييز|يم |اعت|الش| تع|ميي|عن |تنا| بح|لما|ي ي|يز |ود |أمم|لات|أسر|شتر|تي | جم|ه ع|ر و|ي إ|تحد|حدة| أس|عة |ي م|ة، |معي|ن م|لمس|م ب|اق |جمي|لي |مية|الض|الس|لضم|ضما|لفر| وس|لحم|امل|ق م|را |ا ح|نت | تن|يته| أم|إلي|واج|د و|لتي| مر|مرا|متح| ذل| وأ| تح|ا ف| به| وم| بم|وية|ولي|لزو",
    "urd": "ور | او|اور|کے | کے| کی|یں | کا|کی | حق|ے ک|کا | کو|یا |نے |سے | اس|ئے |کو |میں| ہے| می|ے ا| کر| ان|وں | ہو|اس |ر ا|شخص|ی ا| شخ| سے| جا|حق |خص |ہر |ام |ے م|ں ک|ہیں| یا|سی | آز|آزا|زاد|ادی|ائے|ا ح|ص ک|ہ ا|ہے |جائ|ت ک|ر ش|کہ |م ک| پر|ی ک|پر |ان |ا ج|۔ہر|س ک|دی |ہے۔|ق ہ|ی ح|ں ا|و ا|ر م|ار |حقو|قوق|ن ک|ری |کسی|ے گ|ی ج| مع| ہی|وق |سان|نی |ر ک|کرن|ی ت| حا| جو|تی |ئی | نہ| کہ|ل ک|اپن|جو |نسا|انس|ہ ک|ے ب|نہ |ہو | مل| اپ|یت |می |ے ہ|رنے|ے ل|ل ہ|ا ا| کس|رے |ی ش| ای|وہ |۔ ا|اصل|نہی|صل |ی م|یں۔|حاص|معا|د ک|انہ|ایس|ی ب|ی ہ|ملک|ق ک|ات | تع|دہ |قوم| قو|ے، |ر ہ|ا م|یہ | دو| من| بن| گا|اشر|کیا|ں م|عاش|وام| عا|اد |قوا|ی س|بر |اقو|انی| جس| لئ|لئے|دار|ر ب|ائی| وہ|ے۔ہ|مل |ے ج|علا|یوں| یہ|ے ح|ہ م|و ت|جس |ا ہ|کر |ر ن|لیم|انو| قا| و |ے۔ | اق|یم |ریق|لک |گی |ی آ|دوس| گی|وئی|ر پ|، ا|نیا|تعل| مس|ر ع|ی، |یر |لاق|خلا| رک|ین | با|ن ا|ی ن|ے پ|پنے|وری|ا س| سک| دی|ون |گا۔|م ا|انے|علی|یاد|قان|نون|س م|اف |رکھ| اع| پو| شا|وسر|ق ح|سب | بر|رتی| بی|اری| بھ|رائ| مم|ر س|یسے|ومی|دگی|ندگ| مر| پی| چا|و گ|نا |ے خ|ہ و|ادا| ہر|ا پ|تما|پور|مام|ے ع|ائد| عل|بھی|ھی |عام| مت| مق|من |د ا| ام|ونک| خل|نکہ|لاف|اعل|کوئ|اں |ریع|ذری| ذر|بنی| لی|و ک|دان|ں، |ے ی|ا ک| مح|، م|ت ا|ال |پنی|ے س|ر آ|ر ح|دیو|غیر| طر|ہوں|ی پ|ِ م|کرے| سا|اسے|رہ |برا",
    "fas": " و | حق| با|که |ند | که| در|در |رد | دا|دار|از | از|هر | هر|یت |ر ک|حق |د ه|ای |د و|ان | را|ین |ود |یا | یا|را |ارد|ی و|کس | کس| بر| آز|باش|ه ب|آزا|د ک| خو|ه ا|د ب|زاد| اس|ار | آن|ق د|شد |حقو|قوق|ی ب|وق |ده |ه د|ید |ی ک|و ا|ور |ر م|رای|اشد|خود|ادی|تما|ری | اج|ام |دی |اید|س ح|است|ر ا|و م| ان|د ا|نه | بی|با | هم| نم|مای| تا|د، |ی ا|انه|ات |ون |ایت|ا ب|ست | کن|برا|انو| بش| مو|این| مر|اسا| مل|وان|ر ب|جتم| شو| اع|ن ا|ورد| می| ای|آن | به|و آ|ملل|ا م|ماع|نی |ت ا|، ا|ت و|ئی |عی |ائی|اجت|و ب|های|ن م|ی ی|بشر|کند|شود| من| زن|ن و|ی، |بای|ی ر| مس|مل |مور|ز آ|توا|دان|اری|علا|گرد|یگر|کار| گر| بد|ن ب|ت ب|ت م|ی م| مق|د آ|شور|یه |اعی| عم|ر خ|ن ح| کش|رند|مین| اح|ن ت|ی د| مت|ه م|د ش| حم|و د|دیگ|لام|کشو|هٔ |ه و|انی|لی |ت ک| مج|ق م|میت| کا| شد|اه |نون| آم|اد |ادا|اعل|د م|ق و|ا ک|می |ی ح|لل |نجا| مح|ساس|یده| قا|بعی|قان|ر ش|مقا|ا د|هد |وی |نوا|گی |ساو|ر ت|بر |اً |نمی|اسی|اده|او | او| دی| هی|هیچ|ه‌ا|‌ها|یر |خوا|د ت|همه|ا ه|تی |حما|دگی|بین|ع ا|سان|ر و|شده|ومی| عق| بع|ز ح|شر |مند| شر|ٔمی|أم|تأ|انت|اند|اوی|مسا|ردد|بهر| بم|ارن|یتو|ل م|ران|و ه|ر د|م م|رار|عقی|سی |و ت|زش | بو|ا ا|ی ن|موم|جا |عمو|رفت|عیت| فر|ندگ|واه|زند|م و|نما|ه ح|ا ر|دیه|جام|مرد|ت، |د ر|مام| تم|ملی|نند|الم|طور|ی ت|تخا|ا ت|امی|امل|دد | شخ|شخص",
    "zlm": " دا|ان |دان| بر| او|ن س| ڤر|له |كن |ن ك|ن ا|دال|ن د|رڠ |يڠ |حق | يڠ|ارا| كڤ|أن |تيا|ڤد |ورڠ|ڠن |ياڤ| تر|اله|ولي|ن ڤ|اور|كڤد|برح|رحق|ين |اڤ |را | ات|ليه|ستي|ه ب|يه |اتا| ست| عد|عدا|ن ب|تاو|ن ت|يبس|ڤ ا|او |بيب|سي | كب|ه د|ن م| سو| من| حق| سا|لم |ق ك|اسا|الم|ن ي| تي| اي|سام|رن |ن، | ما|اتو|باڬ|بسن|سن |نڬا|ڬار|اين| مم|د س| با|كبي|ي د|ڠ ع|چار| سب|ڽ س|اڬي|د ڤ|ندق|سبا|اڽ | د | ڤم|نسي|قله|يند|ڬي |ام |تن |وان|تا |اون|ي ا| نڬ|هن | بو|ا ڤ|أنس|بول| كس| سم| سچ|ڠ ب|سچا|مأن|ا ب|ا س|بڠس| ڤڠ|دڠن|سيا|اسي|ساس| مأ| دڠ| اس|بار|هند|مان|ارڠ|رتا|دقل|تي |ت د| هن|ڤرل|نڽ |ات |ادي|ق م|، ك|تره|رها|هاد| ڤو|ادڤ| لا|ي م|ڤا |يكن|اول|ڤون|، د|ون |ڠسا|٢ د|اي |ق٢ |تو |وق |دڤ |يأن|وين|ن ه|ن٢ |ا د|وڠن|نتو|اكن|وا |ندو|وات|ه م|ي س|ڠ٢ | مڠ| ان|حق٢|يك |اد |مڤو|رات|اس |مرا|برس|ائن| مل| سس|ماس| كو|ري | بي|سوا|ڠ ت|ا، |، ت|ياد|امر|سمو|ڠ م|ڤرا|لوا|ڤري|دوڠ|ي ك|ل د|تار|ريك|تيك|ارك|ونت|لين| سر|رلي|سرت|وند|واس|رسا|ڤمب|ترم|، س|اڬا|يري|رأن| در|ا ا|دير| بڠ|ي ڤ|لائ|سوس|ڠ س|توق|سأن|ورو|جوا|هار|اڤا|وكن| ڤن|٢ ب|موا| كم|ارأ|نن |ندڠ|ا٢ | كأ|دڠ٢|و ك|كرج|وه |ا م|ڤرك|تها|اجر|جرن|ي، |شته| سڤ| به|ندي|ق ا|ڠڬو|بها|ڤ٢ | مر|سات|راس|بوا|ه ا|ا ك|د ك| ڤل|ن ح|لاج|هڽ |ڠ ا|مبي|ينڠ|بس | اڤ|ملا|كور|وار|م ڤ|سسي|نتي|تيڠ| دل|سال|وبو|منو|ڤول|مول|ڠ د|نتا|انت|ال ",
    "skr": "تے |اں | تے|دے |دی |وں | دا| حق| کو|ے ا|کوں| دے|دا | دی|یاں| کی|ے ۔|یں |ہر | ۔ |کیت|ہے | وچ| ہے|وچ | ان| شخ|شخص|ادی|ال | حا|اصل|حق |حاص|ے م|خص |صل |ں د| نا|یا | ای|اتے|ق ح|ل ہ|ے و|ں ک| ات|ہیں|سی | مل|نال|زاد|ازا|ی ت| از|قوق|ار |ا ح|حقو| او|ص ک| ۔ہ|۔ہر|ر ش|دیا|ے ج|وق |ندے| کر|یند| یا|نہ | جو|کہی|ئے |ی د|سان|نسا|وند|ی ا|یتے|انس|ا ا|ملک|ے ح|و ڄ|ے ک|ڻ د| وی|یسی|ے ب|ا و| ہو|ں ا|ئی |ندی|تی |آپڻ|وڻ |ر ک|ن ۔| نہ|انہ|جو | کن| آپ| جی|اون|ویس|ی ن| تھ| کہ|ان |ری |ڻے | ڄئ| ہر|ے ن|دہ |ام |ں م|ے ہ|تھی|ں و|۔ ا|ں ت|ی ۔|کنو|ی ح|ی ک|نوں|رے |ہاں| بچ|ون |ے ت|کو | من|ی ہ|اری|ور |نہا|ہکو|یتا|نی |یاد|ت د|ن د| ون|وام|ی م|قوا|تا |ڄئے|پڻے| ہک|می | قو|ق ت|ے د|لے |اف |ل ک|ل ت| تع|چ ا|ین |خلا|اے |علا| سا|جیا|ئو |کرڻ|ی و|انی|ہو |دار| و |ی ج| اق|ن ا|یت |ارے|ے س|لک |ق د|ہوو| ڋو|ر ت| اے|ے خ| چا| خل|لاف|قنو|نون|پور|ڻ ک| پو|ایہ|بچئ|چئو|ات |الا|ونڄ|وری|این| وس| لو|و ا|ہ د| رک|یب |سیب|وسی|یر |ا ک|قوم|ریا|ں آ| جا|رکھ|مل |کاں|رڻ |اد |او |عزت| قن|ب د|وئی|ے ع| عز| ۔ک| مع|اقو|ایں|م م|زت |ڻی |یوڻ|ر ہ| سم|ں س|لوک| جھ| سی|جھی|ت ت|ل ا|اوڻ|کوئ|ں ج|ہی |حدہ|تعل|ے ذ|وے |تحد|متح|لا |ا ت|کار| اع|ے ر| مت|ر ا|ا م|ھین|ھیو|یہو| مط| سڱ|ی س|ڄے |نڄے|سڱد|لیم|علی|ے ق| ذر|م ت| کھ|ن ک| کم|ہ ا|سار|ائد|ائی|د ا| ہن|ہن |ی، |و ک|ں ب|ھیا|ذری|ں پ|لی ",
    "pbu": " د | او|او |په | په|چې | چې| حق|ي ا|ره |ې د|نه |و ا|و د|هر |ه ا|ه و|ه د| څو| کښ|ري |حق |ي چ|کښې|له |غه |ښې |څوک|وي | شي|وک |و پ|لري| سر| لر|ه پ|سره|لو |ټول|کړي|يت |ه ک|ي۔ه| ټو|ي، |ر څ| له|ق ل|يا | هغ| از|۔هر|ازا| کړ|د م|هغه|دي | کو|نو |حقو|د ا|زاد|قوق|خه | وا| پر|ه ت|ولو|ه ه|ه م| وي| څخ| يا|يو |څخه|د د|ول | دي|ه ش|ي د|کول|ته |ه ب|ګه |و ي|ړي |و م|شي۔|اد |ونو|واد|دې | مل| تر| هي|خپل| نه|د ه| تو|ې پ| يو|تون|د پ|ان | با|ني |ک ح|ولن|ه ح|يوا|ادي| هر|وقو|د ت|ړي۔|ي و| مس|ې ا|ي پ|شي |امي|لي |ې و|يد |هيو| دا|وګه|دان| دغ| عم|قو |ي۔ |انه|ار | خپ|ايد|ه چ|باي|بشر| ده|لني|هغو|توګ|اند|، د|ه ن|و ه| لا| بر|مي | تا|ين |ي ح|م د|ايت| من|غو |وي،|دهغ| شو|شوي|دغه|و ح|اوي| ته|د ب|ي ت|پل |نيز| بش|ه ي| ډو|ه ل|ه ګ|ون |نون|پر |يڅ |انو|هيڅ|رو |و ت|بعي|علا|وم |ډول|ده |ومي|ونه|تر |و ک|کار|اره|ساو|اتو|ن ک|وند| اع|مين|اعل|لام|يه |موم| ان|اسي|سي |مسا| وک| ځا|تو |ي ش| پي|قان| ګټ|اخل|ديو|د ټ|و ر|ټه | مح| بي|ل ت|وکړ| ور|ن ش|ه س|ې ک|وون| قا|عمو|عقي|و س|ژون| اس| ژو|و ب|لان|کي |ې چ| وس|ځاي|پار|يز |ندې|لتو|ک د|ولے|لے | نو| ار|رته|وسي| بل|شري|و ن|د ق|ا ب|من |وق |ر د|اسا|بل | غو|ونک|ملت|ګټه|ا د| عق|دو | اج| هم|مان|ر م| را|هم |ښوو|۔هي| وړ|څ څ|تام|و څ| رو|ي م|ت ا|شخص| شخ|مل |ل ا|خصي|ل ه|نې |ت ک| چا|ن د|ړان|وړا|بر | ښو|ادا|ورو",
    "uig": " ئا| ھە|ىنى|ە ئ|نىڭ|ىلى| ۋە|ىڭ |ۋە | ئى| بو|ھوق|وقۇ| ھو|قۇق|نى |بول| ئە|لىك|قىل|ىن |لىش|شقا|قا |ەن | قى|ن ب|ھەم|ى ئ|ئاد|ىشى|دەم|ادە|كى |لىق|غان|ىي |ىغا|گە | بى|دىن|ىدى|ەت |كىن|ىكى|ندا|ۇق | تە|نلى|تىن|ەم |لەت|قان|ىگە|ىتى|ىش |ھەر|ئەر| با|ولۇ|دۆل|غا |اند| دۆ|اق |مە |لۇش|دە |لۇق| ئۆ|ان | يا|ەرق|ۆلە|ركى| قا|ەرك|ەمم|ا ئ|ممە|ۇقى|ىق | بە|رقا|داق|ارا|ىلە|رىم|ىشق|ى ۋ|لغا|مەن|اكى|ەر |ا ھ|دۇ |ياك|ۇقل|ئار|ق ئ|ىنل|لار| ئې|ى ب|لىن|ڭ ئ|ئۆز|ق ھ|شى |ىمە|قلۇ|ن ئ|لەر|ەتل|نىش|ىك |ەھر| مە|ھرى|لەن|ىلا|ار |بەھ| ئۇ|ە ق|ئىي|اسى| مۇ|رلى| ئو|بىر|، ئ|بىل|ش ھ|بار|ى، |ۇ ھ|ايد|ۇشق|شكە|ە ب|يەت|ا ب|رنى|كە |ىسى| كې|ېلى|الى|ەك |م ئ|ماي|ولم|تنى|ىدا|ارى|يدۇ|لىد| قو|ەشك|تلە|ك ھ|انل|ەمد|مائ|ئال|ر ئ|مدە|ىيە|ش ئ|ە ھ|لما|ائى|ئىگ|دا |ي ئ|ۇشى|راۋ|ا، |سىي| تۇ|كىل|ە ت|ىقى|قى |ۆزى|ېتى|ىرى|ىر |ىپ |ى ك|ن، |ر ب|لەش|اسا|اۋا|ى ھ|شلى|ساس|ادى|تى |اشق|ەتت|قىغ|ىما|انى| خى|ۇرۇ| خە|ن ق|منى| خا|چە |ى ق| جە|رقى|تىد| ھۆ|باش|ارل|ئىش|تۇر| جى|مۇش|نۇن|شۇ |انۇ|ۇش |رەك|ېرە|كېر| سا|الغ|ۇنى|ئېل|ىشل|تەش|خەل|مەت|اش |دىغ|كەن|ەلق|تىش|مىن|ايى|سىز|ق ۋ|نىي|جىن|رىش|پ ق| كى|ېرى|ئاس|ەلى| ما|تتى|ىرل|ولى| دە|ارق|سىت|ە م| قە|شىل| تى|ەرن|كىش|ن ھ|ەلگ|ەمن|ك ئ| تو|ى ي|قتى|ئاش|تىم|تەۋ|ناي|ىدە|ىنا| بۇ|ىيا|زىن|امى|قار|شكى|ىز | ئۈ|ەۋە|ۆرم|ە خ|شىش|ىيى|جتى|ىجت|ئىج|نام|تەر"
  },
  "Devanagari": {
    "hin": "के |प्र| के|और | और|ों | का|कार| प्|का | को|या |ं क|ार |ति |को | है|िका|ने |है |्रत|धिक| अध|अधि|की |ा क| कि| की| सम|ें |व्य|्ति|से |क्त|ा अ|्यक| व्|में|ि क|मान| मे| स्|सी |न्त| हो|े क|यक्|ता |ै ।|क्ष|त्य| कर|िक | वि| या|्य |भी |रत्|ी स| जा|र स|येक|स्व|ेक |रों|्ये|ा ज|िया|त्र|क व|र ह| अन|किस|्रा|ित |ा स|िसी|ा ह|ना | से| सा| । |देश|र क|गा | पर| अप|े स|ान |्त्|ी क|्त |समा| रा|ा प| ।प|वार|था |ष्ट|।प्|अन्|न क|षा |्वा|तन्| मा|ारो|्षा|्ट्|राष|वतन|ाष्|ाप्|ट्र|प्त|े अ|्वत| इस|राप| उस|कि |हो |त ह|ं औ| सं|े प|ार्|करन| भी| दे|किय|ा ।| न |जाए|ी प|र अ|क स|री | नि|अपन|े व|सभी|्तर| तथ|तथा|रा |यों|ओं |िवा|ाओं|ीय |सके|द्व|सम्|व क|पर |्री| द्|रता|ारा| ऐस|िए | सभ|रक्|्या|र प|ा व|माज|रने|र उ|होग|ो स|ं म|िक्| जि| लि|त क|ाएग|स्थ|े म|पूर|ाव |पने| भा|इस |े ल| घो|कृत|घोष|श्य|द्ध|लिए|ा औ|ो प|र्व|ाने|भाव|रूप|र्य|ी र|ेश |णा |ं स|ूर्|शिक|ूप |्ध |रीय| रू|। इ|े ब|दी |न्य|य क|रति|एगा| उन|ी अ|े औ| सु|सार|ेशो|जो |शों|जिस|ा उ| शि|ियो|तर्|ी भ|परा|चित|ानव|तिक|्र | पा| पू|म क|षणा|ोषण|ोगा|गी |र्ण|ाना|िश्|ो क|विश|ले |ारी|परि|र द|नव | यह|्म |साम|रका|म्म|राध| बु| जो|ानू| जन|चार|वाह|नून|स्त|े य|्रो|दिय|न स|ास |कर |य स|ं न|ाज |कता| सद|निय|अपर| ।क|ताओ|न अ|ाह |ी ज|बन्|ी न|े ज|ोई |य ह|्था|ामा|याद|ी व|ंकि|ूंक|ी म|चूं|श क|ुक्|त र",
    "mar": "्या|या |त्य|याच|चा | व |ण्य|कार|प्र|ाचा| प्|िका|धिक| अध|अधि|च्य|ार |आहे| आह|ा अ|हे | स्|्ये|्रत|स्व|ा क| कर|्वा|ता |ास |ा स| त्|त्र|ा व|यां|ांच|िक |वा |मान| या| अस| का|्य |ष्ट|रत्|र्य|येक|ल्य|ाहि|र आ| को|ामा| सं|क्ष|कोण|ाच्| रा|ा न|ात |ंत्| सा|ून |ेका|ाष्|्ट्|ट्र|ने |राष| मा|चे |तंत|किं|िंव|ंवा| कि|व्य|े स|वात|करण|क्त|कास| मि|ा प| सम|ना |ये |मिळ|समा|ातं|र्व|्र्|े प| जा|यास|व स|ोणत|रण्|ा आ|ीय |काम|े क| दे|ांन|्यक|हि | व्|रां|ा म| आप|ही |्षण| पा|ान |े अ|ार्|िळण|ारा| आण|ळण्|ंच्|ाही|ची | वि|मा |्रा|ली |ा द|े व|ा ह|्री| नि|सर्|द्ध|णे |नये|ला | नय| सर|ी अ|्त |त क|ंना|्व |षण |आपल|ाचे|ले |माज|लेल| हो|ील |बंध|ी प|आणि|ध्य|ी स|देश|े ज| शि|शिक|णि |हिज|िजे|जे |यात|ानव|रीय|यक्|क स|न क|ा ज|पाह|व त|ज्य| ज्|िक्|स्थ|न्य|ंबं|त स|े आ|रक्|वी |पल्| के|संब|केल|य क|य अ| उप|असल|क व|त व|ीत |्वत|णत्|ाने|त्व|िष्|ेण्|साम|क आ|भाव|र्थ|ीने|्ती|कां|साठ|ाठी|रता|करत|ठी |याह|े य|सार|व म|ासा|याय|रति|े त|ंचा|र व|ंधा|ी आ|स स|ायद|त आ|ित |हीर|जाह|ेशा|ोणा| अश|ी व|ंरक|च्छ|संर|तील|हक्| हक|नवी|य व|शा |िवा|ांत|ंचे|ूर्|ा ब|ेत |क्क| अर|ाची|वस्|व आ|पूर|ी म|कृत|ेले|द्य|देण|ा त|याव|स्त|ारण|ेल्|थवा|तीन|अथव|ा य| अथ|अर्|ण म|ती |ेश |धात|र्ण|धार|त्त|साध| इत|ुक्|इतर|जिक| आल|ाजि|ाला|रून|तिष|राध|े ह|ेक |श्र|्थी|रणा|असे|्रद|ी क|थी |रका|सले",
    "mai": "ाक |प्र|कार|िका|धिक|ार | आʼ|आʼ |्रत|ेँ |क अ|्यक|िक |्ति| अध|व्य|अधि|क स| प्| व्|क्त|केँ|यक्|तिक|हि | स्|न्त|क व|मे |बाक| सम|मान|त्य|क्ष|छैक| छै|ेक |स्व|रत्|त्र| अप|्ये|ष्ट|येक|र छ|सँ |ित |ैक।| एह| वि|वा | जा|्त्|िके|ति |ट्र|ाष्| हो|्ट्|राष| अन| रा| सा|्य |अपन| कर|कोन|।प्|्वत|क आ|तन्|अछि| अछ|वतन| को|था | वा|ताक| पर|ार्|एहि|नहि|पन |ा आ|रता|समा| मा|्री|नो | नह|्षा|देश|क प| दे| का| कए|रक | नि| सं|न्य|ि क|ोनो|छि |्त |ारक|्वा|ा स|ान्|ल ज|तथा| तथ|ान |करब|ँ क| आ |र आ|ीय |ता |क ह|वार| जे|्या|िवा|जाए|ना |ओर |ानव|ा प|ँ अ|अन्|ारण|माज|स्थ|घोष| आओ|्तर| एक|साम|र्व|आओर|धार|त क|परि|रीय|्रस|कएल|ामा|्रा|रण |ँ स| सभ|द्ध|स्त|एबा|पूर|ʼ स|ा अ| घो|षा |ाहि|ʼ अ|क।प|यक |नक |रक्|रबा|चित|िक्|क ज|ोषण|कर |र प|ेतु|हेत|शिक|एल |सम्| उप|ाधि|एहन|हन |त अ|तु |ूर्|षणा| हे|िमे| अव|ेल |सभ |े स|ि ज|निर| शि|िर्|रति|होए|अनु|र अ|जाह|क क|हो |्ध |रूप|वक |च्छ|प्त|ँ ए| सक|भाव|क उ|ाप्|सभक|त आ|ि आ|र्ण|त स|्रक|एत।|र्य|त ह|जिक| जन|ाजि|चार|ण स|ैक |रा |ि स|ारा|री |िश्|वाध|ा व|ाएत|न अ| ओ |हु |कान|जे |न व|िसँ|रसं|विव|कृत|ि घ|क ब| भा|उद्|ोएत| उद|राप|ʼ प|श्य|न प|्ण |य आ|द्व| द्|िष्| सह|ि द|धक | बी|ेश | पू|षाक|नवा|ास |ामे|ए स|जेँ| कि|कि |क ल| भे|पर |यता| रू|ओ व|ाके| पए|केओ|ेओ |पएब|राज| अथ|अथव|थवा|त्त|विश|्थि|य प|ा क|न क|वास|रिव|क र| दो|सार",
    "bho": " के|के |ार |े क|कार|धिक|िका|ओर |आओर| आओ| अध|अधि|े स|ा क|े अ| हो| सं|र क|र स|ें | मे|में|िक | कर|ा स|र ह| से|से |रा |मान| सम|न क|क्ष|े ब|नो | चा|वे |ता |चाह|ष्ट| रा|ति |्रा|खे |राष|ाष्|प्र| सा| का|ट्र|े आ| प्| सक| मा|्ट्| स्|होख| बा|करे|ि क|ौनो|त क|था |कौन|पन | जा| कौ|रे |ाति|ला | ओक|ेला|तथा|आपन|्त | आप|कर |हवे|र म| हव| तथ|सबह|र आ|ोखे| ह।|िर |े ओ|केल|सके|हे | और|ही |तिर|त्र|जा |ना |बहि|।सब|े च| खा|े म| पर|खात|ान |र ब|न स|ावे| लो|षा |ाहे|ी क|ओकर|ा आ|माज|ित |े ज|ल ज|मिल|संग|्षा|ं क| सब|ा प|और |रक्|वे।|िं |े ह|ंत्|ाज |स्व|हिं|नइख|कान|ो स| जे|समा|क स|लोग|करा|क्त|्रत|ला।| नइ|े। |ानव|िया|हु |इखे|्र |रता|्वत|ानू|े न|ाम |नून|ाही|वतं|पर |ी स| ओ |े उ|े व|्री|रीय|स्थ|तंत|दी |ीय |े त|र अ|र प|्य |साम|बा।| आद|ून |। स|व्य|ा।स|सभे|भे |या | दे|ा म|े ख| वि| सु|केह|प्त|योग|ु क|ोग |े द|चार|ादी|ाप्| दो| या|राप|ल ह|पूर| मि|तिक|खल |यता|्ति| बि|ए क|आदि|दिम| ही|हि |मी | नि|र न| इ |ेहु|नवा|ा ह|री |ले | पा|ाधि| सह| उप|्या| जर|षण | सभ|िमी|देश|े प|म क|जे |ाव | अप|शिक|ाजि|जाद|जिक|े भ|क आ|्तर|िक्|ि म|ेकर|ुक्|वाध|गठन| व्|निय|ठन |।के|ामा|रो | जी|य क|न म|े ल|न ह|ास |ेश | शा|घोष|ंगठ|िल | घो|्षण| पू|े र|ंरक|संर|उपय|पयो|हो |बा |ी ब|्म |सब |दोस|ा। | आज|साथ| शि|आजा| भी| उच|ने |चित| अं|र व|ज क|न आ| ले|नि |ार्|कि |याह|्थि",
    "nep": "को | र |कार|प्र|ार |ने |िका|क्त|धिक|्यक| गर|व्य|्रत| प्|अधि|्ति| अध| व्|यक्|मा |िक |त्य|ाई |लाई|न्त|मान| सम|त्र|गर्|र्न|क व| वा|्ने|वा | स्|रत्|र स|्ये|तिल|येक|ेक |छ ।|ो स|ा स|हरू| वि|क्ष|्त्|िला| । |स्व|हुन|ति | हु|ले | रा| मा|ष्ट|समा|वतन|तन्| छ |र छ| सं|्ट्|ट्र|ाष्|ो अ|राष|्वत|ुने|नेछ|हरु|ान |ता |े अ|्र | का|िने|ाको|गरि|े छ|ना | अन| नि|रता|नै | सा|ित |तिक|क स|र र|रू |ा अ|था |स्त|कुन|ा र|ुनै| छै|्त |छैन|ा प|ार्|वार|ा व| पर|तथा| तथ|का |्या|एको|रु |्षा|माज|रक्|परि|द्ध|। प| ला|सको|ामा| यस|ाहर|ेछ |धार|्रा|ो प|नि |देश|भाव|िवा|्य |र ह|र व|र म|सबै|न अ|े र|न स|रको|अन्|ताक|ंरक|संर|्वा| त्|सम्|री |ो व|ा भ|रहर| कु|्रि|त र|रिन|श्य|पनि|ै व|यस्|ारा|ानव| शि|ा त|लाग|रा |शिक| सब|ाउन|िक्|्न |ारक|ा न|रिय|्यस|द्व|रति|चार| सह|्षण| सु|ारम|ुक्|ुद्|साम|षा |ैन | अप| भए|बाट|ुन | उप|ान्|ो आ|्तर|िय |कान|ि र|रूक|द्द|र प|ाव |ो ल|तो | पन|ैन।| आव|ा ग|।प्|बै |ूर्|िएक|र त|निज|त्प| भे|जिक|ेछ।|िको|्तो|वाह|त स|ाट | अर|ाजि|्ध | उस|रमा|ात्|र्य|नको|ाय |जको|ित्|ागि| अभ|न ग|गि |ा म| आध|स्थ| पा|ारह|घोष|त्व|यता|ा क|र्द| मत|विध| सक|सार|परा|युक|राध| घो|णको|अपर|े स|ारी|।कु| दि| जन|भेद|रिव|उसक|क र|र अ|ि स|ानु|ो ह|रुद| छ।|ूको|रका|नमा| भन|र्म|हित|पूर|न्य|क अ|ा ब|ो भ|राज|अनु|ोषण|षणा|य र| मन| बि|्धा| दे|निर|ताह|र उ|यस |उने|रण |विक"
  },
  "Ethiopic": {
    "amh": "፡መብ|ሰው፡|ት፡አ|ብት፡|መብት|፡ሰው|፡አለ|፡ወይ|ወይም|ይም፡|ነት፡|ንዱ፡|አለው|ለው።|ዳንዱ|ያንዳ|ንዳን|እያን|ዱ፡ሰ|ት፡መ|፡እን|፡የመ|።እያ|እንዲ|፡ነጻ|፡የተ|ም፡በ|ው፡የ|ም፡የ|፡የሚ|ና፡በ|ን፡የ|፡የማ|፡አይ|ነጻነ|ና፡የ|ው፡በ|ቶች፡|ው።፡|ሆነ፡|ት፡የ|፡በሚ|፡መን|ው።እ|ትና፡|ኀብረ|ትን፡|ውም፡|ንኛው|እኩል|ብቻ፡|ኛውም|ንም፡|፡ለመ|፡ያለ|ም፡ሰ|ማንኛ|መብቶ|፡አገ|ት፡በ|ራዊ፡|፡እኩ|፡ለማ|ለት፡|በት፡|ሆን፡|መንግ|፡በተ|ረት፡|ብቶች|ጋብቻ|ዎች፡|ህንነ|ጻነት|ም፡እ|ወንጀ|፡ልዩ|ሰብ፡|ማንም|ጠበቅ|ኩል፡|ደህን|።ማን|ነጻ፡|ግኘት|ማግኘ|።፡እ|፡የሆ|፡ሁሉ|ች፡በ|፡በመ|ሥራ፡|፡ደህ|ፈጸም|ል፡መ|ተግባ|፡ድር|ት፡ወ|ው።ማ|ፍርድ|ርድ፡|፡በሆ|ር፡ወ|በትም|ትም፡|ይነት|ቸው፡|ብ፡የ|ነትና|ቱን፡|ሕግ፡|ንና፡|፡ሥራ|የማግ|፡መሠ|ኘት፡|፡ጊዜ|ጻነቶ|ነቶች|በር፡|በኀብ|ዩነት|ልዩነ|፡በኀ|፡ዓይ|ዓይነ|ችና፡|ግባር|ባር፡|፡ደረ|ነው።|፡ነው|ደረጃ|ም።እ|ም፡መ|፡ወን|ይማኖ|ማኀበ|ሃይማ|፡ኑሮ|መሠረ|ሁሉ፡|ነቱ፡|ሌሎች|ንግሥ|በቅ፡|የሆነ|፡ይህ|ንዲጠ|ገር፡|ተባበ|ትክክ|ጸም፡|ር፡የ|ዲጠበ|ትም።|ው፡ከ|፡እያ|ሩት፡|ድርጅ|፡ብቻ|ና፡ለ|ይገባ|የመኖ|፡ማን|ንነት|ቤተሰ|ርጅት|ት፡ድ|፡መሰ|እንደ|፡አላ|ብሔራ|ት፡ለ|ሔራዊ|ርት፡|ህርት|ውን፡|የሚያ|ል።እ|ሆኑ፡|ምህር|ትምህ|በት።|ለበት|አለበ|፡አስ|ሎች፡|ች፡የ|፡በሕ|ብረ፡|፡ከሚ|ን፡አ|ት፡እ|ን፡ወ|ረግ፡|በሆነ|የኀብ|፡የኀ|መሆን|፡መሆ|ን፡መ|፡ውሳ|ንጀል|ፈላጊ|ህም፡|ረታዊ|ክለኛ|ክክለ|ታዊ፡|ጀል፡|ኑሮ፡|።፡ይ|ዓዊ፡|ዜግነ|ንዲሁ|ዲሁም|፡ማኀ|ገሩ፡|ር፡በ|ብዓዊ|አገሩ|ሁም፡|ና፡ነ|ሰብዓ|የተባ|ጅት፡|ማኖት|ር፡አ|ንግስ|ኖት፡|በሕግ|መኖር|ው፡ያ|መጠበ|ረጃ፡|፡በማ|ነትን|ብነት|ገብነ|፡ገብ|መፈጸ|፡ሁኔ|ሁኔታ|ን፡ለ|ው፡ለ|፡ተግ|፡የአ|፡ይገ|፡በአ|ችን፡|፡ትም|ነቱን|፡ቢሆ|ቢሆን|ጊዜ፡|ረ፡ሰ|ት፡ጊ|ሰቡ፡|ምበት|ላቸው|አላቸ|በነጻ|፡በነ|አንድ|ቅ፡መ|፡መጠ|ት፡ይ|መሰረ|ጥ፡የ|ስጥ፡|ፈጸመ|ውስጥ|ንድ፡|፡ውስ|፡በግ|፡ሆኖ|ሉ፡በ|፡ጋብ|ንስ፡|ንነቱ|መው፡|የሚፈ|አይፈ|ብረሰ|ነ፡መ|፡የሃ|ም፡ከ|ች፡እ|ስት፡|ሙሉ፡|አገር|ሆኖ፡|ደረግ|ኢንተ|ንተር|ተርና|ርናሽ|ናሽና|ሽናል",
    "tir": " መሰ| ሰብ|ሰብ | ኦለ|ትን |ኦለዎ|ናይ | ናይ| ኦብ|ዎ፡፡|ለዎ፡|ሕድሕ|ኦብ |ድሕድ|ሕድ |መሰል|ውን |ሰል |ድ ሰ|ይ ም|ል ኦ|ካብ |፡ሕድ|፡፡ሕ| ወይ|ወይ | መን| ነፃ|ን መ|ዝኾነ|፡፡ |ታት |ብ ዝ|ነት |ን ነ| ካብ|መሰላ|ነፃነ| እዚ|ብ መ|ኦዊ |ታትን|መንግ|ዊ መ| እን|ብ ብ|ንግስ|ት ኦ|ሰላት|ን ም|ኾነ |እዚ |ብኦዊ|ሰብኦ|ን ኦ|ን፡፡| ንክ| ዝኾ|ን ን| ምር|ኹን |ይኹን| ይኹ|ምርካ|ርካብ| ኦይ| ሃገ|ሕጊ |ራት |ሎም | ብሕ|ነ ይ| ከም|ማዕሪ|ይ ብ| ንም| ዝተ|ርን |ን ብ|ራዊ | ፣ |ብ ሕ|ላትን|ብ ኦ|ማሕበ|ነታት| ኦድ|ዕሪ | ማዕ|ስታት|ግስታ|’ውን|ት መ|ን ዝ|ታዊ |፣ ብ| ማሕ|ነትን|ንጋገ|ድንጋ| ስለ| ድን|ስራሕ|ኩሎም|ሕበራ|ኦት |ን ሰ|ዓለም|ፃነታ| ብም|ት ወ|መሰሪ| ስራ|ፃነት|ተሰብ|ካልኦ|ልኦት|ን ሓ|ዓት |ዋን |ቡራት|ሕቡራ| ሕቡ|ብሕጊ|ድብ |ውድብ| ውድ|ብን |ትምህ|ነቱ |ዚ ድ|፣ ኦ|ሃገራ| ኩሎ|ለዎም|ምህር|ም፡፡|ም መ| ብዝ|ምኡ’|ኡ’ው|እንት| ዓለ| ብዘ|በራዊ| ሓለ|ሓለዋ|ዎም፡|ቱ ን|ት ብ|ጋገ |ነፃ | ምዃ|ን ዘ| ገበ|ት፣ | ትም|ኸውን|ራሕ | ዘይ|ህርቲ|ርቲ |ከምኡ|ሃይማ| ምስ|ነ፣ |እንተ| ስር|ስርዓ|ርዓት|ባት |ይማኖ|ሰሪታ|ን ና| ክብ|ልን | ብማ|ገሩ | ህዝ|ላት |ት ና|ይ ኦ|ዕሊ |ለዝኾ|ስለዝ|ሪተሰ|ብሪተ|ሕብሪ| ሕብ|ን ተ|ኾነ፣|በን |ሃገሩ|ገ እ|ኻዊ | ሃይ|እን |ሪጋገ| ምሕ|ን እ|ለኻዊ|ር፣ | ብሓ| ብሃ| ክኸ|ክኸው|ብ ዘ|ዃኑ |ዊ ክ|ምን |ሓደ |ምዃኑ|ም ን|ት እ|ዊ ወ|ታውን| ሕድ|ብዘይ| ሕጊ|ት ን| ልዕ| ካል|ን ካ|ሰባት|ን ስ|ናን |ቤተሰ|ሕን |ለምለ|ት ስ|ምለኻ|፣ ከ|ተደን|ባል |ኦድላ|እዋን| እዋ|ደቂ | ደቂ| ሰባ|ፃን |ነፃን|ግስቲ|፣ ን|ዚ ብ|ስቲ | ቤተ|ምጥሓ| ክሳ| ነዚ|ን ክ|ነቲ | ነቲ|ነዚ | ምእ|ብነፃ| ምዕ|ምዕባ|ዕባለ|ክሳብ| ብነ|ል እ|ዚ መ|ልዕሊ|ክብሩ|ብማዕ|ሳብ |ህይወ|ኦቶም|ምስ |ንገገ|እምነ| እም|ድ ኦ|ቶም |ቲ ክ|ፍትሓ|ለም | ፍት|ብ ን|ን ዓ|ራውን|ሓፈሻ|ደንገ|ም ብ|ትዮን| ዝሰ|ዝተደ|ሉ መ|ብ ና|ጊ ካ|ልዎ |ኦባል| ኦባ|ድልዎ|ን ድ|ኦድል|ዜግነ|ላውን| ድሕ"
  },
  "Hebrew": {
    "heb": "ות |ים |כל |ת ה| כל|דם |אדם|יות| של| זכ|ל א| אד|של |ל ה|אי |ויו|כאי|ת ו|י ל|זכא| ול|לא | וה|רות|זכו|ית |ירו|ין | או|ם ז| לא| הח|או | הא| וב| המ|חיר|ת ל|יים|ם ל|את |ת ב|ת ש|רה |ון | לה|נה |כוי|ותי|ה ש|ו ל|ו ב| הו|ת א|ם ב|ם ו|תו | את|לה |ני |אומ| במ|דה |א י|ה ה|ה ב|על |ם ה| על|הוא|וך |ה א|בוד|וד |ואי|נות|ה ו|ת כ|י ה|יה |ם ש|ו ו| שה|ם א|ו כ|ינו|ן ה| שו|שוו|החי|כות|לאו|בות|דות|ה ל|לית|ה מ| בי|וה |וא | הי| לפ|ור | לב|ל ב|בחי|הכר|לו |ת מ|ן ש|החו|ה כ| בכ|ומי|בין|ן ו|ן ל|רוי|פלי|ולה|ליה| הז|חינ| לע| בנ|יבו|חוק| אח|חבר| יה| חי|מי |ירה| חו|האד|ווה|חופ|ופש|וק |נו |יו |ל מ|מדי|כבו| הע|נוך| הד|י א|י ו| הכ|בני|עה |ו א|רצו|דינ|בזכ|מות|יפו| אל|סוד|לם |איש|רך | אי|הגנ|הם |פי |ם כ|חות|ל ו|איל|ילי|תיה|כלל|אלי|יסו|האו|זש | בא|ר א|ו ה|זו |אחר| הפ| בע| בז|משפ| בה| לח|דרך|ומו| בח| דר| מע|ל י|תוך|מנו| בש|לל |רבו| למ|פני| לק|תם |שה |שית|ללא|לפי|היה|מעש|דו |שות|להג|וצי|שוא|אין|וי |תי |ונו|ליל| לו|חיי|ל ז| זו|היא|יא |נתו|ה פ|לת |ובי| לכ|ך ה|יל |י ש|שיו|ן ב|עול|המד|ודה|ולם| ומ|א ה|ולא| בת|הכל| סו| מש| עב|סוצ|ארצ| אר|ציא|ד א|לחי|הן |יחס| יח|יאל|הזכ|ם נ| שר|בו |עבו|היס| לי|ת ז|פול|יהי|גבל|תיו|המא|שהי|א ל|מאו| יו|ותו|ישי|גנה|פשי|וחד|יהם|חרו|לכל|ידה|עות|ונה|ום |חה |עם |שרי|ם י|שר |והח| אש| הג|ק ב|הפל|נשו|הגב|ד ו",
    "ydd": " פֿ|ון |ער |ן א| אַ|דער|ט א| או|און|אַר|ען |פֿו| אױ| אי|ן פ|ֿון|רעכ| דע| רע|עכט|פֿא|ן ד|כט | די|די |אַ |אױף|ױף |ֿאַ| זײ| גע|אַל|אָס| אָ|ונג| הא|האָ|זײַ| מע|אָל|נג |װאָ|ַן |אַנ|רײַ| װא|ָס |באַ| יע|יעד|ניט|ן ז|ר א|יט |אָט|אָר|עדע|מען|זאָ|ָט |פֿר|ײַן| בא|טן |אין|ן ג|ין |ן װ|נאַ|ֿרײ|ר ה| זא|לעכ|ע א|אָד|ַ ר|ענט|אַצ|ַצי|אָנ| צו| װע|יז |מענ|ָדע|איז|ן מ|ַלע|בן |ר מ|טער| מי| פּ|מיט|טלע|ָל |עכע|ײט |ַנד|ע פ|לע |געז|לאַ|אַפ|עזע|ראַ| ני|ַפֿ|רן |ײַנ|נען|טיק|כע |פֿע|יע |הײט|ַהײ|נטש|ײַה|ט ד|ן ב|לן |ן נ|פֿט|שאַ|רונ| זי| װי|ט פ| דא|טאָ|דיק|קן |ר פ|ר ג|יקן|אָב|ף א|אַק|קער|ערע|כער|י פ|ות |ַרב|פּר|קט |עם |יאָ|ציע|ציא|יט־|צו |ישע| קײ|ן ק|סער| גל|דאָ|ונט|גן |ַרא|יקע| טא|ענע|לײַ|שן |ַנע|יק |טאַ|ס א|עט |נגע|ט־א|ָנא|־אי|יקט|נטע|ײנע|־ני|ָר |װער|י א|ן י|יך |זיך|ער־|ערן|אױס|ָבן|נדע|ָסע|װי |ֿעל|ר־נ|ן ה| גר|גלײ| צי|ראָ|זעל|עלק|נד |לקע|אָפ| כּ|ט װ|ג א| נא|ט צ|ר ד|עס |דור|גען|קע |ג פ|ֿט |ן ל|שע |ר ז|רע |ײטן|פּע|קלא|קײט|יטע|ים |ס ז|ײַ | דו|אַט| לא|ר װ|קײנ|עלש|י ד|לשא|יות|נט |ַרז|ע ר|ל ז|אַמ|ן ש| שו|אינ|נטל| הי|בעט|ָפּ|ף פ|ײַכ|בער|ן צ|מאָ| שט| לע|גער|ורך|רך |נעם|גרו|פֿן|לער|װעל|ע מ|ום |שפּ|ך א|יונ|רבע|עפֿ|טעט|ן כ|רעס|ערצ|ז א|עמע|ם א|שטע|כן |רט |י ג|סן |נער|ליט|ט ז|נעמ|ּרא|היו|אַש|ת װ|אומ|ק א|יבע|ֿן |ץ א|פֿי|ײן |ם ט"
  }
}
},{}],106:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const Language = require('./language');

module.exports = {
  Language,
};

},{"./language":107}],107:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const languageData = require('./languages.json');
const data = require('./data.json');

const scripts = {
  cmn: /[\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u3005\u3007\u3021-\u3029\u3038-\u303B\u3400-\u4DB5\u4E00-\u9FCC\uF900-\uFA6D\uFA70-\uFAD9]|[\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/g,
  Latin: /[A-Za-z\xAA\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u02E0-\u02E4\u1D00-\u1D25\u1D2C-\u1D5C\u1D62-\u1D65\u1D6B-\u1D77\u1D79-\u1DBE\u1E00-\u1EFF\u2071\u207F\u2090-\u209C\u212A\u212B\u2132\u214E\u2160-\u2188\u2C60-\u2C7F\uA722-\uA787\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA7FF\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uFB00-\uFB06\uFF21-\uFF3A\uFF41-\uFF5A]/g,
  Cyrillic: /[\u0400-\u0484\u0487-\u052F\u1D2B\u1D78\u2DE0-\u2DFF\uA640-\uA69D\uA69F]/g,
  Arabic: /[\u0600-\u0604\u0606-\u060B\u060D-\u061A\u061E\u0620-\u063F\u0641-\u064A\u0656-\u065F\u066A-\u066F\u0671-\u06DC\u06DE-\u06FF\u0750-\u077F\u08A0-\u08B2\u08E4-\u08FF\uFB50-\uFBC1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFD\uFE70-\uFE74\uFE76-\uFEFC]|\uD803[\uDE60-\uDE7E]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB\uDEF0\uDEF1]/g,
  ben: /[\u0980-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09FB]/g,
  Devanagari: /[\u0900-\u0950\u0953-\u0963\u0966-\u097F\uA8E0-\uA8FB]/g,
  jpn: /[\u3041-\u3096\u309D-\u309F]|\uD82C\uDC01|\uD83C\uDE00|[\u30A1-\u30FA\u30FD-\u30FF\u31F0-\u31FF\u32D0-\u32FE\u3300-\u3357\uFF66-\uFF6F\uFF71-\uFF9D]|\uD82C\uDC00/g,
  kor: /[\u1100-\u11FF\u302E\u302F\u3131-\u318E\u3200-\u321E\u3260-\u327E\uA960-\uA97C\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/g,
  tel: /[\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C78-\u0C7F]/g,
  tam: /[\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BFA]/g,
  guj: /[\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AF1]/g,
  kan: /[\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2]/g,
  mal: /[\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D75\u0D79-\u0D7F]/g,
  Myanmar: /[\u1000-\u109F\uA9E0-\uA9FE\uAA60-\uAA7F]/g,
  ori: /[\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B77]/g,
  pan: /[\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75]/g,
  Ethiopic: /[\u1200-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u137C\u1380-\u1399\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E]/g,
  tha: /[\u0E01-\u0E3A\u0E40-\u0E5B]/g,
  sin: /[\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4]|\uD804[\uDDE1-\uDDF4]/g,
  ell: /[\u0370-\u0373\u0375-\u0377\u037A-\u037D\u037F\u0384\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03E1\u03F0-\u03FF\u1D26-\u1D2A\u1D5D-\u1D61\u1D66-\u1D6A\u1DBF\u1F00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FC4\u1FC6-\u1FD3\u1FD6-\u1FDB\u1FDD-\u1FEF\u1FF2-\u1FF4\u1FF6-\u1FFE\u2126\uAB65]|\uD800[\uDD40-\uDD8C\uDDA0]|\uD834[\uDE00-\uDE45]/g,
  khm: /[\u1780-\u17DD\u17E0-\u17E9\u17F0-\u17F9\u19E0-\u19FF]/g,
  hye: /[\u0531-\u0556\u0559-\u055F\u0561-\u0587\u058A\u058D-\u058F\uFB13-\uFB17]/g,
  sat: /[\u1C50-\u1C7F]/g,
  bod: /[\u0F00-\u0F47\u0F49-\u0F6C\u0F71-\u0F97\u0F99-\u0FBC\u0FBE-\u0FCC\u0FCE-\u0FD4\u0FD9\u0FDA]/g,
  Hebrew: /[\u0591-\u05C7\u05D0-\u05EA\u05F0-\u05F4\uFB1D-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFB4F]/g,
  kat: /[\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u10FF\u2D00-\u2D25\u2D27\u2D2D]/g,
  lao: /[\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF]/g,
  zgh: /[\u2D30-\u2D67\u2D6F\u2D70\u2D7F]/g,
  iii: /[\uA000-\uA48C\uA490-\uA4C6]/g,
  aii: /[\u0700-\u070D\u070F-\u074A\u074D-\u074F]/g,
};

const scriptKeys = Object.keys(scripts);

const und = () => [['und', 1]];

class Language {
  constructor() {
    this.languagesAlpha3 = {};
    this.languagesAlpha2 = {};
    this.extraSentences = [];
    this.buildData();
  }

  static getTrigrams(srcValue) {
    const result = [];
    const value = srcValue
      ? ` ${String(srcValue)
          .replace(/[\u0021-\u0040]+/g, ' ')
          .replace(/\s+/g, ' ')
          .trim()
          .toLowerCase()} `
      : '';
    if (!value || value.length < 3) {
      return result;
    }
    for (let i = 0, l = value.length - 2; i < l; i += 1) {
      result[i] = value.substr(i, 3);
    }
    return result;
  }

  static asTuples(value) {
    const dictionary = Language.getTrigrams(value).reduce(
      (srcprev, current) => {
        const prev = srcprev;
        prev[current] = (prev[current] || 0) + 1;
        return prev;
      },
      {}
    );
    const tuples = [];
    Object.keys(dictionary).forEach((key) => {
      tuples.push([key, dictionary[key]]);
    });
    tuples.sort((a, b) => a[1] - b[1]);
    return tuples;
  }

  static getDistance(trigrams, model) {
    let distance = 0;
    trigrams.forEach((currentTrigram) => {
      distance +=
        currentTrigram[0] in model
          ? Math.abs(currentTrigram[1] - model[currentTrigram[0]] - 1)
          : 300;
    });
    return distance;
  }

  static getOccurrence(value, expression) {
    const count = value.match(expression);
    return (count ? count.length : 0) / value.length || 0;
  }

  static isLatin(value) {
    let total = 0;
    const half = value.length / 2;
    for (let i = 0; i < value.length; i += 1) {
      const c = value.charCodeAt(i);
      if (c >= 32 && c <= 126) {
        total += 1;
        if (total > half) {
          return true;
        }
      }
    }
    return total > half;
  }

  static getTopScript(value) {
    if (Language.isLatin(value)) {
      return ['Latin', 1];
    }
    let topCount = -1;
    let topScript;
    for (let i = 0; i < scriptKeys.length; i += 1) {
      const script = scriptKeys[i];
      const count = Language.getOccurrence(value, scripts[script]);
      if (count > topCount) {
        topCount = count;
        topScript = script;
        if (topCount === 1) {
          return [topScript, topCount];
        }
      }
    }
    return [topScript, topCount];
  }

  static filterLanguages(languages, allowList, denyList) {
    if (allowList.length === 0 && denyList.length === 0) {
      return languages;
    }
    const filteredLanguages = {};
    Object.keys(languages).forEach((language) => {
      if (
        (allowList.length === 0 || allowList.indexOf(language) > -1) &&
        denyList.indexOf(language) === -1
      ) {
        filteredLanguages[language] = languages[language];
      }
    });
    return filteredLanguages;
  }

  static getDistances(trigrams, srcLanguages, options) {
    const distances = [];
    const allowList = options.allowList || [];
    const denyList = options.denyList || [];
    const languages = Language.filterLanguages(
      srcLanguages,
      allowList,
      denyList
    );
    if (!languages) {
      return und();
    }
    Object.keys(languages).forEach((language) => {
      distances.push([
        language,
        Language.getDistance(trigrams, languages[language]),
      ]);
    });
    return distances.sort((a, b) => a[1] - b[1]);
  }

  static detectAll(srcValue, settings = {}) {
    const minLength = settings.minLength || 10;
    if (!srcValue || srcValue.length < minLength) {
      return und();
    }
    const value = srcValue.substr(0, 2048);
    const script = Language.getTopScript(value);
    if (!(script[0] in data) && script[1] > 0.5) {
      if (settings.allowList) {
        if (settings.allowList.includes(script[0])) {
          return [[script[0], 1]];
        }
        if (script[0] === 'cmn' && settings.allowList.includes('jpn')) {
          return [['jpn', 1]];
        }
      } else {
        return [[script[0], 1]];
      }
    }

    if (data[script[0]]) {
      const distances = Language.getDistances(
        Language.asTuples(value),
        data[script[0]],
        settings
      );
      if (distances[0][0] === 'und') {
        return [[script[0], 1]];
      }
      const min = distances[0][1];
      const max = value.length * 300 - min;
      return distances.map((d) => [d[0], 1 - (d[1] - min) / max || 0]);
    }
    return [[script[0], 1]];
  }

  buildData() {
    for (let i = 0; i < languageData.length; i += 1) {
      const language = {
        alpha2: languageData[i][0],
        alpha3: languageData[i][1],
        name: languageData[i][2],
      };
      this.languagesAlpha3[language.alpha3] = language;
      this.languagesAlpha2[language.alpha2] = language;
    }
  }

  transformAllowList(allowList) {
    const result = [];
    for (let i = 0; i < allowList.length; i += 1) {
      if (allowList[i].length === 3) {
        result.push(allowList[i]);
      } else {
        const language = this.languagesAlpha2[allowList[i]];
        if (language) {
          result.push(language.alpha3);
        }
      }
    }
    return result;
  }

  guess(utterance, allowList, limit) {
    const options = {};
    if (utterance.length < 10) {
      options.minLength = utterance.length;
    }
    if (allowList && allowList.length && allowList.length > 0) {
      options.allowList = this.transformAllowList(allowList);
    }
    const scores = Language.detectAll(utterance, options);
    const result = [];
    for (let i = 0; i < scores.length; i += 1) {
      const language = this.languagesAlpha3[scores[i][0]];
      if (language) {
        result.push({
          alpha3: language.alpha3,
          alpha2: language.alpha2,
          language: language.name,
          score: scores[i][1],
        });
        if (limit && result.length >= limit) {
          break;
        }
      }
    }
    return result;
  }

  /**
   * Given an utterance, an allow list of iso codes and the limit of results,
   * return the language with the best score.
   * The allowList is optional.
   * @param {String} utterance Utterance wich we want to guess the language.
   * @param {String[]} allowList allowList of accepted languages.
   * @return {Object} Best guess.
   */
  guessBest(utterance, allowList) {
    return this.guess(utterance, allowList, 1)[0];
  }

  addTrigrams(locale, sentence) {
    const language = this.languagesAlpha2[locale];
    const iso3 = language ? language.alpha3 : locale;
    const script = Language.getTopScript(sentence)[0];
    const trigrams = Language.getTrigrams(sentence);
    if (data[script]) {
      if (!data[script][iso3]) {
        data[script][iso3] = {};
      }
      trigrams.forEach((trigram) => {
        data[script][iso3][trigram] = 1;
      });
    }
  }

  addExtraSentence(locale, sentence) {
    this.extraSentences.push([locale, sentence]);
    this.addTrigrams(locale, sentence);
  }

  processExtraSentences() {
    this.extraSentences.forEach((item) => {
      this.addTrigrams(item[0], item[1]);
    });
  }

  static lansplit(s) {
    if (s.includes('|')) {
      return s.split('|');
    }
    const result = [];
    for (let i = 0; i < s.length; i += 3) {
      result.push(s.substr(i, 3));
    }
    return result;
  }

  static addModel(script, name, value) {
    const languages = data[script];
    const model = Language.lansplit(value);
    let weight = model.length;
    const trigrams = {};
    while (weight > 0) {
      weight -= 1;
      trigrams[model[weight]] = weight;
    }
    languages[name] = trigrams;
  }

  addModel(script, name, value) {
    Language.addModel(script, name, value);
  }

  static buildModel() {
    Object.keys(data).forEach((script) => {
      const languages = data[script];
      Object.keys(languages).forEach((name) => {
        Language.addModel(script, name, languages[name]);
      });
    });
  }
}

Language.buildModel();

module.exports = Language;

},{"./data.json":105,"./languages.json":108}],108:[function(require,module,exports){
module.exports=[["aa","aar","Afar"],["ab","abk","Abkhazian"],["af","afr","Afrikaans"],["ak","aka","Akan"],["am","amh","Amharic"],["ar","arb","Arabic"],["an","arg","Aragonese"],["as","asm","Assamese"],["av","ava","Avaric"],["ae","ave","Avestan"],["ay","aym","Aymara"],["az","aze","Azerbaijani"],["ba","bak","Bashkir"],["bm","bam","Bambara"],["be","bel","Belarusian"],["bn","ben","Bengali"],["bh","bih","Bihari languages"],["bi","bis","Bislama"],["bo","bod","Tibetan"],["bs","bos","Bosnian"],["br","bre","Breton"],["bg","bul","Bulgarian"],["ca","cat","Catalan"],["cs","ces","Czech"],["ch","cha","Chamorro"],["ce","che","Chechen"],["cu","chu","Church Slavic"],["cv","chv","Chuvash"],["kw","cor","Cornish"],["co","cos","Corsican"],["cr","cre","Cree"],["cy","cym","Welsh"],["da","dan","Danish"],["de","deu","German"],["dv","div","Divehi"],["dz","dzo","Dzongkha"],["el","ell","Greek"],["en","eng","English"],["eo","epo","Esperanto"],["et","est","Estonian"],["eu","eus","Basque"],["ee","ewe","Ewe"],["fo","fao","Faroese"],["fa","fas","Persian"],["fj","fij","Fijian"],["fi","fin","Finnish"],["fr","fra","French"],["fy","fry","Western Frisian"],["ff","ful","Fulah"],["gd","gla","Gaelic"],["ga","gle","Irish"],["gl","glg","Galician"],["gv","glv","Manx"],["gn","grn","Guarani"],["gu","guj","Gujarati"],["ht","hat","Haitian"],["ha","hau","Hausa"],["he","heb","Hebrew"],["hz","her","Herero"],["hi","hin","Hindi"],["ho","hmo","Hiri Motu"],["hr","hrv","Croatian"],["hu","hun","Hungarian"],["hy","hye","Armenian"],["ig","ibo","Igbo"],["io","ido","Ido"],["ii","iii","Sichuan Yi"],["iu","iku","Inuktitut"],["ie","ile","Interlingue"],["ia","ina","Interlingua"],["id","ind","Indonesian"],["ik","ipk","Inupiaq"],["is","isl","Icelandic"],["it","ita","Italian"],["jv","jav","Javanese"],["ja","jpn","Japanese"],["kl","kal","Kalaallisut"],["kn","kan","Kannada"],["ks","kas","Kashmiri"],["ka","kat","Georgian"],["kr","kau","Kanuri"],["kk","kaz","Kazakh"],["km","khm","Central Khmer"],["ki","kik","Kikuyu"],["rw","kin","Kinyarwanda"],["ky","kir","Kirghiz"],["kv","kom","Komi"],["kg","kon","Kongo"],["ko","kor","Korean"],["kj","kua","Kuanyama"],["ku","kur","Kurdish"],["lo","lao","Lao"],["la","lat","Latin"],["lv","lav","Latvian"],["li","lim","Limburgan"],["ln","lin","Lingala"],["lt","lit","Lithuanian"],["lb","ltz","Luxembourgish"],["lu","lub","Luba-Katanga"],["lg","lug","Ganda"],["mh","mah","Marshallese"],["ml","mal","Malayalam"],["mr","mar","Marathi"],["mk","mkd","Macedonian"],["mg","mlg","Malagasy"],["mt","mlt","Maltese"],["mn","mon","Mongolian"],["mi","mri","Maori"],["ms","msa","Malay"],["my","mya","Burmese"],["na","nau","Nauru"],["nv","nav","Navajo"],["nr","nbl","Ndebele, South"],["nd","nde","Ndebele, North"],["ng","ndo","Ndonga"],["ne","nep","Nepali"],["nl","nld","Dutch"],["nn","nno","Norwegian Nynorsk"],["nb","nob","Bokmål, Norwegian"],["no","nor","Norwegian"],["ny","nya","Chichewa"],["oc","oci","Occitan"],["oj","oji","Ojibwa"],["or","ori","Oriya"],["om","orm","Oromo"],["os","oss","Ossetian"],["pa","pan","Panjabi"],["pi","pli","Pali"],["pl","pol","Polish"],["pt","por","Portuguese"],["ps","pus","Pushto"],["qu","que","Quechua"],["rm","roh","Romansh"],["ro","ron","Romanian"],["rn","run","Rundi"],["ru","rus","Russian"],["sg","sag","Sango"],["sa","san","Sanskrit"],["si","sin","Sinhala"],["sk","slk","Slovak"],["sl","slv","Slovenian"],["se","sme","Northern Sami"],["sm","smo","Samoan"],["sn","sna","Shona"],["sd","snd","Sindhi"],["so","som","Somali"],["st","sot","Sotho, Southern"],["es","spa","Spanish"],["sq","sqi","Albanian"],["sc","srd","Sardinian"],["sr","srp","Serbian"],["ss","ssw","Swati"],["su","sun","Sundanese"],["sw","swa","Swahili"],["sv","swe","Swedish"],["ty","tah","Tahitian"],["ta","tam","Tamil"],["tt","tat","Tatar"],["te","tel","Telugu"],["tg","tgk","Tajik"],["tl","tgl","Tagalog"],["th","tha","Thai"],["ti","tir","Tigrinya"],["to","ton","Tonga"],["tn","tsn","Tswana"],["ts","tso","Tsonga"],["tk","tuk","Turkmen"],["tr","tur","Turkish"],["tw","twi","Twi"],["ug","uig","Uighur"],["uk","ukr","Ukrainian"],["ur","urd","Urdu"],["uz","uzb","Uzbek"],["ve","ven","Venda"],["vi","vie","Vietnamese"],["vo","vol","Volapük"],["wa","wln","Walloon"],["wo","wol","Wolof"],["xh","xho","Xhosa"],["yi","yid","Yiddish"],["yo","yor","Yoruba"],["za","zha","Zhuang"],["zh","cmn","Chinese"],["zu","zul","Zulu"]]
},{}],109:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const SentimentAnalyzer = require('./sentiment-analyzer');

module.exports = {
  SentimentAnalyzer,
};

},{"./sentiment-analyzer":110}],110:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const { Clonable } = require('@nlpjs/core');

class SentimentAnalyzer extends Clonable {
  constructor(settings = {}, container) {
    super(
      {
        settings: {},
        container: settings.container || container,
      },
      container
    );
    this.applySettings(this.settings, settings);
    if (!this.settings.tag) {
      this.settings.tag = 'sentiment-analyzer';
    }
    this.registerDefault();
    this.applySettings(
      this.settings,
      this.container.getConfiguration(this.settings.tag)
    );
    this.applySettings(this, {
      pipelinePrepare: this.getPipeline(`${this.settings.tag}-prepare`),
      pipelineProcess: this.getPipeline(`${this.settings.tag}-process`),
    });
  }

  registerDefault() {
    this.container.registerConfiguration('sentiment-analyzer', {}, false);
  }

  prepare(locale, text, settings, stemmed) {
    const pipeline = this.getPipeline(`${this.settings.tag}-prepare`);
    if (pipeline) {
      const input = {
        text,
        locale,
        settings: settings || this.settings,
      };
      return this.runPipeline(input, pipeline);
    }
    if (stemmed) {
      const stemmer =
        this.container.get(`stemmer-${locale}`) ||
        this.container.get(`stemmer-en`);
      if (stemmer) {
        return stemmer.tokenizeAndStem(text);
      }
    }
    const tokenizer =
      this.container.get(`tokenizer-${locale}`) ||
      this.container.get(`tokenizer-en`);
    if (tokenizer) {
      return tokenizer.tokenize(text, true);
    }
    const normalized = text
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .toLowerCase();
    return normalized.split(/[\s,.!?;:([\]'"¡¿)/]+/).filter((x) => x);
  }

  async getDictionary(srcInput) {
    const input = srcInput;
    const dictionaries = this.container.get(`sentiment-${input.locale}`);
    let type;
    if (dictionaries) {
      if (dictionaries.senticon) {
        type = 'senticon';
      } else if (dictionaries.pattern) {
        type = 'pattern';
      } else if (dictionaries.afinn) {
        type = 'afinn';
      }
    }
    if (!type) {
      input.sentimentDictionary = {
        type,
        dictionary: undefined,
        negations: [],
        stemmed: false,
      };
      return input;
    }
    input.sentimentDictionary = {
      type,
      dictionary: dictionaries[type],
      negations: dictionaries.negations.words,
      stemmed:
        dictionaries.stemmed === undefined ? false : dictionaries.stemmed,
    };
    return input;
  }

  async getTokens(srcInput) {
    const input = srcInput;
    if (!input.tokens && input.sentimentDictionary.type) {
      input.tokens = await this.prepare(
        input.locale,
        input.utterance || input.text,
        input.settings,
        input.sentimentDictionary.stemmed
      );
    }
    return input;
  }

  calculate(srcInput) {
    const input = srcInput;
    if (input.sentimentDictionary.type) {
      const tokens = Array.isArray(input.tokens)
        ? input.tokens
        : Object.keys(input.tokens);
      if (!input.sentimentDictionary.dictionary) {
        input.sentiment = {
          score: 0,
          numWords: tokens.length,
          numHits: 0,
          average: 0,
          type: input.sentimentDictionary.type,
          locale: input.locale,
        };
      } else {
        const { dictionary } = input.sentimentDictionary;
        const { negations } = input.sentimentDictionary;
        let score = 0;
        let negator = 1;
        let numHits = 0;
        for (let i = 0; i < tokens.length; i += 1) {
          const token = tokens[i].toLowerCase();
          if (negations.indexOf(token) !== -1) {
            negator = -1;
            numHits += 1;
          } else if (dictionary[token] !== undefined) {
            score += negator * dictionary[token];
            numHits += 1;
          }
        }
        input.sentiment = {
          score,
          numWords: tokens.length,
          numHits,
          average: score / tokens.length,
          type: input.sentimentDictionary.type,
          locale: input.locale,
        };
      }
    } else {
      input.sentiment = {
        score: 0,
        numWords: 0,
        numHits: 0,
        average: 0,
        type: input.sentimentDictionary.type,
        locale: input.locale,
      };
    }
    if (input.sentiment.score > 0) {
      input.sentiment.vote = 'positive';
    } else if (input.sentiment.score < 0) {
      input.sentiment.vote = 'negative';
    } else {
      input.sentiment.vote = 'neutral';
    }
    return input;
  }

  async defaultPipelineProcess(input) {
    let output = await this.getDictionary(input);
    output = await this.getTokens(output);
    output = await this.calculate(output);
    delete output.sentimentDictionary;
    return output;
  }

  process(srcInput, settings) {
    const input = srcInput;
    input.settings = input.settings || settings || this.settings;
    if (this.pipelineProcess) {
      return this.runPipeline(input, this.pipelineProcess);
    }
    return this.defaultPipelineProcess(input);
  }
}

module.exports = SentimentAnalyzer;

},{"@nlpjs/core":59}],111:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

class CosineSimilarity {
  constructor(container) {
    this.container = container;
  }

  getTokens(text, locale = 'en') {
    if (typeof text === 'string') {
      const tokenizer =
        this.container && this.container.get(`tokenizer-${locale}`);
      return tokenizer ? tokenizer.tokenize(text, true) : text.split(' ');
    }
    return text;
  }

  termFreqMap(str, locale) {
    const words = this.getTokens(str, locale);
    const termFreq = {};
    words.forEach((w) => {
      termFreq[w] = (termFreq[w] || 0) + 1;
    });
    return termFreq;
  }

  addKeysToDict(map, dict) {
    Object.keys(map).forEach((key) => {
      dict[key] = true;
    });
  }

  termFreqMapToVector(map, dict) {
    const termFreqVector = [];
    Object.keys(dict).forEach((term) => {
      termFreqVector.push(map[term] || 0);
    });
    return termFreqVector;
  }

  vecDotProduct(vecA, vecB) {
    let product = 0;
    for (let i = 0; i < vecA.length; i += 1) {
      product += vecA[i] * vecB[i];
    }
    return product;
  }

  vecMagnitude(vec) {
    let sum = 0;
    for (let i = 0; i < vec.length; i += 1) {
      sum += vec[i] * vec[i];
    }
    return Math.sqrt(sum);
  }

  /**
   * Calculates cosine-similarity from two vectors
   * @param {number[]} left Left vector
   * @param {number[]} right Right vector
   * @returns {number} cosine between two vectors
   * {@link https://en.wikipedia.org/wiki/Cosine_similarity Cosine Similarity}
   */
  cosineSimilarity(vecA, vecB) {
    return (
      this.vecDotProduct(vecA, vecB) /
      (this.vecMagnitude(vecA) * this.vecMagnitude(vecB))
    );
  }

  /**
   * Calculates cosine-similarity from two sentences
   * @param {string} left Left string
   * @param {string} right Right string
   * @returns {number} cosine between two sentences representend in VSM
   */
  similarity(strA, strB, locale) {
    if (strA === strB) {
      return 1;
    }
    const termFreqA = this.termFreqMap(strA, locale);
    const termFreqB = this.termFreqMap(strB, locale);

    if (!Object.keys(termFreqA).length || !Object.keys(termFreqB).length) {
      return 0;
    }
    const dict = {};
    this.addKeysToDict(termFreqA, dict);
    this.addKeysToDict(termFreqB, dict);

    const termFreqVecA = this.termFreqMapToVector(termFreqA, dict);
    const termFreqVecB = this.termFreqMapToVector(termFreqB, dict);

    return this.cosineSimilarity(termFreqVecA, termFreqVecB);
  }
}

module.exports = CosineSimilarity;

},{}],112:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const leven = require('./leven');
const similarity = require('./similarity');
const CosineSimilarity = require('./cosine-similarity');
const SpellCheck = require('./spell-check');

module.exports = {
  leven,
  CosineSimilarity,
  similarity,
  SpellCheck,
};

},{"./cosine-similarity":111,"./leven":113,"./similarity":114,"./spell-check":115}],113:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const array = [];
const charCodeCache = [];

/**
 * Calculates levenshtein distance
 * @param {string} left Left string
 * @param {string} right Right string
 * @returns {number} levenshtein distance of the two strings
 */
function leven(left, right) {
  if (left.length > right.length) {
    // eslint-disable-next-line no-param-reassign
    [left, right] = [right, left];
  }
  let leftLength = left.length - 1;
  let rightLength = right.length - 1;
  while (
    leftLength > 0 &&
    left.charCodeAt(leftLength) === right.charCodeAt(rightLength)
  ) {
    leftLength -= 1;
    rightLength -= 1;
  }
  leftLength += 1;
  rightLength += 1;
  let start = 0;
  while (
    start < leftLength &&
    left.charCodeAt(start) === right.charCodeAt(start)
  ) {
    start += 1;
  }
  leftLength -= start;
  rightLength -= start;
  if (leftLength === 0) {
    return rightLength;
  }
  for (let i = 0; i < leftLength; i += 1) {
    charCodeCache[i] = left.charCodeAt(start + i);
    array[i] = i + 1;
  }
  let bCharCode;
  let result;
  let temp;
  let temp2;
  let j = 0;
  while (j < rightLength) {
    bCharCode = right.charCodeAt(start + j);
    temp = j;
    j += 1;
    result = j;
    for (let i = 0; i < leftLength; i += 1) {
      /* eslint-disable */
      temp2 = temp + (bCharCode !== charCodeCache[i])|0;
      /* eslint-enable */
      temp = array[i];
      if (temp > result) {
        array[i] = temp2 > result ? result + 1 : temp2;
      } else {
        array[i] = temp2 > temp ? temp + 1 : temp2;
      }
      result = array[i];
    }
  }
  return result;
}

module.exports = leven;

},{}],114:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const leven = require('./leven');

function similarity(str1, str2, normalize = false) {
  if (normalize) {
    /* eslint-disable */
    str1 = str1
      .normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "")
      .toLowerCase();
    str2 = str2
      .normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "")
      .toLowerCase();
    /* eslint-enable */
  }
  return str1 === str2 ? 0 : leven(str1, str2);
}

module.exports = similarity;

},{"./leven":113}],115:[function(require,module,exports){
/*
 * Copyright (c) AXA Group Operations Spain S.A.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

const similarity = require('./similarity');

class SpellCheck {
  constructor(settings) {
    this.settings = settings || {};
    this.minLength = this.settings.minLength || 4;
    if (this.settings.features) {
      this.setFeatures(this.settings.features);
    } else {
      this.features = {};
      this.featuresByLength = {};
    }
  }

  setFeatures(features) {
    this.features = features;
    this.featuresByLength = {};
    this.featuresList = Object.keys(this.features);
    for (let i = 0; i < this.featuresList.length; i += 1) {
      const feature = this.featuresList[i];
      const { length } = feature;
      if (!this.featuresByLength[length]) {
        this.featuresByLength[length] = [];
      }
      this.featuresByLength[length].push(feature);
    }
  }

  checkToken(token, distance) {
    if (this.features[token]) {
      return token;
    }
    if (token.length < this.minLength) {
      return token;
    }
    let best;
    let distanceBest = Infinity;
    for (
      let i = token.length - distance - 1;
      i < token.length + distance;
      i += 1
    ) {
      const currentFeatures = this.featuresByLength[i + 1];
      if (currentFeatures) {
        for (let j = 0; j < currentFeatures.length; j += 1) {
          const feature = currentFeatures[j];
          const similar = similarity(token, feature);
          if (similar <= distance) {
            if (similar < distanceBest) {
              best = feature;
              distanceBest = similar;
            } else if (similar === distanceBest && best) {
              const la = Math.abs(best.length - token.length);
              const lb = Math.abs(feature.length - token.length);
              if (
                la > lb ||
                (la === lb && this.features[feature] > this.features[best])
              ) {
                best = feature;
                distanceBest = similar;
              }
            }
          }
        }
      }
    }
    return best || token;
  }

  check(tokens, distance = 1) {
    if (!Array.isArray(tokens)) {
      const keys = Object.keys(tokens);
      const processed = this.check(keys, distance);
      const obj = {};
      for (let i = 0; i < processed.length; i += 1) {
        obj[processed[i]] = tokens[keys[i]];
      }
      return obj;
    }
    const result = [];
    for (let i = 0; i < tokens.length; i += 1) {
      result.push(this.checkToken(tokens[i], distance));
    }
    return result;
  }
}

module.exports = SpellCheck;

},{"./similarity":114}],116:[function(require,module,exports){
require('../../modules/es.string.iterator');
require('../../modules/es.array.from');
var path = require('../../internals/path');

module.exports = path.Array.from;

},{"../../internals/path":221,"../../modules/es.array.from":246,"../../modules/es.string.iterator":264}],117:[function(require,module,exports){
require('../../modules/es.array.is-array');
var path = require('../../internals/path');

module.exports = path.Array.isArray;

},{"../../internals/path":221,"../../modules/es.array.is-array":249}],118:[function(require,module,exports){
require('../../../modules/es.array.concat');
var entryVirtual = require('../../../internals/entry-virtual');

module.exports = entryVirtual('Array').concat;

},{"../../../internals/entry-virtual":178,"../../../modules/es.array.concat":244}],119:[function(require,module,exports){
require('../../../modules/es.array.for-each');
var entryVirtual = require('../../../internals/entry-virtual');

module.exports = entryVirtual('Array').forEach;

},{"../../../internals/entry-virtual":178,"../../../modules/es.array.for-each":245}],120:[function(require,module,exports){
require('../../../modules/es.array.includes');
var entryVirtual = require('../../../internals/entry-virtual');

module.exports = entryVirtual('Array').includes;

},{"../../../internals/entry-virtual":178,"../../../modules/es.array.includes":247}],121:[function(require,module,exports){
require('../../../modules/es.array.index-of');
var entryVirtual = require('../../../internals/entry-virtual');

module.exports = entryVirtual('Array').indexOf;

},{"../../../internals/entry-virtual":178,"../../../modules/es.array.index-of":248}],122:[function(require,module,exports){
require('../../../modules/es.array.map');
var entryVirtual = require('../../../internals/entry-virtual');

module.exports = entryVirtual('Array').map;

},{"../../../internals/entry-virtual":178,"../../../modules/es.array.map":251}],123:[function(require,module,exports){
require('../../../modules/es.array.reduce');
var entryVirtual = require('../../../internals/entry-virtual');

module.exports = entryVirtual('Array').reduce;

},{"../../../internals/entry-virtual":178,"../../../modules/es.array.reduce":252}],124:[function(require,module,exports){
require('../../../modules/es.array.slice');
var entryVirtual = require('../../../internals/entry-virtual');

module.exports = entryVirtual('Array').slice;

},{"../../../internals/entry-virtual":178,"../../../modules/es.array.slice":253}],125:[function(require,module,exports){
require('../../../modules/es.array.sort');
var entryVirtual = require('../../../internals/entry-virtual');

module.exports = entryVirtual('Array').sort;

},{"../../../internals/entry-virtual":178,"../../../modules/es.array.sort":254}],126:[function(require,module,exports){
var concat = require('../array/virtual/concat');

var ArrayPrototype = Array.prototype;

module.exports = function (it) {
  var own = it.concat;
  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.concat) ? concat : own;
};

},{"../array/virtual/concat":118}],127:[function(require,module,exports){
var flags = require('../regexp/flags');

var RegExpPrototype = RegExp.prototype;

module.exports = function (it) {
  return (it === RegExpPrototype || it instanceof RegExp) && !('flags' in it) ? flags(it) : it.flags;
};

},{"../regexp/flags":137}],128:[function(require,module,exports){
var arrayIncludes = require('../array/virtual/includes');
var stringIncludes = require('../string/virtual/includes');

var ArrayPrototype = Array.prototype;
var StringPrototype = String.prototype;

module.exports = function (it) {
  var own = it.includes;
  if (it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.includes)) return arrayIncludes;
  if (typeof it === 'string' || it === StringPrototype || (it instanceof String && own === StringPrototype.includes)) {
    return stringIncludes;
  } return own;
};

},{"../array/virtual/includes":120,"../string/virtual/includes":138}],129:[function(require,module,exports){
var indexOf = require('../array/virtual/index-of');

var ArrayPrototype = Array.prototype;

module.exports = function (it) {
  var own = it.indexOf;
  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.indexOf) ? indexOf : own;
};

},{"../array/virtual/index-of":121}],130:[function(require,module,exports){
var map = require('../array/virtual/map');

var ArrayPrototype = Array.prototype;

module.exports = function (it) {
  var own = it.map;
  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.map) ? map : own;
};

},{"../array/virtual/map":122}],131:[function(require,module,exports){
var reduce = require('../array/virtual/reduce');

var ArrayPrototype = Array.prototype;

module.exports = function (it) {
  var own = it.reduce;
  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.reduce) ? reduce : own;
};

},{"../array/virtual/reduce":123}],132:[function(require,module,exports){
var slice = require('../array/virtual/slice');

var ArrayPrototype = Array.prototype;

module.exports = function (it) {
  var own = it.slice;
  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.slice) ? slice : own;
};

},{"../array/virtual/slice":124}],133:[function(require,module,exports){
var sort = require('../array/virtual/sort');

var ArrayPrototype = Array.prototype;

module.exports = function (it) {
  var own = it.sort;
  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.sort) ? sort : own;
};

},{"../array/virtual/sort":125}],134:[function(require,module,exports){
require('../../modules/es.object.create');
var path = require('../../internals/path');

var Object = path.Object;

module.exports = function create(P, D) {
  return Object.create(P, D);
};

},{"../../internals/path":221,"../../modules/es.object.create":257}],135:[function(require,module,exports){
require('../../modules/es.object.define-property');
var path = require('../../internals/path');

var Object = path.Object;

var defineProperty = module.exports = function defineProperty(it, key, desc) {
  return Object.defineProperty(it, key, desc);
};

if (Object.defineProperty.sham) defineProperty.sham = true;

},{"../../internals/path":221,"../../modules/es.object.define-property":258}],136:[function(require,module,exports){
require('../modules/es.parse-int');
var path = require('../internals/path');

module.exports = path.parseInt;

},{"../internals/path":221,"../modules/es.parse-int":260}],137:[function(require,module,exports){
require('../../modules/es.regexp.flags');
var flags = require('../../internals/regexp-flags');

module.exports = function (it) {
  return flags.call(it);
};

},{"../../internals/regexp-flags":223,"../../modules/es.regexp.flags":262}],138:[function(require,module,exports){
require('../../../modules/es.string.includes');
var entryVirtual = require('../../../internals/entry-virtual');

module.exports = entryVirtual('String').includes;

},{"../../../internals/entry-virtual":178,"../../../modules/es.string.includes":263}],139:[function(require,module,exports){
require('../../modules/es.array.concat');
require('../../modules/es.object.to-string');
require('../../modules/es.symbol');
require('../../modules/es.symbol.async-iterator');
require('../../modules/es.symbol.description');
require('../../modules/es.symbol.has-instance');
require('../../modules/es.symbol.is-concat-spreadable');
require('../../modules/es.symbol.iterator');
require('../../modules/es.symbol.match');
require('../../modules/es.symbol.match-all');
require('../../modules/es.symbol.replace');
require('../../modules/es.symbol.search');
require('../../modules/es.symbol.species');
require('../../modules/es.symbol.split');
require('../../modules/es.symbol.to-primitive');
require('../../modules/es.symbol.to-string-tag');
require('../../modules/es.symbol.unscopables');
require('../../modules/es.json.to-string-tag');
require('../../modules/es.math.to-string-tag');
require('../../modules/es.reflect.to-string-tag');
var path = require('../../internals/path');

module.exports = path.Symbol;

},{"../../internals/path":221,"../../modules/es.array.concat":244,"../../modules/es.json.to-string-tag":255,"../../modules/es.math.to-string-tag":256,"../../modules/es.object.to-string":259,"../../modules/es.reflect.to-string-tag":261,"../../modules/es.symbol":270,"../../modules/es.symbol.async-iterator":265,"../../modules/es.symbol.description":266,"../../modules/es.symbol.has-instance":267,"../../modules/es.symbol.is-concat-spreadable":268,"../../modules/es.symbol.iterator":269,"../../modules/es.symbol.match":272,"../../modules/es.symbol.match-all":271,"../../modules/es.symbol.replace":273,"../../modules/es.symbol.search":274,"../../modules/es.symbol.species":275,"../../modules/es.symbol.split":276,"../../modules/es.symbol.to-primitive":277,"../../modules/es.symbol.to-string-tag":278,"../../modules/es.symbol.unscopables":279}],140:[function(require,module,exports){
var parent = require('../../es/array/from');

module.exports = parent;

},{"../../es/array/from":116}],141:[function(require,module,exports){
var parent = require('../../es/array/is-array');

module.exports = parent;

},{"../../es/array/is-array":117}],142:[function(require,module,exports){
require('../modules/web.dom-collections.iterator');
require('../modules/es.string.iterator');
var getIteratorMethod = require('../internals/get-iterator-method');

module.exports = getIteratorMethod;

},{"../internals/get-iterator-method":184,"../modules/es.string.iterator":264,"../modules/web.dom-collections.iterator":285}],143:[function(require,module,exports){
require('../modules/web.dom-collections.iterator');
require('../modules/es.string.iterator');
var getIterator = require('../internals/get-iterator');

module.exports = getIterator;

},{"../internals/get-iterator":185,"../modules/es.string.iterator":264,"../modules/web.dom-collections.iterator":285}],144:[function(require,module,exports){
var parent = require('../../es/instance/slice');

module.exports = parent;

},{"../../es/instance/slice":132}],145:[function(require,module,exports){
require('../modules/web.dom-collections.iterator');
require('../modules/es.string.iterator');
var isIterable = require('../internals/is-iterable');

module.exports = isIterable;

},{"../internals/is-iterable":197,"../modules/es.string.iterator":264,"../modules/web.dom-collections.iterator":285}],146:[function(require,module,exports){
var parent = require('../../es/symbol');
require('../../modules/esnext.symbol.async-dispose');
require('../../modules/esnext.symbol.dispose');
require('../../modules/esnext.symbol.observable');
require('../../modules/esnext.symbol.pattern-match');
// TODO: Remove from `core-js@4`
require('../../modules/esnext.symbol.replace-all');

module.exports = parent;

},{"../../es/symbol":139,"../../modules/esnext.symbol.async-dispose":280,"../../modules/esnext.symbol.dispose":281,"../../modules/esnext.symbol.observable":282,"../../modules/esnext.symbol.pattern-match":283,"../../modules/esnext.symbol.replace-all":284}],147:[function(require,module,exports){
module.exports = function (it) {
  if (typeof it != 'function') {
    throw TypeError(String(it) + ' is not a function');
  } return it;
};

},{}],148:[function(require,module,exports){
var isObject = require('../internals/is-object');

module.exports = function (it) {
  if (!isObject(it) && it !== null) {
    throw TypeError("Can't set " + String(it) + ' as a prototype');
  } return it;
};

},{"../internals/is-object":198}],149:[function(require,module,exports){
module.exports = function () { /* empty */ };

},{}],150:[function(require,module,exports){
var isObject = require('../internals/is-object');

module.exports = function (it) {
  if (!isObject(it)) {
    throw TypeError(String(it) + ' is not an object');
  } return it;
};

},{"../internals/is-object":198}],151:[function(require,module,exports){
'use strict';
var $forEach = require('../internals/array-iteration').forEach;
var arrayMethodIsStrict = require('../internals/array-method-is-strict');
var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var STRICT_METHOD = arrayMethodIsStrict('forEach');
var USES_TO_LENGTH = arrayMethodUsesToLength('forEach');

// `Array.prototype.forEach` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.foreach
module.exports = (!STRICT_METHOD || !USES_TO_LENGTH) ? function forEach(callbackfn /* , thisArg */) {
  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
} : [].forEach;

},{"../internals/array-iteration":154,"../internals/array-method-is-strict":156,"../internals/array-method-uses-to-length":157}],152:[function(require,module,exports){
'use strict';
var bind = require('../internals/function-bind-context');
var toObject = require('../internals/to-object');
var callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');
var isArrayIteratorMethod = require('../internals/is-array-iterator-method');
var toLength = require('../internals/to-length');
var createProperty = require('../internals/create-property');
var getIteratorMethod = require('../internals/get-iterator-method');

// `Array.from` method implementation
// https://tc39.es/ecma262/#sec-array.from
module.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
  var O = toObject(arrayLike);
  var C = typeof this == 'function' ? this : Array;
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  var iteratorMethod = getIteratorMethod(O);
  var index = 0;
  var length, result, step, iterator, next, value;
  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
  // if the target is not iterable or it's an array with the default iterator - use a simple case
  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
    iterator = iteratorMethod.call(O);
    next = iterator.next;
    result = new C();
    for (;!(step = next.call(iterator)).done; index++) {
      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
      createProperty(result, index, value);
    }
  } else {
    length = toLength(O.length);
    result = new C(length);
    for (;length > index; index++) {
      value = mapping ? mapfn(O[index], index) : O[index];
      createProperty(result, index, value);
    }
  }
  result.length = index;
  return result;
};

},{"../internals/call-with-safe-iteration-closing":160,"../internals/create-property":169,"../internals/function-bind-context":182,"../internals/get-iterator-method":184,"../internals/is-array-iterator-method":194,"../internals/to-length":235,"../internals/to-object":236}],153:[function(require,module,exports){
var toIndexedObject = require('../internals/to-indexed-object');
var toLength = require('../internals/to-length');
var toAbsoluteIndex = require('../internals/to-absolute-index');

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};

},{"../internals/to-absolute-index":232,"../internals/to-indexed-object":233,"../internals/to-length":235}],154:[function(require,module,exports){
var bind = require('../internals/function-bind-context');
var IndexedObject = require('../internals/indexed-object');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var arraySpeciesCreate = require('../internals/array-species-create');

var push = [].push;

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterOut }` methods implementation
var createMethod = function (TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var IS_FILTER_OUT = TYPE == 7;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_OUT ? create($this, 0) : undefined;
    var value, result;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);
      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3: return true;              // some
          case 5: return value;             // find
          case 6: return index;             // findIndex
          case 2: push.call(target, value); // filter
        } else switch (TYPE) {
          case 4: return false;             // every
          case 7: push.call(target, value); // filterOut
        }
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

module.exports = {
  // `Array.prototype.forEach` method
  // https://tc39.es/ecma262/#sec-array.prototype.foreach
  forEach: createMethod(0),
  // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  map: createMethod(1),
  // `Array.prototype.filter` method
  // https://tc39.es/ecma262/#sec-array.prototype.filter
  filter: createMethod(2),
  // `Array.prototype.some` method
  // https://tc39.es/ecma262/#sec-array.prototype.some
  some: createMethod(3),
  // `Array.prototype.every` method
  // https://tc39.es/ecma262/#sec-array.prototype.every
  every: createMethod(4),
  // `Array.prototype.find` method
  // https://tc39.es/ecma262/#sec-array.prototype.find
  find: createMethod(5),
  // `Array.prototype.findIndex` method
  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod(6),
  // `Array.prototype.filterOut` method
  // https://github.com/tc39/proposal-array-filtering
  filterOut: createMethod(7)
};

},{"../internals/array-species-create":159,"../internals/function-bind-context":182,"../internals/indexed-object":191,"../internals/to-length":235,"../internals/to-object":236}],155:[function(require,module,exports){
var fails = require('../internals/fails');
var wellKnownSymbol = require('../internals/well-known-symbol');
var V8_VERSION = require('../internals/engine-v8-version');

var SPECIES = wellKnownSymbol('species');

module.exports = function (METHOD_NAME) {
  // We can't use this feature detection in V8 since it causes
  // deoptimization and serious performance degradation
  // https://github.com/zloirock/core-js/issues/677
  return V8_VERSION >= 51 || !fails(function () {
    var array = [];
    var constructor = array.constructor = {};
    constructor[SPECIES] = function () {
      return { foo: 1 };
    };
    return array[METHOD_NAME](Boolean).foo !== 1;
  });
};

},{"../internals/engine-v8-version":177,"../internals/fails":181,"../internals/well-known-symbol":242}],156:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');

module.exports = function (METHOD_NAME, argument) {
  var method = [][METHOD_NAME];
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call,no-throw-literal
    method.call(null, argument || function () { throw 1; }, 1);
  });
};

},{"../internals/fails":181}],157:[function(require,module,exports){
var DESCRIPTORS = require('../internals/descriptors');
var fails = require('../internals/fails');
var has = require('../internals/has');

var defineProperty = Object.defineProperty;
var cache = {};

var thrower = function (it) { throw it; };

module.exports = function (METHOD_NAME, options) {
  if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
  if (!options) options = {};
  var method = [][METHOD_NAME];
  var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;
  var argument0 = has(options, 0) ? options[0] : thrower;
  var argument1 = has(options, 1) ? options[1] : undefined;

  return cache[METHOD_NAME] = !!method && !fails(function () {
    if (ACCESSORS && !DESCRIPTORS) return true;
    var O = { length: -1 };

    if (ACCESSORS) defineProperty(O, 1, { enumerable: true, get: thrower });
    else O[1] = 1;

    method.call(O, argument0, argument1);
  });
};

},{"../internals/descriptors":172,"../internals/fails":181,"../internals/has":187}],158:[function(require,module,exports){
var aFunction = require('../internals/a-function');
var toObject = require('../internals/to-object');
var IndexedObject = require('../internals/indexed-object');
var toLength = require('../internals/to-length');

// `Array.prototype.{ reduce, reduceRight }` methods implementation
var createMethod = function (IS_RIGHT) {
  return function (that, callbackfn, argumentsLength, memo) {
    aFunction(callbackfn);
    var O = toObject(that);
    var self = IndexedObject(O);
    var length = toLength(O.length);
    var index = IS_RIGHT ? length - 1 : 0;
    var i = IS_RIGHT ? -1 : 1;
    if (argumentsLength < 2) while (true) {
      if (index in self) {
        memo = self[index];
        index += i;
        break;
      }
      index += i;
      if (IS_RIGHT ? index < 0 : length <= index) {
        throw TypeError('Reduce of empty array with no initial value');
      }
    }
    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
      memo = callbackfn(memo, self[index], index, O);
    }
    return memo;
  };
};

module.exports = {
  // `Array.prototype.reduce` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduce
  left: createMethod(false),
  // `Array.prototype.reduceRight` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduceright
  right: createMethod(true)
};

},{"../internals/a-function":147,"../internals/indexed-object":191,"../internals/to-length":235,"../internals/to-object":236}],159:[function(require,module,exports){
var isObject = require('../internals/is-object');
var isArray = require('../internals/is-array');
var wellKnownSymbol = require('../internals/well-known-symbol');

var SPECIES = wellKnownSymbol('species');

// `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray, length) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
};

},{"../internals/is-array":195,"../internals/is-object":198,"../internals/well-known-symbol":242}],160:[function(require,module,exports){
var anObject = require('../internals/an-object');
var iteratorClose = require('../internals/iterator-close');

// call something on iterator step with safe closing on error
module.exports = function (iterator, fn, value, ENTRIES) {
  try {
    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (error) {
    iteratorClose(iterator);
    throw error;
  }
};

},{"../internals/an-object":150,"../internals/iterator-close":201}],161:[function(require,module,exports){
var wellKnownSymbol = require('../internals/well-known-symbol');

var ITERATOR = wellKnownSymbol('iterator');
var SAFE_CLOSING = false;

try {
  var called = 0;
  var iteratorWithReturn = {
    next: function () {
      return { done: !!called++ };
    },
    'return': function () {
      SAFE_CLOSING = true;
    }
  };
  iteratorWithReturn[ITERATOR] = function () {
    return this;
  };
  // eslint-disable-next-line no-throw-literal
  Array.from(iteratorWithReturn, function () { throw 2; });
} catch (error) { /* empty */ }

module.exports = function (exec, SKIP_CLOSING) {
  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
  var ITERATION_SUPPORT = false;
  try {
    var object = {};
    object[ITERATOR] = function () {
      return {
        next: function () {
          return { done: ITERATION_SUPPORT = true };
        }
      };
    };
    exec(object);
  } catch (error) { /* empty */ }
  return ITERATION_SUPPORT;
};

},{"../internals/well-known-symbol":242}],162:[function(require,module,exports){
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],163:[function(require,module,exports){
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var classofRaw = require('../internals/classof-raw');
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
};

},{"../internals/classof-raw":162,"../internals/to-string-tag-support":238,"../internals/well-known-symbol":242}],164:[function(require,module,exports){
var wellKnownSymbol = require('../internals/well-known-symbol');

var MATCH = wellKnownSymbol('match');

module.exports = function (METHOD_NAME) {
  var regexp = /./;
  try {
    '/./'[METHOD_NAME](regexp);
  } catch (error1) {
    try {
      regexp[MATCH] = false;
      return '/./'[METHOD_NAME](regexp);
    } catch (error2) { /* empty */ }
  } return false;
};

},{"../internals/well-known-symbol":242}],165:[function(require,module,exports){
var fails = require('../internals/fails');

module.exports = !fails(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  return Object.getPrototypeOf(new F()) !== F.prototype;
});

},{"../internals/fails":181}],166:[function(require,module,exports){
'use strict';
var IteratorPrototype = require('../internals/iterators-core').IteratorPrototype;
var create = require('../internals/object-create');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var setToStringTag = require('../internals/set-to-string-tag');
var Iterators = require('../internals/iterators');

var returnThis = function () { return this; };

module.exports = function (IteratorConstructor, NAME, next) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
  Iterators[TO_STRING_TAG] = returnThis;
  return IteratorConstructor;
};

},{"../internals/create-property-descriptor":168,"../internals/iterators":203,"../internals/iterators-core":202,"../internals/object-create":208,"../internals/set-to-string-tag":226}],167:[function(require,module,exports){
var DESCRIPTORS = require('../internals/descriptors');
var definePropertyModule = require('../internals/object-define-property');
var createPropertyDescriptor = require('../internals/create-property-descriptor');

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"../internals/create-property-descriptor":168,"../internals/descriptors":172,"../internals/object-define-property":210}],168:[function(require,module,exports){
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],169:[function(require,module,exports){
'use strict';
var toPrimitive = require('../internals/to-primitive');
var definePropertyModule = require('../internals/object-define-property');
var createPropertyDescriptor = require('../internals/create-property-descriptor');

module.exports = function (object, key, value) {
  var propertyKey = toPrimitive(key);
  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
  else object[propertyKey] = value;
};

},{"../internals/create-property-descriptor":168,"../internals/object-define-property":210,"../internals/to-primitive":237}],170:[function(require,module,exports){
'use strict';

var $ = require('../internals/export');

var createIteratorConstructor = require('../internals/create-iterator-constructor');

var getPrototypeOf = require('../internals/object-get-prototype-of');

var setPrototypeOf = require('../internals/object-set-prototype-of');

var setToStringTag = require('../internals/set-to-string-tag');

var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

var redefine = require('../internals/redefine');

var wellKnownSymbol = require('../internals/well-known-symbol');

var IS_PURE = require('../internals/is-pure');

var Iterators = require('../internals/iterators');

var IteratorsCore = require('../internals/iterators-core');

var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () {
  return this;
};

module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];

    switch (KIND) {
      case KEYS:
        return function keys() {
          return new IteratorConstructor(this, KIND);
        };

      case VALUES:
        return function values() {
          return new IteratorConstructor(this, KIND);
        };

      case ENTRIES:
        return function entries() {
          return new IteratorConstructor(this, KIND);
        };
    }

    return function () {
      return new IteratorConstructor(this);
    };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype['@@iterator'] || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY; // fix native

  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));

    if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {
          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);
        }
      } // Set @@toStringTag to native iterators


      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
    }
  } // fix Array#{values, @@iterator}.name in V8 / FF


  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    INCORRECT_VALUES_NAME = true;

    defaultIterator = function values() {
      return nativeIterator.call(this);
    };
  } // define iterator


  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
    createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
  }

  Iterators[NAME] = defaultIterator; // export additional methods

  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        redefine(IterablePrototype, KEY, methods[KEY]);
      }
    } else $({
      target: NAME,
      proto: true,
      forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME
    }, methods);
  }

  return methods;
};

},{"../internals/create-iterator-constructor":166,"../internals/create-non-enumerable-property":167,"../internals/export":180,"../internals/is-pure":199,"../internals/iterators":203,"../internals/iterators-core":202,"../internals/object-get-prototype-of":215,"../internals/object-set-prototype-of":219,"../internals/redefine":222,"../internals/set-to-string-tag":226,"../internals/well-known-symbol":242}],171:[function(require,module,exports){
var path = require('../internals/path');
var has = require('../internals/has');
var wrappedWellKnownSymbolModule = require('../internals/well-known-symbol-wrapped');
var defineProperty = require('../internals/object-define-property').f;

module.exports = function (NAME) {
  var Symbol = path.Symbol || (path.Symbol = {});
  if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {
    value: wrappedWellKnownSymbolModule.f(NAME)
  });
};

},{"../internals/has":187,"../internals/object-define-property":210,"../internals/path":221,"../internals/well-known-symbol-wrapped":241}],172:[function(require,module,exports){
var fails = require('../internals/fails');

// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function () {
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});

},{"../internals/fails":181}],173:[function(require,module,exports){
var global = require('../internals/global');
var isObject = require('../internals/is-object');

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};

},{"../internals/global":186,"../internals/is-object":198}],174:[function(require,module,exports){
// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};

},{}],175:[function(require,module,exports){
var classof = require('../internals/classof-raw');
var global = require('../internals/global');

module.exports = classof(global.process) == 'process';

},{"../internals/classof-raw":162,"../internals/global":186}],176:[function(require,module,exports){
var getBuiltIn = require('../internals/get-built-in');

module.exports = getBuiltIn('navigator', 'userAgent') || '';

},{"../internals/get-built-in":183}],177:[function(require,module,exports){
var global = require('../internals/global');
var userAgent = require('../internals/engine-user-agent');

var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  version = match[0] + match[1];
} else if (userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = match[1];
  }
}

module.exports = version && +version;

},{"../internals/engine-user-agent":176,"../internals/global":186}],178:[function(require,module,exports){
var path = require('../internals/path');

module.exports = function (CONSTRUCTOR) {
  return path[CONSTRUCTOR + 'Prototype'];
};

},{"../internals/path":221}],179:[function(require,module,exports){
// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];

},{}],180:[function(require,module,exports){
'use strict';

var global = require('../internals/global');

var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;

var isForced = require('../internals/is-forced');

var path = require('../internals/path');

var bind = require('../internals/function-bind-context');

var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

var has = require('../internals/has');

var wrapConstructor = function (NativeConstructor) {
  var Wrapper = function (a, b, c) {
    if (this instanceof NativeConstructor) {
      switch (arguments.length) {
        case 0:
          return new NativeConstructor();

        case 1:
          return new NativeConstructor(a);

        case 2:
          return new NativeConstructor(a, b);
      }

      return new NativeConstructor(a, b, c);
    }

    return NativeConstructor.apply(this, arguments);
  };

  Wrapper.prototype = NativeConstructor.prototype;
  return Wrapper;
};
/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/


module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var PROTO = options.proto;
  var nativeSource = GLOBAL ? global : STATIC ? global[TARGET] : (global[TARGET] || {}).prototype;
  var target = GLOBAL ? path : path[TARGET] || (path[TARGET] = {});
  var targetPrototype = target.prototype;
  var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
  var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;

  for (key in source) {
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contains in native

    USE_NATIVE = !FORCED && nativeSource && has(nativeSource, key);
    targetProperty = target[key];
    if (USE_NATIVE) if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor(nativeSource, key);
      nativeProperty = descriptor && descriptor.value;
    } else nativeProperty = nativeSource[key]; // export native or implementation

    sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source[key];
    if (USE_NATIVE && typeof targetProperty === typeof sourceProperty) continue; // bind timers to global for call from export context

    if (options.bind && USE_NATIVE) resultProperty = bind(sourceProperty, global); // wrap global constructors for prevent changs in this version
    else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty); // make static versions for prototype methods
      else if (PROTO && typeof sourceProperty == 'function') resultProperty = bind(Function.call, sourceProperty); // default case
        else resultProperty = sourceProperty; // add a flag to not completely full polyfills

    if (options.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) {
      createNonEnumerableProperty(resultProperty, 'sham', true);
    }

    target[key] = resultProperty;

    if (PROTO) {
      VIRTUAL_PROTOTYPE = TARGET + 'Prototype';

      if (!has(path, VIRTUAL_PROTOTYPE)) {
        createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});
      } // export virtual prototype methods


      path[VIRTUAL_PROTOTYPE][key] = sourceProperty; // export real prototype methods

      if (options.real && targetPrototype && !targetPrototype[key]) {
        createNonEnumerableProperty(targetPrototype, key, sourceProperty);
      }
    }
  }
};

},{"../internals/create-non-enumerable-property":167,"../internals/function-bind-context":182,"../internals/global":186,"../internals/has":187,"../internals/is-forced":196,"../internals/object-get-own-property-descriptor":211,"../internals/path":221}],181:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};

},{}],182:[function(require,module,exports){
var aFunction = require('../internals/a-function');

// optional / simple context binding
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 0: return function () {
      return fn.call(that);
    };
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"../internals/a-function":147}],183:[function(require,module,exports){
var path = require('../internals/path');
var global = require('../internals/global');

var aFunction = function (variable) {
  return typeof variable == 'function' ? variable : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])
    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
};

},{"../internals/global":186,"../internals/path":221}],184:[function(require,module,exports){
var classof = require('../internals/classof');
var Iterators = require('../internals/iterators');
var wellKnownSymbol = require('../internals/well-known-symbol');

var ITERATOR = wellKnownSymbol('iterator');

module.exports = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"../internals/classof":163,"../internals/iterators":203,"../internals/well-known-symbol":242}],185:[function(require,module,exports){
var anObject = require('../internals/an-object');
var getIteratorMethod = require('../internals/get-iterator-method');

module.exports = function (it) {
  var iteratorMethod = getIteratorMethod(it);
  if (typeof iteratorMethod != 'function') {
    throw TypeError(String(it) + ' is not iterable');
  } return anObject(iteratorMethod.call(it));
};

},{"../internals/an-object":150,"../internals/get-iterator-method":184}],186:[function(require,module,exports){
(function (global){(function (){
var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line no-undef
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  check(typeof self == 'object' && self) ||
  check(typeof global == 'object' && global) ||
  // eslint-disable-next-line no-new-func
  (function () { return this; })() || Function('return this')();

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],187:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;

module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],188:[function(require,module,exports){
module.exports = {};

},{}],189:[function(require,module,exports){
var getBuiltIn = require('../internals/get-built-in');

module.exports = getBuiltIn('document', 'documentElement');

},{"../internals/get-built-in":183}],190:[function(require,module,exports){
var DESCRIPTORS = require('../internals/descriptors');
var fails = require('../internals/fails');
var createElement = require('../internals/document-create-element');

// Thank's IE8 for his funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});

},{"../internals/descriptors":172,"../internals/document-create-element":173,"../internals/fails":181}],191:[function(require,module,exports){
var fails = require('../internals/fails');
var classof = require('../internals/classof-raw');

var split = ''.split;

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins
  return !Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split.call(it, '') : Object(it);
} : Object;

},{"../internals/classof-raw":162,"../internals/fails":181}],192:[function(require,module,exports){
var store = require('../internals/shared-store');

var functionToString = Function.toString;

// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
if (typeof store.inspectSource != 'function') {
  store.inspectSource = function (it) {
    return functionToString.call(it);
  };
}

module.exports = store.inspectSource;

},{"../internals/shared-store":228}],193:[function(require,module,exports){
var NATIVE_WEAK_MAP = require('../internals/native-weak-map');
var global = require('../internals/global');
var isObject = require('../internals/is-object');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var objectHas = require('../internals/has');
var shared = require('../internals/shared-store');
var sharedKey = require('../internals/shared-key');
var hiddenKeys = require('../internals/hidden-keys');

var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP) {
  var store = shared.state || (shared.state = new WeakMap());
  var wmget = store.get;
  var wmhas = store.has;
  var wmset = store.set;
  set = function (it, metadata) {
    metadata.facade = it;
    wmset.call(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget.call(store, it) || {};
  };
  has = function (it) {
    return wmhas.call(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return objectHas(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return objectHas(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};

},{"../internals/create-non-enumerable-property":167,"../internals/global":186,"../internals/has":187,"../internals/hidden-keys":188,"../internals/is-object":198,"../internals/native-weak-map":205,"../internals/shared-key":227,"../internals/shared-store":228}],194:[function(require,module,exports){
var wellKnownSymbol = require('../internals/well-known-symbol');
var Iterators = require('../internals/iterators');

var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};

},{"../internals/iterators":203,"../internals/well-known-symbol":242}],195:[function(require,module,exports){
var classof = require('../internals/classof-raw');

// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
module.exports = Array.isArray || function isArray(arg) {
  return classof(arg) == 'Array';
};

},{"../internals/classof-raw":162}],196:[function(require,module,exports){
var fails = require('../internals/fails');

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : typeof detection == 'function' ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;

},{"../internals/fails":181}],197:[function(require,module,exports){
var classof = require('../internals/classof');
var wellKnownSymbol = require('../internals/well-known-symbol');
var Iterators = require('../internals/iterators');

var ITERATOR = wellKnownSymbol('iterator');

module.exports = function (it) {
  var O = Object(it);
  return O[ITERATOR] !== undefined
    || '@@iterator' in O
    // eslint-disable-next-line no-prototype-builtins
    || Iterators.hasOwnProperty(classof(O));
};

},{"../internals/classof":163,"../internals/iterators":203,"../internals/well-known-symbol":242}],198:[function(require,module,exports){
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],199:[function(require,module,exports){
module.exports = true;

},{}],200:[function(require,module,exports){
var isObject = require('../internals/is-object');
var classof = require('../internals/classof-raw');
var wellKnownSymbol = require('../internals/well-known-symbol');

var MATCH = wellKnownSymbol('match');

// `IsRegExp` abstract operation
// https://tc39.es/ecma262/#sec-isregexp
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
};

},{"../internals/classof-raw":162,"../internals/is-object":198,"../internals/well-known-symbol":242}],201:[function(require,module,exports){
var anObject = require('../internals/an-object');

module.exports = function (iterator) {
  var returnMethod = iterator['return'];
  if (returnMethod !== undefined) {
    return anObject(returnMethod.call(iterator)).value;
  }
};

},{"../internals/an-object":150}],202:[function(require,module,exports){
'use strict';
var fails = require('../internals/fails');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var has = require('../internals/has');
var wellKnownSymbol = require('../internals/well-known-symbol');
var IS_PURE = require('../internals/is-pure');

var ITERATOR = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS = false;

var returnThis = function () { return this; };

// `%IteratorPrototype%` object
// https://tc39.es/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
  }
}

var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == undefined || fails(function () {
  var test = {};
  // FF44- legacy iterators case
  return IteratorPrototype[ITERATOR].call(test) !== test;
});

if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
if ((!IS_PURE || NEW_ITERATOR_PROTOTYPE) && !has(IteratorPrototype, ITERATOR)) {
  createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
}

module.exports = {
  IteratorPrototype: IteratorPrototype,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};

},{"../internals/create-non-enumerable-property":167,"../internals/fails":181,"../internals/has":187,"../internals/is-pure":199,"../internals/object-get-prototype-of":215,"../internals/well-known-symbol":242}],203:[function(require,module,exports){
arguments[4][188][0].apply(exports,arguments)
},{"dup":188}],204:[function(require,module,exports){
var fails = require('../internals/fails');

module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  // Chrome 38 Symbol has incorrect toString conversion
  // eslint-disable-next-line no-undef
  return !String(Symbol());
});

},{"../internals/fails":181}],205:[function(require,module,exports){
var global = require('../internals/global');
var inspectSource = require('../internals/inspect-source');

var WeakMap = global.WeakMap;

module.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));

},{"../internals/global":186,"../internals/inspect-source":192}],206:[function(require,module,exports){
var isRegExp = require('../internals/is-regexp');

module.exports = function (it) {
  if (isRegExp(it)) {
    throw TypeError("The method doesn't accept regular expressions");
  } return it;
};

},{"../internals/is-regexp":200}],207:[function(require,module,exports){
var global = require('../internals/global');
var trim = require('../internals/string-trim').trim;
var whitespaces = require('../internals/whitespaces');

var $parseInt = global.parseInt;
var hex = /^[+-]?0[Xx]/;
var FORCED = $parseInt(whitespaces + '08') !== 8 || $parseInt(whitespaces + '0x16') !== 22;

// `parseInt` method
// https://tc39.es/ecma262/#sec-parseint-string-radix
module.exports = FORCED ? function parseInt(string, radix) {
  var S = trim(String(string));
  return $parseInt(S, (radix >>> 0) || (hex.test(S) ? 16 : 10));
} : $parseInt;

},{"../internals/global":186,"../internals/string-trim":231,"../internals/whitespaces":243}],208:[function(require,module,exports){
var anObject = require('../internals/an-object');
var defineProperties = require('../internals/object-define-properties');
var enumBugKeys = require('../internals/enum-bug-keys');
var hiddenKeys = require('../internals/hidden-keys');
var html = require('../internals/html');
var documentCreateElement = require('../internals/document-create-element');
var sharedKey = require('../internals/shared-key');

var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');

var EmptyConstructor = function () { /* empty */ };

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function () {
  try {
    /* global ActiveXObject */
    activeXDocument = document.domain && new ActiveXObject('htmlfile');
  } catch (error) { /* ignore */ }
  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
  var length = enumBugKeys.length;
  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  return NullProtoObject();
};

hiddenKeys[IE_PROTO] = true;

// `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = NullProtoObject();
  return Properties === undefined ? result : defineProperties(result, Properties);
};

},{"../internals/an-object":150,"../internals/document-create-element":173,"../internals/enum-bug-keys":179,"../internals/hidden-keys":188,"../internals/html":189,"../internals/object-define-properties":209,"../internals/shared-key":227}],209:[function(require,module,exports){
var DESCRIPTORS = require('../internals/descriptors');
var definePropertyModule = require('../internals/object-define-property');
var anObject = require('../internals/an-object');
var objectKeys = require('../internals/object-keys');

// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);
  return O;
};

},{"../internals/an-object":150,"../internals/descriptors":172,"../internals/object-define-property":210,"../internals/object-keys":217}],210:[function(require,module,exports){
var DESCRIPTORS = require('../internals/descriptors');
var IE8_DOM_DEFINE = require('../internals/ie8-dom-define');
var anObject = require('../internals/an-object');
var toPrimitive = require('../internals/to-primitive');

var nativeDefineProperty = Object.defineProperty;

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return nativeDefineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"../internals/an-object":150,"../internals/descriptors":172,"../internals/ie8-dom-define":190,"../internals/to-primitive":237}],211:[function(require,module,exports){
var DESCRIPTORS = require('../internals/descriptors');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var toIndexedObject = require('../internals/to-indexed-object');
var toPrimitive = require('../internals/to-primitive');
var has = require('../internals/has');
var IE8_DOM_DEFINE = require('../internals/ie8-dom-define');

var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return nativeGetOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
};

},{"../internals/create-property-descriptor":168,"../internals/descriptors":172,"../internals/has":187,"../internals/ie8-dom-define":190,"../internals/object-property-is-enumerable":218,"../internals/to-indexed-object":233,"../internals/to-primitive":237}],212:[function(require,module,exports){
var toIndexedObject = require('../internals/to-indexed-object');
var nativeGetOwnPropertyNames = require('../internals/object-get-own-property-names').f;

var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return nativeGetOwnPropertyNames(it);
  } catch (error) {
    return windowNames.slice();
  }
};

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]'
    ? getWindowNames(it)
    : nativeGetOwnPropertyNames(toIndexedObject(it));
};

},{"../internals/object-get-own-property-names":213,"../internals/to-indexed-object":233}],213:[function(require,module,exports){
var internalObjectKeys = require('../internals/object-keys-internal');
var enumBugKeys = require('../internals/enum-bug-keys');

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};

},{"../internals/enum-bug-keys":179,"../internals/object-keys-internal":216}],214:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;

},{}],215:[function(require,module,exports){
var has = require('../internals/has');
var toObject = require('../internals/to-object');
var sharedKey = require('../internals/shared-key');
var CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');

var IE_PROTO = sharedKey('IE_PROTO');
var ObjectPrototype = Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectPrototype : null;
};

},{"../internals/correct-prototype-getter":165,"../internals/has":187,"../internals/shared-key":227,"../internals/to-object":236}],216:[function(require,module,exports){
var has = require('../internals/has');
var toIndexedObject = require('../internals/to-indexed-object');
var indexOf = require('../internals/array-includes').indexOf;
var hiddenKeys = require('../internals/hidden-keys');

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~indexOf(result, key) || result.push(key);
  }
  return result;
};

},{"../internals/array-includes":153,"../internals/has":187,"../internals/hidden-keys":188,"../internals/to-indexed-object":233}],217:[function(require,module,exports){
var internalObjectKeys = require('../internals/object-keys-internal');
var enumBugKeys = require('../internals/enum-bug-keys');

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};

},{"../internals/enum-bug-keys":179,"../internals/object-keys-internal":216}],218:[function(require,module,exports){
'use strict';
var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : nativePropertyIsEnumerable;

},{}],219:[function(require,module,exports){
var anObject = require('../internals/an-object');
var aPossiblePrototype = require('../internals/a-possible-prototype');

// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
    setter.call(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter.call(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);

},{"../internals/a-possible-prototype":148,"../internals/an-object":150}],220:[function(require,module,exports){
'use strict';
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var classof = require('../internals/classof');

// `Object.prototype.toString` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.tostring
module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
  return '[object ' + classof(this) + ']';
};

},{"../internals/classof":163,"../internals/to-string-tag-support":238}],221:[function(require,module,exports){
arguments[4][188][0].apply(exports,arguments)
},{"dup":188}],222:[function(require,module,exports){
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

module.exports = function (target, key, value, options) {
  if (options && options.enumerable) target[key] = value;
  else createNonEnumerableProperty(target, key, value);
};

},{"../internals/create-non-enumerable-property":167}],223:[function(require,module,exports){
'use strict';
var anObject = require('../internals/an-object');

// `RegExp.prototype.flags` getter implementation
// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.dotAll) result += 's';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

},{"../internals/an-object":150}],224:[function(require,module,exports){
// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on " + it);
  return it;
};

},{}],225:[function(require,module,exports){
var global = require('../internals/global');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

module.exports = function (key, value) {
  try {
    createNonEnumerableProperty(global, key, value);
  } catch (error) {
    global[key] = value;
  } return value;
};

},{"../internals/create-non-enumerable-property":167,"../internals/global":186}],226:[function(require,module,exports){
var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');
var defineProperty = require('../internals/object-define-property').f;
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var has = require('../internals/has');
var toString = require('../internals/object-to-string');
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');

module.exports = function (it, TAG, STATIC, SET_METHOD) {
  if (it) {
    var target = STATIC ? it : it.prototype;
    if (!has(target, TO_STRING_TAG)) {
      defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });
    }
    if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {
      createNonEnumerableProperty(target, 'toString', toString);
    }
  }
};

},{"../internals/create-non-enumerable-property":167,"../internals/has":187,"../internals/object-define-property":210,"../internals/object-to-string":220,"../internals/to-string-tag-support":238,"../internals/well-known-symbol":242}],227:[function(require,module,exports){
var shared = require('../internals/shared');
var uid = require('../internals/uid');

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};

},{"../internals/shared":229,"../internals/uid":239}],228:[function(require,module,exports){
var global = require('../internals/global');
var setGlobal = require('../internals/set-global');

var SHARED = '__core-js_shared__';
var store = global[SHARED] || setGlobal(SHARED, {});

module.exports = store;

},{"../internals/global":186,"../internals/set-global":225}],229:[function(require,module,exports){
var IS_PURE = require('../internals/is-pure');
var store = require('../internals/shared-store');

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.8.3',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2021 Denis Pushkarev (zloirock.ru)'
});

},{"../internals/is-pure":199,"../internals/shared-store":228}],230:[function(require,module,exports){
var toInteger = require('../internals/to-integer');
var requireObjectCoercible = require('../internals/require-object-coercible');

// `String.prototype.{ codePointAt, at }` methods implementation
var createMethod = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = String(requireObjectCoercible($this));
    var position = toInteger(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = S.charCodeAt(position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING ? S.charAt(position) : first
        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

module.exports = {
  // `String.prototype.codePointAt` method
  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};

},{"../internals/require-object-coercible":224,"../internals/to-integer":234}],231:[function(require,module,exports){
var requireObjectCoercible = require('../internals/require-object-coercible');
var whitespaces = require('../internals/whitespaces');

var whitespace = '[' + whitespaces + ']';
var ltrim = RegExp('^' + whitespace + whitespace + '*');
var rtrim = RegExp(whitespace + whitespace + '*$');

// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
var createMethod = function (TYPE) {
  return function ($this) {
    var string = String(requireObjectCoercible($this));
    if (TYPE & 1) string = string.replace(ltrim, '');
    if (TYPE & 2) string = string.replace(rtrim, '');
    return string;
  };
};

module.exports = {
  // `String.prototype.{ trimLeft, trimStart }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimstart
  start: createMethod(1),
  // `String.prototype.{ trimRight, trimEnd }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimend
  end: createMethod(2),
  // `String.prototype.trim` method
  // https://tc39.es/ecma262/#sec-string.prototype.trim
  trim: createMethod(3)
};

},{"../internals/require-object-coercible":224,"../internals/whitespaces":243}],232:[function(require,module,exports){
var toInteger = require('../internals/to-integer');

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toInteger(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};

},{"../internals/to-integer":234}],233:[function(require,module,exports){
// toObject with fallback for non-array-like ES3 strings
var IndexedObject = require('../internals/indexed-object');
var requireObjectCoercible = require('../internals/require-object-coercible');

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};

},{"../internals/indexed-object":191,"../internals/require-object-coercible":224}],234:[function(require,module,exports){
var ceil = Math.ceil;
var floor = Math.floor;

// `ToInteger` abstract operation
// https://tc39.es/ecma262/#sec-tointeger
module.exports = function (argument) {
  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
};

},{}],235:[function(require,module,exports){
var toInteger = require('../internals/to-integer');

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};

},{"../internals/to-integer":234}],236:[function(require,module,exports){
var requireObjectCoercible = require('../internals/require-object-coercible');

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function (argument) {
  return Object(requireObjectCoercible(argument));
};

},{"../internals/require-object-coercible":224}],237:[function(require,module,exports){
var isObject = require('../internals/is-object');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (input, PREFERRED_STRING) {
  if (!isObject(input)) return input;
  var fn, val;
  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"../internals/is-object":198}],238:[function(require,module,exports){
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

module.exports = String(test) === '[object z]';

},{"../internals/well-known-symbol":242}],239:[function(require,module,exports){
var id = 0;
var postfix = Math.random();

module.exports = function (key) {
  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
};

},{}],240:[function(require,module,exports){
var NATIVE_SYMBOL = require('../internals/native-symbol');

module.exports = NATIVE_SYMBOL
  // eslint-disable-next-line no-undef
  && !Symbol.sham
  // eslint-disable-next-line no-undef
  && typeof Symbol.iterator == 'symbol';

},{"../internals/native-symbol":204}],241:[function(require,module,exports){
var wellKnownSymbol = require('../internals/well-known-symbol');

exports.f = wellKnownSymbol;

},{"../internals/well-known-symbol":242}],242:[function(require,module,exports){
var global = require('../internals/global');
var shared = require('../internals/shared');
var has = require('../internals/has');
var uid = require('../internals/uid');
var NATIVE_SYMBOL = require('../internals/native-symbol');
var USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');

var WellKnownSymbolsStore = shared('wks');
var Symbol = global.Symbol;
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!has(WellKnownSymbolsStore, name)) {
    if (NATIVE_SYMBOL && has(Symbol, name)) WellKnownSymbolsStore[name] = Symbol[name];
    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
  } return WellKnownSymbolsStore[name];
};

},{"../internals/global":186,"../internals/has":187,"../internals/native-symbol":204,"../internals/shared":229,"../internals/uid":239,"../internals/use-symbol-as-uid":240}],243:[function(require,module,exports){
// a string of all valid unicode whitespaces
// eslint-disable-next-line max-len
module.exports = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

},{}],244:[function(require,module,exports){
'use strict';

var $ = require('../internals/export');

var fails = require('../internals/fails');

var isArray = require('../internals/is-array');

var isObject = require('../internals/is-object');

var toObject = require('../internals/to-object');

var toLength = require('../internals/to-length');

var createProperty = require('../internals/create-property');

var arraySpeciesCreate = require('../internals/array-species-create');

var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');

var wellKnownSymbol = require('../internals/well-known-symbol');

var V8_VERSION = require('../internals/engine-v8-version');

var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded'; // We can't use this feature detection in V8 since it causes
// deoptimization and serious performance degradation
// https://github.com/zloirock/core-js/issues/679

var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {
  var array = [];
  array[IS_CONCAT_SPREADABLE] = false;
  return array.concat()[0] !== array;
});
var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

var isConcatSpreadable = function (O) {
  if (!isObject(O)) return false;
  var spreadable = O[IS_CONCAT_SPREADABLE];
  return spreadable !== undefined ? !!spreadable : isArray(O);
};

var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT; // `Array.prototype.concat` method
// https://tc39.es/ecma262/#sec-array.prototype.concat
// with adding support of @@isConcatSpreadable and @@species

$({
  target: 'Array',
  proto: true,
  forced: FORCED
}, {
  concat: function concat(arg) {
    // eslint-disable-line no-unused-vars
    var O = toObject(this);
    var A = arraySpeciesCreate(O, 0);
    var n = 0;
    var i, k, length, len, E;

    for (i = -1, length = arguments.length; i < length; i++) {
      E = i === -1 ? O : arguments[i];

      if (isConcatSpreadable(E)) {
        len = toLength(E.length);
        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);

        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
      } else {
        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        createProperty(A, n++, E);
      }
    }

    A.length = n;
    return A;
  }
});

},{"../internals/array-method-has-species-support":155,"../internals/array-species-create":159,"../internals/create-property":169,"../internals/engine-v8-version":177,"../internals/export":180,"../internals/fails":181,"../internals/is-array":195,"../internals/is-object":198,"../internals/to-length":235,"../internals/to-object":236,"../internals/well-known-symbol":242}],245:[function(require,module,exports){
'use strict';

var $ = require('../internals/export');

var forEach = require('../internals/array-for-each'); // `Array.prototype.forEach` method
// https://tc39.es/ecma262/#sec-array.prototype.foreach


$({
  target: 'Array',
  proto: true,
  forced: [].forEach != forEach
}, {
  forEach: forEach
});

},{"../internals/array-for-each":151,"../internals/export":180}],246:[function(require,module,exports){
"use strict";

var $ = require('../internals/export');

var from = require('../internals/array-from');

var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');

var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
  Array.from(iterable);
}); // `Array.from` method
// https://tc39.es/ecma262/#sec-array.from

$({
  target: 'Array',
  stat: true,
  forced: INCORRECT_ITERATION
}, {
  from: from
});

},{"../internals/array-from":152,"../internals/check-correctness-of-iteration":161,"../internals/export":180}],247:[function(require,module,exports){
'use strict';

var $ = require('../internals/export');

var $includes = require('../internals/array-includes').includes;

var addToUnscopables = require('../internals/add-to-unscopables');

var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', {
  ACCESSORS: true,
  1: 0
}); // `Array.prototype.includes` method
// https://tc39.es/ecma262/#sec-array.prototype.includes

$({
  target: 'Array',
  proto: true,
  forced: !USES_TO_LENGTH
}, {
  includes: function includes(el
  /* , fromIndex = 0 */
  ) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
}); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

addToUnscopables('includes');

},{"../internals/add-to-unscopables":149,"../internals/array-includes":153,"../internals/array-method-uses-to-length":157,"../internals/export":180}],248:[function(require,module,exports){
'use strict';

var $ = require('../internals/export');

var $indexOf = require('../internals/array-includes').indexOf;

var arrayMethodIsStrict = require('../internals/array-method-is-strict');

var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var nativeIndexOf = [].indexOf;
var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
var STRICT_METHOD = arrayMethodIsStrict('indexOf');
var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', {
  ACCESSORS: true,
  1: 0
}); // `Array.prototype.indexOf` method
// https://tc39.es/ecma262/#sec-array.prototype.indexof

$({
  target: 'Array',
  proto: true,
  forced: NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH
}, {
  indexOf: function indexOf(searchElement
  /* , fromIndex = 0 */
  ) {
    return NEGATIVE_ZERO // convert -0 to +0
    ? nativeIndexOf.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/array-includes":153,"../internals/array-method-is-strict":156,"../internals/array-method-uses-to-length":157,"../internals/export":180}],249:[function(require,module,exports){
"use strict";

var $ = require('../internals/export');

var isArray = require('../internals/is-array'); // `Array.isArray` method
// https://tc39.es/ecma262/#sec-array.isarray


$({
  target: 'Array',
  stat: true
}, {
  isArray: isArray
});

},{"../internals/export":180,"../internals/is-array":195}],250:[function(require,module,exports){
'use strict';
var toIndexedObject = require('../internals/to-indexed-object');
var addToUnscopables = require('../internals/add-to-unscopables');
var Iterators = require('../internals/iterators');
var InternalStateModule = require('../internals/internal-state');
var defineIterator = require('../internals/define-iterator');

var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.es/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.es/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.es/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.es/ecma262/#sec-createarrayiterator
module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated), // target
    index: 0,                          // next index
    kind: kind                         // kind
  });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return { value: undefined, done: true };
  }
  if (kind == 'keys') return { value: index, done: false };
  if (kind == 'values') return { value: target[index], done: false };
  return { value: [index, target[index]], done: false };
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
// https://tc39.es/ecma262/#sec-createmappedargumentsobject
Iterators.Arguments = Iterators.Array;

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"../internals/add-to-unscopables":149,"../internals/define-iterator":170,"../internals/internal-state":193,"../internals/iterators":203,"../internals/to-indexed-object":233}],251:[function(require,module,exports){
'use strict';

var $ = require('../internals/export');

var $map = require('../internals/array-iteration').map;

var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');

var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map'); // FF49- issue

var USES_TO_LENGTH = arrayMethodUsesToLength('map'); // `Array.prototype.map` method
// https://tc39.es/ecma262/#sec-array.prototype.map
// with adding support of @@species

$({
  target: 'Array',
  proto: true,
  forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
}, {
  map: function map(callbackfn
  /* , thisArg */
  ) {
    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/array-iteration":154,"../internals/array-method-has-species-support":155,"../internals/array-method-uses-to-length":157,"../internals/export":180}],252:[function(require,module,exports){
'use strict';

var $ = require('../internals/export');

var $reduce = require('../internals/array-reduce').left;

var arrayMethodIsStrict = require('../internals/array-method-is-strict');

var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var CHROME_VERSION = require('../internals/engine-v8-version');

var IS_NODE = require('../internals/engine-is-node');

var STRICT_METHOD = arrayMethodIsStrict('reduce');
var USES_TO_LENGTH = arrayMethodUsesToLength('reduce', {
  1: 0
}); // Chrome 80-82 has a critical bug
// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982

var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83; // `Array.prototype.reduce` method
// https://tc39.es/ecma262/#sec-array.prototype.reduce

$({
  target: 'Array',
  proto: true,
  forced: !STRICT_METHOD || !USES_TO_LENGTH || CHROME_BUG
}, {
  reduce: function reduce(callbackfn
  /* , initialValue */
  ) {
    return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/array-method-is-strict":156,"../internals/array-method-uses-to-length":157,"../internals/array-reduce":158,"../internals/engine-is-node":175,"../internals/engine-v8-version":177,"../internals/export":180}],253:[function(require,module,exports){
'use strict';

var $ = require('../internals/export');

var isObject = require('../internals/is-object');

var isArray = require('../internals/is-array');

var toAbsoluteIndex = require('../internals/to-absolute-index');

var toLength = require('../internals/to-length');

var toIndexedObject = require('../internals/to-indexed-object');

var createProperty = require('../internals/create-property');

var wellKnownSymbol = require('../internals/well-known-symbol');

var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');

var arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');
var USES_TO_LENGTH = arrayMethodUsesToLength('slice', {
  ACCESSORS: true,
  0: 0,
  1: 2
});
var SPECIES = wellKnownSymbol('species');
var nativeSlice = [].slice;
var max = Math.max; // `Array.prototype.slice` method
// https://tc39.es/ecma262/#sec-array.prototype.slice
// fallback for not array-like ES3 strings and DOM objects

$({
  target: 'Array',
  proto: true,
  forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH
}, {
  slice: function slice(start, end) {
    var O = toIndexedObject(this);
    var length = toLength(O.length);
    var k = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length); // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible

    var Constructor, result, n;

    if (isArray(O)) {
      Constructor = O.constructor; // cross-realm fallback

      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
        Constructor = undefined;
      } else if (isObject(Constructor)) {
        Constructor = Constructor[SPECIES];
        if (Constructor === null) Constructor = undefined;
      }

      if (Constructor === Array || Constructor === undefined) {
        return nativeSlice.call(O, k, fin);
      }
    }

    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));

    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);

    result.length = n;
    return result;
  }
});

},{"../internals/array-method-has-species-support":155,"../internals/array-method-uses-to-length":157,"../internals/create-property":169,"../internals/export":180,"../internals/is-array":195,"../internals/is-object":198,"../internals/to-absolute-index":232,"../internals/to-indexed-object":233,"../internals/to-length":235,"../internals/well-known-symbol":242}],254:[function(require,module,exports){
'use strict';

var $ = require('../internals/export');

var aFunction = require('../internals/a-function');

var toObject = require('../internals/to-object');

var fails = require('../internals/fails');

var arrayMethodIsStrict = require('../internals/array-method-is-strict');

var test = [];
var nativeSort = test.sort; // IE8-

var FAILS_ON_UNDEFINED = fails(function () {
  test.sort(undefined);
}); // V8 bug

var FAILS_ON_NULL = fails(function () {
  test.sort(null);
}); // Old WebKit

var STRICT_METHOD = arrayMethodIsStrict('sort');
var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD; // `Array.prototype.sort` method
// https://tc39.es/ecma262/#sec-array.prototype.sort

$({
  target: 'Array',
  proto: true,
  forced: FORCED
}, {
  sort: function sort(comparefn) {
    return comparefn === undefined ? nativeSort.call(toObject(this)) : nativeSort.call(toObject(this), aFunction(comparefn));
  }
});

},{"../internals/a-function":147,"../internals/array-method-is-strict":156,"../internals/export":180,"../internals/fails":181,"../internals/to-object":236}],255:[function(require,module,exports){
var global = require('../internals/global');
var setToStringTag = require('../internals/set-to-string-tag');

// JSON[@@toStringTag] property
// https://tc39.es/ecma262/#sec-json-@@tostringtag
setToStringTag(global.JSON, 'JSON', true);

},{"../internals/global":186,"../internals/set-to-string-tag":226}],256:[function(require,module,exports){
// empty

},{}],257:[function(require,module,exports){
"use strict";

var $ = require('../internals/export');

var DESCRIPTORS = require('../internals/descriptors');

var create = require('../internals/object-create'); // `Object.create` method
// https://tc39.es/ecma262/#sec-object.create


$({
  target: 'Object',
  stat: true,
  sham: !DESCRIPTORS
}, {
  create: create
});

},{"../internals/descriptors":172,"../internals/export":180,"../internals/object-create":208}],258:[function(require,module,exports){
"use strict";

var $ = require('../internals/export');

var DESCRIPTORS = require('../internals/descriptors');

var objectDefinePropertyModile = require('../internals/object-define-property'); // `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty


$({
  target: 'Object',
  stat: true,
  forced: !DESCRIPTORS,
  sham: !DESCRIPTORS
}, {
  defineProperty: objectDefinePropertyModile.f
});

},{"../internals/descriptors":172,"../internals/export":180,"../internals/object-define-property":210}],259:[function(require,module,exports){
arguments[4][256][0].apply(exports,arguments)
},{"dup":256}],260:[function(require,module,exports){
"use strict";

var $ = require('../internals/export');

var parseIntImplementation = require('../internals/number-parse-int'); // `parseInt` method
// https://tc39.es/ecma262/#sec-parseint-string-radix


$({
  global: true,
  forced: parseInt != parseIntImplementation
}, {
  parseInt: parseIntImplementation
});

},{"../internals/export":180,"../internals/number-parse-int":207}],261:[function(require,module,exports){
arguments[4][256][0].apply(exports,arguments)
},{"dup":256}],262:[function(require,module,exports){
arguments[4][256][0].apply(exports,arguments)
},{"dup":256}],263:[function(require,module,exports){
'use strict';

var $ = require('../internals/export');

var notARegExp = require('../internals/not-a-regexp');

var requireObjectCoercible = require('../internals/require-object-coercible');

var correctIsRegExpLogic = require('../internals/correct-is-regexp-logic'); // `String.prototype.includes` method
// https://tc39.es/ecma262/#sec-string.prototype.includes


$({
  target: 'String',
  proto: true,
  forced: !correctIsRegExpLogic('includes')
}, {
  includes: function includes(searchString
  /* , position = 0 */
  ) {
    return !!~String(requireObjectCoercible(this)).indexOf(notARegExp(searchString), arguments.length > 1 ? arguments[1] : undefined);
  }
});

},{"../internals/correct-is-regexp-logic":164,"../internals/export":180,"../internals/not-a-regexp":206,"../internals/require-object-coercible":224}],264:[function(require,module,exports){
'use strict';
var charAt = require('../internals/string-multibyte').charAt;
var InternalStateModule = require('../internals/internal-state');
var defineIterator = require('../internals/define-iterator');

var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function (iterated) {
  setInternalState(this, {
    type: STRING_ITERATOR,
    string: String(iterated),
    index: 0
  });
// `%StringIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
  var state = getInternalState(this);
  var string = state.string;
  var index = state.index;
  var point;
  if (index >= string.length) return { value: undefined, done: true };
  point = charAt(string, index);
  state.index += point.length;
  return { value: point, done: false };
});

},{"../internals/define-iterator":170,"../internals/internal-state":193,"../internals/string-multibyte":230}],265:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.asyncIterator` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.asynciterator
defineWellKnownSymbol('asyncIterator');

},{"../internals/define-well-known-symbol":171}],266:[function(require,module,exports){
arguments[4][256][0].apply(exports,arguments)
},{"dup":256}],267:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.hasInstance` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.hasinstance
defineWellKnownSymbol('hasInstance');

},{"../internals/define-well-known-symbol":171}],268:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.isConcatSpreadable` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.isconcatspreadable
defineWellKnownSymbol('isConcatSpreadable');

},{"../internals/define-well-known-symbol":171}],269:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.iterator` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.iterator
defineWellKnownSymbol('iterator');

},{"../internals/define-well-known-symbol":171}],270:[function(require,module,exports){
'use strict';

var $ = require('../internals/export');

var global = require('../internals/global');

var getBuiltIn = require('../internals/get-built-in');

var IS_PURE = require('../internals/is-pure');

var DESCRIPTORS = require('../internals/descriptors');

var NATIVE_SYMBOL = require('../internals/native-symbol');

var USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');

var fails = require('../internals/fails');

var has = require('../internals/has');

var isArray = require('../internals/is-array');

var isObject = require('../internals/is-object');

var anObject = require('../internals/an-object');

var toObject = require('../internals/to-object');

var toIndexedObject = require('../internals/to-indexed-object');

var toPrimitive = require('../internals/to-primitive');

var createPropertyDescriptor = require('../internals/create-property-descriptor');

var nativeObjectCreate = require('../internals/object-create');

var objectKeys = require('../internals/object-keys');

var getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');

var getOwnPropertyNamesExternal = require('../internals/object-get-own-property-names-external');

var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');

var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');

var definePropertyModule = require('../internals/object-define-property');

var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');

var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

var redefine = require('../internals/redefine');

var shared = require('../internals/shared');

var sharedKey = require('../internals/shared-key');

var hiddenKeys = require('../internals/hidden-keys');

var uid = require('../internals/uid');

var wellKnownSymbol = require('../internals/well-known-symbol');

var wrappedWellKnownSymbolModule = require('../internals/well-known-symbol-wrapped');

var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

var setToStringTag = require('../internals/set-to-string-tag');

var InternalStateModule = require('../internals/internal-state');

var $forEach = require('../internals/array-iteration').forEach;

var HIDDEN = sharedKey('hidden');
var SYMBOL = 'Symbol';
var PROTOTYPE = 'prototype';
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(SYMBOL);
var ObjectPrototype = Object[PROTOTYPE];
var $Symbol = global.Symbol;
var $stringify = getBuiltIn('JSON', 'stringify');
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
var AllSymbols = shared('symbols');
var ObjectPrototypeSymbols = shared('op-symbols');
var StringToSymbolRegistry = shared('string-to-symbol-registry');
var SymbolToStringRegistry = shared('symbol-to-string-registry');
var WellKnownSymbolsStore = shared('wks');
var QObject = global.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

var setSymbolDescriptor = DESCRIPTORS && fails(function () {
  return nativeObjectCreate(nativeDefineProperty({}, 'a', {
    get: function () {
      return nativeDefineProperty(this, 'a', {
        value: 7
      }).a;
    }
  })).a != 7;
}) ? function (O, P, Attributes) {
  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
  nativeDefineProperty(O, P, Attributes);

  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
    nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
  }
} : nativeDefineProperty;

var wrap = function (tag, description) {
  var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
  setInternalState(symbol, {
    type: SYMBOL,
    tag: tag,
    description: description
  });
  if (!DESCRIPTORS) symbol.description = description;
  return symbol;
};

var isSymbol = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return Object(it) instanceof $Symbol;
};

var $defineProperty = function defineProperty(O, P, Attributes) {
  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
  anObject(O);
  var key = toPrimitive(P, true);
  anObject(Attributes);

  if (has(AllSymbols, key)) {
    if (!Attributes.enumerable) {
      if (!has(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
      O[HIDDEN][key] = true;
    } else {
      if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
      Attributes = nativeObjectCreate(Attributes, {
        enumerable: createPropertyDescriptor(0, false)
      });
    }

    return setSymbolDescriptor(O, key, Attributes);
  }

  return nativeDefineProperty(O, key, Attributes);
};

var $defineProperties = function defineProperties(O, Properties) {
  anObject(O);
  var properties = toIndexedObject(Properties);
  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
  $forEach(keys, function (key) {
    if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
  });
  return O;
};

var $create = function create(O, Properties) {
  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
};

var $propertyIsEnumerable = function propertyIsEnumerable(V) {
  var P = toPrimitive(V, true);
  var enumerable = nativePropertyIsEnumerable.call(this, P);
  if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
  return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
};

var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
  var it = toIndexedObject(O);
  var key = toPrimitive(P, true);
  if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
  var descriptor = nativeGetOwnPropertyDescriptor(it, key);

  if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
    descriptor.enumerable = true;
  }

  return descriptor;
};

var $getOwnPropertyNames = function getOwnPropertyNames(O) {
  var names = nativeGetOwnPropertyNames(toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
  });
  return result;
};

var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {
      result.push(AllSymbols[key]);
    }
  });
  return result;
}; // `Symbol` constructor
// https://tc39.es/ecma262/#sec-symbol-constructor


if (!NATIVE_SYMBOL) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
    var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
    var tag = uid(description);

    var setter = function (value) {
      if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
    };

    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, {
      configurable: true,
      set: setter
    });
    return wrap(tag, description);
  };

  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return getInternalState(this).tag;
  });
  redefine($Symbol, 'withoutSetter', function (description) {
    return wrap(uid(description), description);
  });
  propertyIsEnumerableModule.f = $propertyIsEnumerable;
  definePropertyModule.f = $defineProperty;
  getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
  getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
  getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

  wrappedWellKnownSymbolModule.f = function (name) {
    return wrap(wellKnownSymbol(name), name);
  };

  if (DESCRIPTORS) {
    // https://github.com/tc39/proposal-Symbol-description
    nativeDefineProperty($Symbol[PROTOTYPE], 'description', {
      configurable: true,
      get: function description() {
        return getInternalState(this).description;
      }
    });

    if (!IS_PURE) {
      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, {
        unsafe: true
      });
    }
  }
}

$({
  global: true,
  wrap: true,
  forced: !NATIVE_SYMBOL,
  sham: !NATIVE_SYMBOL
}, {
  Symbol: $Symbol
});
$forEach(objectKeys(WellKnownSymbolsStore), function (name) {
  defineWellKnownSymbol(name);
});
$({
  target: SYMBOL,
  stat: true,
  forced: !NATIVE_SYMBOL
}, {
  // `Symbol.for` method
  // https://tc39.es/ecma262/#sec-symbol.for
  'for': function (key) {
    var string = String(key);
    if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
    var symbol = $Symbol(string);
    StringToSymbolRegistry[string] = symbol;
    SymbolToStringRegistry[symbol] = string;
    return symbol;
  },
  // `Symbol.keyFor` method
  // https://tc39.es/ecma262/#sec-symbol.keyfor
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
    if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
  },
  useSetter: function () {
    USE_SETTER = true;
  },
  useSimple: function () {
    USE_SETTER = false;
  }
});
$({
  target: 'Object',
  stat: true,
  forced: !NATIVE_SYMBOL,
  sham: !DESCRIPTORS
}, {
  // `Object.create` method
  // https://tc39.es/ecma262/#sec-object.create
  create: $create,
  // `Object.defineProperty` method
  // https://tc39.es/ecma262/#sec-object.defineproperty
  defineProperty: $defineProperty,
  // `Object.defineProperties` method
  // https://tc39.es/ecma262/#sec-object.defineproperties
  defineProperties: $defineProperties,
  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
});
$({
  target: 'Object',
  stat: true,
  forced: !NATIVE_SYMBOL
}, {
  // `Object.getOwnPropertyNames` method
  // https://tc39.es/ecma262/#sec-object.getownpropertynames
  getOwnPropertyNames: $getOwnPropertyNames,
  // `Object.getOwnPropertySymbols` method
  // https://tc39.es/ecma262/#sec-object.getownpropertysymbols
  getOwnPropertySymbols: $getOwnPropertySymbols
}); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443

$({
  target: 'Object',
  stat: true,
  forced: fails(function () {
    getOwnPropertySymbolsModule.f(1);
  })
}, {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return getOwnPropertySymbolsModule.f(toObject(it));
  }
}); // `JSON.stringify` method behavior with symbols
// https://tc39.es/ecma262/#sec-json.stringify

if ($stringify) {
  var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function () {
    var symbol = $Symbol(); // MS Edge converts symbol values to JSON as {}

    return $stringify([symbol]) != '[null]' // WebKit converts symbol values to JSON as null
    || $stringify({
      a: symbol
    }) != '{}' // V8 throws on boxed symbols
    || $stringify(Object(symbol)) != '{}';
  });
  $({
    target: 'JSON',
    stat: true,
    forced: FORCED_JSON_STRINGIFY
  }, {
    // eslint-disable-next-line no-unused-vars
    stringify: function stringify(it, replacer, space) {
      var args = [it];
      var index = 1;
      var $replacer;

      while (arguments.length > index) args.push(arguments[index++]);

      $replacer = replacer;
      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined

      if (!isArray(replacer)) replacer = function (key, value) {
        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
        if (!isSymbol(value)) return value;
      };
      args[1] = replacer;
      return $stringify.apply(null, args);
    }
  });
} // `Symbol.prototype[@@toPrimitive]` method
// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive


if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
  createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
} // `Symbol.prototype[@@toStringTag]` property
// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag


setToStringTag($Symbol, SYMBOL);
hiddenKeys[HIDDEN] = true;

},{"../internals/an-object":150,"../internals/array-iteration":154,"../internals/create-non-enumerable-property":167,"../internals/create-property-descriptor":168,"../internals/define-well-known-symbol":171,"../internals/descriptors":172,"../internals/export":180,"../internals/fails":181,"../internals/get-built-in":183,"../internals/global":186,"../internals/has":187,"../internals/hidden-keys":188,"../internals/internal-state":193,"../internals/is-array":195,"../internals/is-object":198,"../internals/is-pure":199,"../internals/native-symbol":204,"../internals/object-create":208,"../internals/object-define-property":210,"../internals/object-get-own-property-descriptor":211,"../internals/object-get-own-property-names":213,"../internals/object-get-own-property-names-external":212,"../internals/object-get-own-property-symbols":214,"../internals/object-keys":217,"../internals/object-property-is-enumerable":218,"../internals/redefine":222,"../internals/set-to-string-tag":226,"../internals/shared":229,"../internals/shared-key":227,"../internals/to-indexed-object":233,"../internals/to-object":236,"../internals/to-primitive":237,"../internals/uid":239,"../internals/use-symbol-as-uid":240,"../internals/well-known-symbol":242,"../internals/well-known-symbol-wrapped":241}],271:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.matchAll` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.matchall
defineWellKnownSymbol('matchAll');

},{"../internals/define-well-known-symbol":171}],272:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.match` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.match
defineWellKnownSymbol('match');

},{"../internals/define-well-known-symbol":171}],273:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.replace` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.replace
defineWellKnownSymbol('replace');

},{"../internals/define-well-known-symbol":171}],274:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.search` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.search
defineWellKnownSymbol('search');

},{"../internals/define-well-known-symbol":171}],275:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.species` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.species
defineWellKnownSymbol('species');

},{"../internals/define-well-known-symbol":171}],276:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.split` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.split
defineWellKnownSymbol('split');

},{"../internals/define-well-known-symbol":171}],277:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.toPrimitive` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.toprimitive
defineWellKnownSymbol('toPrimitive');

},{"../internals/define-well-known-symbol":171}],278:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.toStringTag` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.tostringtag
defineWellKnownSymbol('toStringTag');

},{"../internals/define-well-known-symbol":171}],279:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.unscopables` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.unscopables
defineWellKnownSymbol('unscopables');

},{"../internals/define-well-known-symbol":171}],280:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.asyncDispose` well-known symbol
// https://github.com/tc39/proposal-using-statement
defineWellKnownSymbol('asyncDispose');

},{"../internals/define-well-known-symbol":171}],281:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.dispose` well-known symbol
// https://github.com/tc39/proposal-using-statement
defineWellKnownSymbol('dispose');

},{"../internals/define-well-known-symbol":171}],282:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.observable` well-known symbol
// https://github.com/tc39/proposal-observable
defineWellKnownSymbol('observable');

},{"../internals/define-well-known-symbol":171}],283:[function(require,module,exports){
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

// `Symbol.patternMatch` well-known symbol
// https://github.com/tc39/proposal-pattern-matching
defineWellKnownSymbol('patternMatch');

},{"../internals/define-well-known-symbol":171}],284:[function(require,module,exports){
// TODO: remove from `core-js@4`
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

defineWellKnownSymbol('replaceAll');

},{"../internals/define-well-known-symbol":171}],285:[function(require,module,exports){
require('./es.array.iterator');
var DOMIterables = require('../internals/dom-iterables');
var global = require('../internals/global');
var classof = require('../internals/classof');
var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');
var Iterators = require('../internals/iterators');
var wellKnownSymbol = require('../internals/well-known-symbol');

var TO_STRING_TAG = wellKnownSymbol('toStringTag');

for (var COLLECTION_NAME in DOMIterables) {
  var Collection = global[COLLECTION_NAME];
  var CollectionPrototype = Collection && Collection.prototype;
  if (CollectionPrototype && classof(CollectionPrototype) !== TO_STRING_TAG) {
    createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
  }
  Iterators[COLLECTION_NAME] = Iterators.Array;
}

},{"../internals/classof":163,"../internals/create-non-enumerable-property":167,"../internals/dom-iterables":174,"../internals/global":186,"../internals/iterators":203,"../internals/well-known-symbol":242,"./es.array.iterator":250}],286:[function(require,module,exports){
arguments[4][140][0].apply(exports,arguments)
},{"../../es/array/from":116,"dup":140}],287:[function(require,module,exports){
arguments[4][141][0].apply(exports,arguments)
},{"../../es/array/is-array":117,"dup":141}],288:[function(require,module,exports){
var parent = require('../../../es/array/virtual/for-each');

module.exports = parent;

},{"../../../es/array/virtual/for-each":119}],289:[function(require,module,exports){
var parent = require('../../es/instance/concat');

module.exports = parent;

},{"../../es/instance/concat":126}],290:[function(require,module,exports){
var parent = require('../../es/instance/flags');

module.exports = parent;

},{"../../es/instance/flags":127}],291:[function(require,module,exports){
require('../../modules/web.dom-collections.iterator');
var forEach = require('../array/virtual/for-each');
var classof = require('../../internals/classof');
var ArrayPrototype = Array.prototype;

var DOMIterables = {
  DOMTokenList: true,
  NodeList: true
};

module.exports = function (it) {
  var own = it.forEach;
  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.forEach)
    // eslint-disable-next-line no-prototype-builtins
    || DOMIterables.hasOwnProperty(classof(it)) ? forEach : own;
};

},{"../../internals/classof":163,"../../modules/web.dom-collections.iterator":285,"../array/virtual/for-each":288}],292:[function(require,module,exports){
var parent = require('../../es/instance/includes');

module.exports = parent;

},{"../../es/instance/includes":128}],293:[function(require,module,exports){
var parent = require('../../es/instance/index-of');

module.exports = parent;

},{"../../es/instance/index-of":129}],294:[function(require,module,exports){
var parent = require('../../es/instance/map');

module.exports = parent;

},{"../../es/instance/map":130}],295:[function(require,module,exports){
var parent = require('../../es/instance/reduce');

module.exports = parent;

},{"../../es/instance/reduce":131}],296:[function(require,module,exports){
arguments[4][144][0].apply(exports,arguments)
},{"../../es/instance/slice":132,"dup":144}],297:[function(require,module,exports){
var parent = require('../../es/instance/sort');

module.exports = parent;

},{"../../es/instance/sort":133}],298:[function(require,module,exports){
var parent = require('../../es/object/create');

module.exports = parent;

},{"../../es/object/create":134}],299:[function(require,module,exports){
var parent = require('../../es/object/define-property');

module.exports = parent;

},{"../../es/object/define-property":135}],300:[function(require,module,exports){
var parent = require('../es/parse-int');

module.exports = parent;

},{"../es/parse-int":136}],301:[function(require,module,exports){
var parent = require('../../es/symbol');

module.exports = parent;

},{"../../es/symbol":139}],302:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ldaTopicModel = _interopRequireDefault(require("./lda-topic-model"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _ldaTopicModel.default;
exports.default = _default;

},{"./lda-topic-model":303}],303:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _xregexp = _interopRequireDefault(require("xregexp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Based on implementation on https://github.com/mimno/jsLDA and https://github.com/primaryobjects/lda
 */
class topicModelling {
  /**
   * 
   * @param {object} settings 
   * @param {array} sentences 
   * @param {array} dict 
   */
  constructor(settings, sentences, dict) {
    this.settings = settings || {};

    if (dict) {
      this.dict = dict;
    }

    if (!isNaN(this.settings.numberTopics) && this.settings.numberTopics > 0) {
      this.numTopics = this.settings.numberTopics;
    } else {
      this.numTopics = 10;
    }

    this.documentTopicSmoothing = 0.1;
    this.topicWordSmoothing = 0.01;
    this.docSortSmoothing = 10.0;
    this.sumDocSortSmoothing = this.docSortSmoothing * this.numTopics;
    this.completeSweeps = 0;
    this.reqiestedSweeps = 0; // vocabulary

    this.vocabularySize = 0;
    this.vocabularyCounts = {};

    if (this.settings.displayingStopWords !== undefined) {
      this.displayingStopwords = settings.displayingStopWords;
    } //documents


    this.documents = [];
    this.wordTopicCounts = {};
    this.topicWordCounts = [];
    this.topicScores = this.zeros(this.numTopics);
    this.tokensPerTopic = this.zeros(this.numTopics);
    this.topicWeights = this.zeros(this.numTopics);
    this.stopwords = {};

    if (this.dict !== undefined) {
      this.dict.forEach(key => {
        this.stopwords[key] = true;
      });
    }

    this.prepareData(sentences);

    if (this.settings.sweeps !== undefined) {
      this.requestedSweeps = this.settings.sweeps;
    } else {
      this.requestedSweeps = 500;
    }

    while (this.completeSweeps <= this.requestedSweeps) {
      this.sweep();
    }
  }

  prepareData(documents) {
    if (!documents || documents.length < 0) {
      return;
    }

    let wordPattern = (0, _xregexp.default)('\\p{L}[\\p{L}\\p{P}]*\\p{L}', 'g');

    for (let item of documents) {
      if (item.text == '') {
        continue;
      }

      let sentence = Array.isArray(item.text) ? item.text : item.text.toLowerCase().match(wordPattern);
      let docID = item.id;
      let tokens = [];
      let topicCounts = this.zeros(this.numTopics);

      if (sentence == null) {
        continue;
      }

      sentence.forEach(word => {
        if (word !== '') {
          let topic = Math.floor(Math.random() * this.numTopics);

          if (word.length <= 2) {
            this.stopwords[word] = 1;
          }

          let isStopword = this.stopwords[word];

          if (isStopword) {
            // Record counts for stopwords, but nothing else
            if (!this.vocabularyCounts[word]) {
              this.vocabularyCounts[word] = 1;
            } else {
              this.vocabularyCounts[word] += 1;
            }
          } else {
            this.tokensPerTopic[topic]++;

            if (!this.wordTopicCounts[word]) {
              this.wordTopicCounts[word] = {};
              this.vocabularySize++;
              this.vocabularyCounts[word] = 0;
            }

            if (!this.wordTopicCounts[word][topic]) {
              this.wordTopicCounts[word][topic] = 0;
            }

            this.wordTopicCounts[word][topic] += 1;
            this.vocabularyCounts[word] += 1;
            topicCounts[topic] += 1;
          }

          tokens.push({
            word: word,
            topic: topic,
            isStopword: isStopword
          });
        }
      });
      this.documents.push({
        originalOrder: documents.length,
        id: docID,
        originalText: item.text,
        tokens: tokens,
        topicCounts: topicCounts
      });
    }
  }

  sweep() {
    let topicNormalizers = this.zeros(this.numTopics);

    for (let topic = 0; topic < this.numTopics; topic++) {
      topicNormalizers[topic] = 1.0 / (this.vocabularySize * this.topicWordSmoothing + this.tokensPerTopic[topic]);
    }

    for (let doc = 0; doc < this.documents.length; doc++) {
      let currentDoc = this.documents[doc];
      let docTopicCounts = currentDoc.topicCounts;

      for (let position = 0; position < currentDoc.tokens.length; position++) {
        let token = currentDoc.tokens[position];

        if (token.isStopword) {
          continue;
        }

        this.tokensPerTopic[token.topic]--;
        let currentWordTopicCounts = this.wordTopicCounts[token.word];
        currentWordTopicCounts[token.topic]--;

        if (currentWordTopicCounts[token.topic] == 0) {//delete(currentWordTopicCounts[ token.topic ]);
        }

        docTopicCounts[token.topic]--;
        topicNormalizers[token.topic] = 1.0 / (this.vocabularySize * this.topicWordSmoothing + this.tokensPerTopic[token.topic]);
        let sum = 0.0;

        for (let topic = 0; topic < this.numTopics; topic++) {
          if (currentWordTopicCounts[topic]) {
            this.topicWeights[topic] = (this.documentTopicSmoothing + docTopicCounts[topic]) * (this.topicWordSmoothing + currentWordTopicCounts[topic]) * topicNormalizers[topic];
          } else {
            this.topicWeights[topic] = (this.documentTopicSmoothing + docTopicCounts[topic]) * this.topicWordSmoothing * topicNormalizers[topic];
          }

          sum += this.topicWeights[topic];
        } // Sample from an unnormalized discrete distribution


        let sample = sum * Math.random();
        let i = 0;
        sample -= this.topicWeights[i];

        while (sample > 0.0) {
          i++;
          sample -= this.topicWeights[i];
        }

        token.topic = i;
        this.tokensPerTopic[token.topic]++;

        if (!currentWordTopicCounts[token.topic]) {
          currentWordTopicCounts[token.topic] = 1;
        } else {
          currentWordTopicCounts[token.topic] += 1;
        }

        docTopicCounts[token.topic]++;
        topicNormalizers[token.topic] = 1.0 / (this.vocabularySize * this.topicWordSmoothing + this.tokensPerTopic[token.topic]);
      }
    } //console.log("sweep in " + (Date.now() - startTime) + " ms");


    this.completeSweeps += 1;

    if (this.completeSweeps >= this.requestedSweeps) {
      this.sortTopicWords();
    }
  }

  byCountDescending(a, b) {
    return b.count - a.count;
  }

  topNWords(wordCounts, n) {
    return wordCounts.slice(0, n).map(d => {
      return d.word;
    }).join(' ');
  }

  sortTopicWords() {
    this.topicWordCounts = [];

    for (let topic = 0; topic < this.numTopics; topic++) {
      this.topicWordCounts[topic] = [];
    }

    for (let word in this.wordTopicCounts) {
      for (let topic in this.wordTopicCounts[word]) {
        this.topicWordCounts[topic].push({
          word: word,
          count: this.wordTopicCounts[word][topic]
        });
      }
    }

    for (let topic = 0; topic < this.numTopics; topic++) {
      this.topicWordCounts[topic].sort(this.byCountDescending);
    }
  }

  getTopicWords() {
    let topicTopWords = [];

    for (let topic = 0; topic < this.numTopics; topic++) {
      topicTopWords.push(this.topNWords(this.topicWordCounts[topic], 10));
    }

    this.calcDominantTopic();
    let topicData = topicTopWords.map((words, index) => {
      return {
        id: index,
        topicText: words,
        score: this.topicScores[index]
      };
    });
    return topicData;
  }

  calcDominantTopic() {
    this.documents.map((doc, i) => {
      let topic = -1;
      let score = -1;

      for (let selectedTopic = 0; selectedTopic < this.numTopics; selectedTopic++) {
        let tempScore = (doc.topicCounts[selectedTopic] + this.docSortSmoothing) / (doc.tokens.length + this.sumDocSortSmoothing);

        if (tempScore >= score) {
          score = tempScore;
          topic = selectedTopic;
        }
      }

      this.topicScores[topic] += 1;
    });
    this.topicScores = this.topicScores.map(val => val / this.documents.length);
  }

  getDocuments() {
    let sentences = [];

    for (let selectedTopic = 0; selectedTopic < this.numTopics; selectedTopic++) {
      let documentVocab = this.getVocab(selectedTopic, true);
      let scores = this.documents.map((doc, i) => {
        return {
          docID: i,
          score: (doc.topicCounts[selectedTopic] + this.docSortSmoothing) / (doc.tokens.length + this.sumDocSortSmoothing)
        };
      });
      scores.sort((a, b) => {
        return b.score - a.score;
      });
      let docinfo = [];

      for (let val of scores) {
        if (this.documents[val.docID].topicCounts[selectedTopic] > 0) {
          docinfo.push({
            id: this.documents[val.docID].id,
            text: this.documents[val.docID].originalText,
            score: val.score
          });
        }
      }

      sentences.push({
        topic: selectedTopic,
        documents: docinfo,
        documentVocab
      });
    }

    return sentences;
  } //
  // Vocabulary
  //


  mostFrequentWords(includeStops, sortByTopic, selectedTopic) {
    // Convert the random-access map to a list of word:count pairs that
    //  we can then sort.
    let wordCounts = [];

    if (sortByTopic) {
      for (let word in this.vocabularyCounts) {
        if (this.wordTopicCounts[word] && this.wordTopicCounts[word][selectedTopic]) {
          wordCounts.push({
            word: word,
            count: this.wordTopicCounts[word][selectedTopic]
          });
        }
      }
    } else {
      for (let word in this.vocabularyCounts) {
        if (includeStops || !this.stopwords[word]) {
          wordCounts.push({
            word: word,
            count: this.vocabularyCounts[word]
          });
        }
      }
    }

    wordCounts.sort(this.byCountDescending);
    return wordCounts;
  }

  entropy(counts) {
    counts = counts.filter(function (x) {
      return x > 0.0;
    });
    let sum = this.sum(counts);
    return Math.log(sum) - 1.0 / sum * this.sum(counts.map(x => x * Math.log(x)));
  }

  specificity(word) {
    if (this.wordTopicCounts[word] == undefined) {
      return 0;
    }

    return 1.0 - this.entropy(Object.values(this.wordTopicCounts[word])) / Math.log(this.numTopics);
  }

  getVocab(selectedTopic, sortVocabByTopic) {
    let vocab = [];
    let wordFrequencies = this.mostFrequentWords(this.displayingStopwords, sortVocabByTopic, selectedTopic).slice(0, 499);
    wordFrequencies.forEach(d => {
      let isStopword = this.stopwords[d.word];
      let score = this.specificity(d.word);
      vocab.push({
        word: d.word,
        count: d.count,
        stopword: isStopword,
        specificity: score
      });
    });
    return vocab;
  }

  truncate(s) {
    return s.length > 300 ? s.substring(0, 299) + '...' : s;
  }

  zeros(n) {
    var x = new Array(n);

    for (var i = 0; i < n; i++) {
      x[i] = 0.0;
    }

    return x;
  }

  sum(arr) {
    return arr.reduce((sum, currentValue) => {
      return sum + currentValue;
    });
  }

}

var _default = topicModelling;
exports.default = _default;

},{"xregexp":312}],304:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],305:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = void 0;

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/includes"));

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/map"));

var _reduce = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/reduce"));

/*!
 * XRegExp.build 4.4.1
 * <xregexp.com>
 * Steven Levithan (c) 2012-present MIT License
 */
var _default = function _default(XRegExp) {
  var REGEX_DATA = 'xregexp';
  var subParts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g;
  var parts = XRegExp.union([/\({{([\w$]+)}}\)|{{([\w$]+)}}/, subParts], 'g', {
    conjunction: 'or'
  });
  /**
   * Strips a leading `^` and trailing unescaped `$`, if both are present.
   *
   * @private
   * @param {String} pattern Pattern to process.
   * @returns {String} Pattern with edge anchors removed.
   */

  function deanchor(pattern) {
    // Allow any number of empty noncapturing groups before/after anchors, because regexes
    // built/generated by XRegExp sometimes include them
    var leadingAnchor = /^(?:\(\?:\))*\^/;
    var trailingAnchor = /\$(?:\(\?:\))*$/;

    if (leadingAnchor.test(pattern) && trailingAnchor.test(pattern) && // Ensure that the trailing `$` isn't escaped
    trailingAnchor.test(pattern.replace(/\\[\s\S]/g, ''))) {
      return pattern.replace(leadingAnchor, '').replace(trailingAnchor, '');
    }

    return pattern;
  }
  /**
   * Converts the provided value to an XRegExp. Native RegExp flags are not preserved.
   *
   * @private
   * @param {String|RegExp} value Value to convert.
   * @param {Boolean} [addFlagX] Whether to apply the `x` flag in cases when `value` is not
   *   already a regex generated by XRegExp
   * @returns {RegExp} XRegExp object with XRegExp syntax applied.
   */


  function asXRegExp(value, addFlagX) {
    var flags = addFlagX ? 'x' : '';
    return XRegExp.isRegExp(value) ? value[REGEX_DATA] && value[REGEX_DATA].captureNames ? // Don't recompile, to preserve capture names
    value : // Recompile as XRegExp
    XRegExp(value.source, flags) : // Compile string as XRegExp
    XRegExp(value, flags);
  }

  function interpolate(substitution) {
    return substitution instanceof RegExp ? substitution : XRegExp.escape(substitution);
  }

  function reduceToSubpatternsObject(subpatterns, interpolated, subpatternIndex) {
    subpatterns["subpattern".concat(subpatternIndex)] = interpolated;
    return subpatterns;
  }

  function embedSubpatternAfter(raw, subpatternIndex, rawLiterals) {
    var hasSubpattern = subpatternIndex < rawLiterals.length - 1;
    return raw + (hasSubpattern ? "{{subpattern".concat(subpatternIndex, "}}") : '');
  }
  /**
   * Provides tagged template literals that create regexes with XRegExp syntax and flags. The
   * provided pattern is handled as a raw string, so backslashes don't need to be escaped.
   *
   * Interpolation of strings and regexes shares the features of `XRegExp.build`. Interpolated
   * patterns are treated as atomic units when quantified, interpolated strings have their special
   * characters escaped, a leading `^` and trailing unescaped `$` are stripped from interpolated
   * regexes if both are present, and any backreferences within an interpolated regex are
   * rewritten to work within the overall pattern.
   *
   * @memberOf XRegExp
   * @param {String} [flags] Any combination of XRegExp flags.
   * @returns {Function} Handler for template literals that construct regexes with XRegExp syntax.
   * @example
   *
   * const h12 = /1[0-2]|0?[1-9]/;
   * const h24 = /2[0-3]|[01][0-9]/;
   * const hours = XRegExp.tag('x')`${h12} : | ${h24}`;
   * const minutes = /^[0-5][0-9]$/;
   * // Note that explicitly naming the 'minutes' group is required for named backreferences
   * const time = XRegExp.tag('x')`^ ${hours} (?<minutes>${minutes}) $`;
   * time.test('10:59'); // -> true
   * XRegExp.exec('10:59', time).minutes; // -> '59'
   */


  XRegExp.tag = function (flags) {
    return function (literals) {
      var _context, _context2;

      for (var _len = arguments.length, substitutions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        substitutions[_key - 1] = arguments[_key];
      }

      var subpatterns = (0, _reduce["default"])(_context = (0, _map["default"])(substitutions).call(substitutions, interpolate)).call(_context, reduceToSubpatternsObject, {});
      var pattern = (0, _map["default"])(_context2 = literals.raw).call(_context2, embedSubpatternAfter).join('');
      return XRegExp.build(pattern, subpatterns, flags);
    };
  };
  /**
   * Builds regexes using named subpatterns, for readability and pattern reuse. Backreferences in
   * the outer pattern and provided subpatterns are automatically renumbered to work correctly.
   * Native flags used by provided subpatterns are ignored in favor of the `flags` argument.
   *
   * @memberOf XRegExp
   * @param {String} pattern XRegExp pattern using `{{name}}` for embedded subpatterns. Allows
   *   `({{name}})` as shorthand for `(?<name>{{name}})`. Patterns cannot be embedded within
   *   character classes.
   * @param {Object} subs Lookup object for named subpatterns. Values can be strings or regexes. A
   *   leading `^` and trailing unescaped `$` are stripped from subpatterns, if both are present.
   * @param {String} [flags] Any combination of XRegExp flags.
   * @returns {RegExp} Regex with interpolated subpatterns.
   * @example
   *
   * const time = XRegExp.build('(?x)^ {{hours}} ({{minutes}}) $', {
   *   hours: XRegExp.build('{{h12}} : | {{h24}}', {
   *     h12: /1[0-2]|0?[1-9]/,
   *     h24: /2[0-3]|[01][0-9]/
   *   }, 'x'),
   *   minutes: /^[0-5][0-9]$/
   * });
   * time.test('10:59'); // -> true
   * XRegExp.exec('10:59', time).minutes; // -> '59'
   */


  XRegExp.build = function (pattern, subs, flags) {
    flags = flags || ''; // Used with `asXRegExp` calls for `pattern` and subpatterns in `subs`, to work around how
    // some browsers convert `RegExp('\n')` to a regex that contains the literal characters `\`
    // and `n`. See more details at <https://github.com/slevithan/xregexp/pull/163>.

    var addFlagX = (0, _includes["default"])(flags).call(flags, 'x');
    var inlineFlags = /^\(\?([\w$]+)\)/.exec(pattern); // Add flags within a leading mode modifier to the overall pattern's flags

    if (inlineFlags) {
      flags = XRegExp._clipDuplicates(flags + inlineFlags[1]);
    }

    var data = {};

    for (var p in subs) {
      if (subs.hasOwnProperty(p)) {
        // Passing to XRegExp enables extended syntax and ensures independent validity,
        // lest an unescaped `(`, `)`, `[`, or trailing `\` breaks the `(?:)` wrapper. For
        // subpatterns provided as native regexes, it dies on octals and adds the property
        // used to hold extended regex instance data, for simplicity.
        var sub = asXRegExp(subs[p], addFlagX);
        data[p] = {
          // Deanchoring allows embedding independently useful anchored regexes. If you
          // really need to keep your anchors, double them (i.e., `^^...$$`).
          pattern: deanchor(sub.source),
          names: sub[REGEX_DATA].captureNames || []
        };
      }
    } // Passing to XRegExp dies on octals and ensures the outer pattern is independently valid;
    // helps keep this simple. Named captures will be put back.


    var patternAsRegex = asXRegExp(pattern, addFlagX); // 'Caps' is short for 'captures'

    var numCaps = 0;
    var numPriorCaps;
    var numOuterCaps = 0;
    var outerCapsMap = [0];
    var outerCapNames = patternAsRegex[REGEX_DATA].captureNames || [];
    var output = patternAsRegex.source.replace(parts, function ($0, $1, $2, $3, $4) {
      var subName = $1 || $2;
      var capName;
      var intro;
      var localCapIndex; // Named subpattern

      if (subName) {
        var _context3;

        if (!data.hasOwnProperty(subName)) {
          throw new ReferenceError("Undefined property ".concat($0));
        } // Named subpattern was wrapped in a capturing group


        if ($1) {
          capName = outerCapNames[numOuterCaps];
          outerCapsMap[++numOuterCaps] = ++numCaps; // If it's a named group, preserve the name. Otherwise, use the subpattern name
          // as the capture name

          intro = "(?<".concat(capName || subName, ">");
        } else {
          intro = '(?:';
        }

        numPriorCaps = numCaps;
        var rewrittenSubpattern = data[subName].pattern.replace(subParts, function (match, paren, backref) {
          // Capturing group
          if (paren) {
            capName = data[subName].names[numCaps - numPriorCaps];
            ++numCaps; // If the current capture has a name, preserve the name

            if (capName) {
              return "(?<".concat(capName, ">");
            } // Backreference

          } else if (backref) {
            localCapIndex = +backref - 1; // Rewrite the backreference

            return data[subName].names[localCapIndex] ? // Need to preserve the backreference name in case using flag `n`
            "\\k<".concat(data[subName].names[localCapIndex], ">") : "\\".concat(+backref + numPriorCaps);
          }

          return match;
        });
        return (0, _concat["default"])(_context3 = "".concat(intro)).call(_context3, rewrittenSubpattern, ")");
      } // Capturing group


      if ($3) {
        capName = outerCapNames[numOuterCaps];
        outerCapsMap[++numOuterCaps] = ++numCaps; // If the current capture has a name, preserve the name

        if (capName) {
          return "(?<".concat(capName, ">");
        } // Backreference

      } else if ($4) {
        localCapIndex = +$4 - 1; // Rewrite the backreference

        return outerCapNames[localCapIndex] ? // Need to preserve the backreference name in case using flag `n`
        "\\k<".concat(outerCapNames[localCapIndex], ">") : "\\".concat(outerCapsMap[+$4]);
      }

      return $0;
    });
    return XRegExp(output, flags);
  };
};

exports["default"] = _default;
module.exports = exports.default;
},{"@babel/runtime-corejs3/core-js-stable/instance/concat":22,"@babel/runtime-corejs3/core-js-stable/instance/includes":25,"@babel/runtime-corejs3/core-js-stable/instance/map":27,"@babel/runtime-corejs3/core-js-stable/instance/reduce":28,"@babel/runtime-corejs3/core-js-stable/object/define-property":32,"@babel/runtime-corejs3/helpers/interopRequireDefault":44}],306:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = void 0;

var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/slice"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/includes"));

/*!
 * XRegExp.matchRecursive 4.4.1
 * <xregexp.com>
 * Steven Levithan (c) 2009-present MIT License
 */
var _default = function _default(XRegExp) {
  /**
   * Returns a match detail object composed of the provided values.
   *
   * @private
   */
  function row(name, value, start, end) {
    return {
      name: name,
      value: value,
      start: start,
      end: end
    };
  }
  /**
   * Returns an array of match strings between outermost left and right delimiters, or an array of
   * objects with detailed match parts and position data. An error is thrown if delimiters are
   * unbalanced within the data.
   *
   * @memberOf XRegExp
   * @param {String} str String to search.
   * @param {String} left Left delimiter as an XRegExp pattern.
   * @param {String} right Right delimiter as an XRegExp pattern.
   * @param {String} [flags] Any native or XRegExp flags, used for the left and right delimiters.
   * @param {Object} [options] Lets you specify `valueNames` and `escapeChar` options.
   * @returns {!Array} Array of matches, or an empty array.
   * @example
   *
   * // Basic usage
   * let str = '(t((e))s)t()(ing)';
   * XRegExp.matchRecursive(str, '\\(', '\\)', 'g');
   * // -> ['t((e))s', '', 'ing']
   *
   * // Extended information mode with valueNames
   * str = 'Here is <div> <div>an</div></div> example';
   * XRegExp.matchRecursive(str, '<div\\s*>', '</div>', 'gi', {
   *   valueNames: ['between', 'left', 'match', 'right']
   * });
   * // -> [
   * // {name: 'between', value: 'Here is ',       start: 0,  end: 8},
   * // {name: 'left',    value: '<div>',          start: 8,  end: 13},
   * // {name: 'match',   value: ' <div>an</div>', start: 13, end: 27},
   * // {name: 'right',   value: '</div>',         start: 27, end: 33},
   * // {name: 'between', value: ' example',       start: 33, end: 41}
   * // ]
   *
   * // Omitting unneeded parts with null valueNames, and using escapeChar
   * str = '...{1}.\\{{function(x,y){return {y:x}}}';
   * XRegExp.matchRecursive(str, '{', '}', 'g', {
   *   valueNames: ['literal', null, 'value', null],
   *   escapeChar: '\\'
   * });
   * // -> [
   * // {name: 'literal', value: '...',  start: 0, end: 3},
   * // {name: 'value',   value: '1',    start: 4, end: 5},
   * // {name: 'literal', value: '.\\{', start: 6, end: 9},
   * // {name: 'value',   value: 'function(x,y){return {y:x}}', start: 10, end: 37}
   * // ]
   *
   * // Sticky mode via flag y
   * str = '<1><<<2>>><3>4<5>';
   * XRegExp.matchRecursive(str, '<', '>', 'gy');
   * // -> ['1', '<<2>>', '3']
   */


  XRegExp.matchRecursive = function (str, left, right, flags, options) {
    flags = flags || '';
    options = options || {};
    var global = (0, _includes["default"])(flags).call(flags, 'g');
    var sticky = (0, _includes["default"])(flags).call(flags, 'y'); // Flag `y` is controlled internally

    var basicFlags = flags.replace(/y/g, '');
    var _options = options,
        escapeChar = _options.escapeChar;
    var vN = options.valueNames;
    var output = [];
    var openTokens = 0;
    var delimStart = 0;
    var delimEnd = 0;
    var lastOuterEnd = 0;
    var outerStart;
    var innerStart;
    var leftMatch;
    var rightMatch;
    var esc;
    left = XRegExp(left, basicFlags);
    right = XRegExp(right, basicFlags);

    if (escapeChar) {
      var _context, _context2;

      if (escapeChar.length > 1) {
        throw new Error('Cannot use more than one escape character');
      }

      escapeChar = XRegExp.escape(escapeChar); // Example of concatenated `esc` regex:
      // `escapeChar`: '%'
      // `left`: '<'
      // `right`: '>'
      // Regex is: /(?:%[\S\s]|(?:(?!<|>)[^%])+)+/

      esc = new RegExp((0, _concat["default"])(_context = (0, _concat["default"])(_context2 = "(?:".concat(escapeChar, "[\\S\\s]|(?:(?!")).call(_context2, // Using `XRegExp.union` safely rewrites backreferences in `left` and `right`.
      // Intentionally not passing `basicFlags` to `XRegExp.union` since any syntax
      // transformation resulting from those flags was already applied to `left` and
      // `right` when they were passed through the XRegExp constructor above.
      XRegExp.union([left, right], '', {
        conjunction: 'or'
      }).source, ")[^")).call(_context, escapeChar, "])+)+"), // Flags `gy` not needed here
      flags.replace(/[^imu]+/g, ''));
    }

    while (true) {
      // If using an escape character, advance to the delimiter's next starting position,
      // skipping any escaped characters in between
      if (escapeChar) {
        delimEnd += (XRegExp.exec(str, esc, delimEnd, 'sticky') || [''])[0].length;
      }

      leftMatch = XRegExp.exec(str, left, delimEnd);
      rightMatch = XRegExp.exec(str, right, delimEnd); // Keep the leftmost match only

      if (leftMatch && rightMatch) {
        if (leftMatch.index <= rightMatch.index) {
          rightMatch = null;
        } else {
          leftMatch = null;
        }
      } // Paths (LM: leftMatch, RM: rightMatch, OT: openTokens):
      // LM | RM | OT | Result
      // 1  | 0  | 1  | loop
      // 1  | 0  | 0  | loop
      // 0  | 1  | 1  | loop
      // 0  | 1  | 0  | throw
      // 0  | 0  | 1  | throw
      // 0  | 0  | 0  | break
      // The paths above don't include the sticky mode special case. The loop ends after the
      // first completed match if not `global`.


      if (leftMatch || rightMatch) {
        delimStart = (leftMatch || rightMatch).index;
        delimEnd = delimStart + (leftMatch || rightMatch)[0].length;
      } else if (!openTokens) {
        break;
      }

      if (sticky && !openTokens && delimStart > lastOuterEnd) {
        break;
      }

      if (leftMatch) {
        if (!openTokens) {
          outerStart = delimStart;
          innerStart = delimEnd;
        }

        ++openTokens;
      } else if (rightMatch && openTokens) {
        if (! --openTokens) {
          if (vN) {
            if (vN[0] && outerStart > lastOuterEnd) {
              output.push(row(vN[0], (0, _slice["default"])(str).call(str, lastOuterEnd, outerStart), lastOuterEnd, outerStart));
            }

            if (vN[1]) {
              output.push(row(vN[1], (0, _slice["default"])(str).call(str, outerStart, innerStart), outerStart, innerStart));
            }

            if (vN[2]) {
              output.push(row(vN[2], (0, _slice["default"])(str).call(str, innerStart, delimStart), innerStart, delimStart));
            }

            if (vN[3]) {
              output.push(row(vN[3], (0, _slice["default"])(str).call(str, delimStart, delimEnd), delimStart, delimEnd));
            }
          } else {
            output.push((0, _slice["default"])(str).call(str, innerStart, delimStart));
          }

          lastOuterEnd = delimEnd;

          if (!global) {
            break;
          }
        }
      } else {
        throw new Error('Unbalanced delimiter found in string');
      } // If the delimiter matched an empty string, avoid an infinite loop


      if (delimStart === delimEnd) {
        ++delimEnd;
      }
    }

    if (global && !sticky && vN && vN[0] && str.length > lastOuterEnd) {
      output.push(row(vN[0], (0, _slice["default"])(str).call(str, lastOuterEnd), lastOuterEnd, str.length));
    }

    return output;
  };
};

exports["default"] = _default;
module.exports = exports.default;
},{"@babel/runtime-corejs3/core-js-stable/instance/concat":22,"@babel/runtime-corejs3/core-js-stable/instance/includes":25,"@babel/runtime-corejs3/core-js-stable/instance/slice":29,"@babel/runtime-corejs3/core-js-stable/object/define-property":32,"@babel/runtime-corejs3/helpers/interopRequireDefault":44}],307:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = void 0;

var _getIterator2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/get-iterator"));

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));

var _getIteratorMethod2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/get-iterator-method"));

var _symbol = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/symbol"));

var _from = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/from"));

var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/slice"));

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/includes"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof _symbol["default"] === "undefined" || (0, _getIteratorMethod2["default"])(o) == null) { if ((0, _isArray["default"])(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = (0, _getIterator2["default"])(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { var _context4; if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = (0, _slice["default"])(_context4 = Object.prototype.toString.call(o)).call(_context4, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return (0, _from["default"])(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!
 * XRegExp Unicode Base 4.4.1
 * <xregexp.com>
 * Steven Levithan (c) 2008-present MIT License
 */
var _default = function _default(XRegExp) {
  /**
   * Adds base support for Unicode matching:
   * - Adds syntax `\p{..}` for matching Unicode tokens. Tokens can be inverted using `\P{..}` or
   *   `\p{^..}`. Token names ignore case, spaces, hyphens, and underscores. You can omit the
   *   braces for token names that are a single letter (e.g. `\pL` or `PL`).
   * - Adds flag A (astral), which enables 21-bit Unicode support.
   * - Adds the `XRegExp.addUnicodeData` method used by other addons to provide character data.
   *
   * Unicode Base relies on externally provided Unicode character data. Official addons are
   * available to provide data for Unicode categories, scripts, blocks, and properties.
   *
   * @requires XRegExp
   */
  // ==--------------------------==
  // Private stuff
  // ==--------------------------==
  // Storage for Unicode data
  var unicode = {}; // Reuse utils

  var dec = XRegExp._dec;
  var hex = XRegExp._hex;
  var pad4 = XRegExp._pad4; // Generates a token lookup name: lowercase, with hyphens, spaces, and underscores removed

  function normalize(name) {
    return name.replace(/[- _]+/g, '').toLowerCase();
  } // Gets the decimal code of a literal code unit, \xHH, \uHHHH, or a backslash-escaped literal


  function charCode(chr) {
    var esc = /^\\[xu](.+)/.exec(chr);
    return esc ? dec(esc[1]) : chr.charCodeAt(chr[0] === '\\' ? 1 : 0);
  } // Inverts a list of ordered BMP characters and ranges


  function invertBmp(range) {
    var output = '';
    var lastEnd = -1;
    (0, _forEach["default"])(XRegExp).call(XRegExp, range, /(\\x..|\\u....|\\?[\s\S])(?:-(\\x..|\\u....|\\?[\s\S]))?/, function (m) {
      var start = charCode(m[1]);

      if (start > lastEnd + 1) {
        output += "\\u".concat(pad4(hex(lastEnd + 1)));

        if (start > lastEnd + 2) {
          output += "-\\u".concat(pad4(hex(start - 1)));
        }
      }

      lastEnd = charCode(m[2] || m[1]);
    });

    if (lastEnd < 0xFFFF) {
      output += "\\u".concat(pad4(hex(lastEnd + 1)));

      if (lastEnd < 0xFFFE) {
        output += '-\\uFFFF';
      }
    }

    return output;
  } // Generates an inverted BMP range on first use


  function cacheInvertedBmp(slug) {
    var prop = 'b!';
    return unicode[slug][prop] || (unicode[slug][prop] = invertBmp(unicode[slug].bmp));
  } // Combines and optionally negates BMP and astral data


  function buildAstral(slug, isNegated) {
    var item = unicode[slug];
    var combined = '';

    if (item.bmp && !item.isBmpLast) {
      var _context;

      combined = (0, _concat["default"])(_context = "[".concat(item.bmp, "]")).call(_context, item.astral ? '|' : '');
    }

    if (item.astral) {
      combined += item.astral;
    }

    if (item.isBmpLast && item.bmp) {
      var _context2;

      combined += (0, _concat["default"])(_context2 = "".concat(item.astral ? '|' : '', "[")).call(_context2, item.bmp, "]");
    } // Astral Unicode tokens always match a code point, never a code unit


    return isNegated ? "(?:(?!".concat(combined, ")(?:[\uD800-\uDBFF][\uDC00-\uDFFF]|[\0-\uFFFF]))") : "(?:".concat(combined, ")");
  } // Builds a complete astral pattern on first use


  function cacheAstral(slug, isNegated) {
    var prop = isNegated ? 'a!' : 'a=';
    return unicode[slug][prop] || (unicode[slug][prop] = buildAstral(slug, isNegated));
  } // ==--------------------------==
  // Core functionality
  // ==--------------------------==

  /*
   * Add astral mode (flag A) and Unicode token syntax: `\p{..}`, `\P{..}`, `\p{^..}`, `\pC`.
   */


  XRegExp.addToken( // Use `*` instead of `+` to avoid capturing `^` as the token name in `\p{^}`
  /\\([pP])(?:{(\^?)([^}]*)}|([A-Za-z]))/, function (match, scope, flags) {
    var ERR_DOUBLE_NEG = 'Invalid double negation ';
    var ERR_UNKNOWN_NAME = 'Unknown Unicode token ';
    var ERR_UNKNOWN_REF = 'Unicode token missing data ';
    var ERR_ASTRAL_ONLY = 'Astral mode required for Unicode token ';
    var ERR_ASTRAL_IN_CLASS = 'Astral mode does not support Unicode tokens within character classes'; // Negated via \P{..} or \p{^..}

    var isNegated = match[1] === 'P' || !!match[2]; // Switch from BMP (0-FFFF) to astral (0-10FFFF) mode via flag A

    var isAstralMode = (0, _includes["default"])(flags).call(flags, 'A'); // Token lookup name. Check `[4]` first to avoid passing `undefined` via `\p{}`

    var slug = normalize(match[4] || match[3]); // Token data object

    var item = unicode[slug];

    if (match[1] === 'P' && match[2]) {
      throw new SyntaxError(ERR_DOUBLE_NEG + match[0]);
    }

    if (!unicode.hasOwnProperty(slug)) {
      throw new SyntaxError(ERR_UNKNOWN_NAME + match[0]);
    } // Switch to the negated form of the referenced Unicode token


    if (item.inverseOf) {
      slug = normalize(item.inverseOf);

      if (!unicode.hasOwnProperty(slug)) {
        var _context3;

        throw new ReferenceError((0, _concat["default"])(_context3 = "".concat(ERR_UNKNOWN_REF + match[0], " -> ")).call(_context3, item.inverseOf));
      }

      item = unicode[slug];
      isNegated = !isNegated;
    }

    if (!(item.bmp || isAstralMode)) {
      throw new SyntaxError(ERR_ASTRAL_ONLY + match[0]);
    }

    if (isAstralMode) {
      if (scope === 'class') {
        throw new SyntaxError(ERR_ASTRAL_IN_CLASS);
      }

      return cacheAstral(slug, isNegated);
    }

    return scope === 'class' ? isNegated ? cacheInvertedBmp(slug) : item.bmp : "".concat((isNegated ? '[^' : '[') + item.bmp, "]");
  }, {
    scope: 'all',
    optionalFlags: 'A',
    leadChar: '\\'
  });
  /**
   * Adds to the list of Unicode tokens that XRegExp regexes can match via `\p` or `\P`.
   *
   * @memberOf XRegExp
   * @param {Array} data Objects with named character ranges. Each object may have properties
   *   `name`, `alias`, `isBmpLast`, `inverseOf`, `bmp`, and `astral`. All but `name` are
   *   optional, although one of `bmp` or `astral` is required (unless `inverseOf` is set). If
   *   `astral` is absent, the `bmp` data is used for BMP and astral modes. If `bmp` is absent,
   *   the name errors in BMP mode but works in astral mode. If both `bmp` and `astral` are
   *   provided, the `bmp` data only is used in BMP mode, and the combination of `bmp` and
   *   `astral` data is used in astral mode. `isBmpLast` is needed when a token matches orphan
   *   high surrogates *and* uses surrogate pairs to match astral code points. The `bmp` and
   *   `astral` data should be a combination of literal characters and `\xHH` or `\uHHHH` escape
   *   sequences, with hyphens to create ranges. Any regex metacharacters in the data should be
   *   escaped, apart from range-creating hyphens. The `astral` data can additionally use
   *   character classes and alternation, and should use surrogate pairs to represent astral code
   *   points. `inverseOf` can be used to avoid duplicating character data if a Unicode token is
   *   defined as the exact inverse of another token.
   * @example
   *
   * // Basic use
   * XRegExp.addUnicodeData([{
   *   name: 'XDigit',
   *   alias: 'Hexadecimal',
   *   bmp: '0-9A-Fa-f'
   * }]);
   * XRegExp('\\p{XDigit}:\\p{Hexadecimal}+').test('0:3D'); // -> true
   */

  XRegExp.addUnicodeData = function (data) {
    var ERR_NO_NAME = 'Unicode token requires name';
    var ERR_NO_DATA = 'Unicode token has no character data ';

    var _iterator = _createForOfIteratorHelper(data),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var item = _step.value;

        if (!item.name) {
          throw new Error(ERR_NO_NAME);
        }

        if (!(item.inverseOf || item.bmp || item.astral)) {
          throw new Error(ERR_NO_DATA + item.name);
        }

        unicode[normalize(item.name)] = item;

        if (item.alias) {
          unicode[normalize(item.alias)] = item;
        }
      } // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and
      // flags might now produce different results

    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    XRegExp.cache.flush('patterns');
  };
  /**
   * @ignore
   *
   * Return a reference to the internal Unicode definition structure for the given Unicode
   * Property if the given name is a legal Unicode Property for use in XRegExp `\p` or `\P` regex
   * constructs.
   *
   * @memberOf XRegExp
   * @param {String} name Name by which the Unicode Property may be recognized (case-insensitive),
   *   e.g. `'N'` or `'Number'`. The given name is matched against all registered Unicode
   *   Properties and Property Aliases.
   * @returns {Object} Reference to definition structure when the name matches a Unicode Property.
   *
   * @note
   * For more info on Unicode Properties, see also http://unicode.org/reports/tr18/#Categories.
   *
   * @note
   * This method is *not* part of the officially documented API and may change or be removed in
   * the future. It is meant for userland code that wishes to reuse the (large) internal Unicode
   * structures set up by XRegExp.
   */


  XRegExp._getUnicodeProperty = function (name) {
    var slug = normalize(name);
    return unicode[slug];
  };
};

exports["default"] = _default;
module.exports = exports.default;
},{"@babel/runtime-corejs3/core-js-stable/array/from":20,"@babel/runtime-corejs3/core-js-stable/array/is-array":21,"@babel/runtime-corejs3/core-js-stable/instance/concat":22,"@babel/runtime-corejs3/core-js-stable/instance/for-each":24,"@babel/runtime-corejs3/core-js-stable/instance/includes":25,"@babel/runtime-corejs3/core-js-stable/instance/slice":29,"@babel/runtime-corejs3/core-js-stable/object/define-property":32,"@babel/runtime-corejs3/core-js-stable/symbol":34,"@babel/runtime-corejs3/core-js/get-iterator":38,"@babel/runtime-corejs3/core-js/get-iterator-method":37,"@babel/runtime-corejs3/helpers/interopRequireDefault":44}],308:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = void 0;

var _blocks = _interopRequireDefault(require("../../tools/output/blocks"));

/*!
 * XRegExp Unicode Blocks 4.4.1
 * <xregexp.com>
 * Steven Levithan (c) 2010-present MIT License
 * Unicode data by Mathias Bynens <mathiasbynens.be>
 */
var _default = function _default(XRegExp) {
  /**
   * Adds support for all Unicode blocks. Block names use the prefix 'In'. E.g.,
   * `\p{InBasicLatin}`. Token names are case insensitive, and any spaces, hyphens, and
   * underscores are ignored.
   *
   * Uses Unicode 13.0.0.
   *
   * @requires XRegExp, Unicode Base
   */
  if (!XRegExp.addUnicodeData) {
    throw new ReferenceError('Unicode Base must be loaded before Unicode Blocks');
  }

  XRegExp.addUnicodeData(_blocks["default"]);
};

exports["default"] = _default;
module.exports = exports.default;
},{"../../tools/output/blocks":314,"@babel/runtime-corejs3/core-js-stable/object/define-property":32,"@babel/runtime-corejs3/helpers/interopRequireDefault":44}],309:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = void 0;

var _categories = _interopRequireDefault(require("../../tools/output/categories"));

/*!
 * XRegExp Unicode Categories 4.4.1
 * <xregexp.com>
 * Steven Levithan (c) 2010-present MIT License
 * Unicode data by Mathias Bynens <mathiasbynens.be>
 */
var _default = function _default(XRegExp) {
  /**
   * Adds support for Unicode's general categories. E.g., `\p{Lu}` or `\p{Uppercase Letter}`. See
   * category descriptions in UAX #44 <http://unicode.org/reports/tr44/#GC_Values_Table>. Token
   * names are case insensitive, and any spaces, hyphens, and underscores are ignored.
   *
   * Uses Unicode 13.0.0.
   *
   * @requires XRegExp, Unicode Base
   */
  if (!XRegExp.addUnicodeData) {
    throw new ReferenceError('Unicode Base must be loaded before Unicode Categories');
  }

  XRegExp.addUnicodeData(_categories["default"]);
};

exports["default"] = _default;
module.exports = exports.default;
},{"../../tools/output/categories":315,"@babel/runtime-corejs3/core-js-stable/object/define-property":32,"@babel/runtime-corejs3/helpers/interopRequireDefault":44}],310:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = void 0;

var _properties = _interopRequireDefault(require("../../tools/output/properties"));

/*!
 * XRegExp Unicode Properties 4.4.1
 * <xregexp.com>
 * Steven Levithan (c) 2012-present MIT License
 * Unicode data by Mathias Bynens <mathiasbynens.be>
 */
var _default = function _default(XRegExp) {
  /**
   * Adds properties to meet the UTS #18 Level 1 RL1.2 requirements for Unicode regex support. See
   * <http://unicode.org/reports/tr18/#RL1.2>. Following are definitions of these properties from
   * UAX #44 <http://unicode.org/reports/tr44/>:
   *
   * - Alphabetic
   *   Characters with the Alphabetic property. Generated from: Lowercase + Uppercase + Lt + Lm +
   *   Lo + Nl + Other_Alphabetic.
   *
   * - Default_Ignorable_Code_Point
   *   For programmatic determination of default ignorable code points. New characters that should
   *   be ignored in rendering (unless explicitly supported) will be assigned in these ranges,
   *   permitting programs to correctly handle the default rendering of such characters when not
   *   otherwise supported.
   *
   * - Lowercase
   *   Characters with the Lowercase property. Generated from: Ll + Other_Lowercase.
   *
   * - Noncharacter_Code_Point
   *   Code points permanently reserved for internal use.
   *
   * - Uppercase
   *   Characters with the Uppercase property. Generated from: Lu + Other_Uppercase.
   *
   * - White_Space
   *   Spaces, separator characters and other control characters which should be treated by
   *   programming languages as "white space" for the purpose of parsing elements.
   *
   * The properties ASCII, Any, and Assigned are also included but are not defined in UAX #44. UTS
   * #18 RL1.2 additionally requires support for Unicode scripts and general categories. These are
   * included in XRegExp's Unicode Categories and Unicode Scripts addons.
   *
   * Token names are case insensitive, and any spaces, hyphens, and underscores are ignored.
   *
   * Uses Unicode 13.0.0.
   *
   * @requires XRegExp, Unicode Base
   */
  if (!XRegExp.addUnicodeData) {
    throw new ReferenceError('Unicode Base must be loaded before Unicode Properties');
  }

  var unicodeData = _properties["default"]; // Add non-generated data

  unicodeData.push({
    name: 'Assigned',
    // Since this is defined as the inverse of Unicode category Cn (Unassigned), the Unicode
    // Categories addon is required to use this property
    inverseOf: 'Cn'
  });
  XRegExp.addUnicodeData(unicodeData);
};

exports["default"] = _default;
module.exports = exports.default;
},{"../../tools/output/properties":316,"@babel/runtime-corejs3/core-js-stable/object/define-property":32,"@babel/runtime-corejs3/helpers/interopRequireDefault":44}],311:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = void 0;

var _scripts = _interopRequireDefault(require("../../tools/output/scripts"));

/*!
 * XRegExp Unicode Scripts 4.4.1
 * <xregexp.com>
 * Steven Levithan (c) 2010-present MIT License
 * Unicode data by Mathias Bynens <mathiasbynens.be>
 */
var _default = function _default(XRegExp) {
  /**
   * Adds support for all Unicode scripts. E.g., `\p{Latin}`. Token names are case insensitive,
   * and any spaces, hyphens, and underscores are ignored.
   *
   * Uses Unicode 13.0.0.
   *
   * @requires XRegExp, Unicode Base
   */
  if (!XRegExp.addUnicodeData) {
    throw new ReferenceError('Unicode Base must be loaded before Unicode Scripts');
  }

  XRegExp.addUnicodeData(_scripts["default"]);
};

exports["default"] = _default;
module.exports = exports.default;
},{"../../tools/output/scripts":317,"@babel/runtime-corejs3/core-js-stable/object/define-property":32,"@babel/runtime-corejs3/helpers/interopRequireDefault":44}],312:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = void 0;

var _xregexp = _interopRequireDefault(require("./xregexp"));

var _build = _interopRequireDefault(require("./addons/build"));

var _matchrecursive = _interopRequireDefault(require("./addons/matchrecursive"));

var _unicodeBase = _interopRequireDefault(require("./addons/unicode-base"));

var _unicodeBlocks = _interopRequireDefault(require("./addons/unicode-blocks"));

var _unicodeCategories = _interopRequireDefault(require("./addons/unicode-categories"));

var _unicodeProperties = _interopRequireDefault(require("./addons/unicode-properties"));

var _unicodeScripts = _interopRequireDefault(require("./addons/unicode-scripts"));

(0, _build["default"])(_xregexp["default"]);
(0, _matchrecursive["default"])(_xregexp["default"]);
(0, _unicodeBase["default"])(_xregexp["default"]);
(0, _unicodeBlocks["default"])(_xregexp["default"]);
(0, _unicodeCategories["default"])(_xregexp["default"]);
(0, _unicodeProperties["default"])(_xregexp["default"]);
(0, _unicodeScripts["default"])(_xregexp["default"]);
var _default = _xregexp["default"];
exports["default"] = _default;
module.exports = exports.default;
},{"./addons/build":305,"./addons/matchrecursive":306,"./addons/unicode-base":307,"./addons/unicode-blocks":308,"./addons/unicode-categories":309,"./addons/unicode-properties":310,"./addons/unicode-scripts":311,"./xregexp":313,"@babel/runtime-corejs3/core-js-stable/object/define-property":32,"@babel/runtime-corejs3/helpers/interopRequireDefault":44}],313:[function(require,module,exports){
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = void 0;

var _getIterator2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/get-iterator"));

var _isArray = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/is-array"));

var _getIteratorMethod2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/get-iterator-method"));

var _symbol = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/symbol"));

var _from = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/array/from"));

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

var _indexOf = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/index-of"));

var _create = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/object/create"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs3/helpers/slicedToArray"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/for-each"));

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/includes"));

var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/parse-int"));

var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/slice"));

var _sort = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/sort"));

var _flags = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/flags"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof _symbol["default"] === "undefined" || (0, _getIteratorMethod2["default"])(o) == null) { if ((0, _isArray["default"])(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = (0, _getIterator2["default"])(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { var _context9; if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = (0, _slice["default"])(_context9 = Object.prototype.toString.call(o)).call(_context9, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return (0, _from["default"])(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!
 * XRegExp 4.4.1
 * <xregexp.com>
 * Steven Levithan (c) 2007-present MIT License
 */

/**
 * XRegExp provides augmented, extensible regular expressions. You get additional regex syntax and
 * flags, beyond what browsers support natively. XRegExp is also a regex utility belt with tools to
 * make your client-side grepping simpler and more powerful, while freeing you from related
 * cross-browser inconsistencies.
 */
// ==--------------------------==
// Private stuff
// ==--------------------------==
// Property name used for extended regex instance data
var REGEX_DATA = 'xregexp'; // Optional features that can be installed and uninstalled

var features = {
  astral: false,
  namespacing: false
}; // Native methods to use and restore ('native' is an ES3 reserved keyword)

var nativ = {
  exec: RegExp.prototype.exec,
  test: RegExp.prototype.test,
  match: String.prototype.match,
  replace: String.prototype.replace,
  split: String.prototype.split
}; // Storage for fixed/extended native methods

var fixed = {}; // Storage for regexes cached by `XRegExp.cache`

var regexCache = {}; // Storage for pattern details cached by the `XRegExp` constructor

var patternCache = {}; // Storage for regex syntax tokens added internally or by `XRegExp.addToken`

var tokens = []; // Token scopes

var defaultScope = 'default';
var classScope = 'class'; // Regexes that match native regex syntax, including octals

var nativeTokens = {
  // Any native multicharacter token in default scope, or any single character
  'default': /\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\d*|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|\(\?(?:[:=!]|<[=!])|[?*+]\?|{\d+(?:,\d*)?}\??|[\s\S]/,
  // Any native multicharacter token in character class scope, or any single character
  'class': /\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|[\s\S]/
}; // Any backreference or dollar-prefixed character in replacement strings

var replacementToken = /\$(?:{([\w$]+)}|<([\w$]+)>|(\d\d?|[\s\S]))/g; // Check for correct `exec` handling of nonparticipating capturing groups

var correctExecNpcg = nativ.exec.call(/()??/, '')[1] === undefined; // Check for ES6 `flags` prop support

var hasFlagsProp = (0, _flags["default"])(/x/) !== undefined; // Shortcut to `Object.prototype.toString`

var _ref = {},
    toString = _ref.toString;

function hasNativeFlag(flag) {
  // Can't check based on the presence of properties/getters since browsers might support such
  // properties even when they don't support the corresponding flag in regex construction (tested
  // in Chrome 48, where `'unicode' in /x/` is true but trying to construct a regex with flag `u`
  // throws an error)
  var isSupported = true;

  try {
    // Can't use regex literals for testing even in a `try` because regex literals with
    // unsupported flags cause a compilation error in IE
    new RegExp('', flag); // Work around a broken/incomplete IE11 polyfill for sticky introduced in core-js 3.6.0

    if (flag === 'y') {
      // Using function to avoid babel transform to regex literal
      var gy = function () {
        return 'gy';
      }();

      var incompleteY = '.a'.replace(new RegExp('a', gy), '.') === '..';

      if (incompleteY) {
        isSupported = false;
      }
    }
  } catch (exception) {
    isSupported = false;
  }

  return isSupported;
} // Check for ES6 `u` flag support


var hasNativeU = hasNativeFlag('u'); // Check for ES6 `y` flag support

var hasNativeY = hasNativeFlag('y'); // Tracker for known flags, including addon flags

var registeredFlags = {
  g: true,
  i: true,
  m: true,
  u: hasNativeU,
  y: hasNativeY
};
/**
 * Attaches extended data and `XRegExp.prototype` properties to a regex object.
 *
 * @private
 * @param {RegExp} regex Regex to augment.
 * @param {Array} captureNames Array with capture names, or `null`.
 * @param {String} xSource XRegExp pattern used to generate `regex`, or `null` if N/A.
 * @param {String} xFlags XRegExp flags used to generate `regex`, or `null` if N/A.
 * @param {Boolean} [isInternalOnly=false] Whether the regex will be used only for internal
 *   operations, and never exposed to users. For internal-only regexes, we can improve perf by
 *   skipping some operations like attaching `XRegExp.prototype` properties.
 * @returns {!RegExp} Augmented regex.
 */

function augment(regex, captureNames, xSource, xFlags, isInternalOnly) {
  var _context;

  regex[REGEX_DATA] = {
    captureNames: captureNames
  };

  if (isInternalOnly) {
    return regex;
  } // Can't auto-inherit these since the XRegExp constructor returns a nonprimitive value


  if (regex.__proto__) {
    regex.__proto__ = XRegExp.prototype;
  } else {
    for (var p in XRegExp.prototype) {
      // An `XRegExp.prototype.hasOwnProperty(p)` check wouldn't be worth it here, since this
      // is performance sensitive, and enumerable `Object.prototype` or `RegExp.prototype`
      // extensions exist on `regex.prototype` anyway
      regex[p] = XRegExp.prototype[p];
    }
  }

  regex[REGEX_DATA].source = xSource; // Emulate the ES6 `flags` prop by ensuring flags are in alphabetical order

  regex[REGEX_DATA].flags = xFlags ? (0, _sort["default"])(_context = xFlags.split('')).call(_context).join('') : xFlags;
  return regex;
}
/**
 * Removes any duplicate characters from the provided string.
 *
 * @private
 * @param {String} str String to remove duplicate characters from.
 * @returns {string} String with any duplicate characters removed.
 */


function clipDuplicates(str) {
  return nativ.replace.call(str, /([\s\S])(?=[\s\S]*\1)/g, '');
}
/**
 * Copies a regex object while preserving extended data and augmenting with `XRegExp.prototype`
 * properties. The copy has a fresh `lastIndex` property (set to zero). Allows adding and removing
 * flags g and y while copying the regex.
 *
 * @private
 * @param {RegExp} regex Regex to copy.
 * @param {Object} [options] Options object with optional properties:
 *   - `addG` {Boolean} Add flag g while copying the regex.
 *   - `addY` {Boolean} Add flag y while copying the regex.
 *   - `removeG` {Boolean} Remove flag g while copying the regex.
 *   - `removeY` {Boolean} Remove flag y while copying the regex.
 *   - `isInternalOnly` {Boolean} Whether the copied regex will be used only for internal
 *     operations, and never exposed to users. For internal-only regexes, we can improve perf by
 *     skipping some operations like attaching `XRegExp.prototype` properties.
 *   - `source` {String} Overrides `<regex>.source`, for special cases.
 * @returns {RegExp} Copy of the provided regex, possibly with modified flags.
 */


function copyRegex(regex, options) {
  var _context2;

  if (!XRegExp.isRegExp(regex)) {
    throw new TypeError('Type RegExp expected');
  }

  var xData = regex[REGEX_DATA] || {};
  var flags = getNativeFlags(regex);
  var flagsToAdd = '';
  var flagsToRemove = '';
  var xregexpSource = null;
  var xregexpFlags = null;
  options = options || {};

  if (options.removeG) {
    flagsToRemove += 'g';
  }

  if (options.removeY) {
    flagsToRemove += 'y';
  }

  if (flagsToRemove) {
    flags = nativ.replace.call(flags, new RegExp("[".concat(flagsToRemove, "]+"), 'g'), '');
  }

  if (options.addG) {
    flagsToAdd += 'g';
  }

  if (options.addY) {
    flagsToAdd += 'y';
  }

  if (flagsToAdd) {
    flags = clipDuplicates(flags + flagsToAdd);
  }

  if (!options.isInternalOnly) {
    if (xData.source !== undefined) {
      xregexpSource = xData.source;
    } // null or undefined; don't want to add to `flags` if the previous value was null, since
    // that indicates we're not tracking original precompilation flags


    if ((0, _flags["default"])(xData) != null) {
      // Flags are only added for non-internal regexes by `XRegExp.globalize`. Flags are never
      // removed for non-internal regexes, so don't need to handle it
      xregexpFlags = flagsToAdd ? clipDuplicates((0, _flags["default"])(xData) + flagsToAdd) : (0, _flags["default"])(xData);
    }
  } // Augment with `XRegExp.prototype` properties, but use the native `RegExp` constructor to avoid
  // searching for special tokens. That would be wrong for regexes constructed by `RegExp`, and
  // unnecessary for regexes constructed by `XRegExp` because the regex has already undergone the
  // translation to native regex syntax


  regex = augment(new RegExp(options.source || regex.source, flags), hasNamedCapture(regex) ? (0, _slice["default"])(_context2 = xData.captureNames).call(_context2, 0) : null, xregexpSource, xregexpFlags, options.isInternalOnly);
  return regex;
}
/**
 * Converts hexadecimal to decimal.
 *
 * @private
 * @param {String} hex
 * @returns {number}
 */


function dec(hex) {
  return (0, _parseInt2["default"])(hex, 16);
}
/**
 * Returns a pattern that can be used in a native RegExp in place of an ignorable token such as an
 * inline comment or whitespace with flag x. This is used directly as a token handler function
 * passed to `XRegExp.addToken`.
 *
 * @private
 * @param {String} match Match arg of `XRegExp.addToken` handler
 * @param {String} scope Scope arg of `XRegExp.addToken` handler
 * @param {String} flags Flags arg of `XRegExp.addToken` handler
 * @returns {string} Either '' or '(?:)', depending on which is needed in the context of the match.
 */


function getContextualTokenSeparator(match, scope, flags) {
  if ( // No need to separate tokens if at the beginning or end of a group
  match.input[match.index - 1] === '(' || match.input[match.index + match[0].length] === ')' || // No need to separate tokens if before or after a `|`
  match.input[match.index - 1] === '|' || match.input[match.index + match[0].length] === '|' || // No need to separate tokens if at the beginning or end of the pattern
  match.index < 1 || match.index + match[0].length >= match.input.length || // No need to separate tokens if at the beginning of a noncapturing group or lookahead.
  // The way this is written relies on:
  // - The search regex matching only 3-char strings.
  // - Although `substr` gives chars from the end of the string if given a negative index,
  //   the resulting substring will be too short to match. Ex: `'abcd'.substr(-1, 3) === 'd'`
  nativ.test.call(/^\(\?[:=!]/, match.input.substr(match.index - 3, 3)) || // Avoid separating tokens when the following token is a quantifier
  isQuantifierNext(match.input, match.index + match[0].length, flags)) {
    return '';
  } // Keep tokens separated. This avoids e.g. inadvertedly changing `\1 1` or `\1(?#)1` to `\11`.
  // This also ensures all tokens remain as discrete atoms, e.g. it avoids converting the syntax
  // error `(? :` into `(?:`.


  return '(?:)';
}
/**
 * Returns native `RegExp` flags used by a regex object.
 *
 * @private
 * @param {RegExp} regex Regex to check.
 * @returns {string} Native flags in use.
 */


function getNativeFlags(regex) {
  return hasFlagsProp ? (0, _flags["default"])(regex) : // Explicitly using `RegExp.prototype.toString` (rather than e.g. `String` or concatenation
  // with an empty string) allows this to continue working predictably when
  // `XRegExp.proptotype.toString` is overridden
  nativ.exec.call(/\/([a-z]*)$/i, RegExp.prototype.toString.call(regex))[1];
}
/**
 * Determines whether a regex has extended instance data used to track capture names.
 *
 * @private
 * @param {RegExp} regex Regex to check.
 * @returns {boolean} Whether the regex uses named capture.
 */


function hasNamedCapture(regex) {
  return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);
}
/**
 * Converts decimal to hexadecimal.
 *
 * @private
 * @param {Number|String} dec
 * @returns {string}
 */


function hex(dec) {
  return (0, _parseInt2["default"])(dec, 10).toString(16);
}
/**
 * Checks whether the next nonignorable token after the specified position is a quantifier.
 *
 * @private
 * @param {String} pattern Pattern to search within.
 * @param {Number} pos Index in `pattern` to search at.
 * @param {String} flags Flags used by the pattern.
 * @returns {Boolean} Whether the next nonignorable token is a quantifier.
 */


function isQuantifierNext(pattern, pos, flags) {
  var inlineCommentPattern = '\\(\\?#[^)]*\\)';
  var lineCommentPattern = '#[^#\\n]*';
  var quantifierPattern = '[?*+]|{\\d+(?:,\\d*)?}';
  return nativ.test.call((0, _includes["default"])(flags).call(flags, 'x') ? // Ignore any leading whitespace, line comments, and inline comments
  /^(?:\s|#[^#\n]*|\(\?#[^)]*\))*(?:[?*+]|{\d+(?:,\d*)?})/ : // Ignore any leading inline comments
  /^(?:\(\?#[^)]*\))*(?:[?*+]|{\d+(?:,\d*)?})/, (0, _slice["default"])(pattern).call(pattern, pos));
}
/**
 * Determines whether a value is of the specified type, by resolving its internal [[Class]].
 *
 * @private
 * @param {*} value Object to check.
 * @param {String} type Type to check for, in TitleCase.
 * @returns {boolean} Whether the object matches the type.
 */


function isType(value, type) {
  return toString.call(value) === "[object ".concat(type, "]");
}
/**
 * Adds leading zeros if shorter than four characters. Used for fixed-length hexadecimal values.
 *
 * @private
 * @param {String} str
 * @returns {string}
 */


function pad4(str) {
  while (str.length < 4) {
    str = "0".concat(str);
  }

  return str;
}
/**
 * Checks for flag-related errors, and strips/applies flags in a leading mode modifier. Offloads
 * the flag preparation logic from the `XRegExp` constructor.
 *
 * @private
 * @param {String} pattern Regex pattern, possibly with a leading mode modifier.
 * @param {String} flags Any combination of flags.
 * @returns {!Object} Object with properties `pattern` and `flags`.
 */


function prepareFlags(pattern, flags) {
  // Recent browsers throw on duplicate flags, so copy this behavior for nonnative flags
  if (clipDuplicates(flags) !== flags) {
    throw new SyntaxError("Invalid duplicate regex flag ".concat(flags));
  } // Strip and apply a leading mode modifier with any combination of flags except g or y


  pattern = nativ.replace.call(pattern, /^\(\?([\w$]+)\)/, function ($0, $1) {
    if (nativ.test.call(/[gy]/, $1)) {
      throw new SyntaxError("Cannot use flag g or y in mode modifier ".concat($0));
    } // Allow duplicate flags within the mode modifier


    flags = clipDuplicates(flags + $1);
    return '';
  }); // Throw on unknown native or nonnative flags

  var _iterator = _createForOfIteratorHelper(flags),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var flag = _step.value;

      if (!registeredFlags[flag]) {
        throw new SyntaxError("Unknown regex flag ".concat(flag));
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return {
    pattern: pattern,
    flags: flags
  };
}
/**
 * Prepares an options object from the given value.
 *
 * @private
 * @param {String|Object} value Value to convert to an options object.
 * @returns {Object} Options object.
 */


function prepareOptions(value) {
  var options = {};

  if (isType(value, 'String')) {
    (0, _forEach["default"])(XRegExp).call(XRegExp, value, /[^\s,]+/, function (match) {
      options[match] = true;
    });
    return options;
  }

  return value;
}
/**
 * Registers a flag so it doesn't throw an 'unknown flag' error.
 *
 * @private
 * @param {String} flag Single-character flag to register.
 */


function registerFlag(flag) {
  if (!/^[\w$]$/.test(flag)) {
    throw new Error('Flag must be a single character A-Za-z0-9_$');
  }

  registeredFlags[flag] = true;
}
/**
 * Runs built-in and custom regex syntax tokens in reverse insertion order at the specified
 * position, until a match is found.
 *
 * @private
 * @param {String} pattern Original pattern from which an XRegExp object is being built.
 * @param {String} flags Flags being used to construct the regex.
 * @param {Number} pos Position to search for tokens within `pattern`.
 * @param {Number} scope Regex scope to apply: 'default' or 'class'.
 * @param {Object} context Context object to use for token handler functions.
 * @returns {Object} Object with properties `matchLength`, `output`, and `reparse`; or `null`.
 */


function runTokens(pattern, flags, pos, scope, context) {
  var i = tokens.length;
  var leadChar = pattern[pos];
  var result = null;
  var match;
  var t; // Run in reverse insertion order

  while (i--) {
    t = tokens[i];

    if (t.leadChar && t.leadChar !== leadChar || t.scope !== scope && t.scope !== 'all' || t.flag && !(0, _includes["default"])(flags).call(flags, t.flag)) {
      continue;
    }

    match = XRegExp.exec(pattern, t.regex, pos, 'sticky');

    if (match) {
      result = {
        matchLength: match[0].length,
        output: t.handler.call(context, match, scope, flags),
        reparse: t.reparse
      }; // Finished with token tests

      break;
    }
  }

  return result;
}
/**
 * Enables or disables implicit astral mode opt-in. When enabled, flag A is automatically added to
 * all new regexes created by XRegExp. This causes an error to be thrown when creating regexes if
 * the Unicode Base addon is not available, since flag A is registered by that addon.
 *
 * @private
 * @param {Boolean} on `true` to enable; `false` to disable.
 */


function setAstral(on) {
  features.astral = on;
}
/**
 * Adds named capture groups to the `groups` property of match arrays. See here for details:
 * https://github.com/tc39/proposal-regexp-named-groups
 *
 * @private
 * @param {Boolean} on `true` to enable; `false` to disable.
 */


function setNamespacing(on) {
  features.namespacing = on;
}
/**
 * Returns the object, or throws an error if it is `null` or `undefined`. This is used to follow
 * the ES5 abstract operation `ToObject`.
 *
 * @private
 * @param {*} value Object to check and return.
 * @returns {*} The provided object.
 */


function toObject(value) {
  // null or undefined
  if (value == null) {
    throw new TypeError('Cannot convert null or undefined to object');
  }

  return value;
} // ==--------------------------==
// Constructor
// ==--------------------------==

/**
 * Creates an extended regular expression object for matching text with a pattern. Differs from a
 * native regular expression in that additional syntax and flags are supported. The returned object
 * is in fact a native `RegExp` and works with all native methods.
 *
 * @class XRegExp
 * @constructor
 * @param {String|RegExp} pattern Regex pattern string, or an existing regex object to copy.
 * @param {String} [flags] Any combination of flags.
 *   Native flags:
 *     - `g` - global
 *     - `i` - ignore case
 *     - `m` - multiline anchors
 *     - `u` - unicode (ES6)
 *     - `y` - sticky (Firefox 3+, ES6)
 *   Additional XRegExp flags:
 *     - `n` - explicit capture
 *     - `s` - dot matches all (aka singleline)
 *     - `x` - free-spacing and line comments (aka extended)
 *     - `A` - astral (requires the Unicode Base addon)
 *   Flags cannot be provided when constructing one `RegExp` from another.
 * @returns {RegExp} Extended regular expression object.
 * @example
 *
 * // With named capture and flag x
 * XRegExp(`(?<year>  [0-9]{4} ) -?  # year
 *          (?<month> [0-9]{2} ) -?  # month
 *          (?<day>   [0-9]{2} )     # day`, 'x');
 *
 * // Providing a regex object copies it. Native regexes are recompiled using native (not XRegExp)
 * // syntax. Copies maintain extended data, are augmented with `XRegExp.prototype` properties, and
 * // have fresh `lastIndex` properties (set to zero).
 * XRegExp(/regex/);
 */


function XRegExp(pattern, flags) {
  if (XRegExp.isRegExp(pattern)) {
    if (flags !== undefined) {
      throw new TypeError('Cannot supply flags when copying a RegExp');
    }

    return copyRegex(pattern);
  } // Copy the argument behavior of `RegExp`


  pattern = pattern === undefined ? '' : String(pattern);
  flags = flags === undefined ? '' : String(flags);

  if (XRegExp.isInstalled('astral') && !(0, _includes["default"])(flags).call(flags, 'A')) {
    // This causes an error to be thrown if the Unicode Base addon is not available
    flags += 'A';
  }

  if (!patternCache[pattern]) {
    patternCache[pattern] = {};
  }

  if (!patternCache[pattern][flags]) {
    var context = {
      hasNamedCapture: false,
      captureNames: []
    };
    var scope = defaultScope;
    var output = '';
    var pos = 0;
    var result; // Check for flag-related errors, and strip/apply flags in a leading mode modifier

    var applied = prepareFlags(pattern, flags);
    var appliedPattern = applied.pattern;
    var appliedFlags = (0, _flags["default"])(applied); // Use XRegExp's tokens to translate the pattern to a native regex pattern.
    // `appliedPattern.length` may change on each iteration if tokens use `reparse`

    while (pos < appliedPattern.length) {
      do {
        // Check for custom tokens at the current position
        result = runTokens(appliedPattern, appliedFlags, pos, scope, context); // If the matched token used the `reparse` option, splice its output into the
        // pattern before running tokens again at the same position

        if (result && result.reparse) {
          appliedPattern = (0, _slice["default"])(appliedPattern).call(appliedPattern, 0, pos) + result.output + (0, _slice["default"])(appliedPattern).call(appliedPattern, pos + result.matchLength);
        }
      } while (result && result.reparse);

      if (result) {
        output += result.output;
        pos += result.matchLength || 1;
      } else {
        // Get the native token at the current position
        var _XRegExp$exec = XRegExp.exec(appliedPattern, nativeTokens[scope], pos, 'sticky'),
            _XRegExp$exec2 = (0, _slicedToArray2["default"])(_XRegExp$exec, 1),
            token = _XRegExp$exec2[0];

        output += token;
        pos += token.length;

        if (token === '[' && scope === defaultScope) {
          scope = classScope;
        } else if (token === ']' && scope === classScope) {
          scope = defaultScope;
        }
      }
    }

    patternCache[pattern][flags] = {
      // Use basic cleanup to collapse repeated empty groups like `(?:)(?:)` to `(?:)`. Empty
      // groups are sometimes inserted during regex transpilation in order to keep tokens
      // separated. However, more than one empty group in a row is never needed.
      pattern: nativ.replace.call(output, /(?:\(\?:\))+/g, '(?:)'),
      // Strip all but native flags
      flags: nativ.replace.call(appliedFlags, /[^gimuy]+/g, ''),
      // `context.captureNames` has an item for each capturing group, even if unnamed
      captures: context.hasNamedCapture ? context.captureNames : null
    };
  }

  var generated = patternCache[pattern][flags];
  return augment(new RegExp(generated.pattern, (0, _flags["default"])(generated)), generated.captures, pattern, flags);
} // Add `RegExp.prototype` to the prototype chain


XRegExp.prototype = /(?:)/; // ==--------------------------==
// Public properties
// ==--------------------------==

/**
 * The XRegExp version number as a string containing three dot-separated parts. For example,
 * '2.0.0-beta-3'.
 *
 * @static
 * @memberOf XRegExp
 * @type String
 */

XRegExp.version = '4.4.1'; // ==--------------------------==
// Public methods
// ==--------------------------==
// Intentionally undocumented; used in tests and addons

XRegExp._clipDuplicates = clipDuplicates;
XRegExp._hasNativeFlag = hasNativeFlag;
XRegExp._dec = dec;
XRegExp._hex = hex;
XRegExp._pad4 = pad4;
/**
 * Extends XRegExp syntax and allows custom flags. This is used internally and can be used to
 * create XRegExp addons. If more than one token can match the same string, the last added wins.
 *
 * @memberOf XRegExp
 * @param {RegExp} regex Regex object that matches the new token.
 * @param {Function} handler Function that returns a new pattern string (using native regex syntax)
 *   to replace the matched token within all future XRegExp regexes. Has access to persistent
 *   properties of the regex being built, through `this`. Invoked with three arguments:
 *   - The match array, with named backreference properties.
 *   - The regex scope where the match was found: 'default' or 'class'.
 *   - The flags used by the regex, including any flags in a leading mode modifier.
 *   The handler function becomes part of the XRegExp construction process, so be careful not to
 *   construct XRegExps within the function or you will trigger infinite recursion.
 * @param {Object} [options] Options object with optional properties:
 *   - `scope` {String} Scope where the token applies: 'default', 'class', or 'all'.
 *   - `flag` {String} Single-character flag that triggers the token. This also registers the
 *     flag, which prevents XRegExp from throwing an 'unknown flag' error when the flag is used.
 *   - `optionalFlags` {String} Any custom flags checked for within the token `handler` that are
 *     not required to trigger the token. This registers the flags, to prevent XRegExp from
 *     throwing an 'unknown flag' error when any of the flags are used.
 *   - `reparse` {Boolean} Whether the `handler` function's output should not be treated as
 *     final, and instead be reparseable by other tokens (including the current token). Allows
 *     token chaining or deferring.
 *   - `leadChar` {String} Single character that occurs at the beginning of any successful match
 *     of the token (not always applicable). This doesn't change the behavior of the token unless
 *     you provide an erroneous value. However, providing it can increase the token's performance
 *     since the token can be skipped at any positions where this character doesn't appear.
 * @example
 *
 * // Basic usage: Add \a for the ALERT control code
 * XRegExp.addToken(
 *   /\\a/,
 *   () => '\\x07',
 *   {scope: 'all'}
 * );
 * XRegExp('\\a[\\a-\\n]+').test('\x07\n\x07'); // -> true
 *
 * // Add the U (ungreedy) flag from PCRE and RE2, which reverses greedy and lazy quantifiers.
 * // Since `scope` is not specified, it uses 'default' (i.e., transformations apply outside of
 * // character classes only)
 * XRegExp.addToken(
 *   /([?*+]|{\d+(?:,\d*)?})(\??)/,
 *   (match) => `${match[1]}${match[2] ? '' : '?'}`,
 *   {flag: 'U'}
 * );
 * XRegExp('a+', 'U').exec('aaa')[0]; // -> 'a'
 * XRegExp('a+?', 'U').exec('aaa')[0]; // -> 'aaa'
 */

XRegExp.addToken = function (regex, handler, options) {
  options = options || {};
  var _options = options,
      optionalFlags = _options.optionalFlags;

  if (options.flag) {
    registerFlag(options.flag);
  }

  if (optionalFlags) {
    optionalFlags = nativ.split.call(optionalFlags, '');

    var _iterator2 = _createForOfIteratorHelper(optionalFlags),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var flag = _step2.value;
        registerFlag(flag);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  } // Add to the private list of syntax tokens


  tokens.push({
    regex: copyRegex(regex, {
      addG: true,
      addY: hasNativeY,
      isInternalOnly: true
    }),
    handler: handler,
    scope: options.scope || defaultScope,
    flag: options.flag,
    reparse: options.reparse,
    leadChar: options.leadChar
  }); // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and flags
  // might now produce different results

  XRegExp.cache.flush('patterns');
};
/**
 * Caches and returns the result of calling `XRegExp(pattern, flags)`. On any subsequent call with
 * the same pattern and flag combination, the cached copy of the regex is returned.
 *
 * @memberOf XRegExp
 * @param {String} pattern Regex pattern string.
 * @param {String} [flags] Any combination of XRegExp flags.
 * @returns {RegExp} Cached XRegExp object.
 * @example
 *
 * while (match = XRegExp.cache('.', 'gs').exec(str)) {
 *   // The regex is compiled once only
 * }
 */


XRegExp.cache = function (pattern, flags) {
  if (!regexCache[pattern]) {
    regexCache[pattern] = {};
  }

  return regexCache[pattern][flags] || (regexCache[pattern][flags] = XRegExp(pattern, flags));
}; // Intentionally undocumented; used in tests


XRegExp.cache.flush = function (cacheName) {
  if (cacheName === 'patterns') {
    // Flush the pattern cache used by the `XRegExp` constructor
    patternCache = {};
  } else {
    // Flush the regex cache populated by `XRegExp.cache`
    regexCache = {};
  }
};
/**
 * Escapes any regular expression metacharacters, for use when matching literal strings. The result
 * can safely be used at any point within a regex that uses any flags.
 *
 * @memberOf XRegExp
 * @param {String} str String to escape.
 * @returns {string} String with regex metacharacters escaped.
 * @example
 *
 * XRegExp.escape('Escaped? <.>');
 * // -> 'Escaped\?\ <\.>'
 */


XRegExp.escape = function (str) {
  return nativ.replace.call(toObject(str), /[-\[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
};
/**
 * Executes a regex search in a specified string. Returns a match array or `null`. If the provided
 * regex uses named capture, named backreference properties are included on the match array.
 * Optional `pos` and `sticky` arguments specify the search start position, and whether the match
 * must start at the specified position only. The `lastIndex` property of the provided regex is not
 * used, but is updated for compatibility. Also fixes browser bugs compared to the native
 * `RegExp.prototype.exec` and can be used reliably cross-browser.
 *
 * @memberOf XRegExp
 * @param {String} str String to search.
 * @param {RegExp} regex Regex to search with.
 * @param {Number} [pos=0] Zero-based index at which to start the search.
 * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position
 *   only. The string `'sticky'` is accepted as an alternative to `true`.
 * @returns {Array} Match array with named backreference properties, or `null`.
 * @example
 *
 * // Basic use, with named backreference
 * let match = XRegExp.exec('U+2620', XRegExp('U\\+(?<hex>[0-9A-F]{4})'));
 * match.hex; // -> '2620'
 *
 * // With pos and sticky, in a loop
 * let pos = 2, result = [], match;
 * while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\d)>/, pos, 'sticky')) {
 *   result.push(match[1]);
 *   pos = match.index + match[0].length;
 * }
 * // result -> ['2', '3', '4']
 */


XRegExp.exec = function (str, regex, pos, sticky) {
  var cacheKey = 'g';
  var addY = false;
  var fakeY = false;
  var match;
  addY = hasNativeY && !!(sticky || regex.sticky && sticky !== false);

  if (addY) {
    cacheKey += 'y';
  } else if (sticky) {
    // Simulate sticky matching by appending an empty capture to the original regex. The
    // resulting regex will succeed no matter what at the current index (set with `lastIndex`),
    // and will not search the rest of the subject string. We'll know that the original regex
    // has failed if that last capture is `''` rather than `undefined` (i.e., if that last
    // capture participated in the match).
    fakeY = true;
    cacheKey += 'FakeY';
  }

  regex[REGEX_DATA] = regex[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.match`/`replace`

  var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
    addG: true,
    addY: addY,
    source: fakeY ? "".concat(regex.source, "|()") : undefined,
    removeY: sticky === false,
    isInternalOnly: true
  }));
  pos = pos || 0;
  r2.lastIndex = pos; // Fixed `exec` required for `lastIndex` fix, named backreferences, etc.

  match = fixed.exec.call(r2, str); // Get rid of the capture added by the pseudo-sticky matcher if needed. An empty string means
  // the original regexp failed (see above).

  if (fakeY && match && match.pop() === '') {
    match = null;
  }

  if (regex.global) {
    regex.lastIndex = match ? r2.lastIndex : 0;
  }

  return match;
};
/**
 * Executes a provided function once per regex match. Searches always start at the beginning of the
 * string and continue until the end, regardless of the state of the regex's `global` property and
 * initial `lastIndex`.
 *
 * @memberOf XRegExp
 * @param {String} str String to search.
 * @param {RegExp} regex Regex to search with.
 * @param {Function} callback Function to execute for each match. Invoked with four arguments:
 *   - The match array, with named backreference properties.
 *   - The zero-based match index.
 *   - The string being traversed.
 *   - The regex object being used to traverse the string.
 * @example
 *
 * // Extracts every other digit from a string
 * const evens = [];
 * XRegExp.forEach('1a2345', /\d/, (match, i) => {
 *   if (i % 2) evens.push(+match[0]);
 * });
 * // evens -> [2, 4]
 */


XRegExp.forEach = function (str, regex, callback) {
  var pos = 0;
  var i = -1;
  var match;

  while (match = XRegExp.exec(str, regex, pos)) {
    // Because `regex` is provided to `callback`, the function could use the deprecated/
    // nonstandard `RegExp.prototype.compile` to mutate the regex. However, since `XRegExp.exec`
    // doesn't use `lastIndex` to set the search position, this can't lead to an infinite loop,
    // at least. Actually, because of the way `XRegExp.exec` caches globalized versions of
    // regexes, mutating the regex will not have any effect on the iteration or matched strings,
    // which is a nice side effect that brings extra safety.
    callback(match, ++i, str, regex);
    pos = match.index + (match[0].length || 1);
  }
};
/**
 * Copies a regex object and adds flag `g`. The copy maintains extended data, is augmented with
 * `XRegExp.prototype` properties, and has a fresh `lastIndex` property (set to zero). Native
 * regexes are not recompiled using XRegExp syntax.
 *
 * @memberOf XRegExp
 * @param {RegExp} regex Regex to globalize.
 * @returns {RegExp} Copy of the provided regex with flag `g` added.
 * @example
 *
 * const globalCopy = XRegExp.globalize(/regex/);
 * globalCopy.global; // -> true
 */


XRegExp.globalize = function (regex) {
  return copyRegex(regex, {
    addG: true
  });
};
/**
 * Installs optional features according to the specified options. Can be undone using
 * `XRegExp.uninstall`.
 *
 * @memberOf XRegExp
 * @param {Object|String} options Options object or string.
 * @example
 *
 * // With an options object
 * XRegExp.install({
 *   // Enables support for astral code points in Unicode addons (implicitly sets flag A)
 *   astral: true,
 *
 *   // Adds named capture groups to the `groups` property of matches
 *   namespacing: true
 * });
 *
 * // With an options string
 * XRegExp.install('astral namespacing');
 */


XRegExp.install = function (options) {
  options = prepareOptions(options);

  if (!features.astral && options.astral) {
    setAstral(true);
  }

  if (!features.namespacing && options.namespacing) {
    setNamespacing(true);
  }
};
/**
 * Checks whether an individual optional feature is installed.
 *
 * @memberOf XRegExp
 * @param {String} feature Name of the feature to check. One of:
 *   - `astral`
 *   - `namespacing`
 * @returns {boolean} Whether the feature is installed.
 * @example
 *
 * XRegExp.isInstalled('astral');
 */


XRegExp.isInstalled = function (feature) {
  return !!features[feature];
};
/**
 * Returns `true` if an object is a regex; `false` if it isn't. This works correctly for regexes
 * created in another frame, when `instanceof` and `constructor` checks would fail.
 *
 * @memberOf XRegExp
 * @param {*} value Object to check.
 * @returns {boolean} Whether the object is a `RegExp` object.
 * @example
 *
 * XRegExp.isRegExp('string'); // -> false
 * XRegExp.isRegExp(/regex/i); // -> true
 * XRegExp.isRegExp(RegExp('^', 'm')); // -> true
 * XRegExp.isRegExp(XRegExp('(?s).')); // -> true
 */


XRegExp.isRegExp = function (value) {
  return toString.call(value) === '[object RegExp]';
}; // isType(value, 'RegExp');

/**
 * Returns the first matched string, or in global mode, an array containing all matched strings.
 * This is essentially a more convenient re-implementation of `String.prototype.match` that gives
 * the result types you actually want (string instead of `exec`-style array in match-first mode,
 * and an empty array instead of `null` when no matches are found in match-all mode). It also lets
 * you override flag g and ignore `lastIndex`, and fixes browser bugs.
 *
 * @memberOf XRegExp
 * @param {String} str String to search.
 * @param {RegExp} regex Regex to search with.
 * @param {String} [scope='one'] Use 'one' to return the first match as a string. Use 'all' to
 *   return an array of all matched strings. If not explicitly specified and `regex` uses flag g,
 *   `scope` is 'all'.
 * @returns {String|Array} In match-first mode: First match as a string, or `null`. In match-all
 *   mode: Array of all matched strings, or an empty array.
 * @example
 *
 * // Match first
 * XRegExp.match('abc', /\w/); // -> 'a'
 * XRegExp.match('abc', /\w/g, 'one'); // -> 'a'
 * XRegExp.match('abc', /x/g, 'one'); // -> null
 *
 * // Match all
 * XRegExp.match('abc', /\w/g); // -> ['a', 'b', 'c']
 * XRegExp.match('abc', /\w/, 'all'); // -> ['a', 'b', 'c']
 * XRegExp.match('abc', /x/, 'all'); // -> []
 */


XRegExp.match = function (str, regex, scope) {
  var global = regex.global && scope !== 'one' || scope === 'all';
  var cacheKey = (global ? 'g' : '') + (regex.sticky ? 'y' : '') || 'noGY';
  regex[REGEX_DATA] = regex[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.exec`/`replace`

  var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
    addG: !!global,
    removeG: scope === 'one',
    isInternalOnly: true
  }));
  var result = nativ.match.call(toObject(str), r2);

  if (regex.global) {
    regex.lastIndex = scope === 'one' && result ? // Can't use `r2.lastIndex` since `r2` is nonglobal in this case
    result.index + result[0].length : 0;
  }

  return global ? result || [] : result && result[0];
};
/**
 * Retrieves the matches from searching a string using a chain of regexes that successively search
 * within previous matches. The provided `chain` array can contain regexes and or objects with
 * `regex` and `backref` properties. When a backreference is specified, the named or numbered
 * backreference is passed forward to the next regex or returned.
 *
 * @memberOf XRegExp
 * @param {String} str String to search.
 * @param {Array} chain Regexes that each search for matches within preceding results.
 * @returns {Array} Matches by the last regex in the chain, or an empty array.
 * @example
 *
 * // Basic usage; matches numbers within <b> tags
 * XRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [
 *   XRegExp('(?is)<b>.*?</b>'),
 *   /\d+/
 * ]);
 * // -> ['2', '4', '56']
 *
 * // Passing forward and returning specific backreferences
 * html = '<a href="http://xregexp.com/api/">XRegExp</a>\
 *         <a href="http://www.google.com/">Google</a>';
 * XRegExp.matchChain(html, [
 *   {regex: /<a href="([^"]+)">/i, backref: 1},
 *   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}
 * ]);
 * // -> ['xregexp.com', 'www.google.com']
 */


XRegExp.matchChain = function (str, chain) {
  return function recurseChain(values, level) {
    var item = chain[level].regex ? chain[level] : {
      regex: chain[level]
    };
    var matches = [];

    function addMatch(match) {
      if (item.backref) {
        var ERR_UNDEFINED_GROUP = "Backreference to undefined group: ".concat(item.backref);
        var isNamedBackref = isNaN(item.backref);

        if (isNamedBackref && XRegExp.isInstalled('namespacing')) {
          // `groups` has `null` as prototype, so using `in` instead of `hasOwnProperty`
          if (!(item.backref in match.groups)) {
            throw new ReferenceError(ERR_UNDEFINED_GROUP);
          }
        } else if (!match.hasOwnProperty(item.backref)) {
          throw new ReferenceError(ERR_UNDEFINED_GROUP);
        }

        var backrefValue = isNamedBackref && XRegExp.isInstalled('namespacing') ? match.groups[item.backref] : match[item.backref];
        matches.push(backrefValue || '');
      } else {
        matches.push(match[0]);
      }
    }

    var _iterator3 = _createForOfIteratorHelper(values),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var value = _step3.value;
        (0, _forEach["default"])(XRegExp).call(XRegExp, value, item.regex, addMatch);
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    return level === chain.length - 1 || !matches.length ? matches : recurseChain(matches, level + 1);
  }([str], 0);
};
/**
 * Returns a new string with one or all matches of a pattern replaced. The pattern can be a string
 * or regex, and the replacement can be a string or a function to be called for each match. To
 * perform a global search and replace, use the optional `scope` argument or include flag g if using
 * a regex. Replacement strings can use `${n}` or `$<n>` for named and numbered backreferences.
 * Replacement functions can use named backreferences via `arguments[0].name`. Also fixes browser
 * bugs compared to the native `String.prototype.replace` and can be used reliably cross-browser.
 *
 * @memberOf XRegExp
 * @param {String} str String to search.
 * @param {RegExp|String} search Search pattern to be replaced.
 * @param {String|Function} replacement Replacement string or a function invoked to create it.
 *   Replacement strings can include special replacement syntax:
 *     - $$ - Inserts a literal $ character.
 *     - $&, $0 - Inserts the matched substring.
 *     - $` - Inserts the string that precedes the matched substring (left context).
 *     - $' - Inserts the string that follows the matched substring (right context).
 *     - $n, $nn - Where n/nn are digits referencing an existent capturing group, inserts
 *       backreference n/nn.
 *     - ${n}, $<n> - Where n is a name or any number of digits that reference an existent capturing
 *       group, inserts backreference n.
 *   Replacement functions are invoked with three or more arguments:
 *     - The matched substring (corresponds to $& above). Named backreferences are accessible as
 *       properties of this first argument.
 *     - 0..n arguments, one for each backreference (corresponding to $1, $2, etc. above).
 *     - The zero-based index of the match within the total search string.
 *     - The total string being searched.
 * @param {String} [scope='one'] Use 'one' to replace the first match only, or 'all'. If not
 *   explicitly specified and using a regex with flag g, `scope` is 'all'.
 * @returns {String} New string with one or all matches replaced.
 * @example
 *
 * // Regex search, using named backreferences in replacement string
 * const name = XRegExp('(?<first>\\w+) (?<last>\\w+)');
 * XRegExp.replace('John Smith', name, '$<last>, $<first>');
 * // -> 'Smith, John'
 *
 * // Regex search, using named backreferences in replacement function
 * XRegExp.replace('John Smith', name, (match) => `${match.last}, ${match.first}`);
 * // -> 'Smith, John'
 *
 * // String search, with replace-all
 * XRegExp.replace('RegExp builds RegExps', 'RegExp', 'XRegExp', 'all');
 * // -> 'XRegExp builds XRegExps'
 */


XRegExp.replace = function (str, search, replacement, scope) {
  var isRegex = XRegExp.isRegExp(search);
  var global = search.global && scope !== 'one' || scope === 'all';
  var cacheKey = (global ? 'g' : '') + (search.sticky ? 'y' : '') || 'noGY';
  var s2 = search;

  if (isRegex) {
    search[REGEX_DATA] = search[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.exec`/`match`. Since a copy is used, `search`'s
    // `lastIndex` isn't updated *during* replacement iterations

    s2 = search[REGEX_DATA][cacheKey] || (search[REGEX_DATA][cacheKey] = copyRegex(search, {
      addG: !!global,
      removeG: scope === 'one',
      isInternalOnly: true
    }));
  } else if (global) {
    s2 = new RegExp(XRegExp.escape(String(search)), 'g');
  } // Fixed `replace` required for named backreferences, etc.


  var result = fixed.replace.call(toObject(str), s2, replacement);

  if (isRegex && search.global) {
    // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)
    search.lastIndex = 0;
  }

  return result;
};
/**
 * Performs batch processing of string replacements. Used like `XRegExp.replace`, but accepts an
 * array of replacement details. Later replacements operate on the output of earlier replacements.
 * Replacement details are accepted as an array with a regex or string to search for, the
 * replacement string or function, and an optional scope of 'one' or 'all'. Uses the XRegExp
 * replacement text syntax, which supports named backreference properties via `${name}` or
 * `$<name>`.
 *
 * @memberOf XRegExp
 * @param {String} str String to search.
 * @param {Array} replacements Array of replacement detail arrays.
 * @returns {String} New string with all replacements.
 * @example
 *
 * str = XRegExp.replaceEach(str, [
 *   [XRegExp('(?<name>a)'), 'z${name}'],
 *   [/b/gi, 'y'],
 *   [/c/g, 'x', 'one'], // scope 'one' overrides /g
 *   [/d/, 'w', 'all'],  // scope 'all' overrides lack of /g
 *   ['e', 'v', 'all'],  // scope 'all' allows replace-all for strings
 *   [/f/g, ($0) => $0.toUpperCase()]
 * ]);
 */


XRegExp.replaceEach = function (str, replacements) {
  var _iterator4 = _createForOfIteratorHelper(replacements),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var r = _step4.value;
      str = XRegExp.replace(str, r[0], r[1], r[2]);
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }

  return str;
};
/**
 * Splits a string into an array of strings using a regex or string separator. Matches of the
 * separator are not included in the result array. However, if `separator` is a regex that contains
 * capturing groups, backreferences are spliced into the result each time `separator` is matched.
 * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably
 * cross-browser.
 *
 * @memberOf XRegExp
 * @param {String} str String to split.
 * @param {RegExp|String} separator Regex or string to use for separating the string.
 * @param {Number} [limit] Maximum number of items to include in the result array.
 * @returns {Array} Array of substrings.
 * @example
 *
 * // Basic use
 * XRegExp.split('a b c', ' ');
 * // -> ['a', 'b', 'c']
 *
 * // With limit
 * XRegExp.split('a b c', ' ', 2);
 * // -> ['a', 'b']
 *
 * // Backreferences in result array
 * XRegExp.split('..word1..', /([a-z]+)(\d+)/i);
 * // -> ['..', 'word', '1', '..']
 */


XRegExp.split = function (str, separator, limit) {
  return fixed.split.call(toObject(str), separator, limit);
};
/**
 * Executes a regex search in a specified string. Returns `true` or `false`. Optional `pos` and
 * `sticky` arguments specify the search start position, and whether the match must start at the
 * specified position only. The `lastIndex` property of the provided regex is not used, but is
 * updated for compatibility. Also fixes browser bugs compared to the native
 * `RegExp.prototype.test` and can be used reliably cross-browser.
 *
 * @memberOf XRegExp
 * @param {String} str String to search.
 * @param {RegExp} regex Regex to search with.
 * @param {Number} [pos=0] Zero-based index at which to start the search.
 * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position
 *   only. The string `'sticky'` is accepted as an alternative to `true`.
 * @returns {boolean} Whether the regex matched the provided value.
 * @example
 *
 * // Basic use
 * XRegExp.test('abc', /c/); // -> true
 *
 * // With pos and sticky
 * XRegExp.test('abc', /c/, 0, 'sticky'); // -> false
 * XRegExp.test('abc', /c/, 2, 'sticky'); // -> true
 */
// Do this the easy way :-)


XRegExp.test = function (str, regex, pos, sticky) {
  return !!XRegExp.exec(str, regex, pos, sticky);
};
/**
 * Uninstalls optional features according to the specified options. All optional features start out
 * uninstalled, so this is used to undo the actions of `XRegExp.install`.
 *
 * @memberOf XRegExp
 * @param {Object|String} options Options object or string.
 * @example
 *
 * // With an options object
 * XRegExp.uninstall({
 *   // Disables support for astral code points in Unicode addons
 *   astral: true,
 *
 *   // Don't add named capture groups to the `groups` property of matches
 *   namespacing: true
 * });
 *
 * // With an options string
 * XRegExp.uninstall('astral namespacing');
 */


XRegExp.uninstall = function (options) {
  options = prepareOptions(options);

  if (features.astral && options.astral) {
    setAstral(false);
  }

  if (features.namespacing && options.namespacing) {
    setNamespacing(false);
  }
};
/**
 * Returns an XRegExp object that is the union of the given patterns. Patterns can be provided as
 * regex objects or strings. Metacharacters are escaped in patterns provided as strings.
 * Backreferences in provided regex objects are automatically renumbered to work correctly within
 * the larger combined pattern. Native flags used by provided regexes are ignored in favor of the
 * `flags` argument.
 *
 * @memberOf XRegExp
 * @param {Array} patterns Regexes and strings to combine.
 * @param {String} [flags] Any combination of XRegExp flags.
 * @param {Object} [options] Options object with optional properties:
 *   - `conjunction` {String} Type of conjunction to use: 'or' (default) or 'none'.
 * @returns {RegExp} Union of the provided regexes and strings.
 * @example
 *
 * XRegExp.union(['a+b*c', /(dogs)\1/, /(cats)\1/], 'i');
 * // -> /a\+b\*c|(dogs)\1|(cats)\2/i
 *
 * XRegExp.union([/man/, /bear/, /pig/], 'i', {conjunction: 'none'});
 * // -> /manbearpig/i
 */


XRegExp.union = function (patterns, flags, options) {
  options = options || {};
  var conjunction = options.conjunction || 'or';
  var numCaptures = 0;
  var numPriorCaptures;
  var captureNames;

  function rewrite(match, paren, backref) {
    var name = captureNames[numCaptures - numPriorCaptures]; // Capturing group

    if (paren) {
      ++numCaptures; // If the current capture has a name, preserve the name

      if (name) {
        return "(?<".concat(name, ">");
      } // Backreference

    } else if (backref) {
      // Rewrite the backreference
      return "\\".concat(+backref + numPriorCaptures);
    }

    return match;
  }

  if (!(isType(patterns, 'Array') && patterns.length)) {
    throw new TypeError('Must provide a nonempty array of patterns to merge');
  }

  var parts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g;
  var output = [];

  var _iterator5 = _createForOfIteratorHelper(patterns),
      _step5;

  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var pattern = _step5.value;

      if (XRegExp.isRegExp(pattern)) {
        numPriorCaptures = numCaptures;
        captureNames = pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames || []; // Rewrite backreferences. Passing to XRegExp dies on octals and ensures patterns are
        // independently valid; helps keep this simple. Named captures are put back

        output.push(nativ.replace.call(XRegExp(pattern.source).source, parts, rewrite));
      } else {
        output.push(XRegExp.escape(pattern));
      }
    }
  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }

  var separator = conjunction === 'none' ? '' : '|';
  return XRegExp(output.join(separator), flags);
}; // ==--------------------------==
// Fixed/extended native methods
// ==--------------------------==

/**
 * Adds named capture support (with backreferences returned as `result.name`), and fixes browser
 * bugs in the native `RegExp.prototype.exec`. Use via `XRegExp.exec`.
 *
 * @memberOf RegExp
 * @param {String} str String to search.
 * @returns {Array} Match array with named backreference properties, or `null`.
 */


fixed.exec = function (str) {
  var origLastIndex = this.lastIndex;
  var match = nativ.exec.apply(this, arguments);

  if (match) {
    // Fix browsers whose `exec` methods don't return `undefined` for nonparticipating capturing
    // groups. This fixes IE 5.5-8, but not IE 9's quirks mode or emulation of older IEs. IE 9
    // in standards mode follows the spec.
    if (!correctExecNpcg && match.length > 1 && (0, _includes["default"])(match).call(match, '')) {
      var _context3;

      var r2 = copyRegex(this, {
        removeG: true,
        isInternalOnly: true
      }); // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed
      // matching due to characters outside the match

      nativ.replace.call((0, _slice["default"])(_context3 = String(str)).call(_context3, match.index), r2, function () {
        var len = arguments.length; // Skip index 0 and the last 2

        for (var i = 1; i < len - 2; ++i) {
          if ((i < 0 || arguments.length <= i ? undefined : arguments[i]) === undefined) {
            match[i] = undefined;
          }
        }
      });
    } // Attach named capture properties


    var groupsObject = match;

    if (XRegExp.isInstalled('namespacing')) {
      // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec
      match.groups = (0, _create["default"])(null);
      groupsObject = match.groups;
    }

    if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {
      // Skip index 0
      for (var i = 1; i < match.length; ++i) {
        var name = this[REGEX_DATA].captureNames[i - 1];

        if (name) {
          groupsObject[name] = match[i];
        }
      }
    } // Fix browsers that increment `lastIndex` after zero-length matches


    if (this.global && !match[0].length && this.lastIndex > match.index) {
      this.lastIndex = match.index;
    }
  }

  if (!this.global) {
    // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)
    this.lastIndex = origLastIndex;
  }

  return match;
};
/**
 * Fixes browser bugs in the native `RegExp.prototype.test`.
 *
 * @memberOf RegExp
 * @param {String} str String to search.
 * @returns {boolean} Whether the regex matched the provided value.
 */


fixed.test = function (str) {
  // Do this the easy way :-)
  return !!fixed.exec.call(this, str);
};
/**
 * Adds named capture support (with backreferences returned as `result.name`), and fixes browser
 * bugs in the native `String.prototype.match`.
 *
 * @memberOf String
 * @param {RegExp|*} regex Regex to search with. If not a regex object, it is passed to `RegExp`.
 * @returns {Array} If `regex` uses flag g, an array of match strings or `null`. Without flag g,
 *   the result of calling `regex.exec(this)`.
 */


fixed.match = function (regex) {
  if (!XRegExp.isRegExp(regex)) {
    // Use the native `RegExp` rather than `XRegExp`
    regex = new RegExp(regex);
  } else if (regex.global) {
    var result = nativ.match.apply(this, arguments); // Fixes IE bug

    regex.lastIndex = 0;
    return result;
  }

  return fixed.exec.call(regex, toObject(this));
};
/**
 * Adds support for `${n}` (or `$<n>`) tokens for named and numbered backreferences in replacement
 * text, and provides named backreferences to replacement functions as `arguments[0].name`. Also
 * fixes browser bugs in replacement text syntax when performing a replacement using a nonregex
 * search value, and the value of a replacement regex's `lastIndex` property during replacement
 * iterations and upon completion. Note that this doesn't support SpiderMonkey's proprietary third
 * (`flags`) argument. Use via `XRegExp.replace`.
 *
 * @memberOf String
 * @param {RegExp|String} search Search pattern to be replaced.
 * @param {String|Function} replacement Replacement string or a function invoked to create it.
 * @returns {string} New string with one or all matches replaced.
 */


fixed.replace = function (search, replacement) {
  var isRegex = XRegExp.isRegExp(search);
  var origLastIndex;
  var captureNames;
  var result;

  if (isRegex) {
    if (search[REGEX_DATA]) {
      captureNames = search[REGEX_DATA].captureNames;
    } // Only needed if `search` is nonglobal


    origLastIndex = search.lastIndex;
  } else {
    search += ''; // Type-convert
  } // Don't use `typeof`; some older browsers return 'function' for regex objects


  if (isType(replacement, 'Function')) {
    // Stringifying `this` fixes a bug in IE < 9 where the last argument in replacement
    // functions isn't type-converted to a string
    result = nativ.replace.call(String(this), search, function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (captureNames) {
        var groupsObject;

        if (XRegExp.isInstalled('namespacing')) {
          // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec
          groupsObject = (0, _create["default"])(null);
          args.push(groupsObject);
        } else {
          // Change the `args[0]` string primitive to a `String` object that can store
          // properties. This really does need to use `String` as a constructor
          args[0] = new String(args[0]);
          groupsObject = args[0];
        } // Store named backreferences


        for (var i = 0; i < captureNames.length; ++i) {
          if (captureNames[i]) {
            groupsObject[captureNames[i]] = args[i + 1];
          }
        }
      } // ES6 specs the context for replacement functions as `undefined`


      return replacement.apply(void 0, args);
    });
  } else {
    // Ensure that the last value of `args` will be a string when given nonstring `this`,
    // while still throwing on null or undefined context
    result = nativ.replace.call(this == null ? this : String(this), search, function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return nativ.replace.call(String(replacement), replacementToken, replacer);

      function replacer($0, bracketed, angled, dollarToken) {
        bracketed = bracketed || angled; // Named or numbered backreference with curly or angled braces

        if (bracketed) {
          // XRegExp behavior for `${n}` or `$<n>`:
          // 1. Backreference to numbered capture, if `n` is an integer. Use `0` for the
          //    entire match. Any number of leading zeros may be used.
          // 2. Backreference to named capture `n`, if it exists and is not an integer
          //    overridden by numbered capture. In practice, this does not overlap with
          //    numbered capture since XRegExp does not allow named capture to use a bare
          //    integer as the name.
          // 3. If the name or number does not refer to an existing capturing group, it's
          //    an error.
          var n = +bracketed; // Type-convert; drop leading zeros

          if (n <= args.length - 3) {
            return args[n] || '';
          } // Groups with the same name is an error, else would need `lastIndexOf`


          n = captureNames ? (0, _indexOf["default"])(captureNames).call(captureNames, bracketed) : -1;

          if (n < 0) {
            throw new SyntaxError("Backreference to undefined group ".concat($0));
          }

          return args[n + 1] || '';
        } // Else, special variable or numbered backreference without curly braces


        if (dollarToken === '$') {
          // $$
          return '$';
        }

        if (dollarToken === '&' || +dollarToken === 0) {
          // $&, $0 (not followed by 1-9), $00
          return args[0];
        }

        if (dollarToken === '`') {
          var _context4;

          // $` (left context)
          return (0, _slice["default"])(_context4 = args[args.length - 1]).call(_context4, 0, args[args.length - 2]);
        }

        if (dollarToken === "'") {
          var _context5;

          // $' (right context)
          return (0, _slice["default"])(_context5 = args[args.length - 1]).call(_context5, args[args.length - 2] + args[0].length);
        } // Else, numbered backreference without braces


        dollarToken = +dollarToken; // Type-convert; drop leading zero
        // XRegExp behavior for `$n` and `$nn`:
        // - Backrefs end after 1 or 2 digits. Use `${..}` or `$<..>` for more digits.
        // - `$1` is an error if no capturing groups.
        // - `$10` is an error if less than 10 capturing groups. Use `${1}0` or `$<1>0`
        //   instead.
        // - `$01` is `$1` if at least one capturing group, else it's an error.
        // - `$0` (not followed by 1-9) and `$00` are the entire match.
        // Native behavior, for comparison:
        // - Backrefs end after 1 or 2 digits. Cannot reference capturing group 100+.
        // - `$1` is a literal `$1` if no capturing groups.
        // - `$10` is `$1` followed by a literal `0` if less than 10 capturing groups.
        // - `$01` is `$1` if at least one capturing group, else it's a literal `$01`.
        // - `$0` is a literal `$0`.

        if (!isNaN(dollarToken)) {
          if (dollarToken > args.length - 3) {
            throw new SyntaxError("Backreference to undefined group ".concat($0));
          }

          return args[dollarToken] || '';
        } // `$` followed by an unsupported char is an error, unlike native JS


        throw new SyntaxError("Invalid token ".concat($0));
      }
    });
  }

  if (isRegex) {
    if (search.global) {
      // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)
      search.lastIndex = 0;
    } else {
      // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)
      search.lastIndex = origLastIndex;
    }
  }

  return result;
};
/**
 * Fixes browser bugs in the native `String.prototype.split`. Use via `XRegExp.split`.
 *
 * @memberOf String
 * @param {RegExp|String} separator Regex or string to use for separating the string.
 * @param {Number} [limit] Maximum number of items to include in the result array.
 * @returns {!Array} Array of substrings.
 */


fixed.split = function (separator, limit) {
  if (!XRegExp.isRegExp(separator)) {
    // Browsers handle nonregex split correctly, so use the faster native method
    return nativ.split.apply(this, arguments);
  }

  var str = String(this);
  var output = [];
  var origLastIndex = separator.lastIndex;
  var lastLastIndex = 0;
  var lastLength; // Values for `limit`, per the spec:
  // If undefined: pow(2,32) - 1
  // If 0, Infinity, or NaN: 0
  // If positive number: limit = floor(limit); if (limit >= pow(2,32)) limit -= pow(2,32);
  // If negative number: pow(2,32) - floor(abs(limit))
  // If other: Type-convert, then use the above rules
  // This line fails in very strange ways for some values of `limit` in Opera 10.5-10.63, unless
  // Opera Dragonfly is open (go figure). It works in at least Opera 9.5-10.1 and 11+

  limit = (limit === undefined ? -1 : limit) >>> 0;
  (0, _forEach["default"])(XRegExp).call(XRegExp, str, separator, function (match) {
    // This condition is not the same as `if (match[0].length)`
    if (match.index + match[0].length > lastLastIndex) {
      output.push((0, _slice["default"])(str).call(str, lastLastIndex, match.index));

      if (match.length > 1 && match.index < str.length) {
        Array.prototype.push.apply(output, (0, _slice["default"])(match).call(match, 1));
      }

      lastLength = match[0].length;
      lastLastIndex = match.index + lastLength;
    }
  });

  if (lastLastIndex === str.length) {
    if (!nativ.test.call(separator, '') || lastLength) {
      output.push('');
    }
  } else {
    output.push((0, _slice["default"])(str).call(str, lastLastIndex));
  }

  separator.lastIndex = origLastIndex;
  return output.length > limit ? (0, _slice["default"])(output).call(output, 0, limit) : output;
}; // ==--------------------------==
// Built-in syntax/flag tokens
// ==--------------------------==

/*
 * Letter escapes that natively match literal characters: `\a`, `\A`, etc. These should be
 * SyntaxErrors but are allowed in web reality. XRegExp makes them errors for cross-browser
 * consistency and to reserve their syntax, but lets them be superseded by addons.
 */


XRegExp.addToken(/\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\dA-Fa-f]{4}|{[\dA-Fa-f]+})|x(?![\dA-Fa-f]{2}))/, function (match, scope) {
  // \B is allowed in default scope only
  if (match[1] === 'B' && scope === defaultScope) {
    return match[0];
  }

  throw new SyntaxError("Invalid escape ".concat(match[0]));
}, {
  scope: 'all',
  leadChar: '\\'
});
/*
 * Unicode code point escape with curly braces: `\u{N..}`. `N..` is any one or more digit
 * hexadecimal number from 0-10FFFF, and can include leading zeros. Requires the native ES6 `u` flag
 * to support code points greater than U+FFFF. Avoids converting code points above U+FFFF to
 * surrogate pairs (which could be done without flag `u`), since that could lead to broken behavior
 * if you follow a `\u{N..}` token that references a code point above U+FFFF with a quantifier, or
 * if you use the same in a character class.
 */

XRegExp.addToken(/\\u{([\dA-Fa-f]+)}/, function (match, scope, flags) {
  var code = dec(match[1]);

  if (code > 0x10FFFF) {
    throw new SyntaxError("Invalid Unicode code point ".concat(match[0]));
  }

  if (code <= 0xFFFF) {
    // Converting to \uNNNN avoids needing to escape the literal character and keep it
    // separate from preceding tokens
    return "\\u".concat(pad4(hex(code)));
  } // If `code` is between 0xFFFF and 0x10FFFF, require and defer to native handling


  if (hasNativeU && (0, _includes["default"])(flags).call(flags, 'u')) {
    return match[0];
  }

  throw new SyntaxError('Cannot use Unicode code point above \\u{FFFF} without flag u');
}, {
  scope: 'all',
  leadChar: '\\'
});
/*
 * Empty character class: `[]` or `[^]`. This fixes a critical cross-browser syntax inconsistency.
 * Unless this is standardized (per the ES spec), regex syntax can't be accurately parsed because
 * character class endings can't be determined.
 */

XRegExp.addToken(/\[(\^?)\]/, // For cross-browser compatibility with ES3, convert [] to \b\B and [^] to [\s\S].
// (?!) should work like \b\B, but is unreliable in some versions of Firefox

/* eslint-disable no-confusing-arrow */
function (match) {
  return match[1] ? '[\\s\\S]' : '\\b\\B';
},
/* eslint-enable no-confusing-arrow */
{
  leadChar: '['
});
/*
 * Comment pattern: `(?# )`. Inline comments are an alternative to the line comments allowed in
 * free-spacing mode (flag x).
 */

XRegExp.addToken(/\(\?#[^)]*\)/, getContextualTokenSeparator, {
  leadChar: '('
});
/*
 * Whitespace and line comments, in free-spacing mode (aka extended mode, flag x) only.
 */

XRegExp.addToken(/\s+|#[^\n]*\n?/, getContextualTokenSeparator, {
  flag: 'x'
});
/*
 * Dot, in dotall mode (aka singleline mode, flag s) only.
 */

XRegExp.addToken(/\./, function () {
  return '[\\s\\S]';
}, {
  flag: 's',
  leadChar: '.'
});
/*
 * Named backreference: `\k<name>`. Backreference names can use the characters A-Z, a-z, 0-9, _,
 * and $ only. Also allows numbered backreferences as `\k<n>`.
 */

XRegExp.addToken(/\\k<([\w$]+)>/, function (match) {
  var _context6, _context7;

  // Groups with the same name is an error, else would need `lastIndexOf`
  var index = isNaN(match[1]) ? (0, _indexOf["default"])(_context6 = this.captureNames).call(_context6, match[1]) + 1 : +match[1];
  var endIndex = match.index + match[0].length;

  if (!index || index > this.captureNames.length) {
    throw new SyntaxError("Backreference to undefined group ".concat(match[0]));
  } // Keep backreferences separate from subsequent literal numbers. This avoids e.g.
  // inadvertedly changing `(?<n>)\k<n>1` to `()\11`.


  return (0, _concat["default"])(_context7 = "\\".concat(index)).call(_context7, endIndex === match.input.length || isNaN(match.input[endIndex]) ? '' : '(?:)');
}, {
  leadChar: '\\'
});
/*
 * Numbered backreference or octal, plus any following digits: `\0`, `\11`, etc. Octals except `\0`
 * not followed by 0-9 and backreferences to unopened capture groups throw an error. Other matches
 * are returned unaltered. IE < 9 doesn't support backreferences above `\99` in regex syntax.
 */

XRegExp.addToken(/\\(\d+)/, function (match, scope) {
  if (!(scope === defaultScope && /^[1-9]/.test(match[1]) && +match[1] <= this.captureNames.length) && match[1] !== '0') {
    throw new SyntaxError("Cannot use octal escape or backreference to undefined group ".concat(match[0]));
  }

  return match[0];
}, {
  scope: 'all',
  leadChar: '\\'
});
/*
 * Named capturing group; match the opening delimiter only: `(?<name>`. Capture names can use the
 * characters A-Z, a-z, 0-9, _, and $ only. Names can't be integers. Supports Python-style
 * `(?P<name>` as an alternate syntax to avoid issues in some older versions of Opera which natively
 * supported the Python-style syntax. Otherwise, XRegExp might treat numbered backreferences to
 * Python-style named capture as octals.
 */

XRegExp.addToken(/\(\?P?<([\w$]+)>/, function (match) {
  var _context8;

  // Disallow bare integers as names because named backreferences are added to match arrays
  // and therefore numeric properties may lead to incorrect lookups
  if (!isNaN(match[1])) {
    throw new SyntaxError("Cannot use integer as capture name ".concat(match[0]));
  }

  if (!XRegExp.isInstalled('namespacing') && (match[1] === 'length' || match[1] === '__proto__')) {
    throw new SyntaxError("Cannot use reserved word as capture name ".concat(match[0]));
  }

  if ((0, _includes["default"])(_context8 = this.captureNames).call(_context8, match[1])) {
    throw new SyntaxError("Cannot use same name for multiple groups ".concat(match[0]));
  }

  this.captureNames.push(match[1]);
  this.hasNamedCapture = true;
  return '(';
}, {
  leadChar: '('
});
/*
 * Capturing group; match the opening parenthesis only. Required for support of named capturing
 * groups. Also adds explicit capture mode (flag n).
 */

XRegExp.addToken(/\((?!\?)/, function (match, scope, flags) {
  if ((0, _includes["default"])(flags).call(flags, 'n')) {
    return '(?:';
  }

  this.captureNames.push(null);
  return '(';
}, {
  optionalFlags: 'n',
  leadChar: '('
});
var _default = XRegExp;
exports["default"] = _default;
module.exports = exports.default;
},{"@babel/runtime-corejs3/core-js-stable/array/from":20,"@babel/runtime-corejs3/core-js-stable/array/is-array":21,"@babel/runtime-corejs3/core-js-stable/instance/concat":22,"@babel/runtime-corejs3/core-js-stable/instance/flags":23,"@babel/runtime-corejs3/core-js-stable/instance/for-each":24,"@babel/runtime-corejs3/core-js-stable/instance/includes":25,"@babel/runtime-corejs3/core-js-stable/instance/index-of":26,"@babel/runtime-corejs3/core-js-stable/instance/slice":29,"@babel/runtime-corejs3/core-js-stable/instance/sort":30,"@babel/runtime-corejs3/core-js-stable/object/create":31,"@babel/runtime-corejs3/core-js-stable/object/define-property":32,"@babel/runtime-corejs3/core-js-stable/parse-int":33,"@babel/runtime-corejs3/core-js-stable/symbol":34,"@babel/runtime-corejs3/core-js/get-iterator":38,"@babel/runtime-corejs3/core-js/get-iterator-method":37,"@babel/runtime-corejs3/helpers/interopRequireDefault":44,"@babel/runtime-corejs3/helpers/slicedToArray":47}],314:[function(require,module,exports){
module.exports = [
    {
        'name': 'InAdlam',
        'astral': '\uD83A[\uDD00-\uDD5F]'
    },
    {
        'name': 'InAegean_Numbers',
        'astral': '\uD800[\uDD00-\uDD3F]'
    },
    {
        'name': 'InAhom',
        'astral': '\uD805[\uDF00-\uDF3F]'
    },
    {
        'name': 'InAlchemical_Symbols',
        'astral': '\uD83D[\uDF00-\uDF7F]'
    },
    {
        'name': 'InAlphabetic_Presentation_Forms',
        'bmp': '\uFB00-\uFB4F'
    },
    {
        'name': 'InAnatolian_Hieroglyphs',
        'astral': '\uD811[\uDC00-\uDE7F]'
    },
    {
        'name': 'InAncient_Greek_Musical_Notation',
        'astral': '\uD834[\uDE00-\uDE4F]'
    },
    {
        'name': 'InAncient_Greek_Numbers',
        'astral': '\uD800[\uDD40-\uDD8F]'
    },
    {
        'name': 'InAncient_Symbols',
        'astral': '\uD800[\uDD90-\uDDCF]'
    },
    {
        'name': 'InArabic',
        'bmp': '\u0600-\u06FF'
    },
    {
        'name': 'InArabic_Extended_A',
        'bmp': '\u08A0-\u08FF'
    },
    {
        'name': 'InArabic_Mathematical_Alphabetic_Symbols',
        'astral': '\uD83B[\uDE00-\uDEFF]'
    },
    {
        'name': 'InArabic_Presentation_Forms_A',
        'bmp': '\uFB50-\uFDFF'
    },
    {
        'name': 'InArabic_Presentation_Forms_B',
        'bmp': '\uFE70-\uFEFF'
    },
    {
        'name': 'InArabic_Supplement',
        'bmp': '\u0750-\u077F'
    },
    {
        'name': 'InArmenian',
        'bmp': '\u0530-\u058F'
    },
    {
        'name': 'InArrows',
        'bmp': '\u2190-\u21FF'
    },
    {
        'name': 'InAvestan',
        'astral': '\uD802[\uDF00-\uDF3F]'
    },
    {
        'name': 'InBalinese',
        'bmp': '\u1B00-\u1B7F'
    },
    {
        'name': 'InBamum',
        'bmp': '\uA6A0-\uA6FF'
    },
    {
        'name': 'InBamum_Supplement',
        'astral': '\uD81A[\uDC00-\uDE3F]'
    },
    {
        'name': 'InBasic_Latin',
        'bmp': '\0-\x7F'
    },
    {
        'name': 'InBassa_Vah',
        'astral': '\uD81A[\uDED0-\uDEFF]'
    },
    {
        'name': 'InBatak',
        'bmp': '\u1BC0-\u1BFF'
    },
    {
        'name': 'InBengali',
        'bmp': '\u0980-\u09FF'
    },
    {
        'name': 'InBhaiksuki',
        'astral': '\uD807[\uDC00-\uDC6F]'
    },
    {
        'name': 'InBlock_Elements',
        'bmp': '\u2580-\u259F'
    },
    {
        'name': 'InBopomofo',
        'bmp': '\u3100-\u312F'
    },
    {
        'name': 'InBopomofo_Extended',
        'bmp': '\u31A0-\u31BF'
    },
    {
        'name': 'InBox_Drawing',
        'bmp': '\u2500-\u257F'
    },
    {
        'name': 'InBrahmi',
        'astral': '\uD804[\uDC00-\uDC7F]'
    },
    {
        'name': 'InBraille_Patterns',
        'bmp': '\u2800-\u28FF'
    },
    {
        'name': 'InBuginese',
        'bmp': '\u1A00-\u1A1F'
    },
    {
        'name': 'InBuhid',
        'bmp': '\u1740-\u175F'
    },
    {
        'name': 'InByzantine_Musical_Symbols',
        'astral': '\uD834[\uDC00-\uDCFF]'
    },
    {
        'name': 'InCJK_Compatibility',
        'bmp': '\u3300-\u33FF'
    },
    {
        'name': 'InCJK_Compatibility_Forms',
        'bmp': '\uFE30-\uFE4F'
    },
    {
        'name': 'InCJK_Compatibility_Ideographs',
        'bmp': '\uF900-\uFAFF'
    },
    {
        'name': 'InCJK_Compatibility_Ideographs_Supplement',
        'astral': '\uD87E[\uDC00-\uDE1F]'
    },
    {
        'name': 'InCJK_Radicals_Supplement',
        'bmp': '\u2E80-\u2EFF'
    },
    {
        'name': 'InCJK_Strokes',
        'bmp': '\u31C0-\u31EF'
    },
    {
        'name': 'InCJK_Symbols_And_Punctuation',
        'bmp': '\u3000-\u303F'
    },
    {
        'name': 'InCJK_Unified_Ideographs',
        'bmp': '\u4E00-\u9FFF'
    },
    {
        'name': 'InCJK_Unified_Ideographs_Extension_A',
        'bmp': '\u3400-\u4DBF'
    },
    {
        'name': 'InCJK_Unified_Ideographs_Extension_B',
        'astral': '[\uD840-\uD868][\uDC00-\uDFFF]|\uD869[\uDC00-\uDEDF]'
    },
    {
        'name': 'InCJK_Unified_Ideographs_Extension_C',
        'astral': '\uD869[\uDF00-\uDFFF]|[\uD86A-\uD86C][\uDC00-\uDFFF]|\uD86D[\uDC00-\uDF3F]'
    },
    {
        'name': 'InCJK_Unified_Ideographs_Extension_D',
        'astral': '\uD86D[\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1F]'
    },
    {
        'name': 'InCJK_Unified_Ideographs_Extension_E',
        'astral': '\uD86E[\uDC20-\uDFFF]|[\uD86F-\uD872][\uDC00-\uDFFF]|\uD873[\uDC00-\uDEAF]'
    },
    {
        'name': 'InCJK_Unified_Ideographs_Extension_F',
        'astral': '\uD873[\uDEB0-\uDFFF]|[\uD874-\uD879][\uDC00-\uDFFF]|\uD87A[\uDC00-\uDFEF]'
    },
    {
        'name': 'InCarian',
        'astral': '\uD800[\uDEA0-\uDEDF]'
    },
    {
        'name': 'InCaucasian_Albanian',
        'astral': '\uD801[\uDD30-\uDD6F]'
    },
    {
        'name': 'InChakma',
        'astral': '\uD804[\uDD00-\uDD4F]'
    },
    {
        'name': 'InCham',
        'bmp': '\uAA00-\uAA5F'
    },
    {
        'name': 'InCherokee',
        'bmp': '\u13A0-\u13FF'
    },
    {
        'name': 'InCherokee_Supplement',
        'bmp': '\uAB70-\uABBF'
    },
    {
        'name': 'InChess_Symbols',
        'astral': '\uD83E[\uDE00-\uDE6F]'
    },
    {
        'name': 'InCombining_Diacritical_Marks',
        'bmp': '\u0300-\u036F'
    },
    {
        'name': 'InCombining_Diacritical_Marks_Extended',
        'bmp': '\u1AB0-\u1AFF'
    },
    {
        'name': 'InCombining_Diacritical_Marks_For_Symbols',
        'bmp': '\u20D0-\u20FF'
    },
    {
        'name': 'InCombining_Diacritical_Marks_Supplement',
        'bmp': '\u1DC0-\u1DFF'
    },
    {
        'name': 'InCombining_Half_Marks',
        'bmp': '\uFE20-\uFE2F'
    },
    {
        'name': 'InCommon_Indic_Number_Forms',
        'bmp': '\uA830-\uA83F'
    },
    {
        'name': 'InControl_Pictures',
        'bmp': '\u2400-\u243F'
    },
    {
        'name': 'InCoptic',
        'bmp': '\u2C80-\u2CFF'
    },
    {
        'name': 'InCoptic_Epact_Numbers',
        'astral': '\uD800[\uDEE0-\uDEFF]'
    },
    {
        'name': 'InCounting_Rod_Numerals',
        'astral': '\uD834[\uDF60-\uDF7F]'
    },
    {
        'name': 'InCuneiform',
        'astral': '\uD808[\uDC00-\uDFFF]'
    },
    {
        'name': 'InCuneiform_Numbers_And_Punctuation',
        'astral': '\uD809[\uDC00-\uDC7F]'
    },
    {
        'name': 'InCurrency_Symbols',
        'bmp': '\u20A0-\u20CF'
    },
    {
        'name': 'InCypriot_Syllabary',
        'astral': '\uD802[\uDC00-\uDC3F]'
    },
    {
        'name': 'InCyrillic',
        'bmp': '\u0400-\u04FF'
    },
    {
        'name': 'InCyrillic_Extended_A',
        'bmp': '\u2DE0-\u2DFF'
    },
    {
        'name': 'InCyrillic_Extended_B',
        'bmp': '\uA640-\uA69F'
    },
    {
        'name': 'InCyrillic_Extended_C',
        'bmp': '\u1C80-\u1C8F'
    },
    {
        'name': 'InCyrillic_Supplement',
        'bmp': '\u0500-\u052F'
    },
    {
        'name': 'InDeseret',
        'astral': '\uD801[\uDC00-\uDC4F]'
    },
    {
        'name': 'InDevanagari',
        'bmp': '\u0900-\u097F'
    },
    {
        'name': 'InDevanagari_Extended',
        'bmp': '\uA8E0-\uA8FF'
    },
    {
        'name': 'InDingbats',
        'bmp': '\u2700-\u27BF'
    },
    {
        'name': 'InDogra',
        'astral': '\uD806[\uDC00-\uDC4F]'
    },
    {
        'name': 'InDomino_Tiles',
        'astral': '\uD83C[\uDC30-\uDC9F]'
    },
    {
        'name': 'InDuployan',
        'astral': '\uD82F[\uDC00-\uDC9F]'
    },
    {
        'name': 'InEarly_Dynastic_Cuneiform',
        'astral': '\uD809[\uDC80-\uDD4F]'
    },
    {
        'name': 'InEgyptian_Hieroglyphs',
        'astral': '\uD80C[\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F]'
    },
    {
        'name': 'InElbasan',
        'astral': '\uD801[\uDD00-\uDD2F]'
    },
    {
        'name': 'InEmoticons',
        'astral': '\uD83D[\uDE00-\uDE4F]'
    },
    {
        'name': 'InEnclosed_Alphanumeric_Supplement',
        'astral': '\uD83C[\uDD00-\uDDFF]'
    },
    {
        'name': 'InEnclosed_Alphanumerics',
        'bmp': '\u2460-\u24FF'
    },
    {
        'name': 'InEnclosed_CJK_Letters_And_Months',
        'bmp': '\u3200-\u32FF'
    },
    {
        'name': 'InEnclosed_Ideographic_Supplement',
        'astral': '\uD83C[\uDE00-\uDEFF]'
    },
    {
        'name': 'InEthiopic',
        'bmp': '\u1200-\u137F'
    },
    {
        'name': 'InEthiopic_Extended',
        'bmp': '\u2D80-\u2DDF'
    },
    {
        'name': 'InEthiopic_Extended_A',
        'bmp': '\uAB00-\uAB2F'
    },
    {
        'name': 'InEthiopic_Supplement',
        'bmp': '\u1380-\u139F'
    },
    {
        'name': 'InGeneral_Punctuation',
        'bmp': '\u2000-\u206F'
    },
    {
        'name': 'InGeometric_Shapes',
        'bmp': '\u25A0-\u25FF'
    },
    {
        'name': 'InGeometric_Shapes_Extended',
        'astral': '\uD83D[\uDF80-\uDFFF]'
    },
    {
        'name': 'InGeorgian',
        'bmp': '\u10A0-\u10FF'
    },
    {
        'name': 'InGeorgian_Extended',
        'bmp': '\u1C90-\u1CBF'
    },
    {
        'name': 'InGeorgian_Supplement',
        'bmp': '\u2D00-\u2D2F'
    },
    {
        'name': 'InGlagolitic',
        'bmp': '\u2C00-\u2C5F'
    },
    {
        'name': 'InGlagolitic_Supplement',
        'astral': '\uD838[\uDC00-\uDC2F]'
    },
    {
        'name': 'InGothic',
        'astral': '\uD800[\uDF30-\uDF4F]'
    },
    {
        'name': 'InGrantha',
        'astral': '\uD804[\uDF00-\uDF7F]'
    },
    {
        'name': 'InGreek_And_Coptic',
        'bmp': '\u0370-\u03FF'
    },
    {
        'name': 'InGreek_Extended',
        'bmp': '\u1F00-\u1FFF'
    },
    {
        'name': 'InGujarati',
        'bmp': '\u0A80-\u0AFF'
    },
    {
        'name': 'InGunjala_Gondi',
        'astral': '\uD807[\uDD60-\uDDAF]'
    },
    {
        'name': 'InGurmukhi',
        'bmp': '\u0A00-\u0A7F'
    },
    {
        'name': 'InHalfwidth_And_Fullwidth_Forms',
        'bmp': '\uFF00-\uFFEF'
    },
    {
        'name': 'InHangul_Compatibility_Jamo',
        'bmp': '\u3130-\u318F'
    },
    {
        'name': 'InHangul_Jamo',
        'bmp': '\u1100-\u11FF'
    },
    {
        'name': 'InHangul_Jamo_Extended_A',
        'bmp': '\uA960-\uA97F'
    },
    {
        'name': 'InHangul_Jamo_Extended_B',
        'bmp': '\uD7B0-\uD7FF'
    },
    {
        'name': 'InHangul_Syllables',
        'bmp': '\uAC00-\uD7AF'
    },
    {
        'name': 'InHanifi_Rohingya',
        'astral': '\uD803[\uDD00-\uDD3F]'
    },
    {
        'name': 'InHanunoo',
        'bmp': '\u1720-\u173F'
    },
    {
        'name': 'InHatran',
        'astral': '\uD802[\uDCE0-\uDCFF]'
    },
    {
        'name': 'InHebrew',
        'bmp': '\u0590-\u05FF'
    },
    {
        'name': 'InHigh_Private_Use_Surrogates',
        'bmp': '\uDB80-\uDBFF'
    },
    {
        'name': 'InHigh_Surrogates',
        'bmp': '\uD800-\uDB7F'
    },
    {
        'name': 'InHiragana',
        'bmp': '\u3040-\u309F'
    },
    {
        'name': 'InIPA_Extensions',
        'bmp': '\u0250-\u02AF'
    },
    {
        'name': 'InIdeographic_Description_Characters',
        'bmp': '\u2FF0-\u2FFF'
    },
    {
        'name': 'InIdeographic_Symbols_And_Punctuation',
        'astral': '\uD81B[\uDFE0-\uDFFF]'
    },
    {
        'name': 'InImperial_Aramaic',
        'astral': '\uD802[\uDC40-\uDC5F]'
    },
    {
        'name': 'InIndic_Siyaq_Numbers',
        'astral': '\uD83B[\uDC70-\uDCBF]'
    },
    {
        'name': 'InInscriptional_Pahlavi',
        'astral': '\uD802[\uDF60-\uDF7F]'
    },
    {
        'name': 'InInscriptional_Parthian',
        'astral': '\uD802[\uDF40-\uDF5F]'
    },
    {
        'name': 'InJavanese',
        'bmp': '\uA980-\uA9DF'
    },
    {
        'name': 'InKaithi',
        'astral': '\uD804[\uDC80-\uDCCF]'
    },
    {
        'name': 'InKana_Extended_A',
        'astral': '\uD82C[\uDD00-\uDD2F]'
    },
    {
        'name': 'InKana_Supplement',
        'astral': '\uD82C[\uDC00-\uDCFF]'
    },
    {
        'name': 'InKanbun',
        'bmp': '\u3190-\u319F'
    },
    {
        'name': 'InKangxi_Radicals',
        'bmp': '\u2F00-\u2FDF'
    },
    {
        'name': 'InKannada',
        'bmp': '\u0C80-\u0CFF'
    },
    {
        'name': 'InKatakana',
        'bmp': '\u30A0-\u30FF'
    },
    {
        'name': 'InKatakana_Phonetic_Extensions',
        'bmp': '\u31F0-\u31FF'
    },
    {
        'name': 'InKayah_Li',
        'bmp': '\uA900-\uA92F'
    },
    {
        'name': 'InKharoshthi',
        'astral': '\uD802[\uDE00-\uDE5F]'
    },
    {
        'name': 'InKhmer',
        'bmp': '\u1780-\u17FF'
    },
    {
        'name': 'InKhmer_Symbols',
        'bmp': '\u19E0-\u19FF'
    },
    {
        'name': 'InKhojki',
        'astral': '\uD804[\uDE00-\uDE4F]'
    },
    {
        'name': 'InKhudawadi',
        'astral': '\uD804[\uDEB0-\uDEFF]'
    },
    {
        'name': 'InLao',
        'bmp': '\u0E80-\u0EFF'
    },
    {
        'name': 'InLatin_1_Supplement',
        'bmp': '\x80-\xFF'
    },
    {
        'name': 'InLatin_Extended_A',
        'bmp': '\u0100-\u017F'
    },
    {
        'name': 'InLatin_Extended_Additional',
        'bmp': '\u1E00-\u1EFF'
    },
    {
        'name': 'InLatin_Extended_B',
        'bmp': '\u0180-\u024F'
    },
    {
        'name': 'InLatin_Extended_C',
        'bmp': '\u2C60-\u2C7F'
    },
    {
        'name': 'InLatin_Extended_D',
        'bmp': '\uA720-\uA7FF'
    },
    {
        'name': 'InLatin_Extended_E',
        'bmp': '\uAB30-\uAB6F'
    },
    {
        'name': 'InLepcha',
        'bmp': '\u1C00-\u1C4F'
    },
    {
        'name': 'InLetterlike_Symbols',
        'bmp': '\u2100-\u214F'
    },
    {
        'name': 'InLimbu',
        'bmp': '\u1900-\u194F'
    },
    {
        'name': 'InLinear_A',
        'astral': '\uD801[\uDE00-\uDF7F]'
    },
    {
        'name': 'InLinear_B_Ideograms',
        'astral': '\uD800[\uDC80-\uDCFF]'
    },
    {
        'name': 'InLinear_B_Syllabary',
        'astral': '\uD800[\uDC00-\uDC7F]'
    },
    {
        'name': 'InLisu',
        'bmp': '\uA4D0-\uA4FF'
    },
    {
        'name': 'InLow_Surrogates',
        'bmp': '\uDC00-\uDFFF'
    },
    {
        'name': 'InLycian',
        'astral': '\uD800[\uDE80-\uDE9F]'
    },
    {
        'name': 'InLydian',
        'astral': '\uD802[\uDD20-\uDD3F]'
    },
    {
        'name': 'InMahajani',
        'astral': '\uD804[\uDD50-\uDD7F]'
    },
    {
        'name': 'InMahjong_Tiles',
        'astral': '\uD83C[\uDC00-\uDC2F]'
    },
    {
        'name': 'InMakasar',
        'astral': '\uD807[\uDEE0-\uDEFF]'
    },
    {
        'name': 'InMalayalam',
        'bmp': '\u0D00-\u0D7F'
    },
    {
        'name': 'InMandaic',
        'bmp': '\u0840-\u085F'
    },
    {
        'name': 'InManichaean',
        'astral': '\uD802[\uDEC0-\uDEFF]'
    },
    {
        'name': 'InMarchen',
        'astral': '\uD807[\uDC70-\uDCBF]'
    },
    {
        'name': 'InMasaram_Gondi',
        'astral': '\uD807[\uDD00-\uDD5F]'
    },
    {
        'name': 'InMathematical_Alphanumeric_Symbols',
        'astral': '\uD835[\uDC00-\uDFFF]'
    },
    {
        'name': 'InMathematical_Operators',
        'bmp': '\u2200-\u22FF'
    },
    {
        'name': 'InMayan_Numerals',
        'astral': '\uD834[\uDEE0-\uDEFF]'
    },
    {
        'name': 'InMedefaidrin',
        'astral': '\uD81B[\uDE40-\uDE9F]'
    },
    {
        'name': 'InMeetei_Mayek',
        'bmp': '\uABC0-\uABFF'
    },
    {
        'name': 'InMeetei_Mayek_Extensions',
        'bmp': '\uAAE0-\uAAFF'
    },
    {
        'name': 'InMende_Kikakui',
        'astral': '\uD83A[\uDC00-\uDCDF]'
    },
    {
        'name': 'InMeroitic_Cursive',
        'astral': '\uD802[\uDDA0-\uDDFF]'
    },
    {
        'name': 'InMeroitic_Hieroglyphs',
        'astral': '\uD802[\uDD80-\uDD9F]'
    },
    {
        'name': 'InMiao',
        'astral': '\uD81B[\uDF00-\uDF9F]'
    },
    {
        'name': 'InMiscellaneous_Mathematical_Symbols_A',
        'bmp': '\u27C0-\u27EF'
    },
    {
        'name': 'InMiscellaneous_Mathematical_Symbols_B',
        'bmp': '\u2980-\u29FF'
    },
    {
        'name': 'InMiscellaneous_Symbols',
        'bmp': '\u2600-\u26FF'
    },
    {
        'name': 'InMiscellaneous_Symbols_And_Arrows',
        'bmp': '\u2B00-\u2BFF'
    },
    {
        'name': 'InMiscellaneous_Symbols_And_Pictographs',
        'astral': '\uD83C[\uDF00-\uDFFF]|\uD83D[\uDC00-\uDDFF]'
    },
    {
        'name': 'InMiscellaneous_Technical',
        'bmp': '\u2300-\u23FF'
    },
    {
        'name': 'InModi',
        'astral': '\uD805[\uDE00-\uDE5F]'
    },
    {
        'name': 'InModifier_Tone_Letters',
        'bmp': '\uA700-\uA71F'
    },
    {
        'name': 'InMongolian',
        'bmp': '\u1800-\u18AF'
    },
    {
        'name': 'InMongolian_Supplement',
        'astral': '\uD805[\uDE60-\uDE7F]'
    },
    {
        'name': 'InMro',
        'astral': '\uD81A[\uDE40-\uDE6F]'
    },
    {
        'name': 'InMultani',
        'astral': '\uD804[\uDE80-\uDEAF]'
    },
    {
        'name': 'InMusical_Symbols',
        'astral': '\uD834[\uDD00-\uDDFF]'
    },
    {
        'name': 'InMyanmar',
        'bmp': '\u1000-\u109F'
    },
    {
        'name': 'InMyanmar_Extended_A',
        'bmp': '\uAA60-\uAA7F'
    },
    {
        'name': 'InMyanmar_Extended_B',
        'bmp': '\uA9E0-\uA9FF'
    },
    {
        'name': 'InNKo',
        'bmp': '\u07C0-\u07FF'
    },
    {
        'name': 'InNabataean',
        'astral': '\uD802[\uDC80-\uDCAF]'
    },
    {
        'name': 'InNew_Tai_Lue',
        'bmp': '\u1980-\u19DF'
    },
    {
        'name': 'InNewa',
        'astral': '\uD805[\uDC00-\uDC7F]'
    },
    {
        'name': 'InNumber_Forms',
        'bmp': '\u2150-\u218F'
    },
    {
        'name': 'InNushu',
        'astral': '\uD82C[\uDD70-\uDEFF]'
    },
    {
        'name': 'InOgham',
        'bmp': '\u1680-\u169F'
    },
    {
        'name': 'InOl_Chiki',
        'bmp': '\u1C50-\u1C7F'
    },
    {
        'name': 'InOld_Hungarian',
        'astral': '\uD803[\uDC80-\uDCFF]'
    },
    {
        'name': 'InOld_Italic',
        'astral': '\uD800[\uDF00-\uDF2F]'
    },
    {
        'name': 'InOld_North_Arabian',
        'astral': '\uD802[\uDE80-\uDE9F]'
    },
    {
        'name': 'InOld_Permic',
        'astral': '\uD800[\uDF50-\uDF7F]'
    },
    {
        'name': 'InOld_Persian',
        'astral': '\uD800[\uDFA0-\uDFDF]'
    },
    {
        'name': 'InOld_Sogdian',
        'astral': '\uD803[\uDF00-\uDF2F]'
    },
    {
        'name': 'InOld_South_Arabian',
        'astral': '\uD802[\uDE60-\uDE7F]'
    },
    {
        'name': 'InOld_Turkic',
        'astral': '\uD803[\uDC00-\uDC4F]'
    },
    {
        'name': 'InOptical_Character_Recognition',
        'bmp': '\u2440-\u245F'
    },
    {
        'name': 'InOriya',
        'bmp': '\u0B00-\u0B7F'
    },
    {
        'name': 'InOrnamental_Dingbats',
        'astral': '\uD83D[\uDE50-\uDE7F]'
    },
    {
        'name': 'InOsage',
        'astral': '\uD801[\uDCB0-\uDCFF]'
    },
    {
        'name': 'InOsmanya',
        'astral': '\uD801[\uDC80-\uDCAF]'
    },
    {
        'name': 'InPahawh_Hmong',
        'astral': '\uD81A[\uDF00-\uDF8F]'
    },
    {
        'name': 'InPalmyrene',
        'astral': '\uD802[\uDC60-\uDC7F]'
    },
    {
        'name': 'InPau_Cin_Hau',
        'astral': '\uD806[\uDEC0-\uDEFF]'
    },
    {
        'name': 'InPhags_Pa',
        'bmp': '\uA840-\uA87F'
    },
    {
        'name': 'InPhaistos_Disc',
        'astral': '\uD800[\uDDD0-\uDDFF]'
    },
    {
        'name': 'InPhoenician',
        'astral': '\uD802[\uDD00-\uDD1F]'
    },
    {
        'name': 'InPhonetic_Extensions',
        'bmp': '\u1D00-\u1D7F'
    },
    {
        'name': 'InPhonetic_Extensions_Supplement',
        'bmp': '\u1D80-\u1DBF'
    },
    {
        'name': 'InPlaying_Cards',
        'astral': '\uD83C[\uDCA0-\uDCFF]'
    },
    {
        'name': 'InPrivate_Use_Area',
        'bmp': '\uE000-\uF8FF'
    },
    {
        'name': 'InPsalter_Pahlavi',
        'astral': '\uD802[\uDF80-\uDFAF]'
    },
    {
        'name': 'InRejang',
        'bmp': '\uA930-\uA95F'
    },
    {
        'name': 'InRumi_Numeral_Symbols',
        'astral': '\uD803[\uDE60-\uDE7F]'
    },
    {
        'name': 'InRunic',
        'bmp': '\u16A0-\u16FF'
    },
    {
        'name': 'InSamaritan',
        'bmp': '\u0800-\u083F'
    },
    {
        'name': 'InSaurashtra',
        'bmp': '\uA880-\uA8DF'
    },
    {
        'name': 'InSharada',
        'astral': '\uD804[\uDD80-\uDDDF]'
    },
    {
        'name': 'InShavian',
        'astral': '\uD801[\uDC50-\uDC7F]'
    },
    {
        'name': 'InShorthand_Format_Controls',
        'astral': '\uD82F[\uDCA0-\uDCAF]'
    },
    {
        'name': 'InSiddham',
        'astral': '\uD805[\uDD80-\uDDFF]'
    },
    {
        'name': 'InSinhala',
        'bmp': '\u0D80-\u0DFF'
    },
    {
        'name': 'InSinhala_Archaic_Numbers',
        'astral': '\uD804[\uDDE0-\uDDFF]'
    },
    {
        'name': 'InSmall_Form_Variants',
        'bmp': '\uFE50-\uFE6F'
    },
    {
        'name': 'InSogdian',
        'astral': '\uD803[\uDF30-\uDF6F]'
    },
    {
        'name': 'InSora_Sompeng',
        'astral': '\uD804[\uDCD0-\uDCFF]'
    },
    {
        'name': 'InSoyombo',
        'astral': '\uD806[\uDE50-\uDEAF]'
    },
    {
        'name': 'InSpacing_Modifier_Letters',
        'bmp': '\u02B0-\u02FF'
    },
    {
        'name': 'InSpecials',
        'bmp': '\uFFF0-\uFFFF'
    },
    {
        'name': 'InSundanese',
        'bmp': '\u1B80-\u1BBF'
    },
    {
        'name': 'InSundanese_Supplement',
        'bmp': '\u1CC0-\u1CCF'
    },
    {
        'name': 'InSuperscripts_And_Subscripts',
        'bmp': '\u2070-\u209F'
    },
    {
        'name': 'InSupplemental_Arrows_A',
        'bmp': '\u27F0-\u27FF'
    },
    {
        'name': 'InSupplemental_Arrows_B',
        'bmp': '\u2900-\u297F'
    },
    {
        'name': 'InSupplemental_Arrows_C',
        'astral': '\uD83E[\uDC00-\uDCFF]'
    },
    {
        'name': 'InSupplemental_Mathematical_Operators',
        'bmp': '\u2A00-\u2AFF'
    },
    {
        'name': 'InSupplemental_Punctuation',
        'bmp': '\u2E00-\u2E7F'
    },
    {
        'name': 'InSupplemental_Symbols_And_Pictographs',
        'astral': '\uD83E[\uDD00-\uDDFF]'
    },
    {
        'name': 'InSupplementary_Private_Use_Area_A',
        'astral': '[\uDB80-\uDBBF][\uDC00-\uDFFF]'
    },
    {
        'name': 'InSupplementary_Private_Use_Area_B',
        'astral': '[\uDBC0-\uDBFF][\uDC00-\uDFFF]'
    },
    {
        'name': 'InSutton_SignWriting',
        'astral': '\uD836[\uDC00-\uDEAF]'
    },
    {
        'name': 'InSyloti_Nagri',
        'bmp': '\uA800-\uA82F'
    },
    {
        'name': 'InSyriac',
        'bmp': '\u0700-\u074F'
    },
    {
        'name': 'InSyriac_Supplement',
        'bmp': '\u0860-\u086F'
    },
    {
        'name': 'InTagalog',
        'bmp': '\u1700-\u171F'
    },
    {
        'name': 'InTagbanwa',
        'bmp': '\u1760-\u177F'
    },
    {
        'name': 'InTags',
        'astral': '\uDB40[\uDC00-\uDC7F]'
    },
    {
        'name': 'InTai_Le',
        'bmp': '\u1950-\u197F'
    },
    {
        'name': 'InTai_Tham',
        'bmp': '\u1A20-\u1AAF'
    },
    {
        'name': 'InTai_Viet',
        'bmp': '\uAA80-\uAADF'
    },
    {
        'name': 'InTai_Xuan_Jing_Symbols',
        'astral': '\uD834[\uDF00-\uDF5F]'
    },
    {
        'name': 'InTakri',
        'astral': '\uD805[\uDE80-\uDECF]'
    },
    {
        'name': 'InTamil',
        'bmp': '\u0B80-\u0BFF'
    },
    {
        'name': 'InTangut',
        'astral': '[\uD81C-\uD821][\uDC00-\uDFFF]'
    },
    {
        'name': 'InTangut_Components',
        'astral': '\uD822[\uDC00-\uDEFF]'
    },
    {
        'name': 'InTelugu',
        'bmp': '\u0C00-\u0C7F'
    },
    {
        'name': 'InThaana',
        'bmp': '\u0780-\u07BF'
    },
    {
        'name': 'InThai',
        'bmp': '\u0E00-\u0E7F'
    },
    {
        'name': 'InTibetan',
        'bmp': '\u0F00-\u0FFF'
    },
    {
        'name': 'InTifinagh',
        'bmp': '\u2D30-\u2D7F'
    },
    {
        'name': 'InTirhuta',
        'astral': '\uD805[\uDC80-\uDCDF]'
    },
    {
        'name': 'InTransport_And_Map_Symbols',
        'astral': '\uD83D[\uDE80-\uDEFF]'
    },
    {
        'name': 'InUgaritic',
        'astral': '\uD800[\uDF80-\uDF9F]'
    },
    {
        'name': 'InUnified_Canadian_Aboriginal_Syllabics',
        'bmp': '\u1400-\u167F'
    },
    {
        'name': 'InUnified_Canadian_Aboriginal_Syllabics_Extended',
        'bmp': '\u18B0-\u18FF'
    },
    {
        'name': 'InVai',
        'bmp': '\uA500-\uA63F'
    },
    {
        'name': 'InVariation_Selectors',
        'bmp': '\uFE00-\uFE0F'
    },
    {
        'name': 'InVariation_Selectors_Supplement',
        'astral': '\uDB40[\uDD00-\uDDEF]'
    },
    {
        'name': 'InVedic_Extensions',
        'bmp': '\u1CD0-\u1CFF'
    },
    {
        'name': 'InVertical_Forms',
        'bmp': '\uFE10-\uFE1F'
    },
    {
        'name': 'InWarang_Citi',
        'astral': '\uD806[\uDCA0-\uDCFF]'
    },
    {
        'name': 'InYi_Radicals',
        'bmp': '\uA490-\uA4CF'
    },
    {
        'name': 'InYi_Syllables',
        'bmp': '\uA000-\uA48F'
    },
    {
        'name': 'InYijing_Hexagram_Symbols',
        'bmp': '\u4DC0-\u4DFF'
    },
    {
        'name': 'InZanabazar_Square',
        'astral': '\uD806[\uDE00-\uDE4F]'
    },
    {
        'name': 'Inundefined',
        'astral': '\uD803[\uDE80-\uDEBF\uDFB0-\uDFFF]|\uD806[\uDD00-\uDD5F\uDDA0-\uDDFF]|\uD807[\uDFB0-\uDFFF]|\uD80D[\uDC30-\uDC3F]|\uD822[\uDF00-\uDFFF]|\uD823[\uDC00-\uDD8F]|\uD82C[\uDD30-\uDD6F]|\uD838[\uDD00-\uDD4F\uDEC0-\uDEFF]|\uD83B[\uDD00-\uDD4F]|\uD83E[\uDE70-\uDFFF]|[\uD880-\uD883][\uDC00-\uDFFF]|\uD884[\uDC00-\uDF4F]'
    }
];

},{}],315:[function(require,module,exports){
module.exports = [
    {
        'name': 'C',
        'alias': 'Other',
        'isBmpLast': true,
        'bmp': '\0-\x1F\x7F-\x9F\xAD\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EE\u05F5-\u0605\u061C\u061D\u06DD\u070E\u070F\u074B\u074C\u07B2-\u07BF\u07FB\u07FC\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u089F\u08B5\u08C8-\u08D2\u08E2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A77-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C76\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u170D\u1715-\u171F\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180E\u180F\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1AC1-\u1AFF\u1B4C-\u1B4F\u1B7D-\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1C8F\u1CBB\u1CBC\u1CC8-\u1CCF\u1CFB-\u1CFF\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u200B-\u200F\u202A-\u202E\u2060-\u206F\u2072\u2073\u208F\u209D-\u209F\u20C0-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2C2F\u2C5F\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E53-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u3130\u318F\u31E4-\u31EF\u321F\u9FFD-\u9FFF\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7C0\uA7C1\uA7CB-\uA7F4\uA82D-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB6C-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC2-\uFBD2\uFD40-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFE\uFDFF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD-\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFFB\uFFFE\uFFFF',
        'astral': '\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9D-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD70-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE49-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD28-\uDD2F\uDD3A-\uDE5F\uDE7F\uDEAA\uDEAE\uDEAF\uDEB2-\uDEFF\uDF28-\uDF2F\uDF5A-\uDFAF\uDFCC-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC70-\uDC7E\uDCBD\uDCC2-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD48-\uDD4F\uDD77-\uDD7F\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5C\uDC62-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEB9-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF40-\uDFFF]|\uD806[\uDC3C-\uDC9F\uDCF3-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD47-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE5-\uDDFF\uDE48-\uDE4F\uDEA3-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF9-\uDFAF\uDFB1-\uDFBF\uDFF2-\uDFFE]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD824-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDE70-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE9B-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82C[\uDD1F-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA0-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDD73-\uDD7A\uDDE9-\uDDFF\uDE46-\uDEDF\uDEF4-\uDEFF\uDF57-\uDF5F\uDF79-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD50-\uDEBF\uDEFA-\uDEFE\uDF00-\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDC70\uDCB5-\uDD00\uDD3E-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDDAE-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED8-\uDEDF\uDEED-\uDEEF\uDEFD-\uDEFF\uDF74-\uDF7F\uDFD9-\uDFDF\uDFEC-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE\uDCAF\uDCB2-\uDCFF\uDD79\uDDCC\uDE54-\uDE5F\uDE6E\uDE6F\uDE75-\uDE77\uDE7B-\uDE7F\uDE87-\uDE8F\uDEA9-\uDEAF\uDEB7-\uDEBF\uDEC3-\uDECF\uDED7-\uDEFF\uDF93\uDFCB-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEDE-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]'
    },
    {
        'name': 'Cc',
        'alias': 'Control',
        'bmp': '\0-\x1F\x7F-\x9F'
    },
    {
        'name': 'Cf',
        'alias': 'Format',
        'bmp': '\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB',
        'astral': '\uD804[\uDCBD\uDCCD]|\uD80D[\uDC30-\uDC38]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]'
    },
    {
        'name': 'Cn',
        'alias': 'Unassigned',
        'bmp': '\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EE\u05F5-\u05FF\u061D\u070E\u074B\u074C\u07B2-\u07BF\u07FB\u07FC\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u089F\u08B5\u08C8-\u08D2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A77-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C76\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u170D\u1715-\u171F\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180F\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1AC1-\u1AFF\u1B4C-\u1B4F\u1B7D-\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1C8F\u1CBB\u1CBC\u1CC8-\u1CCF\u1CFB-\u1CFF\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u2065\u2072\u2073\u208F\u209D-\u209F\u20C0-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2C2F\u2C5F\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E53-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u3130\u318F\u31E4-\u31EF\u321F\u9FFD-\u9FFF\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7C0\uA7C1\uA7CB-\uA7F4\uA82D-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB6C-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC2-\uFBD2\uFD40-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFE\uFDFF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD\uFEFE\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFF8\uFFFE\uFFFF',
        'astral': '\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9D-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD70-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE49-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD28-\uDD2F\uDD3A-\uDE5F\uDE7F\uDEAA\uDEAE\uDEAF\uDEB2-\uDEFF\uDF28-\uDF2F\uDF5A-\uDFAF\uDFCC-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC70-\uDC7E\uDCC2-\uDCCC\uDCCE\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD48-\uDD4F\uDD77-\uDD7F\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5C\uDC62-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEB9-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF40-\uDFFF]|\uD806[\uDC3C-\uDC9F\uDCF3-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD47-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE5-\uDDFF\uDE48-\uDE4F\uDEA3-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF9-\uDFAF\uDFB1-\uDFBF\uDFF2-\uDFFE]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD824-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDB7F][\uDC00-\uDFFF]|\uD80D[\uDC2F\uDC39-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDE70-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE9B-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82C[\uDD1F-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA4-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDDE9-\uDDFF\uDE46-\uDEDF\uDEF4-\uDEFF\uDF57-\uDF5F\uDF79-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD50-\uDEBF\uDEFA-\uDEFE\uDF00-\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDC70\uDCB5-\uDD00\uDD3E-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDDAE-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED8-\uDEDF\uDEED-\uDEEF\uDEFD-\uDEFF\uDF74-\uDF7F\uDFD9-\uDFDF\uDFEC-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE\uDCAF\uDCB2-\uDCFF\uDD79\uDDCC\uDE54-\uDE5F\uDE6E\uDE6F\uDE75-\uDE77\uDE7B-\uDE7F\uDE87-\uDE8F\uDEA9-\uDEAF\uDEB7-\uDEBF\uDEC3-\uDECF\uDED7-\uDEFF\uDF93\uDFCB-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEDE-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00\uDC02-\uDC1F\uDC80-\uDCFF\uDDF0-\uDFFF]|[\uDBBF\uDBFF][\uDFFE\uDFFF]'
    },
    {
        'name': 'Co',
        'alias': 'Private_Use',
        'bmp': '\uE000-\uF8FF',
        'astral': '[\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|[\uDBBF\uDBFF][\uDC00-\uDFFD]'
    },
    {
        'name': 'Cs',
        'alias': 'Surrogate',
        'bmp': '\uD800-\uDFFF'
    },
    {
        'name': 'L',
        'alias': 'Letter',
        'bmp': 'A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC',
        'astral': '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDEC0-\uDEEB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]'
    },
    {
        'name': 'LC',
        'alias': 'Cased_Letter',
        'bmp': 'A-Za-z\xB5\xC0-\xD6\xD8-\xF6\xF8-\u01BA\u01BC-\u01BF\u01C4-\u0293\u0295-\u02AF\u0370-\u0373\u0376\u0377\u037B-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0560-\u0588\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FD-\u10FF\u13A0-\u13F5\u13F8-\u13FD\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2134\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2C7B\u2C7E-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA640-\uA66D\uA680-\uA69B\uA722-\uA76F\uA771-\uA787\uA78B-\uA78E\uA790-\uA7BF\uA7C2-\uA7CA\uA7F5\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF21-\uFF3A\uFF41-\uFF5A',
        'astral': '\uD801[\uDC00-\uDC4F\uDCB0-\uDCD3\uDCD8-\uDCFB]|\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD806[\uDCA0-\uDCDF]|\uD81B[\uDE40-\uDE7F]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDD00-\uDD43]'
    },
    {
        'name': 'Ll',
        'alias': 'Lowercase_Letter',
        'bmp': 'a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C3\uA7C8\uA7CA\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A',
        'astral': '\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43]'
    },
    {
        'name': 'Lm',
        'alias': 'Modifier_Letter',
        'bmp': '\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C\uA69D\uA717-\uA71F\uA770\uA788\uA7F8\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3\uAAF4\uAB5C-\uAB5F\uAB69\uFF70\uFF9E\uFF9F',
        'astral': '\uD81A[\uDF40-\uDF43]|\uD81B[\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD838[\uDD37-\uDD3D]|\uD83A\uDD4B'
    },
    {
        'name': 'Lo',
        'alias': 'Other_Letter',
        'bmp': '\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05EF-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1100-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC',
        'astral': '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC50-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A]|\uD806[\uDC00-\uDC2B\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF4A\uDF50]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD838[\uDD00-\uDD2C\uDD4E\uDEC0-\uDEEB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]'
    },
    {
        'name': 'Lt',
        'alias': 'Titlecase_Letter',
        'bmp': '\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC'
    },
    {
        'name': 'Lu',
        'alias': 'Uppercase_Letter',
        'bmp': 'A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C2\uA7C4-\uA7C7\uA7C9\uA7F5\uFF21-\uFF3A',
        'astral': '\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]'
    },
    {
        'name': 'M',
        'alias': 'Mark',
        'bmp': '\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u192B\u1930-\u193B\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F',
        'astral': '\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD45\uDD46\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDDC9-\uDDCC\uDDCE\uDDCF\uDE2C-\uDE37\uDE3E\uDEDF-\uDEEA\uDF00-\uDF03\uDF3B\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC35-\uDC46\uDC5E\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDDDC\uDDDD\uDE30-\uDE40\uDEAB-\uDEB7\uDF1D-\uDF2B]|\uD806[\uDC2C-\uDC3A\uDD30-\uDD35\uDD37\uDD38\uDD3B-\uDD3E\uDD40\uDD42\uDD43\uDDD1-\uDDD7\uDDDA-\uDDE0\uDDE4\uDE01-\uDE0A\uDE33-\uDE39\uDE3B-\uDE3E\uDE47\uDE51-\uDE5B\uDE8A-\uDE99]|\uD807[\uDC2F-\uDC36\uDC38-\uDC3F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD8A-\uDD8E\uDD90\uDD91\uDD93-\uDD97\uDEF3-\uDEF6]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF51-\uDF87\uDF8F-\uDF92\uDFE4\uDFF0\uDFF1]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]'
    },
    {
        'name': 'Mc',
        'alias': 'Spacing_Mark',
        'bmp': '\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BE-\u09C0\u09C7\u09C8\u09CB\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0D02\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2\u0DF3\u0F3E\u0F3F\u0F7F\u102B\u102C\u1031\u1038\u103B\u103C\u1056\u1057\u1062-\u1064\u1067-\u106D\u1083\u1084\u1087-\u108C\u108F\u109A-\u109C\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF7\u302E\u302F\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC',
        'astral': '\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD45\uDD46\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDDCE\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3E\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB0-\uDCB2\uDCB9\uDCBB-\uDCBE\uDCC1\uDDAF-\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF20\uDF21\uDF26]|\uD806[\uDC2C-\uDC2E\uDC38\uDD30-\uDD35\uDD37\uDD38\uDD3D\uDD40\uDD42\uDDD1-\uDDD3\uDDDC-\uDDDF\uDDE4\uDE39\uDE57\uDE58\uDE97]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4\uDD8A-\uDD8E\uDD93\uDD94\uDD96\uDEF5\uDEF6]|\uD81B[\uDF51-\uDF87\uDFF0\uDFF1]|\uD834[\uDD65\uDD66\uDD6D-\uDD72]'
    },
    {
        'name': 'Me',
        'alias': 'Enclosing_Mark',
        'bmp': '\u0488\u0489\u1ABE\u20DD-\u20E0\u20E2-\u20E4\uA670-\uA672'
    },
    {
        'name': 'Mn',
        'alias': 'Nonspacing_Mark',
        'bmp': '\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F',
        'astral': '\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]'
    },
    {
        'name': 'N',
        'alias': 'Number',
        'bmp': '0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D58-\u0D5E\u0D66-\u0D78\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19',
        'astral': '\uD800[\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23\uDF41\uDF4A\uDFD1-\uDFD5]|\uD801[\uDCA0-\uDCA9]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDD30-\uDD39\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54\uDFC5-\uDFCB]|\uD804[\uDC52-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDDE1-\uDDF4\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF3B]|\uD806[\uDCE0-\uDCF2\uDD50-\uDD59]|\uD807[\uDC50-\uDC6C\uDD50-\uDD59\uDDA0-\uDDA9\uDFC0-\uDFD4]|\uD809[\uDC00-\uDC6E]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDFCE-\uDFFF]|\uD838[\uDD40-\uDD49\uDEF0-\uDEF9]|\uD83A[\uDCC7-\uDCCF\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]'
    },
    {
        'name': 'Nd',
        'alias': 'Decimal_Number',
        'bmp': '0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19',
        'astral': '\uD801[\uDCA0-\uDCA9]|\uD803[\uDD30-\uDD39]|\uD804[\uDC66-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF39]|\uD806[\uDCE0-\uDCE9\uDD50-\uDD59]|\uD807[\uDC50-\uDC59\uDD50-\uDD59\uDDA0-\uDDA9]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59]|\uD835[\uDFCE-\uDFFF]|\uD838[\uDD40-\uDD49\uDEF0-\uDEF9]|\uD83A[\uDD50-\uDD59]|\uD83E[\uDFF0-\uDFF9]'
    },
    {
        'name': 'Nl',
        'alias': 'Letter_Number',
        'bmp': '\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF',
        'astral': '\uD800[\uDD40-\uDD74\uDF41\uDF4A\uDFD1-\uDFD5]|\uD809[\uDC00-\uDC6E]'
    },
    {
        'name': 'No',
        'alias': 'Other_Number',
        'bmp': '\xB2\xB3\xB9\xBC-\xBE\u09F4-\u09F9\u0B72-\u0B77\u0BF0-\u0BF2\u0C78-\u0C7E\u0D58-\u0D5E\u0D70-\u0D78\u0F2A-\u0F33\u1369-\u137C\u17F0-\u17F9\u19DA\u2070\u2074-\u2079\u2080-\u2089\u2150-\u215F\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA830-\uA835',
        'astral': '\uD800[\uDD07-\uDD33\uDD75-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54\uDFC5-\uDFCB]|\uD804[\uDC52-\uDC65\uDDE1-\uDDF4]|\uD805[\uDF3A\uDF3B]|\uD806[\uDCEA-\uDCF2]|\uD807[\uDC5A-\uDC6C\uDFC0-\uDFD4]|\uD81A[\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD83A[\uDCC7-\uDCCF]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D]|\uD83C[\uDD00-\uDD0C]'
    },
    {
        'name': 'P',
        'alias': 'Punctuation',
        'bmp': '!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65',
        'astral': '\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]'
    },
    {
        'name': 'Pc',
        'alias': 'Connector_Punctuation',
        'bmp': '_\u203F\u2040\u2054\uFE33\uFE34\uFE4D-\uFE4F\uFF3F'
    },
    {
        'name': 'Pd',
        'alias': 'Dash_Punctuation',
        'bmp': '\\-\u058A\u05BE\u1400\u1806\u2010-\u2015\u2E17\u2E1A\u2E3A\u2E3B\u2E40\u301C\u3030\u30A0\uFE31\uFE32\uFE58\uFE63\uFF0D',
        'astral': '\uD803\uDEAD'
    },
    {
        'name': 'Pe',
        'alias': 'Close_Punctuation',
        'bmp': '\\)\\]\\}\u0F3B\u0F3D\u169C\u2046\u207E\u208E\u2309\u230B\u232A\u2769\u276B\u276D\u276F\u2771\u2773\u2775\u27C6\u27E7\u27E9\u27EB\u27ED\u27EF\u2984\u2986\u2988\u298A\u298C\u298E\u2990\u2992\u2994\u2996\u2998\u29D9\u29DB\u29FD\u2E23\u2E25\u2E27\u2E29\u3009\u300B\u300D\u300F\u3011\u3015\u3017\u3019\u301B\u301E\u301F\uFD3E\uFE18\uFE36\uFE38\uFE3A\uFE3C\uFE3E\uFE40\uFE42\uFE44\uFE48\uFE5A\uFE5C\uFE5E\uFF09\uFF3D\uFF5D\uFF60\uFF63'
    },
    {
        'name': 'Pf',
        'alias': 'Final_Punctuation',
        'bmp': '\xBB\u2019\u201D\u203A\u2E03\u2E05\u2E0A\u2E0D\u2E1D\u2E21'
    },
    {
        'name': 'Pi',
        'alias': 'Initial_Punctuation',
        'bmp': '\xAB\u2018\u201B\u201C\u201F\u2039\u2E02\u2E04\u2E09\u2E0C\u2E1C\u2E20'
    },
    {
        'name': 'Po',
        'alias': 'Other_Punctuation',
        'bmp': '!-#%-\'\\*,\\.\\/:;\\?@\\\xA1\xA7\xB6\xB7\xBF\u037E\u0387\u055A-\u055F\u0589\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u166E\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u1805\u1807-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2016\u2017\u2020-\u2027\u2030-\u2038\u203B-\u203E\u2041-\u2043\u2047-\u2051\u2053\u2055-\u205E\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00\u2E01\u2E06-\u2E08\u2E0B\u2E0E-\u2E16\u2E18\u2E19\u2E1B\u2E1E\u2E1F\u2E2A-\u2E2E\u2E30-\u2E39\u2E3C-\u2E3F\u2E41\u2E43-\u2E4F\u2E52\u3001-\u3003\u303D\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFE10-\uFE16\uFE19\uFE30\uFE45\uFE46\uFE49-\uFE4C\uFE50-\uFE52\uFE54-\uFE57\uFE5F-\uFE61\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF07\uFF0A\uFF0C\uFF0E\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3C\uFF61\uFF64\uFF65',
        'astral': '\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]'
    },
    {
        'name': 'Ps',
        'alias': 'Open_Punctuation',
        'bmp': '\\(\\[\\{\u0F3A\u0F3C\u169B\u201A\u201E\u2045\u207D\u208D\u2308\u230A\u2329\u2768\u276A\u276C\u276E\u2770\u2772\u2774\u27C5\u27E6\u27E8\u27EA\u27EC\u27EE\u2983\u2985\u2987\u2989\u298B\u298D\u298F\u2991\u2993\u2995\u2997\u29D8\u29DA\u29FC\u2E22\u2E24\u2E26\u2E28\u2E42\u3008\u300A\u300C\u300E\u3010\u3014\u3016\u3018\u301A\u301D\uFD3F\uFE17\uFE35\uFE37\uFE39\uFE3B\uFE3D\uFE3F\uFE41\uFE43\uFE47\uFE59\uFE5B\uFE5D\uFF08\uFF3B\uFF5B\uFF5F\uFF62'
    },
    {
        'name': 'S',
        'alias': 'Symbol',
        'bmp': '\\$\\+<->\\^`\\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20BF\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC1\uFDFC\uFDFD\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD',
        'astral': '\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEE0-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDD78\uDD7A-\uDDCB\uDDCD-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6\uDF00-\uDF92\uDF94-\uDFCA]'
    },
    {
        'name': 'Sc',
        'alias': 'Currency_Symbol',
        'bmp': '\\$\xA2-\xA5\u058F\u060B\u07FE\u07FF\u09F2\u09F3\u09FB\u0AF1\u0BF9\u0E3F\u17DB\u20A0-\u20BF\uA838\uFDFC\uFE69\uFF04\uFFE0\uFFE1\uFFE5\uFFE6',
        'astral': '\uD807[\uDFDD-\uDFE0]|\uD838\uDEFF|\uD83B\uDCB0'
    },
    {
        'name': 'Sk',
        'alias': 'Modifier_Symbol',
        'bmp': '\\^`\xA8\xAF\xB4\xB8\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u309B\u309C\uA700-\uA716\uA720\uA721\uA789\uA78A\uAB5B\uAB6A\uAB6B\uFBB2-\uFBC1\uFF3E\uFF40\uFFE3',
        'astral': '\uD83C[\uDFFB-\uDFFF]'
    },
    {
        'name': 'Sm',
        'alias': 'Math_Symbol',
        'bmp': '\\+<->\\|~\xAC\xB1\xD7\xF7\u03F6\u0606-\u0608\u2044\u2052\u207A-\u207C\u208A-\u208C\u2118\u2140-\u2144\u214B\u2190-\u2194\u219A\u219B\u21A0\u21A3\u21A6\u21AE\u21CE\u21CF\u21D2\u21D4\u21F4-\u22FF\u2320\u2321\u237C\u239B-\u23B3\u23DC-\u23E1\u25B7\u25C1\u25F8-\u25FF\u266F\u27C0-\u27C4\u27C7-\u27E5\u27F0-\u27FF\u2900-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2AFF\u2B30-\u2B44\u2B47-\u2B4C\uFB29\uFE62\uFE64-\uFE66\uFF0B\uFF1C-\uFF1E\uFF5C\uFF5E\uFFE2\uFFE9-\uFFEC',
        'astral': '\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD83B[\uDEF0\uDEF1]'
    },
    {
        'name': 'So',
        'alias': 'Other_Symbol',
        'bmp': '\xA6\xA9\xAE\xB0\u0482\u058D\u058E\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u09FA\u0B70\u0BF3-\u0BF8\u0BFA\u0C7F\u0D4F\u0D79\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116\u2117\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u214A\u214C\u214D\u214F\u218A\u218B\u2195-\u2199\u219C-\u219F\u21A1\u21A2\u21A4\u21A5\u21A7-\u21AD\u21AF-\u21CD\u21D0\u21D1\u21D3\u21D5-\u21F3\u2300-\u2307\u230C-\u231F\u2322-\u2328\u232B-\u237B\u237D-\u239A\u23B4-\u23DB\u23E2-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u25B6\u25B8-\u25C0\u25C2-\u25F7\u2600-\u266E\u2670-\u2767\u2794-\u27BF\u2800-\u28FF\u2B00-\u2B2F\u2B45\u2B46\u2B4D-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA828-\uA82B\uA836\uA837\uA839\uAA77-\uAA79\uFDFD\uFFE4\uFFE8\uFFED\uFFEE\uFFFC\uFFFD',
        'astral': '\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD807[\uDFD5-\uDFDC\uDFE1-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838\uDD4F|\uD83B[\uDCAC\uDD2E]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFA]|\uD83D[\uDC00-\uDED7\uDEE0-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDD78\uDD7A-\uDDCB\uDDCD-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6\uDF00-\uDF92\uDF94-\uDFCA]'
    },
    {
        'name': 'Z',
        'alias': 'Separator',
        'bmp': ' \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000'
    },
    {
        'name': 'Zl',
        'alias': 'Line_Separator',
        'bmp': '\u2028'
    },
    {
        'name': 'Zp',
        'alias': 'Paragraph_Separator',
        'bmp': '\u2029'
    },
    {
        'name': 'Zs',
        'alias': 'Space_Separator',
        'bmp': ' \xA0\u1680\u2000-\u200A\u202F\u205F\u3000'
    }
];

},{}],316:[function(require,module,exports){
module.exports = [
    {
        'name': 'ASCII',
        'bmp': '\0-\x7F'
    },
    {
        'name': 'Alphabetic',
        'bmp': 'A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0345\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05B0-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05EF-\u05F2\u0610-\u061A\u0620-\u0657\u0659-\u065F\u066E-\u06D3\u06D5-\u06DC\u06E1-\u06E8\u06ED-\u06EF\u06FA-\u06FC\u06FF\u0710-\u073F\u074D-\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0817\u081A-\u082C\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u08D4-\u08DF\u08E3-\u08E9\u08F0-\u093B\u093D-\u094C\u094E-\u0950\u0955-\u0963\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C4\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09F0\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A42\u0A47\u0A48\u0A4B\u0A4C\u0A51\u0A59-\u0A5C\u0A5E\u0A70-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC5\u0AC7-\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0-\u0AE3\u0AF9-\u0AFC\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D-\u0B44\u0B47\u0B48\u0B4B\u0B4C\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4C\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCC\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CF1\u0CF2\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D7A-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E46\u0E4D\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0ECD\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F71-\u0F81\u0F88-\u0F97\u0F99-\u0FBC\u1000-\u1036\u1038\u103B-\u103F\u1050-\u108F\u109A-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1713\u1720-\u1733\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17B3\u17B6-\u17C8\u17D7\u17DC\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u1938\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A1B\u1A20-\u1A5E\u1A61-\u1A74\u1AA7\u1ABF\u1AC0\u1B00-\u1B33\u1B35-\u1B43\u1B45-\u1B4B\u1B80-\u1BA9\u1BAC-\u1BAF\u1BBA-\u1BE5\u1BE7-\u1BF1\u1C00-\u1C36\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1DE7-\u1DF4\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u24B6-\u24E9\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA674-\uA67B\uA67F-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA805\uA807-\uA827\uA840-\uA873\uA880-\uA8C3\uA8C5\uA8F2-\uA8F7\uA8FB\uA8FD-\uA8FF\uA90A-\uA92A\uA930-\uA952\uA960-\uA97C\uA980-\uA9B2\uA9B4-\uA9BF\uA9CF\uA9E0-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA60-\uAA76\uAA7A-\uAABE\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABEA\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC',
        'astral': '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD27\uDE80-\uDEA9\uDEAB\uDEAC\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC00-\uDC45\uDC82-\uDCB8\uDCD0-\uDCE8\uDD00-\uDD32\uDD44-\uDD47\uDD50-\uDD72\uDD76\uDD80-\uDDBF\uDDC1-\uDDC4\uDDCE\uDDCF\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE34\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEE8\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D-\uDF44\uDF47\uDF48\uDF4B\uDF4C\uDF50\uDF57\uDF5D-\uDF63]|\uD805[\uDC00-\uDC41\uDC43-\uDC45\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCC1\uDCC4\uDCC5\uDCC7\uDD80-\uDDB5\uDDB8-\uDDBE\uDDD8-\uDDDD\uDE00-\uDE3E\uDE40\uDE44\uDE80-\uDEB5\uDEB8\uDF00-\uDF1A\uDF1D-\uDF2A]|\uD806[\uDC00-\uDC38\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD35\uDD37\uDD38\uDD3B\uDD3C\uDD3F-\uDD42\uDDA0-\uDDA7\uDDAA-\uDDD7\uDDDA-\uDDDF\uDDE1\uDDE3\uDDE4\uDE00-\uDE32\uDE35-\uDE3E\uDE50-\uDE97\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC3E\uDC40\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD41\uDD43\uDD46\uDD47\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD96\uDD98\uDEE0-\uDEF6\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF4F-\uDF87\uDF8F-\uDF9F\uDFE0\uDFE1\uDFE3\uDFF0\uDFF1]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9E]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDEC0-\uDEEB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD47\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]'
    },
    {
        'name': 'Any',
        'isBmpLast': true,
        'bmp': '\0-\uFFFF',
        'astral': '[\uD800-\uDBFF][\uDC00-\uDFFF]'
    },
    {
        'name': 'Default_Ignorable_Code_Point',
        'bmp': '\xAD\u034F\u061C\u115F\u1160\u17B4\u17B5\u180B-\u180E\u200B-\u200F\u202A-\u202E\u2060-\u206F\u3164\uFE00-\uFE0F\uFEFF\uFFA0\uFFF0-\uFFF8',
        'astral': '\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|[\uDB40-\uDB43][\uDC00-\uDFFF]'
    },
    {
        'name': 'Lowercase',
        'bmp': 'a-z\xAA\xB5\xBA\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02B8\u02C0\u02C1\u02E0-\u02E4\u0345\u0371\u0373\u0377\u037A-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1DBF\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u2071\u207F\u2090-\u209C\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2170-\u217F\u2184\u24D0-\u24E9\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7D\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B-\uA69D\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C3\uA7C8\uA7CA\uA7F6\uA7F8-\uA7FA\uAB30-\uAB5A\uAB5C-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A',
        'astral': '\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43]'
    },
    {
        'name': 'Noncharacter_Code_Point',
        'bmp': '\uFDD0-\uFDEF\uFFFE\uFFFF',
        'astral': '[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]'
    },
    {
        'name': 'Uppercase',
        'bmp': 'A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2160-\u216F\u2183\u24B6-\u24CF\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C2\uA7C4-\uA7C7\uA7C9\uA7F5\uFF21-\uFF3A',
        'astral': '\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]'
    },
    {
        'name': 'White_Space',
        'bmp': '\t-\r \x85\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000'
    }
];

},{}],317:[function(require,module,exports){
module.exports = [
    {
        'name': 'Adlam',
        'astral': '\uD83A[\uDD00-\uDD4B\uDD50-\uDD59\uDD5E\uDD5F]'
    },
    {
        'name': 'Ahom',
        'astral': '\uD805[\uDF00-\uDF1A\uDF1D-\uDF2B\uDF30-\uDF3F]'
    },
    {
        'name': 'Anatolian_Hieroglyphs',
        'astral': '\uD811[\uDC00-\uDE46]'
    },
    {
        'name': 'Arabic',
        'bmp': '\u0600-\u0604\u0606-\u060B\u060D-\u061A\u061C\u061E\u0620-\u063F\u0641-\u064A\u0656-\u066F\u0671-\u06DC\u06DE-\u06FF\u0750-\u077F\u08A0-\u08B4\u08B6-\u08C7\u08D3-\u08E1\u08E3-\u08FF\uFB50-\uFBC1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFD\uFE70-\uFE74\uFE76-\uFEFC',
        'astral': '\uD803[\uDE60-\uDE7E]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB\uDEF0\uDEF1]'
    },
    {
        'name': 'Armenian',
        'bmp': '\u0531-\u0556\u0559-\u058A\u058D-\u058F\uFB13-\uFB17'
    },
    {
        'name': 'Avestan',
        'astral': '\uD802[\uDF00-\uDF35\uDF39-\uDF3F]'
    },
    {
        'name': 'Balinese',
        'bmp': '\u1B00-\u1B4B\u1B50-\u1B7C'
    },
    {
        'name': 'Bamum',
        'bmp': '\uA6A0-\uA6F7',
        'astral': '\uD81A[\uDC00-\uDE38]'
    },
    {
        'name': 'Bassa_Vah',
        'astral': '\uD81A[\uDED0-\uDEED\uDEF0-\uDEF5]'
    },
    {
        'name': 'Batak',
        'bmp': '\u1BC0-\u1BF3\u1BFC-\u1BFF'
    },
    {
        'name': 'Bengali',
        'bmp': '\u0980-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09FE'
    },
    {
        'name': 'Bhaiksuki',
        'astral': '\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC45\uDC50-\uDC6C]'
    },
    {
        'name': 'Bopomofo',
        'bmp': '\u02EA\u02EB\u3105-\u312F\u31A0-\u31BF'
    },
    {
        'name': 'Brahmi',
        'astral': '\uD804[\uDC00-\uDC4D\uDC52-\uDC6F\uDC7F]'
    },
    {
        'name': 'Braille',
        'bmp': '\u2800-\u28FF'
    },
    {
        'name': 'Buginese',
        'bmp': '\u1A00-\u1A1B\u1A1E\u1A1F'
    },
    {
        'name': 'Buhid',
        'bmp': '\u1740-\u1753'
    },
    {
        'name': 'Canadian_Aboriginal',
        'bmp': '\u1400-\u167F\u18B0-\u18F5'
    },
    {
        'name': 'Carian',
        'astral': '\uD800[\uDEA0-\uDED0]'
    },
    {
        'name': 'Caucasian_Albanian',
        'astral': '\uD801[\uDD30-\uDD63\uDD6F]'
    },
    {
        'name': 'Chakma',
        'astral': '\uD804[\uDD00-\uDD34\uDD36-\uDD47]'
    },
    {
        'name': 'Cham',
        'bmp': '\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA5C-\uAA5F'
    },
    {
        'name': 'Cherokee',
        'bmp': '\u13A0-\u13F5\u13F8-\u13FD\uAB70-\uABBF'
    },
    {
        'name': 'Chorasmian',
        'astral': '\uD803[\uDFB0-\uDFCB]'
    },
    {
        'name': 'Common',
        'bmp': '\0-@\\[-`\\{-\xA9\xAB-\xB9\xBB-\xBF\xD7\xF7\u02B9-\u02DF\u02E5-\u02E9\u02EC-\u02FF\u0374\u037E\u0385\u0387\u0605\u060C\u061B\u061F\u0640\u06DD\u08E2\u0964\u0965\u0E3F\u0FD5-\u0FD8\u10FB\u16EB-\u16ED\u1735\u1736\u1802\u1803\u1805\u1CD3\u1CE1\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5-\u1CF7\u1CFA\u2000-\u200B\u200E-\u2064\u2066-\u2070\u2074-\u207E\u2080-\u208E\u20A0-\u20BF\u2100-\u2125\u2127-\u2129\u212C-\u2131\u2133-\u214D\u214F-\u215F\u2189-\u218B\u2190-\u2426\u2440-\u244A\u2460-\u27FF\u2900-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2E00-\u2E52\u2FF0-\u2FFB\u3000-\u3004\u3006\u3008-\u3020\u3030-\u3037\u303C-\u303F\u309B\u309C\u30A0\u30FB\u30FC\u3190-\u319F\u31C0-\u31E3\u3220-\u325F\u327F-\u32CF\u32FF\u3358-\u33FF\u4DC0-\u4DFF\uA700-\uA721\uA788-\uA78A\uA830-\uA839\uA92E\uA9CF\uAB5B\uAB6A\uAB6B\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFEFF\uFF01-\uFF20\uFF3B-\uFF40\uFF5B-\uFF65\uFF70\uFF9E\uFF9F\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD',
        'astral': '\uD800[\uDD00-\uDD02\uDD07-\uDD33\uDD37-\uDD3F\uDD90-\uDD9C\uDDD0-\uDDFC\uDEE1-\uDEFB]|\uD81B[\uDFE2\uDFE3]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD66\uDD6A-\uDD7A\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDEE0-\uDEF3\uDF00-\uDF56\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDFCB\uDFCE-\uDFFF]|\uD83B[\uDC71-\uDCB4\uDD01-\uDD3D]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD00-\uDDAD\uDDE6-\uDDFF\uDE01\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEE0-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDD78\uDD7A-\uDDCB\uDDCD-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6\uDF00-\uDF92\uDF94-\uDFCA\uDFF0-\uDFF9]|\uDB40[\uDC01\uDC20-\uDC7F]'
    },
    {
        'name': 'Coptic',
        'bmp': '\u03E2-\u03EF\u2C80-\u2CF3\u2CF9-\u2CFF'
    },
    {
        'name': 'Cuneiform',
        'astral': '\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC70-\uDC74\uDC80-\uDD43]'
    },
    {
        'name': 'Cypriot',
        'astral': '\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F]'
    },
    {
        'name': 'Cyrillic',
        'bmp': '\u0400-\u0484\u0487-\u052F\u1C80-\u1C88\u1D2B\u1D78\u2DE0-\u2DFF\uA640-\uA69F\uFE2E\uFE2F'
    },
    {
        'name': 'Deseret',
        'astral': '\uD801[\uDC00-\uDC4F]'
    },
    {
        'name': 'Devanagari',
        'bmp': '\u0900-\u0950\u0955-\u0963\u0966-\u097F\uA8E0-\uA8FF'
    },
    {
        'name': 'Dives_Akuru',
        'astral': '\uD806[\uDD00-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD35\uDD37\uDD38\uDD3B-\uDD46\uDD50-\uDD59]'
    },
    {
        'name': 'Dogra',
        'astral': '\uD806[\uDC00-\uDC3B]'
    },
    {
        'name': 'Duployan',
        'astral': '\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9C-\uDC9F]'
    },
    {
        'name': 'Egyptian_Hieroglyphs',
        'astral': '\uD80C[\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E\uDC30-\uDC38]'
    },
    {
        'name': 'Elbasan',
        'astral': '\uD801[\uDD00-\uDD27]'
    },
    {
        'name': 'Elymaic',
        'astral': '\uD803[\uDFE0-\uDFF6]'
    },
    {
        'name': 'Ethiopic',
        'bmp': '\u1200-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u137C\u1380-\u1399\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E'
    },
    {
        'name': 'Georgian',
        'bmp': '\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u10FF\u1C90-\u1CBA\u1CBD-\u1CBF\u2D00-\u2D25\u2D27\u2D2D'
    },
    {
        'name': 'Glagolitic',
        'bmp': '\u2C00-\u2C2E\u2C30-\u2C5E',
        'astral': '\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]'
    },
    {
        'name': 'Gothic',
        'astral': '\uD800[\uDF30-\uDF4A]'
    },
    {
        'name': 'Grantha',
        'astral': '\uD804[\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]'
    },
    {
        'name': 'Greek',
        'bmp': '\u0370-\u0373\u0375-\u0377\u037A-\u037D\u037F\u0384\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03E1\u03F0-\u03FF\u1D26-\u1D2A\u1D5D-\u1D61\u1D66-\u1D6A\u1DBF\u1F00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FC4\u1FC6-\u1FD3\u1FD6-\u1FDB\u1FDD-\u1FEF\u1FF2-\u1FF4\u1FF6-\u1FFE\u2126\uAB65',
        'astral': '\uD800[\uDD40-\uDD8E\uDDA0]|\uD834[\uDE00-\uDE45]'
    },
    {
        'name': 'Gujarati',
        'bmp': '\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AF1\u0AF9-\u0AFF'
    },
    {
        'name': 'Gunjala_Gondi',
        'astral': '\uD807[\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD98\uDDA0-\uDDA9]'
    },
    {
        'name': 'Gurmukhi',
        'bmp': '\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A76'
    },
    {
        'name': 'Han',
        'bmp': '\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u3005\u3007\u3021-\u3029\u3038-\u303B\u3400-\u4DBF\u4E00-\u9FFC\uF900-\uFA6D\uFA70-\uFAD9',
        'astral': '\uD81B[\uDFF0\uDFF1]|[\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]'
    },
    {
        'name': 'Hangul',
        'bmp': '\u1100-\u11FF\u302E\u302F\u3131-\u318E\u3200-\u321E\u3260-\u327E\uA960-\uA97C\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC'
    },
    {
        'name': 'Hanifi_Rohingya',
        'astral': '\uD803[\uDD00-\uDD27\uDD30-\uDD39]'
    },
    {
        'name': 'Hanunoo',
        'bmp': '\u1720-\u1734'
    },
    {
        'name': 'Hatran',
        'astral': '\uD802[\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDCFF]'
    },
    {
        'name': 'Hebrew',
        'bmp': '\u0591-\u05C7\u05D0-\u05EA\u05EF-\u05F4\uFB1D-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFB4F'
    },
    {
        'name': 'Hiragana',
        'bmp': '\u3041-\u3096\u309D-\u309F',
        'astral': '\uD82C[\uDC01-\uDD1E\uDD50-\uDD52]|\uD83C\uDE00'
    },
    {
        'name': 'Imperial_Aramaic',
        'astral': '\uD802[\uDC40-\uDC55\uDC57-\uDC5F]'
    },
    {
        'name': 'Inherited',
        'bmp': '\u0300-\u036F\u0485\u0486\u064B-\u0655\u0670\u0951-\u0954\u1AB0-\u1AC0\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u200D\u20D0-\u20F0\u302A-\u302D\u3099\u309A\uFE00-\uFE0F\uFE20-\uFE2D',
        'astral': '\uD800[\uDDFD\uDEE0]|\uD804\uDF3B|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD]|\uDB40[\uDD00-\uDDEF]'
    },
    {
        'name': 'Inscriptional_Pahlavi',
        'astral': '\uD802[\uDF60-\uDF72\uDF78-\uDF7F]'
    },
    {
        'name': 'Inscriptional_Parthian',
        'astral': '\uD802[\uDF40-\uDF55\uDF58-\uDF5F]'
    },
    {
        'name': 'Javanese',
        'bmp': '\uA980-\uA9CD\uA9D0-\uA9D9\uA9DE\uA9DF'
    },
    {
        'name': 'Kaithi',
        'astral': '\uD804[\uDC80-\uDCC1\uDCCD]'
    },
    {
        'name': 'Kannada',
        'bmp': '\u0C80-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2'
    },
    {
        'name': 'Katakana',
        'bmp': '\u30A1-\u30FA\u30FD-\u30FF\u31F0-\u31FF\u32D0-\u32FE\u3300-\u3357\uFF66-\uFF6F\uFF71-\uFF9D',
        'astral': '\uD82C[\uDC00\uDD64-\uDD67]'
    },
    {
        'name': 'Kayah_Li',
        'bmp': '\uA900-\uA92D\uA92F'
    },
    {
        'name': 'Kharoshthi',
        'astral': '\uD802[\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE38-\uDE3A\uDE3F-\uDE48\uDE50-\uDE58]'
    },
    {
        'name': 'Khitan_Small_Script',
        'astral': '\uD81B\uDFE4|\uD822[\uDF00-\uDFFF]|\uD823[\uDC00-\uDCD5]'
    },
    {
        'name': 'Khmer',
        'bmp': '\u1780-\u17DD\u17E0-\u17E9\u17F0-\u17F9\u19E0-\u19FF'
    },
    {
        'name': 'Khojki',
        'astral': '\uD804[\uDE00-\uDE11\uDE13-\uDE3E]'
    },
    {
        'name': 'Khudawadi',
        'astral': '\uD804[\uDEB0-\uDEEA\uDEF0-\uDEF9]'
    },
    {
        'name': 'Lao',
        'bmp': '\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF'
    },
    {
        'name': 'Latin',
        'bmp': 'A-Za-z\xAA\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u02E0-\u02E4\u1D00-\u1D25\u1D2C-\u1D5C\u1D62-\u1D65\u1D6B-\u1D77\u1D79-\u1DBE\u1E00-\u1EFF\u2071\u207F\u2090-\u209C\u212A\u212B\u2132\u214E\u2160-\u2188\u2C60-\u2C7F\uA722-\uA787\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA7FF\uAB30-\uAB5A\uAB5C-\uAB64\uAB66-\uAB69\uFB00-\uFB06\uFF21-\uFF3A\uFF41-\uFF5A'
    },
    {
        'name': 'Lepcha',
        'bmp': '\u1C00-\u1C37\u1C3B-\u1C49\u1C4D-\u1C4F'
    },
    {
        'name': 'Limbu',
        'bmp': '\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1940\u1944-\u194F'
    },
    {
        'name': 'Linear_A',
        'astral': '\uD801[\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]'
    },
    {
        'name': 'Linear_B',
        'astral': '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA]'
    },
    {
        'name': 'Lisu',
        'bmp': '\uA4D0-\uA4FF',
        'astral': '\uD807\uDFB0'
    },
    {
        'name': 'Lycian',
        'astral': '\uD800[\uDE80-\uDE9C]'
    },
    {
        'name': 'Lydian',
        'astral': '\uD802[\uDD20-\uDD39\uDD3F]'
    },
    {
        'name': 'Mahajani',
        'astral': '\uD804[\uDD50-\uDD76]'
    },
    {
        'name': 'Makasar',
        'astral': '\uD807[\uDEE0-\uDEF8]'
    },
    {
        'name': 'Malayalam',
        'bmp': '\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4F\u0D54-\u0D63\u0D66-\u0D7F'
    },
    {
        'name': 'Mandaic',
        'bmp': '\u0840-\u085B\u085E'
    },
    {
        'name': 'Manichaean',
        'astral': '\uD802[\uDEC0-\uDEE6\uDEEB-\uDEF6]'
    },
    {
        'name': 'Marchen',
        'astral': '\uD807[\uDC70-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]'
    },
    {
        'name': 'Masaram_Gondi',
        'astral': '\uD807[\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]'
    },
    {
        'name': 'Medefaidrin',
        'astral': '\uD81B[\uDE40-\uDE9A]'
    },
    {
        'name': 'Meetei_Mayek',
        'bmp': '\uAAE0-\uAAF6\uABC0-\uABED\uABF0-\uABF9'
    },
    {
        'name': 'Mende_Kikakui',
        'astral': '\uD83A[\uDC00-\uDCC4\uDCC7-\uDCD6]'
    },
    {
        'name': 'Meroitic_Cursive',
        'astral': '\uD802[\uDDA0-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDDFF]'
    },
    {
        'name': 'Meroitic_Hieroglyphs',
        'astral': '\uD802[\uDD80-\uDD9F]'
    },
    {
        'name': 'Miao',
        'astral': '\uD81B[\uDF00-\uDF4A\uDF4F-\uDF87\uDF8F-\uDF9F]'
    },
    {
        'name': 'Modi',
        'astral': '\uD805[\uDE00-\uDE44\uDE50-\uDE59]'
    },
    {
        'name': 'Mongolian',
        'bmp': '\u1800\u1801\u1804\u1806-\u180E\u1810-\u1819\u1820-\u1878\u1880-\u18AA',
        'astral': '\uD805[\uDE60-\uDE6C]'
    },
    {
        'name': 'Mro',
        'astral': '\uD81A[\uDE40-\uDE5E\uDE60-\uDE69\uDE6E\uDE6F]'
    },
    {
        'name': 'Multani',
        'astral': '\uD804[\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA9]'
    },
    {
        'name': 'Myanmar',
        'bmp': '\u1000-\u109F\uA9E0-\uA9FE\uAA60-\uAA7F'
    },
    {
        'name': 'Nabataean',
        'astral': '\uD802[\uDC80-\uDC9E\uDCA7-\uDCAF]'
    },
    {
        'name': 'Nandinagari',
        'astral': '\uD806[\uDDA0-\uDDA7\uDDAA-\uDDD7\uDDDA-\uDDE4]'
    },
    {
        'name': 'New_Tai_Lue',
        'bmp': '\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u19DE\u19DF'
    },
    {
        'name': 'Newa',
        'astral': '\uD805[\uDC00-\uDC5B\uDC5D-\uDC61]'
    },
    {
        'name': 'Nko',
        'bmp': '\u07C0-\u07FA\u07FD-\u07FF'
    },
    {
        'name': 'Nushu',
        'astral': '\uD81B\uDFE1|\uD82C[\uDD70-\uDEFB]'
    },
    {
        'name': 'Nyiakeng_Puachue_Hmong',
        'astral': '\uD838[\uDD00-\uDD2C\uDD30-\uDD3D\uDD40-\uDD49\uDD4E\uDD4F]'
    },
    {
        'name': 'Ogham',
        'bmp': '\u1680-\u169C'
    },
    {
        'name': 'Ol_Chiki',
        'bmp': '\u1C50-\u1C7F'
    },
    {
        'name': 'Old_Hungarian',
        'astral': '\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDCFF]'
    },
    {
        'name': 'Old_Italic',
        'astral': '\uD800[\uDF00-\uDF23\uDF2D-\uDF2F]'
    },
    {
        'name': 'Old_North_Arabian',
        'astral': '\uD802[\uDE80-\uDE9F]'
    },
    {
        'name': 'Old_Permic',
        'astral': '\uD800[\uDF50-\uDF7A]'
    },
    {
        'name': 'Old_Persian',
        'astral': '\uD800[\uDFA0-\uDFC3\uDFC8-\uDFD5]'
    },
    {
        'name': 'Old_Sogdian',
        'astral': '\uD803[\uDF00-\uDF27]'
    },
    {
        'name': 'Old_South_Arabian',
        'astral': '\uD802[\uDE60-\uDE7F]'
    },
    {
        'name': 'Old_Turkic',
        'astral': '\uD803[\uDC00-\uDC48]'
    },
    {
        'name': 'Oriya',
        'bmp': '\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B77'
    },
    {
        'name': 'Osage',
        'astral': '\uD801[\uDCB0-\uDCD3\uDCD8-\uDCFB]'
    },
    {
        'name': 'Osmanya',
        'astral': '\uD801[\uDC80-\uDC9D\uDCA0-\uDCA9]'
    },
    {
        'name': 'Pahawh_Hmong',
        'astral': '\uD81A[\uDF00-\uDF45\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]'
    },
    {
        'name': 'Palmyrene',
        'astral': '\uD802[\uDC60-\uDC7F]'
    },
    {
        'name': 'Pau_Cin_Hau',
        'astral': '\uD806[\uDEC0-\uDEF8]'
    },
    {
        'name': 'Phags_Pa',
        'bmp': '\uA840-\uA877'
    },
    {
        'name': 'Phoenician',
        'astral': '\uD802[\uDD00-\uDD1B\uDD1F]'
    },
    {
        'name': 'Psalter_Pahlavi',
        'astral': '\uD802[\uDF80-\uDF91\uDF99-\uDF9C\uDFA9-\uDFAF]'
    },
    {
        'name': 'Rejang',
        'bmp': '\uA930-\uA953\uA95F'
    },
    {
        'name': 'Runic',
        'bmp': '\u16A0-\u16EA\u16EE-\u16F8'
    },
    {
        'name': 'Samaritan',
        'bmp': '\u0800-\u082D\u0830-\u083E'
    },
    {
        'name': 'Saurashtra',
        'bmp': '\uA880-\uA8C5\uA8CE-\uA8D9'
    },
    {
        'name': 'Sharada',
        'astral': '\uD804[\uDD80-\uDDDF]'
    },
    {
        'name': 'Shavian',
        'astral': '\uD801[\uDC50-\uDC7F]'
    },
    {
        'name': 'Siddham',
        'astral': '\uD805[\uDD80-\uDDB5\uDDB8-\uDDDD]'
    },
    {
        'name': 'SignWriting',
        'astral': '\uD836[\uDC00-\uDE8B\uDE9B-\uDE9F\uDEA1-\uDEAF]'
    },
    {
        'name': 'Sinhala',
        'bmp': '\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4',
        'astral': '\uD804[\uDDE1-\uDDF4]'
    },
    {
        'name': 'Sogdian',
        'astral': '\uD803[\uDF30-\uDF59]'
    },
    {
        'name': 'Sora_Sompeng',
        'astral': '\uD804[\uDCD0-\uDCE8\uDCF0-\uDCF9]'
    },
    {
        'name': 'Soyombo',
        'astral': '\uD806[\uDE50-\uDEA2]'
    },
    {
        'name': 'Sundanese',
        'bmp': '\u1B80-\u1BBF\u1CC0-\u1CC7'
    },
    {
        'name': 'Syloti_Nagri',
        'bmp': '\uA800-\uA82C'
    },
    {
        'name': 'Syriac',
        'bmp': '\u0700-\u070D\u070F-\u074A\u074D-\u074F\u0860-\u086A'
    },
    {
        'name': 'Tagalog',
        'bmp': '\u1700-\u170C\u170E-\u1714'
    },
    {
        'name': 'Tagbanwa',
        'bmp': '\u1760-\u176C\u176E-\u1770\u1772\u1773'
    },
    {
        'name': 'Tai_Le',
        'bmp': '\u1950-\u196D\u1970-\u1974'
    },
    {
        'name': 'Tai_Tham',
        'bmp': '\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD'
    },
    {
        'name': 'Tai_Viet',
        'bmp': '\uAA80-\uAAC2\uAADB-\uAADF'
    },
    {
        'name': 'Takri',
        'astral': '\uD805[\uDE80-\uDEB8\uDEC0-\uDEC9]'
    },
    {
        'name': 'Tamil',
        'bmp': '\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BFA',
        'astral': '\uD807[\uDFC0-\uDFF1\uDFFF]'
    },
    {
        'name': 'Tangut',
        'astral': '\uD81B\uDFE0|[\uD81C-\uD820][\uDC00-\uDFFF]|\uD821[\uDC00-\uDFF7]|\uD822[\uDC00-\uDEFF]|\uD823[\uDD00-\uDD08]'
    },
    {
        'name': 'Telugu',
        'bmp': '\u0C00-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C77-\u0C7F'
    },
    {
        'name': 'Thaana',
        'bmp': '\u0780-\u07B1'
    },
    {
        'name': 'Thai',
        'bmp': '\u0E01-\u0E3A\u0E40-\u0E5B'
    },
    {
        'name': 'Tibetan',
        'bmp': '\u0F00-\u0F47\u0F49-\u0F6C\u0F71-\u0F97\u0F99-\u0FBC\u0FBE-\u0FCC\u0FCE-\u0FD4\u0FD9\u0FDA'
    },
    {
        'name': 'Tifinagh',
        'bmp': '\u2D30-\u2D67\u2D6F\u2D70\u2D7F'
    },
    {
        'name': 'Tirhuta',
        'astral': '\uD805[\uDC80-\uDCC7\uDCD0-\uDCD9]'
    },
    {
        'name': 'Ugaritic',
        'astral': '\uD800[\uDF80-\uDF9D\uDF9F]'
    },
    {
        'name': 'Vai',
        'bmp': '\uA500-\uA62B'
    },
    {
        'name': 'Wancho',
        'astral': '\uD838[\uDEC0-\uDEF9\uDEFF]'
    },
    {
        'name': 'Warang_Citi',
        'astral': '\uD806[\uDCA0-\uDCF2\uDCFF]'
    },
    {
        'name': 'Yezidi',
        'astral': '\uD803[\uDE80-\uDEA9\uDEAB-\uDEAD\uDEB0\uDEB1]'
    },
    {
        'name': 'Yi',
        'bmp': '\uA000-\uA48C\uA490-\uA4C6'
    },
    {
        'name': 'Zanabazar_Square',
        'astral': '\uD806[\uDE00-\uDE47]'
    }
];

},{}],318:[function(require,module,exports){

var zip = require('zip');

function createUrl(src){
  var blob = new Blob([src], { type: 'application/javascript' });
  return URL.createObjectURL(blob);
}

var zWorker = createUrl("/* jshint worker:true */\n(function main(global) {\n\t\"use strict\";\n\n\tif (global.zWorkerInitialized)\n\t\tthrow new Error('z-worker.js should be run only once');\n\tglobal.zWorkerInitialized = true;\n\n\taddEventListener(\"message\", function(event) {\n\t\tvar message = event.data, type = message.type, sn = message.sn;\n\t\tvar handler = handlers[type];\n\t\tif (handler) {\n\t\t\ttry {\n\t\t\t\thandler(message);\n\t\t\t} catch (e) {\n\t\t\t\tonError(type, sn, e);\n\t\t\t}\n\t\t}\n\t\t//for debug\n\t\t//postMessage({type: 'echo', originalType: type, sn: sn});\n\t});\n\n\tvar handlers = {\n\t\timportScripts: doImportScripts,\n\t\tnewTask: newTask,\n\t\tappend: processData,\n\t\tflush: processData,\n\t};\n\n\t// deflater/inflater tasks indexed by serial numbers\n\tvar tasks = {};\n\n\tfunction doImportScripts(msg) {\n\t\tif (msg.scripts && msg.scripts.length > 0)\n\t\t\timportScripts.apply(undefined, msg.scripts);\n\t\tpostMessage({type: 'importScripts'});\n\t}\n\n\tfunction newTask(msg) {\n\t\tvar CodecClass = global[msg.codecClass];\n\t\tvar sn = msg.sn;\n\t\tif (tasks[sn])\n\t\t\tthrow Error('duplicated sn');\n\t\ttasks[sn] =  {\n\t\t\tcodec: new CodecClass(msg.options),\n\t\t\tcrcInput: msg.crcType === 'input',\n\t\t\tcrcOutput: msg.crcType === 'output',\n\t\t\tcrc: new Crc32(),\n\t\t};\n\t\tpostMessage({type: 'newTask', sn: sn});\n\t}\n\n\t// performance may not be supported\n\tvar now = global.performance ? global.performance.now.bind(global.performance) : Date.now;\n\n\tfunction processData(msg) {\n\t\tvar sn = msg.sn, type = msg.type, input = msg.data;\n\t\tvar task = tasks[sn];\n\t\t// allow creating codec on first append\n\t\tif (!task && msg.codecClass) {\n\t\t\tnewTask(msg);\n\t\t\ttask = tasks[sn];\n\t\t}\n\t\tvar isAppend = type === 'append';\n\t\tvar start = now();\n\t\tvar output;\n\t\tif (isAppend) {\n\t\t\ttry {\n\t\t\t\toutput = task.codec.append(input, function onprogress(loaded) {\n\t\t\t\t\tpostMessage({type: 'progress', sn: sn, loaded: loaded});\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tdelete tasks[sn];\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t} else {\n\t\t\tdelete tasks[sn];\n\t\t\toutput = task.codec.flush();\n\t\t}\n\t\tvar codecTime = now() - start;\n\n\t\tstart = now();\n\t\tif (input && task.crcInput)\n\t\t\ttask.crc.append(input);\n\t\tif (output && task.crcOutput)\n\t\t\ttask.crc.append(output);\n\t\tvar crcTime = now() - start;\n\n\t\tvar rmsg = {type: type, sn: sn, codecTime: codecTime, crcTime: crcTime};\n\t\tvar transferables = [];\n\t\tif (output) {\n\t\t\trmsg.data = output;\n\t\t\ttransferables.push(output.buffer);\n\t\t}\n\t\tif (!isAppend && (task.crcInput || task.crcOutput))\n\t\t\trmsg.crc = task.crc.get();\n\t\t\n\t\t// posting a message with transferables will fail on IE10\n\t\ttry {\n\t\t\tpostMessage(rmsg, transferables);\n\t\t} catch(ex) {\n\t\t\tpostMessage(rmsg); // retry without transferables\n\t\t}\n\t}\n\n\tfunction onError(type, sn, e) {\n\t\tvar msg = {\n\t\t\ttype: type,\n\t\t\tsn: sn,\n\t\t\terror: formatError(e)\n\t\t};\n\t\tpostMessage(msg);\n\t}\n\n\tfunction formatError(e) {\n\t\treturn { message: e.message, stack: e.stack };\n\t}\n\n\t// Crc32 code copied from file zip.js\n\tfunction Crc32() {\n\t\tthis.crc = -1;\n\t}\n\tCrc32.prototype.append = function append(data) {\n\t\tvar crc = this.crc | 0, table = this.table;\n\t\tfor (var offset = 0, len = data.length | 0; offset < len; offset++)\n\t\t\tcrc = (crc >>> 8) ^ table[(crc ^ data[offset]) & 0xFF];\n\t\tthis.crc = crc;\n\t};\n\tCrc32.prototype.get = function get() {\n\t\treturn ~this.crc;\n\t};\n\tCrc32.prototype.table = (function() {\n\t\tvar i, j, t, table = []; // Uint32Array is actually slower than []\n\t\tfor (i = 0; i < 256; i++) {\n\t\t\tt = i;\n\t\t\tfor (j = 0; j < 8; j++)\n\t\t\t\tif (t & 1)\n\t\t\t\t\tt = (t >>> 1) ^ 0xEDB88320;\n\t\t\t\telse\n\t\t\t\t\tt = t >>> 1;\n\t\t\ttable[i] = t;\n\t\t}\n\t\treturn table;\n\t})();\n\n\t// \"no-op\" codec\n\tfunction NOOP() {}\n\tglobal.NOOP = NOOP;\n\tNOOP.prototype.append = function append(bytes, onprogress) {\n\t\treturn bytes;\n\t};\n\tNOOP.prototype.flush = function flush() {};\n})(this);\n");
zip.workerScripts = {
  deflater: [zWorker, createUrl("/*\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.\n * JZlib is based on zlib-1.1.3, so all credit should go authors\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\n * and contributors of zlib.\n */\n\n(function(global) {\n\t\"use strict\";\n\n\t// Global\n\n\tvar MAX_BITS = 15;\n\tvar D_CODES = 30;\n\tvar BL_CODES = 19;\n\n\tvar LENGTH_CODES = 29;\n\tvar LITERALS = 256;\n\tvar L_CODES = (LITERALS + 1 + LENGTH_CODES);\n\tvar HEAP_SIZE = (2 * L_CODES + 1);\n\n\tvar END_BLOCK = 256;\n\n\t// Bit length codes must not exceed MAX_BL_BITS bits\n\tvar MAX_BL_BITS = 7;\n\n\t// repeat previous bit length 3-6 times (2 bits of repeat count)\n\tvar REP_3_6 = 16;\n\n\t// repeat a zero length 3-10 times (3 bits of repeat count)\n\tvar REPZ_3_10 = 17;\n\n\t// repeat a zero length 11-138 times (7 bits of repeat count)\n\tvar REPZ_11_138 = 18;\n\n\t// The lengths of the bit length codes are sent in order of decreasing\n\t// probability, to avoid transmitting the lengths for unused bit\n\t// length codes.\n\n\tvar Buf_size = 8 * 2;\n\n\t// JZlib version : \"1.0.2\"\n\tvar Z_DEFAULT_COMPRESSION = -1;\n\n\t// compression strategy\n\tvar Z_FILTERED = 1;\n\tvar Z_HUFFMAN_ONLY = 2;\n\tvar Z_DEFAULT_STRATEGY = 0;\n\n\tvar Z_NO_FLUSH = 0;\n\tvar Z_PARTIAL_FLUSH = 1;\n\tvar Z_FULL_FLUSH = 3;\n\tvar Z_FINISH = 4;\n\n\tvar Z_OK = 0;\n\tvar Z_STREAM_END = 1;\n\tvar Z_NEED_DICT = 2;\n\tvar Z_STREAM_ERROR = -2;\n\tvar Z_DATA_ERROR = -3;\n\tvar Z_BUF_ERROR = -5;\n\n\t// Tree\n\n\t// see definition of array dist_code below\n\tvar _dist_code = [ 0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n\t\t\t10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n\t\t\t12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n\t\t\t13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n\t\t\t14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n\t\t\t14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n\t\t\t15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 16, 17, 18, 18, 19, 19,\n\t\t\t20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n\t\t\t24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n\t\t\t26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,\n\t\t\t27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,\n\t\t\t28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29,\n\t\t\t29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,\n\t\t\t29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 ];\n\n\tfunction Tree() {\n\t\tvar that = this;\n\n\t\t// dyn_tree; // the dynamic tree\n\t\t// max_code; // largest code with non zero frequency\n\t\t// stat_desc; // the corresponding static tree\n\n\t\t// Compute the optimal bit lengths for a tree and update the total bit\n\t\t// length\n\t\t// for the current block.\n\t\t// IN assertion: the fields freq and dad are set, heap[heap_max] and\n\t\t// above are the tree nodes sorted by increasing frequency.\n\t\t// OUT assertions: the field len is set to the optimal bit length, the\n\t\t// array bl_count contains the frequencies for each bit length.\n\t\t// The length opt_len is updated; static_len is also updated if stree is\n\t\t// not null.\n\t\tfunction gen_bitlen(s) {\n\t\t\tvar tree = that.dyn_tree;\n\t\t\tvar stree = that.stat_desc.static_tree;\n\t\t\tvar extra = that.stat_desc.extra_bits;\n\t\t\tvar base = that.stat_desc.extra_base;\n\t\t\tvar max_length = that.stat_desc.max_length;\n\t\t\tvar h; // heap index\n\t\t\tvar n, m; // iterate over the tree elements\n\t\t\tvar bits; // bit length\n\t\t\tvar xbits; // extra bits\n\t\t\tvar f; // frequency\n\t\t\tvar overflow = 0; // number of elements with bit length too large\n\n\t\t\tfor (bits = 0; bits <= MAX_BITS; bits++)\n\t\t\t\ts.bl_count[bits] = 0;\n\n\t\t\t// In a first pass, compute the optimal bit lengths (which may\n\t\t\t// overflow in the case of the bit length tree).\n\t\t\ttree[s.heap[s.heap_max] * 2 + 1] = 0; // root of the heap\n\n\t\t\tfor (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n\t\t\t\tn = s.heap[h];\n\t\t\t\tbits = tree[tree[n * 2 + 1] * 2 + 1] + 1;\n\t\t\t\tif (bits > max_length) {\n\t\t\t\t\tbits = max_length;\n\t\t\t\t\toverflow++;\n\t\t\t\t}\n\t\t\t\ttree[n * 2 + 1] = bits;\n\t\t\t\t// We overwrite tree[n*2+1] which is no longer needed\n\n\t\t\t\tif (n > that.max_code)\n\t\t\t\t\tcontinue; // not a leaf node\n\n\t\t\t\ts.bl_count[bits]++;\n\t\t\t\txbits = 0;\n\t\t\t\tif (n >= base)\n\t\t\t\t\txbits = extra[n - base];\n\t\t\t\tf = tree[n * 2];\n\t\t\t\ts.opt_len += f * (bits + xbits);\n\t\t\t\tif (stree)\n\t\t\t\t\ts.static_len += f * (stree[n * 2 + 1] + xbits);\n\t\t\t}\n\t\t\tif (overflow === 0)\n\t\t\t\treturn;\n\n\t\t\t// This happens for example on obj2 and pic of the Calgary corpus\n\t\t\t// Find the first bit length which could increase:\n\t\t\tdo {\n\t\t\t\tbits = max_length - 1;\n\t\t\t\twhile (s.bl_count[bits] === 0)\n\t\t\t\t\tbits--;\n\t\t\t\ts.bl_count[bits]--; // move one leaf down the tree\n\t\t\t\ts.bl_count[bits + 1] += 2; // move one overflow item as its brother\n\t\t\t\ts.bl_count[max_length]--;\n\t\t\t\t// The brother of the overflow item also moves one step up,\n\t\t\t\t// but this does not affect bl_count[max_length]\n\t\t\t\toverflow -= 2;\n\t\t\t} while (overflow > 0);\n\n\t\t\tfor (bits = max_length; bits !== 0; bits--) {\n\t\t\t\tn = s.bl_count[bits];\n\t\t\t\twhile (n !== 0) {\n\t\t\t\t\tm = s.heap[--h];\n\t\t\t\t\tif (m > that.max_code)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif (tree[m * 2 + 1] != bits) {\n\t\t\t\t\t\ts.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];\n\t\t\t\t\t\ttree[m * 2 + 1] = bits;\n\t\t\t\t\t}\n\t\t\t\t\tn--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Reverse the first len bits of a code, using straightforward code (a\n\t\t// faster\n\t\t// method would use a table)\n\t\t// IN assertion: 1 <= len <= 15\n\t\tfunction bi_reverse(code, // the value to invert\n\t\tlen // its bit length\n\t\t) {\n\t\t\tvar res = 0;\n\t\t\tdo {\n\t\t\t\tres |= code & 1;\n\t\t\t\tcode >>>= 1;\n\t\t\t\tres <<= 1;\n\t\t\t} while (--len > 0);\n\t\t\treturn res >>> 1;\n\t\t}\n\n\t\t// Generate the codes for a given tree and bit counts (which need not be\n\t\t// optimal).\n\t\t// IN assertion: the array bl_count contains the bit length statistics for\n\t\t// the given tree and the field len is set for all tree elements.\n\t\t// OUT assertion: the field code is set for all tree elements of non\n\t\t// zero code length.\n\t\tfunction gen_codes(tree, // the tree to decorate\n\t\tmax_code, // largest code with non zero frequency\n\t\tbl_count // number of codes at each bit length\n\t\t) {\n\t\t\tvar next_code = []; // next code value for each\n\t\t\t// bit length\n\t\t\tvar code = 0; // running code value\n\t\t\tvar bits; // bit index\n\t\t\tvar n; // code index\n\t\t\tvar len;\n\n\t\t\t// The distribution counts are first used to generate the code values\n\t\t\t// without bit reversal.\n\t\t\tfor (bits = 1; bits <= MAX_BITS; bits++) {\n\t\t\t\tnext_code[bits] = code = ((code + bl_count[bits - 1]) << 1);\n\t\t\t}\n\n\t\t\t// Check that the bit counts in bl_count are consistent. The last code\n\t\t\t// must be all ones.\n\t\t\t// Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n\t\t\t// \"inconsistent bit counts\");\n\t\t\t// Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n\t\t\tfor (n = 0; n <= max_code; n++) {\n\t\t\t\tlen = tree[n * 2 + 1];\n\t\t\t\tif (len === 0)\n\t\t\t\t\tcontinue;\n\t\t\t\t// Now reverse the bits\n\t\t\t\ttree[n * 2] = bi_reverse(next_code[len]++, len);\n\t\t\t}\n\t\t}\n\n\t\t// Construct one Huffman tree and assigns the code bit strings and lengths.\n\t\t// Update the total bit length for the current block.\n\t\t// IN assertion: the field freq is set for all tree elements.\n\t\t// OUT assertions: the fields len and code are set to the optimal bit length\n\t\t// and corresponding code. The length opt_len is updated; static_len is\n\t\t// also updated if stree is not null. The field max_code is set.\n\t\tthat.build_tree = function(s) {\n\t\t\tvar tree = that.dyn_tree;\n\t\t\tvar stree = that.stat_desc.static_tree;\n\t\t\tvar elems = that.stat_desc.elems;\n\t\t\tvar n, m; // iterate over heap elements\n\t\t\tvar max_code = -1; // largest code with non zero frequency\n\t\t\tvar node; // new node being created\n\n\t\t\t// Construct the initial heap, with least frequent element in\n\t\t\t// heap[1]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n\t\t\t// heap[0] is not used.\n\t\t\ts.heap_len = 0;\n\t\t\ts.heap_max = HEAP_SIZE;\n\n\t\t\tfor (n = 0; n < elems; n++) {\n\t\t\t\tif (tree[n * 2] !== 0) {\n\t\t\t\t\ts.heap[++s.heap_len] = max_code = n;\n\t\t\t\t\ts.depth[n] = 0;\n\t\t\t\t} else {\n\t\t\t\t\ttree[n * 2 + 1] = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// The pkzip format requires that at least one distance code exists,\n\t\t\t// and that at least one bit should be sent even if there is only one\n\t\t\t// possible code. So to avoid special checks later on we force at least\n\t\t\t// two codes of non zero frequency.\n\t\t\twhile (s.heap_len < 2) {\n\t\t\t\tnode = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;\n\t\t\t\ttree[node * 2] = 1;\n\t\t\t\ts.depth[node] = 0;\n\t\t\t\ts.opt_len--;\n\t\t\t\tif (stree)\n\t\t\t\t\ts.static_len -= stree[node * 2 + 1];\n\t\t\t\t// node is 0 or 1 so it does not have extra bits\n\t\t\t}\n\t\t\tthat.max_code = max_code;\n\n\t\t\t// The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n\t\t\t// establish sub-heaps of increasing lengths:\n\n\t\t\tfor (n = Math.floor(s.heap_len / 2); n >= 1; n--)\n\t\t\t\ts.pqdownheap(tree, n);\n\n\t\t\t// Construct the Huffman tree by repeatedly combining the least two\n\t\t\t// frequent nodes.\n\n\t\t\tnode = elems; // next internal node of the tree\n\t\t\tdo {\n\t\t\t\t// n = node of least frequency\n\t\t\t\tn = s.heap[1];\n\t\t\t\ts.heap[1] = s.heap[s.heap_len--];\n\t\t\t\ts.pqdownheap(tree, 1);\n\t\t\t\tm = s.heap[1]; // m = node of next least frequency\n\n\t\t\t\ts.heap[--s.heap_max] = n; // keep the nodes sorted by frequency\n\t\t\t\ts.heap[--s.heap_max] = m;\n\n\t\t\t\t// Create a new node father of n and m\n\t\t\t\ttree[node * 2] = (tree[n * 2] + tree[m * 2]);\n\t\t\t\ts.depth[node] = Math.max(s.depth[n], s.depth[m]) + 1;\n\t\t\t\ttree[n * 2 + 1] = tree[m * 2 + 1] = node;\n\n\t\t\t\t// and insert the new node in the heap\n\t\t\t\ts.heap[1] = node++;\n\t\t\t\ts.pqdownheap(tree, 1);\n\t\t\t} while (s.heap_len >= 2);\n\n\t\t\ts.heap[--s.heap_max] = s.heap[1];\n\n\t\t\t// At this point, the fields freq and dad are set. We can now\n\t\t\t// generate the bit lengths.\n\n\t\t\tgen_bitlen(s);\n\n\t\t\t// The field len is now set, we can generate the bit codes\n\t\t\tgen_codes(tree, that.max_code, s.bl_count);\n\t\t};\n\n\t}\n\n\tTree._length_code = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16,\n\t\t\t16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n\t\t\t20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n\t\t\t22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n\t\t\t24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n\t\t\t25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n\t\t\t26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28 ];\n\n\tTree.base_length = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 0 ];\n\n\tTree.base_dist = [ 0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288, 16384,\n\t\t\t24576 ];\n\n\t// Mapping from a distance to a distance code. dist is the distance - 1 and\n\t// must not have side effects. _dist_code[256] and _dist_code[257] are never\n\t// used.\n\tTree.d_code = function(dist) {\n\t\treturn ((dist) < 256 ? _dist_code[dist] : _dist_code[256 + ((dist) >>> 7)]);\n\t};\n\n\t// extra bits for each length code\n\tTree.extra_lbits = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0 ];\n\n\t// extra bits for each distance code\n\tTree.extra_dbits = [ 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 ];\n\n\t// extra bits for each bit length code\n\tTree.extra_blbits = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7 ];\n\n\tTree.bl_order = [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\t// StaticTree\n\n\tfunction StaticTree(static_tree, extra_bits, extra_base, elems, max_length) {\n\t\tvar that = this;\n\t\tthat.static_tree = static_tree;\n\t\tthat.extra_bits = extra_bits;\n\t\tthat.extra_base = extra_base;\n\t\tthat.elems = elems;\n\t\tthat.max_length = max_length;\n\t}\n\n\tStaticTree.static_ltree = [ 12, 8, 140, 8, 76, 8, 204, 8, 44, 8, 172, 8, 108, 8, 236, 8, 28, 8, 156, 8, 92, 8, 220, 8, 60, 8, 188, 8, 124, 8, 252, 8, 2, 8,\n\t\t\t130, 8, 66, 8, 194, 8, 34, 8, 162, 8, 98, 8, 226, 8, 18, 8, 146, 8, 82, 8, 210, 8, 50, 8, 178, 8, 114, 8, 242, 8, 10, 8, 138, 8, 74, 8, 202, 8, 42,\n\t\t\t8, 170, 8, 106, 8, 234, 8, 26, 8, 154, 8, 90, 8, 218, 8, 58, 8, 186, 8, 122, 8, 250, 8, 6, 8, 134, 8, 70, 8, 198, 8, 38, 8, 166, 8, 102, 8, 230, 8,\n\t\t\t22, 8, 150, 8, 86, 8, 214, 8, 54, 8, 182, 8, 118, 8, 246, 8, 14, 8, 142, 8, 78, 8, 206, 8, 46, 8, 174, 8, 110, 8, 238, 8, 30, 8, 158, 8, 94, 8,\n\t\t\t222, 8, 62, 8, 190, 8, 126, 8, 254, 8, 1, 8, 129, 8, 65, 8, 193, 8, 33, 8, 161, 8, 97, 8, 225, 8, 17, 8, 145, 8, 81, 8, 209, 8, 49, 8, 177, 8, 113,\n\t\t\t8, 241, 8, 9, 8, 137, 8, 73, 8, 201, 8, 41, 8, 169, 8, 105, 8, 233, 8, 25, 8, 153, 8, 89, 8, 217, 8, 57, 8, 185, 8, 121, 8, 249, 8, 5, 8, 133, 8,\n\t\t\t69, 8, 197, 8, 37, 8, 165, 8, 101, 8, 229, 8, 21, 8, 149, 8, 85, 8, 213, 8, 53, 8, 181, 8, 117, 8, 245, 8, 13, 8, 141, 8, 77, 8, 205, 8, 45, 8,\n\t\t\t173, 8, 109, 8, 237, 8, 29, 8, 157, 8, 93, 8, 221, 8, 61, 8, 189, 8, 125, 8, 253, 8, 19, 9, 275, 9, 147, 9, 403, 9, 83, 9, 339, 9, 211, 9, 467, 9,\n\t\t\t51, 9, 307, 9, 179, 9, 435, 9, 115, 9, 371, 9, 243, 9, 499, 9, 11, 9, 267, 9, 139, 9, 395, 9, 75, 9, 331, 9, 203, 9, 459, 9, 43, 9, 299, 9, 171, 9,\n\t\t\t427, 9, 107, 9, 363, 9, 235, 9, 491, 9, 27, 9, 283, 9, 155, 9, 411, 9, 91, 9, 347, 9, 219, 9, 475, 9, 59, 9, 315, 9, 187, 9, 443, 9, 123, 9, 379,\n\t\t\t9, 251, 9, 507, 9, 7, 9, 263, 9, 135, 9, 391, 9, 71, 9, 327, 9, 199, 9, 455, 9, 39, 9, 295, 9, 167, 9, 423, 9, 103, 9, 359, 9, 231, 9, 487, 9, 23,\n\t\t\t9, 279, 9, 151, 9, 407, 9, 87, 9, 343, 9, 215, 9, 471, 9, 55, 9, 311, 9, 183, 9, 439, 9, 119, 9, 375, 9, 247, 9, 503, 9, 15, 9, 271, 9, 143, 9,\n\t\t\t399, 9, 79, 9, 335, 9, 207, 9, 463, 9, 47, 9, 303, 9, 175, 9, 431, 9, 111, 9, 367, 9, 239, 9, 495, 9, 31, 9, 287, 9, 159, 9, 415, 9, 95, 9, 351, 9,\n\t\t\t223, 9, 479, 9, 63, 9, 319, 9, 191, 9, 447, 9, 127, 9, 383, 9, 255, 9, 511, 9, 0, 7, 64, 7, 32, 7, 96, 7, 16, 7, 80, 7, 48, 7, 112, 7, 8, 7, 72, 7,\n\t\t\t40, 7, 104, 7, 24, 7, 88, 7, 56, 7, 120, 7, 4, 7, 68, 7, 36, 7, 100, 7, 20, 7, 84, 7, 52, 7, 116, 7, 3, 8, 131, 8, 67, 8, 195, 8, 35, 8, 163, 8,\n\t\t\t99, 8, 227, 8 ];\n\n\tStaticTree.static_dtree = [ 0, 5, 16, 5, 8, 5, 24, 5, 4, 5, 20, 5, 12, 5, 28, 5, 2, 5, 18, 5, 10, 5, 26, 5, 6, 5, 22, 5, 14, 5, 30, 5, 1, 5, 17, 5, 9, 5,\n\t\t\t25, 5, 5, 5, 21, 5, 13, 5, 29, 5, 3, 5, 19, 5, 11, 5, 27, 5, 7, 5, 23, 5 ];\n\n\tStaticTree.static_l_desc = new StaticTree(StaticTree.static_ltree, Tree.extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n\n\tStaticTree.static_d_desc = new StaticTree(StaticTree.static_dtree, Tree.extra_dbits, 0, D_CODES, MAX_BITS);\n\n\tStaticTree.static_bl_desc = new StaticTree(null, Tree.extra_blbits, 0, BL_CODES, MAX_BL_BITS);\n\n\t// Deflate\n\n\tvar MAX_MEM_LEVEL = 9;\n\tvar DEF_MEM_LEVEL = 8;\n\n\tfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\t\tvar that = this;\n\t\tthat.good_length = good_length;\n\t\tthat.max_lazy = max_lazy;\n\t\tthat.nice_length = nice_length;\n\t\tthat.max_chain = max_chain;\n\t\tthat.func = func;\n\t}\n\n\tvar STORED = 0;\n\tvar FAST = 1;\n\tvar SLOW = 2;\n\tvar config_table = [ new Config(0, 0, 0, 0, STORED), new Config(4, 4, 8, 4, FAST), new Config(4, 5, 16, 8, FAST), new Config(4, 6, 32, 32, FAST),\n\t\t\tnew Config(4, 4, 16, 16, SLOW), new Config(8, 16, 32, 32, SLOW), new Config(8, 16, 128, 128, SLOW), new Config(8, 32, 128, 256, SLOW),\n\t\t\tnew Config(32, 128, 258, 1024, SLOW), new Config(32, 258, 258, 4096, SLOW) ];\n\n\tvar z_errmsg = [ \"need dictionary\", // Z_NEED_DICT\n\t// 2\n\t\"stream end\", // Z_STREAM_END 1\n\t\"\", // Z_OK 0\n\t\"\", // Z_ERRNO (-1)\n\t\"stream error\", // Z_STREAM_ERROR (-2)\n\t\"data error\", // Z_DATA_ERROR (-3)\n\t\"\", // Z_MEM_ERROR (-4)\n\t\"buffer error\", // Z_BUF_ERROR (-5)\n\t\"\",// Z_VERSION_ERROR (-6)\n\t\"\" ];\n\n\t// block not completed, need more input or more output\n\tvar NeedMore = 0;\n\n\t// block flush performed\n\tvar BlockDone = 1;\n\n\t// finish started, need only more output at next deflate\n\tvar FinishStarted = 2;\n\n\t// finish done, accept no more input or output\n\tvar FinishDone = 3;\n\n\t// preset dictionary flag in zlib header\n\tvar PRESET_DICT = 0x20;\n\n\tvar INIT_STATE = 42;\n\tvar BUSY_STATE = 113;\n\tvar FINISH_STATE = 666;\n\n\t// The deflate compression method\n\tvar Z_DEFLATED = 8;\n\n\tvar STORED_BLOCK = 0;\n\tvar STATIC_TREES = 1;\n\tvar DYN_TREES = 2;\n\n\tvar MIN_MATCH = 3;\n\tvar MAX_MATCH = 258;\n\tvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\n\tfunction smaller(tree, n, m, depth) {\n\t\tvar tn2 = tree[n * 2];\n\t\tvar tm2 = tree[m * 2];\n\t\treturn (tn2 < tm2 || (tn2 == tm2 && depth[n] <= depth[m]));\n\t}\n\n\tfunction Deflate() {\n\n\t\tvar that = this;\n\t\tvar strm; // pointer back to this zlib stream\n\t\tvar status; // as the name implies\n\t\t// pending_buf; // output still pending\n\t\tvar pending_buf_size; // size of pending_buf\n\t\t// pending_out; // next pending byte to output to the stream\n\t\t// pending; // nb of bytes in the pending buffer\n\t\tvar method; // STORED (for zip only) or DEFLATED\n\t\tvar last_flush; // value of flush param for previous deflate call\n\n\t\tvar w_size; // LZ77 window size (32K by default)\n\t\tvar w_bits; // log2(w_size) (8..16)\n\t\tvar w_mask; // w_size - 1\n\n\t\tvar window;\n\t\t// Sliding window. Input bytes are read into the second half of the window,\n\t\t// and move to the first half later to keep a dictionary of at least wSize\n\t\t// bytes. With this organization, matches are limited to a distance of\n\t\t// wSize-MAX_MATCH bytes, but this ensures that IO is always\n\t\t// performed with a length multiple of the block size. Also, it limits\n\t\t// the window size to 64K, which is quite useful on MSDOS.\n\t\t// To do: use the user input buffer as sliding window.\n\n\t\tvar window_size;\n\t\t// Actual size of window: 2*wSize, except when the user input buffer\n\t\t// is directly used as sliding window.\n\n\t\tvar prev;\n\t\t// Link to older string with same hash index. To limit the size of this\n\t\t// array to 64K, this link is maintained only for the last 32K strings.\n\t\t// An index in this array is thus a window index modulo 32K.\n\n\t\tvar head; // Heads of the hash chains or NIL.\n\n\t\tvar ins_h; // hash index of string to be inserted\n\t\tvar hash_size; // number of elements in hash table\n\t\tvar hash_bits; // log2(hash_size)\n\t\tvar hash_mask; // hash_size-1\n\n\t\t// Number of bits by which ins_h must be shifted at each input\n\t\t// step. It must be such that after MIN_MATCH steps, the oldest\n\t\t// byte no longer takes part in the hash key, that is:\n\t\t// hash_shift * MIN_MATCH >= hash_bits\n\t\tvar hash_shift;\n\n\t\t// Window position at the beginning of the current output block. Gets\n\t\t// negative when the window is moved backwards.\n\n\t\tvar block_start;\n\n\t\tvar match_length; // length of best match\n\t\tvar prev_match; // previous match\n\t\tvar match_available; // set if previous match exists\n\t\tvar strstart; // start of string to insert\n\t\tvar match_start; // start of matching string\n\t\tvar lookahead; // number of valid bytes ahead in window\n\n\t\t// Length of the best match at previous step. Matches not greater than this\n\t\t// are discarded. This is used in the lazy match evaluation.\n\t\tvar prev_length;\n\n\t\t// To speed up deflation, hash chains are never searched beyond this\n\t\t// length. A higher limit improves compression ratio but degrades the speed.\n\t\tvar max_chain_length;\n\n\t\t// Attempt to find a better match only when the current match is strictly\n\t\t// smaller than this value. This mechanism is used only for compression\n\t\t// levels >= 4.\n\t\tvar max_lazy_match;\n\n\t\t// Insert new strings in the hash table only if the match length is not\n\t\t// greater than this length. This saves time but degrades compression.\n\t\t// max_insert_length is used only for compression levels <= 3.\n\n\t\tvar level; // compression level (1..9)\n\t\tvar strategy; // favor or force Huffman coding\n\n\t\t// Use a faster search when the previous match is longer than this\n\t\tvar good_match;\n\n\t\t// Stop searching when current match exceeds this\n\t\tvar nice_match;\n\n\t\tvar dyn_ltree; // literal and length tree\n\t\tvar dyn_dtree; // distance tree\n\t\tvar bl_tree; // Huffman tree for bit lengths\n\n\t\tvar l_desc = new Tree(); // desc for literal tree\n\t\tvar d_desc = new Tree(); // desc for distance tree\n\t\tvar bl_desc = new Tree(); // desc for bit length tree\n\n\t\t// that.heap_len; // number of elements in the heap\n\t\t// that.heap_max; // element of largest frequency\n\t\t// The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n\t\t// The same heap array is used to build all trees.\n\n\t\t// Depth of each subtree used as tie breaker for trees of equal frequency\n\t\tthat.depth = [];\n\n\t\tvar l_buf; // index for literals or lengths */\n\n\t\t// Size of match buffer for literals/lengths. There are 4 reasons for\n\t\t// limiting lit_bufsize to 64K:\n\t\t// - frequencies can be kept in 16 bit counters\n\t\t// - if compression is not successful for the first block, all input\n\t\t// data is still in the window so we can still emit a stored block even\n\t\t// when input comes from standard input. (This can also be done for\n\t\t// all blocks if lit_bufsize is not greater than 32K.)\n\t\t// - if compression is not successful for a file smaller than 64K, we can\n\t\t// even emit a stored file instead of a stored block (saving 5 bytes).\n\t\t// This is applicable only for zip (not gzip or zlib).\n\t\t// - creating new Huffman trees less frequently may not provide fast\n\t\t// adaptation to changes in the input data statistics. (Take for\n\t\t// example a binary file with poorly compressible code followed by\n\t\t// a highly compressible string table.) Smaller buffer sizes give\n\t\t// fast adaptation but have of course the overhead of transmitting\n\t\t// trees more frequently.\n\t\t// - I can't count above 4\n\t\tvar lit_bufsize;\n\n\t\tvar last_lit; // running index in l_buf\n\n\t\t// Buffer for distances. To simplify the code, d_buf and l_buf have\n\t\t// the same number of elements. To use different lengths, an extra flag\n\t\t// array would be necessary.\n\n\t\tvar d_buf; // index of pendig_buf\n\n\t\t// that.opt_len; // bit length of current block with optimal trees\n\t\t// that.static_len; // bit length of current block with static trees\n\t\tvar matches; // number of string matches in current block\n\t\tvar last_eob_len; // bit length of EOB code for last block\n\n\t\t// Output buffer. bits are inserted starting at the bottom (least\n\t\t// significant bits).\n\t\tvar bi_buf;\n\n\t\t// Number of valid bits in bi_buf. All bits above the last valid bit\n\t\t// are always zero.\n\t\tvar bi_valid;\n\n\t\t// number of codes at each bit length for an optimal tree\n\t\tthat.bl_count = [];\n\n\t\t// heap used to build the Huffman trees\n\t\tthat.heap = [];\n\n\t\tdyn_ltree = [];\n\t\tdyn_dtree = [];\n\t\tbl_tree = [];\n\n\t\tfunction lm_init() {\n\t\t\tvar i;\n\t\t\twindow_size = 2 * w_size;\n\n\t\t\thead[hash_size - 1] = 0;\n\t\t\tfor (i = 0; i < hash_size - 1; i++) {\n\t\t\t\thead[i] = 0;\n\t\t\t}\n\n\t\t\t// Set the default configuration parameters:\n\t\t\tmax_lazy_match = config_table[level].max_lazy;\n\t\t\tgood_match = config_table[level].good_length;\n\t\t\tnice_match = config_table[level].nice_length;\n\t\t\tmax_chain_length = config_table[level].max_chain;\n\n\t\t\tstrstart = 0;\n\t\t\tblock_start = 0;\n\t\t\tlookahead = 0;\n\t\t\tmatch_length = prev_length = MIN_MATCH - 1;\n\t\t\tmatch_available = 0;\n\t\t\tins_h = 0;\n\t\t}\n\n\t\tfunction init_block() {\n\t\t\tvar i;\n\t\t\t// Initialize the trees.\n\t\t\tfor (i = 0; i < L_CODES; i++)\n\t\t\t\tdyn_ltree[i * 2] = 0;\n\t\t\tfor (i = 0; i < D_CODES; i++)\n\t\t\t\tdyn_dtree[i * 2] = 0;\n\t\t\tfor (i = 0; i < BL_CODES; i++)\n\t\t\t\tbl_tree[i * 2] = 0;\n\n\t\t\tdyn_ltree[END_BLOCK * 2] = 1;\n\t\t\tthat.opt_len = that.static_len = 0;\n\t\t\tlast_lit = matches = 0;\n\t\t}\n\n\t\t// Initialize the tree data structures for a new zlib stream.\n\t\tfunction tr_init() {\n\n\t\t\tl_desc.dyn_tree = dyn_ltree;\n\t\t\tl_desc.stat_desc = StaticTree.static_l_desc;\n\n\t\t\td_desc.dyn_tree = dyn_dtree;\n\t\t\td_desc.stat_desc = StaticTree.static_d_desc;\n\n\t\t\tbl_desc.dyn_tree = bl_tree;\n\t\t\tbl_desc.stat_desc = StaticTree.static_bl_desc;\n\n\t\t\tbi_buf = 0;\n\t\t\tbi_valid = 0;\n\t\t\tlast_eob_len = 8; // enough lookahead for inflate\n\n\t\t\t// Initialize the first block of the first file:\n\t\t\tinit_block();\n\t\t}\n\n\t\t// Restore the heap property by moving down the tree starting at node k,\n\t\t// exchanging a node with the smallest of its two sons if necessary,\n\t\t// stopping\n\t\t// when the heap property is re-established (each father smaller than its\n\t\t// two sons).\n\t\tthat.pqdownheap = function(tree, // the tree to restore\n\t\tk // node to move down\n\t\t) {\n\t\t\tvar heap = that.heap;\n\t\t\tvar v = heap[k];\n\t\t\tvar j = k << 1; // left son of k\n\t\t\twhile (j <= that.heap_len) {\n\t\t\t\t// Set j to the smallest of the two sons:\n\t\t\t\tif (j < that.heap_len && smaller(tree, heap[j + 1], heap[j], that.depth)) {\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\t// Exit if v is smaller than both sons\n\t\t\t\tif (smaller(tree, v, heap[j], that.depth))\n\t\t\t\t\tbreak;\n\n\t\t\t\t// Exchange v with the smallest son\n\t\t\t\theap[k] = heap[j];\n\t\t\t\tk = j;\n\t\t\t\t// And continue down the tree, setting j to the left son of k\n\t\t\t\tj <<= 1;\n\t\t\t}\n\t\t\theap[k] = v;\n\t\t};\n\n\t\t// Scan a literal or distance tree to determine the frequencies of the codes\n\t\t// in the bit length tree.\n\t\tfunction scan_tree(tree,// the tree to be scanned\n\t\tmax_code // and its largest code of non zero frequency\n\t\t) {\n\t\t\tvar n; // iterates over all tree elements\n\t\t\tvar prevlen = -1; // last emitted length\n\t\t\tvar curlen; // length of current code\n\t\t\tvar nextlen = tree[0 * 2 + 1]; // length of next code\n\t\t\tvar count = 0; // repeat count of the current code\n\t\t\tvar max_count = 7; // max repeat count\n\t\t\tvar min_count = 4; // min repeat count\n\n\t\t\tif (nextlen === 0) {\n\t\t\t\tmax_count = 138;\n\t\t\t\tmin_count = 3;\n\t\t\t}\n\t\t\ttree[(max_code + 1) * 2 + 1] = 0xffff; // guard\n\n\t\t\tfor (n = 0; n <= max_code; n++) {\n\t\t\t\tcurlen = nextlen;\n\t\t\t\tnextlen = tree[(n + 1) * 2 + 1];\n\t\t\t\tif (++count < max_count && curlen == nextlen) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (count < min_count) {\n\t\t\t\t\tbl_tree[curlen * 2] += count;\n\t\t\t\t} else if (curlen !== 0) {\n\t\t\t\t\tif (curlen != prevlen)\n\t\t\t\t\t\tbl_tree[curlen * 2]++;\n\t\t\t\t\tbl_tree[REP_3_6 * 2]++;\n\t\t\t\t} else if (count <= 10) {\n\t\t\t\t\tbl_tree[REPZ_3_10 * 2]++;\n\t\t\t\t} else {\n\t\t\t\t\tbl_tree[REPZ_11_138 * 2]++;\n\t\t\t\t}\n\t\t\t\tcount = 0;\n\t\t\t\tprevlen = curlen;\n\t\t\t\tif (nextlen === 0) {\n\t\t\t\t\tmax_count = 138;\n\t\t\t\t\tmin_count = 3;\n\t\t\t\t} else if (curlen == nextlen) {\n\t\t\t\t\tmax_count = 6;\n\t\t\t\t\tmin_count = 3;\n\t\t\t\t} else {\n\t\t\t\t\tmax_count = 7;\n\t\t\t\t\tmin_count = 4;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Construct the Huffman tree for the bit lengths and return the index in\n\t\t// bl_order of the last bit length code to send.\n\t\tfunction build_bl_tree() {\n\t\t\tvar max_blindex; // index of last bit length code of non zero freq\n\n\t\t\t// Determine the bit length frequencies for literal and distance trees\n\t\t\tscan_tree(dyn_ltree, l_desc.max_code);\n\t\t\tscan_tree(dyn_dtree, d_desc.max_code);\n\n\t\t\t// Build the bit length tree:\n\t\t\tbl_desc.build_tree(that);\n\t\t\t// opt_len now includes the length of the tree representations, except\n\t\t\t// the lengths of the bit lengths codes and the 5+5+4 bits for the\n\t\t\t// counts.\n\n\t\t\t// Determine the number of bit length codes to send. The pkzip format\n\t\t\t// requires that at least 4 bit length codes be sent. (appnote.txt says\n\t\t\t// 3 but the actual value used is 4.)\n\t\t\tfor (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n\t\t\t\tif (bl_tree[Tree.bl_order[max_blindex] * 2 + 1] !== 0)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// Update opt_len to include the bit length tree and counts\n\t\t\tthat.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n\n\t\t\treturn max_blindex;\n\t\t}\n\n\t\t// Output a byte on the stream.\n\t\t// IN assertion: there is enough room in pending_buf.\n\t\tfunction put_byte(p) {\n\t\t\tthat.pending_buf[that.pending++] = p;\n\t\t}\n\n\t\tfunction put_short(w) {\n\t\t\tput_byte(w & 0xff);\n\t\t\tput_byte((w >>> 8) & 0xff);\n\t\t}\n\n\t\tfunction putShortMSB(b) {\n\t\t\tput_byte((b >> 8) & 0xff);\n\t\t\tput_byte((b & 0xff) & 0xff);\n\t\t}\n\n\t\tfunction send_bits(value, length) {\n\t\t\tvar val, len = length;\n\t\t\tif (bi_valid > Buf_size - len) {\n\t\t\t\tval = value;\n\t\t\t\t// bi_buf |= (val << bi_valid);\n\t\t\t\tbi_buf |= ((val << bi_valid) & 0xffff);\n\t\t\t\tput_short(bi_buf);\n\t\t\t\tbi_buf = val >>> (Buf_size - bi_valid);\n\t\t\t\tbi_valid += len - Buf_size;\n\t\t\t} else {\n\t\t\t\t// bi_buf |= (value) << bi_valid;\n\t\t\t\tbi_buf |= (((value) << bi_valid) & 0xffff);\n\t\t\t\tbi_valid += len;\n\t\t\t}\n\t\t}\n\n\t\tfunction send_code(c, tree) {\n\t\t\tvar c2 = c * 2;\n\t\t\tsend_bits(tree[c2] & 0xffff, tree[c2 + 1] & 0xffff);\n\t\t}\n\n\t\t// Send a literal or distance tree in compressed form, using the codes in\n\t\t// bl_tree.\n\t\tfunction send_tree(tree,// the tree to be sent\n\t\tmax_code // and its largest code of non zero frequency\n\t\t) {\n\t\t\tvar n; // iterates over all tree elements\n\t\t\tvar prevlen = -1; // last emitted length\n\t\t\tvar curlen; // length of current code\n\t\t\tvar nextlen = tree[0 * 2 + 1]; // length of next code\n\t\t\tvar count = 0; // repeat count of the current code\n\t\t\tvar max_count = 7; // max repeat count\n\t\t\tvar min_count = 4; // min repeat count\n\n\t\t\tif (nextlen === 0) {\n\t\t\t\tmax_count = 138;\n\t\t\t\tmin_count = 3;\n\t\t\t}\n\n\t\t\tfor (n = 0; n <= max_code; n++) {\n\t\t\t\tcurlen = nextlen;\n\t\t\t\tnextlen = tree[(n + 1) * 2 + 1];\n\t\t\t\tif (++count < max_count && curlen == nextlen) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (count < min_count) {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tsend_code(curlen, bl_tree);\n\t\t\t\t\t} while (--count !== 0);\n\t\t\t\t} else if (curlen !== 0) {\n\t\t\t\t\tif (curlen != prevlen) {\n\t\t\t\t\t\tsend_code(curlen, bl_tree);\n\t\t\t\t\t\tcount--;\n\t\t\t\t\t}\n\t\t\t\t\tsend_code(REP_3_6, bl_tree);\n\t\t\t\t\tsend_bits(count - 3, 2);\n\t\t\t\t} else if (count <= 10) {\n\t\t\t\t\tsend_code(REPZ_3_10, bl_tree);\n\t\t\t\t\tsend_bits(count - 3, 3);\n\t\t\t\t} else {\n\t\t\t\t\tsend_code(REPZ_11_138, bl_tree);\n\t\t\t\t\tsend_bits(count - 11, 7);\n\t\t\t\t}\n\t\t\t\tcount = 0;\n\t\t\t\tprevlen = curlen;\n\t\t\t\tif (nextlen === 0) {\n\t\t\t\t\tmax_count = 138;\n\t\t\t\t\tmin_count = 3;\n\t\t\t\t} else if (curlen == nextlen) {\n\t\t\t\t\tmax_count = 6;\n\t\t\t\t\tmin_count = 3;\n\t\t\t\t} else {\n\t\t\t\t\tmax_count = 7;\n\t\t\t\t\tmin_count = 4;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Send the header for a block using dynamic Huffman trees: the counts, the\n\t\t// lengths of the bit length codes, the literal tree and the distance tree.\n\t\t// IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n\t\tfunction send_all_trees(lcodes, dcodes, blcodes) {\n\t\t\tvar rank; // index in bl_order\n\n\t\t\tsend_bits(lcodes - 257, 5); // not +255 as stated in appnote.txt\n\t\t\tsend_bits(dcodes - 1, 5);\n\t\t\tsend_bits(blcodes - 4, 4); // not -3 as stated in appnote.txt\n\t\t\tfor (rank = 0; rank < blcodes; rank++) {\n\t\t\t\tsend_bits(bl_tree[Tree.bl_order[rank] * 2 + 1], 3);\n\t\t\t}\n\t\t\tsend_tree(dyn_ltree, lcodes - 1); // literal tree\n\t\t\tsend_tree(dyn_dtree, dcodes - 1); // distance tree\n\t\t}\n\n\t\t// Flush the bit buffer, keeping at most 7 bits in it.\n\t\tfunction bi_flush() {\n\t\t\tif (bi_valid == 16) {\n\t\t\t\tput_short(bi_buf);\n\t\t\t\tbi_buf = 0;\n\t\t\t\tbi_valid = 0;\n\t\t\t} else if (bi_valid >= 8) {\n\t\t\t\tput_byte(bi_buf & 0xff);\n\t\t\t\tbi_buf >>>= 8;\n\t\t\t\tbi_valid -= 8;\n\t\t\t}\n\t\t}\n\n\t\t// Send one empty static block to give enough lookahead for inflate.\n\t\t// This takes 10 bits, of which 7 may remain in the bit buffer.\n\t\t// The current inflate code requires 9 bits of lookahead. If the\n\t\t// last two codes for the previous block (real code plus EOB) were coded\n\t\t// on 5 bits or less, inflate may have only 5+3 bits of lookahead to decode\n\t\t// the last real code. In this case we send two empty static blocks instead\n\t\t// of one. (There are no problems if the previous block is stored or fixed.)\n\t\t// To simplify the code, we assume the worst case of last real code encoded\n\t\t// on one bit only.\n\t\tfunction _tr_align() {\n\t\t\tsend_bits(STATIC_TREES << 1, 3);\n\t\t\tsend_code(END_BLOCK, StaticTree.static_ltree);\n\n\t\t\tbi_flush();\n\n\t\t\t// Of the 10 bits for the empty block, we have already sent\n\t\t\t// (10 - bi_valid) bits. The lookahead for the last real code (before\n\t\t\t// the EOB of the previous block) was thus at least one plus the length\n\t\t\t// of the EOB plus what we have just sent of the empty static block.\n\t\t\tif (1 + last_eob_len + 10 - bi_valid < 9) {\n\t\t\t\tsend_bits(STATIC_TREES << 1, 3);\n\t\t\t\tsend_code(END_BLOCK, StaticTree.static_ltree);\n\t\t\t\tbi_flush();\n\t\t\t}\n\t\t\tlast_eob_len = 7;\n\t\t}\n\n\t\t// Save the match info and tally the frequency counts. Return true if\n\t\t// the current block must be flushed.\n\t\tfunction _tr_tally(dist, // distance of matched string\n\t\tlc // match length-MIN_MATCH or unmatched char (if dist==0)\n\t\t) {\n\t\t\tvar out_length, in_length, dcode;\n\t\t\tthat.pending_buf[d_buf + last_lit * 2] = (dist >>> 8) & 0xff;\n\t\t\tthat.pending_buf[d_buf + last_lit * 2 + 1] = dist & 0xff;\n\n\t\t\tthat.pending_buf[l_buf + last_lit] = lc & 0xff;\n\t\t\tlast_lit++;\n\n\t\t\tif (dist === 0) {\n\t\t\t\t// lc is the unmatched char\n\t\t\t\tdyn_ltree[lc * 2]++;\n\t\t\t} else {\n\t\t\t\tmatches++;\n\t\t\t\t// Here, lc is the match length - MIN_MATCH\n\t\t\t\tdist--; // dist = match distance - 1\n\t\t\t\tdyn_ltree[(Tree._length_code[lc] + LITERALS + 1) * 2]++;\n\t\t\t\tdyn_dtree[Tree.d_code(dist) * 2]++;\n\t\t\t}\n\n\t\t\tif ((last_lit & 0x1fff) === 0 && level > 2) {\n\t\t\t\t// Compute an upper bound for the compressed length\n\t\t\t\tout_length = last_lit * 8;\n\t\t\t\tin_length = strstart - block_start;\n\t\t\t\tfor (dcode = 0; dcode < D_CODES; dcode++) {\n\t\t\t\t\tout_length += dyn_dtree[dcode * 2] * (5 + Tree.extra_dbits[dcode]);\n\t\t\t\t}\n\t\t\t\tout_length >>>= 3;\n\t\t\t\tif ((matches < Math.floor(last_lit / 2)) && out_length < Math.floor(in_length / 2))\n\t\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn (last_lit == lit_bufsize - 1);\n\t\t\t// We avoid equality with lit_bufsize because of wraparound at 64K\n\t\t\t// on 16 bit machines and because stored blocks are restricted to\n\t\t\t// 64K-1 bytes.\n\t\t}\n\n\t\t// Send the block data compressed using the given Huffman trees\n\t\tfunction compress_block(ltree, dtree) {\n\t\t\tvar dist; // distance of matched string\n\t\t\tvar lc; // match length or unmatched char (if dist === 0)\n\t\t\tvar lx = 0; // running index in l_buf\n\t\t\tvar code; // the code to send\n\t\t\tvar extra; // number of extra bits to send\n\n\t\t\tif (last_lit !== 0) {\n\t\t\t\tdo {\n\t\t\t\t\tdist = ((that.pending_buf[d_buf + lx * 2] << 8) & 0xff00) | (that.pending_buf[d_buf + lx * 2 + 1] & 0xff);\n\t\t\t\t\tlc = (that.pending_buf[l_buf + lx]) & 0xff;\n\t\t\t\t\tlx++;\n\n\t\t\t\t\tif (dist === 0) {\n\t\t\t\t\t\tsend_code(lc, ltree); // send a literal byte\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Here, lc is the match length - MIN_MATCH\n\t\t\t\t\t\tcode = Tree._length_code[lc];\n\n\t\t\t\t\t\tsend_code(code + LITERALS + 1, ltree); // send the length\n\t\t\t\t\t\t// code\n\t\t\t\t\t\textra = Tree.extra_lbits[code];\n\t\t\t\t\t\tif (extra !== 0) {\n\t\t\t\t\t\t\tlc -= Tree.base_length[code];\n\t\t\t\t\t\t\tsend_bits(lc, extra); // send the extra length bits\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdist--; // dist is now the match distance - 1\n\t\t\t\t\t\tcode = Tree.d_code(dist);\n\n\t\t\t\t\t\tsend_code(code, dtree); // send the distance code\n\t\t\t\t\t\textra = Tree.extra_dbits[code];\n\t\t\t\t\t\tif (extra !== 0) {\n\t\t\t\t\t\t\tdist -= Tree.base_dist[code];\n\t\t\t\t\t\t\tsend_bits(dist, extra); // send the extra distance bits\n\t\t\t\t\t\t}\n\t\t\t\t\t} // literal or match pair ?\n\n\t\t\t\t\t// Check that the overlay between pending_buf and d_buf+l_buf is\n\t\t\t\t\t// ok:\n\t\t\t\t} while (lx < last_lit);\n\t\t\t}\n\n\t\t\tsend_code(END_BLOCK, ltree);\n\t\t\tlast_eob_len = ltree[END_BLOCK * 2 + 1];\n\t\t}\n\n\t\t// Flush the bit buffer and align the output on a byte boundary\n\t\tfunction bi_windup() {\n\t\t\tif (bi_valid > 8) {\n\t\t\t\tput_short(bi_buf);\n\t\t\t} else if (bi_valid > 0) {\n\t\t\t\tput_byte(bi_buf & 0xff);\n\t\t\t}\n\t\t\tbi_buf = 0;\n\t\t\tbi_valid = 0;\n\t\t}\n\n\t\t// Copy a stored block, storing first the length and its\n\t\t// one's complement if requested.\n\t\tfunction copy_block(buf, // the input data\n\t\tlen, // its length\n\t\theader // true if block header must be written\n\t\t) {\n\t\t\tbi_windup(); // align on byte boundary\n\t\t\tlast_eob_len = 8; // enough lookahead for inflate\n\n\t\t\tif (header) {\n\t\t\t\tput_short(len);\n\t\t\t\tput_short(~len);\n\t\t\t}\n\n\t\t\tthat.pending_buf.set(window.subarray(buf, buf + len), that.pending);\n\t\t\tthat.pending += len;\n\t\t}\n\n\t\t// Send a stored block\n\t\tfunction _tr_stored_block(buf, // input block\n\t\tstored_len, // length of input block\n\t\teof // true if this is the last block for a file\n\t\t) {\n\t\t\tsend_bits((STORED_BLOCK << 1) + (eof ? 1 : 0), 3); // send block type\n\t\t\tcopy_block(buf, stored_len, true); // with header\n\t\t}\n\n\t\t// Determine the best encoding for the current block: dynamic trees, static\n\t\t// trees or store, and output the encoded block to the zip file.\n\t\tfunction _tr_flush_block(buf, // input block, or NULL if too old\n\t\tstored_len, // length of input block\n\t\teof // true if this is the last block for a file\n\t\t) {\n\t\t\tvar opt_lenb, static_lenb;// opt_len and static_len in bytes\n\t\t\tvar max_blindex = 0; // index of last bit length code of non zero freq\n\n\t\t\t// Build the Huffman trees unless a stored block is forced\n\t\t\tif (level > 0) {\n\t\t\t\t// Construct the literal and distance trees\n\t\t\t\tl_desc.build_tree(that);\n\n\t\t\t\td_desc.build_tree(that);\n\n\t\t\t\t// At this point, opt_len and static_len are the total bit lengths\n\t\t\t\t// of\n\t\t\t\t// the compressed block data, excluding the tree representations.\n\n\t\t\t\t// Build the bit length tree for the above two trees, and get the\n\t\t\t\t// index\n\t\t\t\t// in bl_order of the last bit length code to send.\n\t\t\t\tmax_blindex = build_bl_tree();\n\n\t\t\t\t// Determine the best encoding. Compute first the block length in\n\t\t\t\t// bytes\n\t\t\t\topt_lenb = (that.opt_len + 3 + 7) >>> 3;\n\t\t\t\tstatic_lenb = (that.static_len + 3 + 7) >>> 3;\n\n\t\t\t\tif (static_lenb <= opt_lenb)\n\t\t\t\t\topt_lenb = static_lenb;\n\t\t\t} else {\n\t\t\t\topt_lenb = static_lenb = stored_len + 5; // force a stored block\n\t\t\t}\n\n\t\t\tif ((stored_len + 4 <= opt_lenb) && buf != -1) {\n\t\t\t\t// 4: two words for the lengths\n\t\t\t\t// The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n\t\t\t\t// Otherwise we can't have processed more than WSIZE input bytes\n\t\t\t\t// since\n\t\t\t\t// the last block flush, because compression would have been\n\t\t\t\t// successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n\t\t\t\t// transform a block into a stored block.\n\t\t\t\t_tr_stored_block(buf, stored_len, eof);\n\t\t\t} else if (static_lenb == opt_lenb) {\n\t\t\t\tsend_bits((STATIC_TREES << 1) + (eof ? 1 : 0), 3);\n\t\t\t\tcompress_block(StaticTree.static_ltree, StaticTree.static_dtree);\n\t\t\t} else {\n\t\t\t\tsend_bits((DYN_TREES << 1) + (eof ? 1 : 0), 3);\n\t\t\t\tsend_all_trees(l_desc.max_code + 1, d_desc.max_code + 1, max_blindex + 1);\n\t\t\t\tcompress_block(dyn_ltree, dyn_dtree);\n\t\t\t}\n\n\t\t\t// The above check is made mod 2^32, for files larger than 512 MB\n\t\t\t// and uLong implemented on 32 bits.\n\n\t\t\tinit_block();\n\n\t\t\tif (eof) {\n\t\t\t\tbi_windup();\n\t\t\t}\n\t\t}\n\n\t\tfunction flush_block_only(eof) {\n\t\t\t_tr_flush_block(block_start >= 0 ? block_start : -1, strstart - block_start, eof);\n\t\t\tblock_start = strstart;\n\t\t\tstrm.flush_pending();\n\t\t}\n\n\t\t// Fill the window when the lookahead becomes insufficient.\n\t\t// Updates strstart and lookahead.\n\t\t//\n\t\t// IN assertion: lookahead < MIN_LOOKAHEAD\n\t\t// OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n\t\t// At least one byte has been read, or avail_in === 0; reads are\n\t\t// performed for at least two bytes (required for the zip translate_eol\n\t\t// option -- not supported here).\n\t\tfunction fill_window() {\n\t\t\tvar n, m;\n\t\t\tvar p;\n\t\t\tvar more; // Amount of free space at the end of the window.\n\n\t\t\tdo {\n\t\t\t\tmore = (window_size - lookahead - strstart);\n\n\t\t\t\t// Deal with !@#$% 64K limit:\n\t\t\t\tif (more === 0 && strstart === 0 && lookahead === 0) {\n\t\t\t\t\tmore = w_size;\n\t\t\t\t} else if (more == -1) {\n\t\t\t\t\t// Very unlikely, but possible on 16 bit machine if strstart ==\n\t\t\t\t\t// 0\n\t\t\t\t\t// and lookahead == 1 (input done one byte at time)\n\t\t\t\t\tmore--;\n\n\t\t\t\t\t// If the window is almost full and there is insufficient\n\t\t\t\t\t// lookahead,\n\t\t\t\t\t// move the upper half to the lower one to make room in the\n\t\t\t\t\t// upper half.\n\t\t\t\t} else if (strstart >= w_size + w_size - MIN_LOOKAHEAD) {\n\t\t\t\t\twindow.set(window.subarray(w_size, w_size + w_size), 0);\n\n\t\t\t\t\tmatch_start -= w_size;\n\t\t\t\t\tstrstart -= w_size; // we now have strstart >= MAX_DIST\n\t\t\t\t\tblock_start -= w_size;\n\n\t\t\t\t\t// Slide the hash table (could be avoided with 32 bit values\n\t\t\t\t\t// at the expense of memory usage). We slide even when level ==\n\t\t\t\t\t// 0\n\t\t\t\t\t// to keep the hash table consistent if we switch back to level\n\t\t\t\t\t// > 0\n\t\t\t\t\t// later. (Using level 0 permanently is not an optimal usage of\n\t\t\t\t\t// zlib, so we don't care about this pathological case.)\n\n\t\t\t\t\tn = hash_size;\n\t\t\t\t\tp = n;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tm = (head[--p] & 0xffff);\n\t\t\t\t\t\thead[p] = (m >= w_size ? m - w_size : 0);\n\t\t\t\t\t} while (--n !== 0);\n\n\t\t\t\t\tn = w_size;\n\t\t\t\t\tp = n;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tm = (prev[--p] & 0xffff);\n\t\t\t\t\t\tprev[p] = (m >= w_size ? m - w_size : 0);\n\t\t\t\t\t\t// If n is not on any hash chain, prev[n] is garbage but\n\t\t\t\t\t\t// its value will never be used.\n\t\t\t\t\t} while (--n !== 0);\n\t\t\t\t\tmore += w_size;\n\t\t\t\t}\n\n\t\t\t\tif (strm.avail_in === 0)\n\t\t\t\t\treturn;\n\n\t\t\t\t// If there was no sliding:\n\t\t\t\t// strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n\t\t\t\t// more == window_size - lookahead - strstart\n\t\t\t\t// => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n\t\t\t\t// => more >= window_size - 2*WSIZE + 2\n\t\t\t\t// In the BIG_MEM or MMAP case (not yet supported),\n\t\t\t\t// window_size == input_size + MIN_LOOKAHEAD &&\n\t\t\t\t// strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n\t\t\t\t// Otherwise, window_size == 2*WSIZE so more >= 2.\n\t\t\t\t// If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n\n\t\t\t\tn = strm.read_buf(window, strstart + lookahead, more);\n\t\t\t\tlookahead += n;\n\n\t\t\t\t// Initialize the hash value now that we have some input:\n\t\t\t\tif (lookahead >= MIN_MATCH) {\n\t\t\t\t\tins_h = window[strstart] & 0xff;\n\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[strstart + 1] & 0xff)) & hash_mask;\n\t\t\t\t}\n\t\t\t\t// If the whole input has less than MIN_MATCH bytes, ins_h is\n\t\t\t\t// garbage,\n\t\t\t\t// but this is not important since only literal bytes will be\n\t\t\t\t// emitted.\n\t\t\t} while (lookahead < MIN_LOOKAHEAD && strm.avail_in !== 0);\n\t\t}\n\n\t\t// Copy without compression as much as possible from the input stream,\n\t\t// return\n\t\t// the current block state.\n\t\t// This function does not insert new strings in the dictionary since\n\t\t// uncompressible data is probably not useful. This function is used\n\t\t// only for the level=0 compression option.\n\t\t// NOTE: this function should be optimized to avoid extra copying from\n\t\t// window to pending_buf.\n\t\tfunction deflate_stored(flush) {\n\t\t\t// Stored blocks are limited to 0xffff bytes, pending_buf is limited\n\t\t\t// to pending_buf_size, and each stored block has a 5 byte header:\n\n\t\t\tvar max_block_size = 0xffff;\n\t\t\tvar max_start;\n\n\t\t\tif (max_block_size > pending_buf_size - 5) {\n\t\t\t\tmax_block_size = pending_buf_size - 5;\n\t\t\t}\n\n\t\t\t// Copy as much as possible from input to output:\n\t\t\twhile (true) {\n\t\t\t\t// Fill the window as much as possible:\n\t\t\t\tif (lookahead <= 1) {\n\t\t\t\t\tfill_window();\n\t\t\t\t\tif (lookahead === 0 && flush == Z_NO_FLUSH)\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t\tif (lookahead === 0)\n\t\t\t\t\t\tbreak; // flush the current block\n\t\t\t\t}\n\n\t\t\t\tstrstart += lookahead;\n\t\t\t\tlookahead = 0;\n\n\t\t\t\t// Emit a stored block if pending_buf will be full:\n\t\t\t\tmax_start = block_start + max_block_size;\n\t\t\t\tif (strstart === 0 || strstart >= max_start) {\n\t\t\t\t\t// strstart === 0 is possible when wraparound on 16-bit machine\n\t\t\t\t\tlookahead = (strstart - max_start);\n\t\t\t\t\tstrstart = max_start;\n\n\t\t\t\t\tflush_block_only(false);\n\t\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\t\treturn NeedMore;\n\n\t\t\t\t}\n\n\t\t\t\t// Flush if we may have to slide, otherwise block_start may become\n\t\t\t\t// negative and the data will be gone:\n\t\t\t\tif (strstart - block_start >= w_size - MIN_LOOKAHEAD) {\n\t\t\t\t\tflush_block_only(false);\n\t\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tflush_block_only(flush == Z_FINISH);\n\t\t\tif (strm.avail_out === 0)\n\t\t\t\treturn (flush == Z_FINISH) ? FinishStarted : NeedMore;\n\n\t\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;\n\t\t}\n\n\t\tfunction longest_match(cur_match) {\n\t\t\tvar chain_length = max_chain_length; // max hash chain length\n\t\t\tvar scan = strstart; // current string\n\t\t\tvar match; // matched string\n\t\t\tvar len; // length of current match\n\t\t\tvar best_len = prev_length; // best match length so far\n\t\t\tvar limit = strstart > (w_size - MIN_LOOKAHEAD) ? strstart - (w_size - MIN_LOOKAHEAD) : 0;\n\t\t\tvar _nice_match = nice_match;\n\n\t\t\t// Stop when cur_match becomes <= limit. To simplify the code,\n\t\t\t// we prevent matches with the string of window index 0.\n\n\t\t\tvar wmask = w_mask;\n\n\t\t\tvar strend = strstart + MAX_MATCH;\n\t\t\tvar scan_end1 = window[scan + best_len - 1];\n\t\t\tvar scan_end = window[scan + best_len];\n\n\t\t\t// The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of\n\t\t\t// 16.\n\t\t\t// It is easy to get rid of this optimization if necessary.\n\n\t\t\t// Do not waste too much time if we already have a good match:\n\t\t\tif (prev_length >= good_match) {\n\t\t\t\tchain_length >>= 2;\n\t\t\t}\n\n\t\t\t// Do not look for matches beyond the end of the input. This is\n\t\t\t// necessary\n\t\t\t// to make deflate deterministic.\n\t\t\tif (_nice_match > lookahead)\n\t\t\t\t_nice_match = lookahead;\n\n\t\t\tdo {\n\t\t\t\tmatch = cur_match;\n\n\t\t\t\t// Skip to next match if the match length cannot increase\n\t\t\t\t// or if the match length is less than 2:\n\t\t\t\tif (window[match + best_len] != scan_end || window[match + best_len - 1] != scan_end1 || window[match] != window[scan]\n\t\t\t\t\t\t|| window[++match] != window[scan + 1])\n\t\t\t\t\tcontinue;\n\n\t\t\t\t// The check at best_len-1 can be removed because it will be made\n\t\t\t\t// again later. (This heuristic is not always a win.)\n\t\t\t\t// It is not necessary to compare scan[2] and match[2] since they\n\t\t\t\t// are always equal when the other bytes match, given that\n\t\t\t\t// the hash keys are equal and that HASH_BITS >= 8.\n\t\t\t\tscan += 2;\n\t\t\t\tmatch++;\n\n\t\t\t\t// We check for insufficient lookahead only every 8th comparison;\n\t\t\t\t// the 256th check will be made at strstart+258.\n\t\t\t\tdo {\n\t\t\t\t} while (window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match]\n\t\t\t\t\t\t&& window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match]\n\t\t\t\t\t\t&& window[++scan] == window[++match] && window[++scan] == window[++match] && scan < strend);\n\n\t\t\t\tlen = MAX_MATCH - (strend - scan);\n\t\t\t\tscan = strend - MAX_MATCH;\n\n\t\t\t\tif (len > best_len) {\n\t\t\t\t\tmatch_start = cur_match;\n\t\t\t\t\tbest_len = len;\n\t\t\t\t\tif (len >= _nice_match)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tscan_end1 = window[scan + best_len - 1];\n\t\t\t\t\tscan_end = window[scan + best_len];\n\t\t\t\t}\n\n\t\t\t} while ((cur_match = (prev[cur_match & wmask] & 0xffff)) > limit && --chain_length !== 0);\n\n\t\t\tif (best_len <= lookahead)\n\t\t\t\treturn best_len;\n\t\t\treturn lookahead;\n\t\t}\n\n\t\t// Compress as much as possible from the input stream, return the current\n\t\t// block state.\n\t\t// This function does not perform lazy evaluation of matches and inserts\n\t\t// new strings in the dictionary only for unmatched strings or for short\n\t\t// matches. It is used only for the fast compression options.\n\t\tfunction deflate_fast(flush) {\n\t\t\t// short hash_head = 0; // head of the hash chain\n\t\t\tvar hash_head = 0; // head of the hash chain\n\t\t\tvar bflush; // set if current block must be flushed\n\n\t\t\twhile (true) {\n\t\t\t\t// Make sure that we always have enough lookahead, except\n\t\t\t\t// at the end of the input file. We need MAX_MATCH bytes\n\t\t\t\t// for the next match, plus MIN_MATCH bytes to insert the\n\t\t\t\t// string following the next match.\n\t\t\t\tif (lookahead < MIN_LOOKAHEAD) {\n\t\t\t\t\tfill_window();\n\t\t\t\t\tif (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t\t}\n\t\t\t\t\tif (lookahead === 0)\n\t\t\t\t\t\tbreak; // flush the current block\n\t\t\t\t}\n\n\t\t\t\t// Insert the string window[strstart .. strstart+2] in the\n\t\t\t\t// dictionary, and set hash_head to the head of the hash chain:\n\t\t\t\tif (lookahead >= MIN_MATCH) {\n\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\n\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\n\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\n\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\n\t\t\t\t\thead[ins_h] = strstart;\n\t\t\t\t}\n\n\t\t\t\t// Find the longest match, discarding those <= prev_length.\n\t\t\t\t// At this point we have always match_length < MIN_MATCH\n\n\t\t\t\tif (hash_head !== 0 && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {\n\t\t\t\t\t// To simplify the code, we prevent matches with the string\n\t\t\t\t\t// of window index 0 (in particular we have to avoid a match\n\t\t\t\t\t// of the string with itself at the start of the input file).\n\t\t\t\t\tif (strategy != Z_HUFFMAN_ONLY) {\n\t\t\t\t\t\tmatch_length = longest_match(hash_head);\n\t\t\t\t\t}\n\t\t\t\t\t// longest_match() sets match_start\n\t\t\t\t}\n\t\t\t\tif (match_length >= MIN_MATCH) {\n\t\t\t\t\t// check_match(strstart, match_start, match_length);\n\n\t\t\t\t\tbflush = _tr_tally(strstart - match_start, match_length - MIN_MATCH);\n\n\t\t\t\t\tlookahead -= match_length;\n\n\t\t\t\t\t// Insert new strings in the hash table only if the match length\n\t\t\t\t\t// is not too large. This saves time but degrades compression.\n\t\t\t\t\tif (match_length <= max_lazy_match && lookahead >= MIN_MATCH) {\n\t\t\t\t\t\tmatch_length--; // string at strstart already in hash table\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tstrstart++;\n\n\t\t\t\t\t\t\tins_h = ((ins_h << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\t\t\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\n\t\t\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\n\t\t\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\n\t\t\t\t\t\t\thead[ins_h] = strstart;\n\n\t\t\t\t\t\t\t// strstart never exceeds WSIZE-MAX_MATCH, so there are\n\t\t\t\t\t\t\t// always MIN_MATCH bytes ahead.\n\t\t\t\t\t\t} while (--match_length !== 0);\n\t\t\t\t\t\tstrstart++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstrstart += match_length;\n\t\t\t\t\t\tmatch_length = 0;\n\t\t\t\t\t\tins_h = window[strstart] & 0xff;\n\n\t\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[strstart + 1] & 0xff)) & hash_mask;\n\t\t\t\t\t\t// If lookahead < MIN_MATCH, ins_h is garbage, but it does\n\t\t\t\t\t\t// not\n\t\t\t\t\t\t// matter since it will be recomputed at next deflate call.\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// No match, output a literal byte\n\n\t\t\t\t\tbflush = _tr_tally(0, window[strstart] & 0xff);\n\t\t\t\t\tlookahead--;\n\t\t\t\t\tstrstart++;\n\t\t\t\t}\n\t\t\t\tif (bflush) {\n\n\t\t\t\t\tflush_block_only(false);\n\t\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tflush_block_only(flush == Z_FINISH);\n\t\t\tif (strm.avail_out === 0) {\n\t\t\t\tif (flush == Z_FINISH)\n\t\t\t\t\treturn FinishStarted;\n\t\t\t\telse\n\t\t\t\t\treturn NeedMore;\n\t\t\t}\n\t\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;\n\t\t}\n\n\t\t// Same as above, but achieves better compression. We use a lazy\n\t\t// evaluation for matches: a match is finally adopted only if there is\n\t\t// no better match at the next window position.\n\t\tfunction deflate_slow(flush) {\n\t\t\t// short hash_head = 0; // head of hash chain\n\t\t\tvar hash_head = 0; // head of hash chain\n\t\t\tvar bflush; // set if current block must be flushed\n\t\t\tvar max_insert;\n\n\t\t\t// Process the input block.\n\t\t\twhile (true) {\n\t\t\t\t// Make sure that we always have enough lookahead, except\n\t\t\t\t// at the end of the input file. We need MAX_MATCH bytes\n\t\t\t\t// for the next match, plus MIN_MATCH bytes to insert the\n\t\t\t\t// string following the next match.\n\n\t\t\t\tif (lookahead < MIN_LOOKAHEAD) {\n\t\t\t\t\tfill_window();\n\t\t\t\t\tif (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t\t}\n\t\t\t\t\tif (lookahead === 0)\n\t\t\t\t\t\tbreak; // flush the current block\n\t\t\t\t}\n\n\t\t\t\t// Insert the string window[strstart .. strstart+2] in the\n\t\t\t\t// dictionary, and set hash_head to the head of the hash chain:\n\n\t\t\t\tif (lookahead >= MIN_MATCH) {\n\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\n\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\n\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\n\t\t\t\t\thead[ins_h] = strstart;\n\t\t\t\t}\n\n\t\t\t\t// Find the longest match, discarding those <= prev_length.\n\t\t\t\tprev_length = match_length;\n\t\t\t\tprev_match = match_start;\n\t\t\t\tmatch_length = MIN_MATCH - 1;\n\n\t\t\t\tif (hash_head !== 0 && prev_length < max_lazy_match && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {\n\t\t\t\t\t// To simplify the code, we prevent matches with the string\n\t\t\t\t\t// of window index 0 (in particular we have to avoid a match\n\t\t\t\t\t// of the string with itself at the start of the input file).\n\n\t\t\t\t\tif (strategy != Z_HUFFMAN_ONLY) {\n\t\t\t\t\t\tmatch_length = longest_match(hash_head);\n\t\t\t\t\t}\n\t\t\t\t\t// longest_match() sets match_start\n\n\t\t\t\t\tif (match_length <= 5 && (strategy == Z_FILTERED || (match_length == MIN_MATCH && strstart - match_start > 4096))) {\n\n\t\t\t\t\t\t// If prev_match is also MIN_MATCH, match_start is garbage\n\t\t\t\t\t\t// but we will ignore the current match anyway.\n\t\t\t\t\t\tmatch_length = MIN_MATCH - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If there was a match at the previous step and the current\n\t\t\t\t// match is not better, output the previous match:\n\t\t\t\tif (prev_length >= MIN_MATCH && match_length <= prev_length) {\n\t\t\t\t\tmax_insert = strstart + lookahead - MIN_MATCH;\n\t\t\t\t\t// Do not insert strings in hash table beyond this.\n\n\t\t\t\t\t// check_match(strstart-1, prev_match, prev_length);\n\n\t\t\t\t\tbflush = _tr_tally(strstart - 1 - prev_match, prev_length - MIN_MATCH);\n\n\t\t\t\t\t// Insert in hash table all strings up to the end of the match.\n\t\t\t\t\t// strstart-1 and strstart are already inserted. If there is not\n\t\t\t\t\t// enough lookahead, the last two strings are not inserted in\n\t\t\t\t\t// the hash table.\n\t\t\t\t\tlookahead -= prev_length - 1;\n\t\t\t\t\tprev_length -= 2;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (++strstart <= max_insert) {\n\t\t\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\t\t\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\n\t\t\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\n\t\t\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\n\t\t\t\t\t\t\thead[ins_h] = strstart;\n\t\t\t\t\t\t}\n\t\t\t\t\t} while (--prev_length !== 0);\n\t\t\t\t\tmatch_available = 0;\n\t\t\t\t\tmatch_length = MIN_MATCH - 1;\n\t\t\t\t\tstrstart++;\n\n\t\t\t\t\tif (bflush) {\n\t\t\t\t\t\tflush_block_only(false);\n\t\t\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t\t}\n\t\t\t\t} else if (match_available !== 0) {\n\n\t\t\t\t\t// If there was no match at the previous position, output a\n\t\t\t\t\t// single literal. If there was a match but the current match\n\t\t\t\t\t// is longer, truncate the previous match to a single literal.\n\n\t\t\t\t\tbflush = _tr_tally(0, window[strstart - 1] & 0xff);\n\n\t\t\t\t\tif (bflush) {\n\t\t\t\t\t\tflush_block_only(false);\n\t\t\t\t\t}\n\t\t\t\t\tstrstart++;\n\t\t\t\t\tlookahead--;\n\t\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t} else {\n\t\t\t\t\t// There is no previous match to compare with, wait for\n\t\t\t\t\t// the next step to decide.\n\n\t\t\t\t\tmatch_available = 1;\n\t\t\t\t\tstrstart++;\n\t\t\t\t\tlookahead--;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (match_available !== 0) {\n\t\t\t\tbflush = _tr_tally(0, window[strstart - 1] & 0xff);\n\t\t\t\tmatch_available = 0;\n\t\t\t}\n\t\t\tflush_block_only(flush == Z_FINISH);\n\n\t\t\tif (strm.avail_out === 0) {\n\t\t\t\tif (flush == Z_FINISH)\n\t\t\t\t\treturn FinishStarted;\n\t\t\t\telse\n\t\t\t\t\treturn NeedMore;\n\t\t\t}\n\n\t\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;\n\t\t}\n\n\t\tfunction deflateReset(strm) {\n\t\t\tstrm.total_in = strm.total_out = 0;\n\t\t\tstrm.msg = null; //\n\t\t\t\n\t\t\tthat.pending = 0;\n\t\t\tthat.pending_out = 0;\n\n\t\t\tstatus = BUSY_STATE;\n\n\t\t\tlast_flush = Z_NO_FLUSH;\n\n\t\t\ttr_init();\n\t\t\tlm_init();\n\t\t\treturn Z_OK;\n\t\t}\n\n\t\tthat.deflateInit = function(strm, _level, bits, _method, memLevel, _strategy) {\n\t\t\tif (!_method)\n\t\t\t\t_method = Z_DEFLATED;\n\t\t\tif (!memLevel)\n\t\t\t\tmemLevel = DEF_MEM_LEVEL;\n\t\t\tif (!_strategy)\n\t\t\t\t_strategy = Z_DEFAULT_STRATEGY;\n\n\t\t\t// byte[] my_version=ZLIB_VERSION;\n\n\t\t\t//\n\t\t\t// if (!version || version[0] != my_version[0]\n\t\t\t// || stream_size != sizeof(z_stream)) {\n\t\t\t// return Z_VERSION_ERROR;\n\t\t\t// }\n\n\t\t\tstrm.msg = null;\n\n\t\t\tif (_level == Z_DEFAULT_COMPRESSION)\n\t\t\t\t_level = 6;\n\n\t\t\tif (memLevel < 1 || memLevel > MAX_MEM_LEVEL || _method != Z_DEFLATED || bits < 9 || bits > 15 || _level < 0 || _level > 9 || _strategy < 0\n\t\t\t\t\t|| _strategy > Z_HUFFMAN_ONLY) {\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\n\t\t\tstrm.dstate = that;\n\n\t\t\tw_bits = bits;\n\t\t\tw_size = 1 << w_bits;\n\t\t\tw_mask = w_size - 1;\n\n\t\t\thash_bits = memLevel + 7;\n\t\t\thash_size = 1 << hash_bits;\n\t\t\thash_mask = hash_size - 1;\n\t\t\thash_shift = Math.floor((hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n\t\t\twindow = new Uint8Array(w_size * 2);\n\t\t\tprev = [];\n\t\t\thead = [];\n\n\t\t\tlit_bufsize = 1 << (memLevel + 6); // 16K elements by default\n\n\t\t\t// We overlay pending_buf and d_buf+l_buf. This works since the average\n\t\t\t// output size for (length,distance) codes is <= 24 bits.\n\t\t\tthat.pending_buf = new Uint8Array(lit_bufsize * 4);\n\t\t\tpending_buf_size = lit_bufsize * 4;\n\n\t\t\td_buf = Math.floor(lit_bufsize / 2);\n\t\t\tl_buf = (1 + 2) * lit_bufsize;\n\n\t\t\tlevel = _level;\n\n\t\t\tstrategy = _strategy;\n\t\t\tmethod = _method & 0xff;\n\n\t\t\treturn deflateReset(strm);\n\t\t};\n\n\t\tthat.deflateEnd = function() {\n\t\t\tif (status != INIT_STATE && status != BUSY_STATE && status != FINISH_STATE) {\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\t\t\t// Deallocate in reverse order of allocations:\n\t\t\tthat.pending_buf = null;\n\t\t\thead = null;\n\t\t\tprev = null;\n\t\t\twindow = null;\n\t\t\t// free\n\t\t\tthat.dstate = null;\n\t\t\treturn status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;\n\t\t};\n\n\t\tthat.deflateParams = function(strm, _level, _strategy) {\n\t\t\tvar err = Z_OK;\n\n\t\t\tif (_level == Z_DEFAULT_COMPRESSION) {\n\t\t\t\t_level = 6;\n\t\t\t}\n\t\t\tif (_level < 0 || _level > 9 || _strategy < 0 || _strategy > Z_HUFFMAN_ONLY) {\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\n\t\t\tif (config_table[level].func != config_table[_level].func && strm.total_in !== 0) {\n\t\t\t\t// Flush the last buffer:\n\t\t\t\terr = strm.deflate(Z_PARTIAL_FLUSH);\n\t\t\t}\n\n\t\t\tif (level != _level) {\n\t\t\t\tlevel = _level;\n\t\t\t\tmax_lazy_match = config_table[level].max_lazy;\n\t\t\t\tgood_match = config_table[level].good_length;\n\t\t\t\tnice_match = config_table[level].nice_length;\n\t\t\t\tmax_chain_length = config_table[level].max_chain;\n\t\t\t}\n\t\t\tstrategy = _strategy;\n\t\t\treturn err;\n\t\t};\n\n\t\tthat.deflateSetDictionary = function(strm, dictionary, dictLength) {\n\t\t\tvar length = dictLength;\n\t\t\tvar n, index = 0;\n\n\t\t\tif (!dictionary || status != INIT_STATE)\n\t\t\t\treturn Z_STREAM_ERROR;\n\n\t\t\tif (length < MIN_MATCH)\n\t\t\t\treturn Z_OK;\n\t\t\tif (length > w_size - MIN_LOOKAHEAD) {\n\t\t\t\tlength = w_size - MIN_LOOKAHEAD;\n\t\t\t\tindex = dictLength - length; // use the tail of the dictionary\n\t\t\t}\n\t\t\twindow.set(dictionary.subarray(index, index + length), 0);\n\n\t\t\tstrstart = length;\n\t\t\tblock_start = length;\n\n\t\t\t// Insert all strings in the hash table (except for the last two bytes).\n\t\t\t// s->lookahead stays null, so s->ins_h will be recomputed at the next\n\t\t\t// call of fill_window.\n\n\t\t\tins_h = window[0] & 0xff;\n\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[1] & 0xff)) & hash_mask;\n\n\t\t\tfor (n = 0; n <= length - MIN_MATCH; n++) {\n\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(n) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\t\t\t\tprev[n & w_mask] = head[ins_h];\n\t\t\t\thead[ins_h] = n;\n\t\t\t}\n\t\t\treturn Z_OK;\n\t\t};\n\n\t\tthat.deflate = function(_strm, flush) {\n\t\t\tvar i, header, level_flags, old_flush, bstate;\n\n\t\t\tif (flush > Z_FINISH || flush < 0) {\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\n\t\t\tif (!_strm.next_out || (!_strm.next_in && _strm.avail_in !== 0) || (status == FINISH_STATE && flush != Z_FINISH)) {\n\t\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_STREAM_ERROR)];\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\t\t\tif (_strm.avail_out === 0) {\n\t\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];\n\t\t\t\treturn Z_BUF_ERROR;\n\t\t\t}\n\n\t\t\tstrm = _strm; // just in case\n\t\t\told_flush = last_flush;\n\t\t\tlast_flush = flush;\n\n\t\t\t// Write the zlib header\n\t\t\tif (status == INIT_STATE) {\n\t\t\t\theader = (Z_DEFLATED + ((w_bits - 8) << 4)) << 8;\n\t\t\t\tlevel_flags = ((level - 1) & 0xff) >> 1;\n\n\t\t\t\tif (level_flags > 3)\n\t\t\t\t\tlevel_flags = 3;\n\t\t\t\theader |= (level_flags << 6);\n\t\t\t\tif (strstart !== 0)\n\t\t\t\t\theader |= PRESET_DICT;\n\t\t\t\theader += 31 - (header % 31);\n\n\t\t\t\tstatus = BUSY_STATE;\n\t\t\t\tputShortMSB(header);\n\t\t\t}\n\n\t\t\t// Flush as much pending output as possible\n\t\t\tif (that.pending !== 0) {\n\t\t\t\tstrm.flush_pending();\n\t\t\t\tif (strm.avail_out === 0) {\n\t\t\t\t\t// console.log(\" avail_out==0\");\n\t\t\t\t\t// Since avail_out is 0, deflate will be called again with\n\t\t\t\t\t// more output space, but possibly with both pending and\n\t\t\t\t\t// avail_in equal to zero. There won't be anything to do,\n\t\t\t\t\t// but this is not an error situation so make sure we\n\t\t\t\t\t// return OK instead of BUF_ERROR at next call of deflate:\n\t\t\t\t\tlast_flush = -1;\n\t\t\t\t\treturn Z_OK;\n\t\t\t\t}\n\n\t\t\t\t// Make sure there is something to do and avoid duplicate\n\t\t\t\t// consecutive\n\t\t\t\t// flushes. For repeated and useless calls with Z_FINISH, we keep\n\t\t\t\t// returning Z_STREAM_END instead of Z_BUFF_ERROR.\n\t\t\t} else if (strm.avail_in === 0 && flush <= old_flush && flush != Z_FINISH) {\n\t\t\t\tstrm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];\n\t\t\t\treturn Z_BUF_ERROR;\n\t\t\t}\n\n\t\t\t// User must not provide more input after the first FINISH:\n\t\t\tif (status == FINISH_STATE && strm.avail_in !== 0) {\n\t\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];\n\t\t\t\treturn Z_BUF_ERROR;\n\t\t\t}\n\n\t\t\t// Start a new block or continue the current one.\n\t\t\tif (strm.avail_in !== 0 || lookahead !== 0 || (flush != Z_NO_FLUSH && status != FINISH_STATE)) {\n\t\t\t\tbstate = -1;\n\t\t\t\tswitch (config_table[level].func) {\n\t\t\t\tcase STORED:\n\t\t\t\t\tbstate = deflate_stored(flush);\n\t\t\t\t\tbreak;\n\t\t\t\tcase FAST:\n\t\t\t\t\tbstate = deflate_fast(flush);\n\t\t\t\t\tbreak;\n\t\t\t\tcase SLOW:\n\t\t\t\t\tbstate = deflate_slow(flush);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t}\n\n\t\t\t\tif (bstate == FinishStarted || bstate == FinishDone) {\n\t\t\t\t\tstatus = FINISH_STATE;\n\t\t\t\t}\n\t\t\t\tif (bstate == NeedMore || bstate == FinishStarted) {\n\t\t\t\t\tif (strm.avail_out === 0) {\n\t\t\t\t\t\tlast_flush = -1; // avoid BUF_ERROR next call, see above\n\t\t\t\t\t}\n\t\t\t\t\treturn Z_OK;\n\t\t\t\t\t// If flush != Z_NO_FLUSH && avail_out === 0, the next call\n\t\t\t\t\t// of deflate should use the same flush parameter to make sure\n\t\t\t\t\t// that the flush is complete. So we don't have to output an\n\t\t\t\t\t// empty block here, this will be done at next call. This also\n\t\t\t\t\t// ensures that for a very small output buffer, we emit at most\n\t\t\t\t\t// one empty block.\n\t\t\t\t}\n\n\t\t\t\tif (bstate == BlockDone) {\n\t\t\t\t\tif (flush == Z_PARTIAL_FLUSH) {\n\t\t\t\t\t\t_tr_align();\n\t\t\t\t\t} else { // FULL_FLUSH or SYNC_FLUSH\n\t\t\t\t\t\t_tr_stored_block(0, 0, false);\n\t\t\t\t\t\t// For a full flush, this empty block will be recognized\n\t\t\t\t\t\t// as a special marker by inflate_sync().\n\t\t\t\t\t\tif (flush == Z_FULL_FLUSH) {\n\t\t\t\t\t\t\t// state.head[s.hash_size-1]=0;\n\t\t\t\t\t\t\tfor (i = 0; i < hash_size/*-1*/; i++)\n\t\t\t\t\t\t\t\t// forget history\n\t\t\t\t\t\t\t\thead[i] = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstrm.flush_pending();\n\t\t\t\t\tif (strm.avail_out === 0) {\n\t\t\t\t\t\tlast_flush = -1; // avoid BUF_ERROR at next call, see above\n\t\t\t\t\t\treturn Z_OK;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (flush != Z_FINISH)\n\t\t\t\treturn Z_OK;\n\t\t\treturn Z_STREAM_END;\n\t\t};\n\t}\n\n\t// ZStream\n\n\tfunction ZStream() {\n\t\tvar that = this;\n\t\tthat.next_in_index = 0;\n\t\tthat.next_out_index = 0;\n\t\t// that.next_in; // next input byte\n\t\tthat.avail_in = 0; // number of bytes available at next_in\n\t\tthat.total_in = 0; // total nb of input bytes read so far\n\t\t// that.next_out; // next output byte should be put there\n\t\tthat.avail_out = 0; // remaining free space at next_out\n\t\tthat.total_out = 0; // total nb of bytes output so far\n\t\t// that.msg;\n\t\t// that.dstate;\n\t}\n\n\tZStream.prototype = {\n\t\tdeflateInit : function(level, bits) {\n\t\t\tvar that = this;\n\t\t\tthat.dstate = new Deflate();\n\t\t\tif (!bits)\n\t\t\t\tbits = MAX_BITS;\n\t\t\treturn that.dstate.deflateInit(that, level, bits);\n\t\t},\n\n\t\tdeflate : function(flush) {\n\t\t\tvar that = this;\n\t\t\tif (!that.dstate) {\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\t\t\treturn that.dstate.deflate(that, flush);\n\t\t},\n\n\t\tdeflateEnd : function() {\n\t\t\tvar that = this;\n\t\t\tif (!that.dstate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\tvar ret = that.dstate.deflateEnd();\n\t\t\tthat.dstate = null;\n\t\t\treturn ret;\n\t\t},\n\n\t\tdeflateParams : function(level, strategy) {\n\t\t\tvar that = this;\n\t\t\tif (!that.dstate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn that.dstate.deflateParams(that, level, strategy);\n\t\t},\n\n\t\tdeflateSetDictionary : function(dictionary, dictLength) {\n\t\t\tvar that = this;\n\t\t\tif (!that.dstate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn that.dstate.deflateSetDictionary(that, dictionary, dictLength);\n\t\t},\n\n\t\t// Read a new buffer from the current input stream, update the\n\t\t// total number of bytes read. All deflate() input goes through\n\t\t// this function so some applications may wish to modify it to avoid\n\t\t// allocating a large strm->next_in buffer and copying from it.\n\t\t// (See also flush_pending()).\n\t\tread_buf : function(buf, start, size) {\n\t\t\tvar that = this;\n\t\t\tvar len = that.avail_in;\n\t\t\tif (len > size)\n\t\t\t\tlen = size;\n\t\t\tif (len === 0)\n\t\t\t\treturn 0;\n\t\t\tthat.avail_in -= len;\n\t\t\tbuf.set(that.next_in.subarray(that.next_in_index, that.next_in_index + len), start);\n\t\t\tthat.next_in_index += len;\n\t\t\tthat.total_in += len;\n\t\t\treturn len;\n\t\t},\n\n\t\t// Flush as much pending output as possible. All deflate() output goes\n\t\t// through this function so some applications may wish to modify it\n\t\t// to avoid allocating a large strm->next_out buffer and copying into it.\n\t\t// (See also read_buf()).\n\t\tflush_pending : function() {\n\t\t\tvar that = this;\n\t\t\tvar len = that.dstate.pending;\n\n\t\t\tif (len > that.avail_out)\n\t\t\t\tlen = that.avail_out;\n\t\t\tif (len === 0)\n\t\t\t\treturn;\n\n\t\t\t// if (that.dstate.pending_buf.length <= that.dstate.pending_out || that.next_out.length <= that.next_out_index\n\t\t\t// || that.dstate.pending_buf.length < (that.dstate.pending_out + len) || that.next_out.length < (that.next_out_index +\n\t\t\t// len)) {\n\t\t\t// console.log(that.dstate.pending_buf.length + \", \" + that.dstate.pending_out + \", \" + that.next_out.length + \", \" +\n\t\t\t// that.next_out_index + \", \" + len);\n\t\t\t// console.log(\"avail_out=\" + that.avail_out);\n\t\t\t// }\n\n\t\t\tthat.next_out.set(that.dstate.pending_buf.subarray(that.dstate.pending_out, that.dstate.pending_out + len), that.next_out_index);\n\n\t\t\tthat.next_out_index += len;\n\t\t\tthat.dstate.pending_out += len;\n\t\t\tthat.total_out += len;\n\t\t\tthat.avail_out -= len;\n\t\t\tthat.dstate.pending -= len;\n\t\t\tif (that.dstate.pending === 0) {\n\t\t\t\tthat.dstate.pending_out = 0;\n\t\t\t}\n\t\t}\n\t};\n\n\t// Deflater\n\n\tfunction Deflater(options) {\n\t\tvar that = this;\n\t\tvar z = new ZStream();\n\t\tvar bufsize = 512;\n\t\tvar flush = Z_NO_FLUSH;\n\t\tvar buf = new Uint8Array(bufsize);\n\t\tvar level = options ? options.level : Z_DEFAULT_COMPRESSION;\n\t\tif (typeof level == \"undefined\")\n\t\t\tlevel = Z_DEFAULT_COMPRESSION;\n\t\tz.deflateInit(level);\n\t\tz.next_out = buf;\n\n\t\tthat.append = function(data, onprogress) {\n\t\t\tvar err, buffers = [], lastIndex = 0, bufferIndex = 0, bufferSize = 0, array;\n\t\t\tif (!data.length)\n\t\t\t\treturn;\n\t\t\tz.next_in_index = 0;\n\t\t\tz.next_in = data;\n\t\t\tz.avail_in = data.length;\n\t\t\tdo {\n\t\t\t\tz.next_out_index = 0;\n\t\t\t\tz.avail_out = bufsize;\n\t\t\t\terr = z.deflate(flush);\n\t\t\t\tif (err != Z_OK)\n\t\t\t\t\tthrow new Error(\"deflating: \" + z.msg);\n\t\t\t\tif (z.next_out_index)\n\t\t\t\t\tif (z.next_out_index == bufsize)\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\n\t\t\t\tbufferSize += z.next_out_index;\n\t\t\t\tif (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {\n\t\t\t\t\tonprogress(z.next_in_index);\n\t\t\t\t\tlastIndex = z.next_in_index;\n\t\t\t\t}\n\t\t\t} while (z.avail_in > 0 || z.avail_out === 0);\n\t\t\tarray = new Uint8Array(bufferSize);\n\t\t\tbuffers.forEach(function(chunk) {\n\t\t\t\tarray.set(chunk, bufferIndex);\n\t\t\t\tbufferIndex += chunk.length;\n\t\t\t});\n\t\t\treturn array;\n\t\t};\n\t\tthat.flush = function() {\n\t\t\tvar err, buffers = [], bufferIndex = 0, bufferSize = 0, array;\n\t\t\tdo {\n\t\t\t\tz.next_out_index = 0;\n\t\t\t\tz.avail_out = bufsize;\n\t\t\t\terr = z.deflate(Z_FINISH);\n\t\t\t\tif (err != Z_STREAM_END && err != Z_OK)\n\t\t\t\t\tthrow new Error(\"deflating: \" + z.msg);\n\t\t\t\tif (bufsize - z.avail_out > 0)\n\t\t\t\t\tbuffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\n\t\t\t\tbufferSize += z.next_out_index;\n\t\t\t} while (z.avail_in > 0 || z.avail_out === 0);\n\t\t\tz.deflateEnd();\n\t\t\tarray = new Uint8Array(bufferSize);\n\t\t\tbuffers.forEach(function(chunk) {\n\t\t\t\tarray.set(chunk, bufferIndex);\n\t\t\t\tbufferIndex += chunk.length;\n\t\t\t});\n\t\t\treturn array;\n\t\t};\n\t}\n\n\t// 'zip' may not be defined in z-worker and some tests\n\tvar env = global.zip || global;\n\tenv.Deflater = env._jzlib_Deflater = Deflater;\n})(this);\n")],
  inflater: [zWorker, createUrl("/*\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.\n * JZlib is based on zlib-1.1.3, so all credit should go authors\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\n * and contributors of zlib.\n */\n\n(function(global) {\n\t\"use strict\";\n\n\t// Global\n\tvar MAX_BITS = 15;\n\n\tvar Z_OK = 0;\n\tvar Z_STREAM_END = 1;\n\tvar Z_NEED_DICT = 2;\n\tvar Z_STREAM_ERROR = -2;\n\tvar Z_DATA_ERROR = -3;\n\tvar Z_MEM_ERROR = -4;\n\tvar Z_BUF_ERROR = -5;\n\n\tvar inflate_mask = [ 0x00000000, 0x00000001, 0x00000003, 0x00000007, 0x0000000f, 0x0000001f, 0x0000003f, 0x0000007f, 0x000000ff, 0x000001ff, 0x000003ff,\n\t\t\t0x000007ff, 0x00000fff, 0x00001fff, 0x00003fff, 0x00007fff, 0x0000ffff ];\n\n\tvar MANY = 1440;\n\n\t// JZlib version : \"1.0.2\"\n\tvar Z_NO_FLUSH = 0;\n\tvar Z_FINISH = 4;\n\n\t// InfTree\n\tvar fixed_bl = 9;\n\tvar fixed_bd = 5;\n\n\tvar fixed_tl = [ 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 192, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 160, 0, 8, 0,\n\t\t\t0, 8, 128, 0, 8, 64, 0, 9, 224, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 144, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 208, 81, 7, 17, 0, 8, 104, 0, 8, 40,\n\t\t\t0, 9, 176, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 240, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 200, 81, 7, 13,\n\t\t\t0, 8, 100, 0, 8, 36, 0, 9, 168, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 232, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 152, 84, 7, 83, 0, 8, 124, 0, 8, 60,\n\t\t\t0, 9, 216, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 184, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 248, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7,\n\t\t\t35, 0, 8, 114, 0, 8, 50, 0, 9, 196, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 164, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 228, 80, 7, 7, 0, 8, 90, 0, 8,\n\t\t\t26, 0, 9, 148, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 212, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 180, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 244, 80,\n\t\t\t7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 204, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 172, 0, 8, 6, 0, 8, 134, 0,\n\t\t\t8, 70, 0, 9, 236, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 156, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 220, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 188, 0,\n\t\t\t8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 252, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 194, 80, 7, 10, 0, 8, 97,\n\t\t\t0, 8, 33, 0, 9, 162, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 226, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 146, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 210,\n\t\t\t81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 178, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 242, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117,\n\t\t\t0, 8, 53, 0, 9, 202, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 170, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 234, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 154,\n\t\t\t84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 218, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 186, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 250, 80, 7, 3, 0, 8, 83,\n\t\t\t0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 198, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 166, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 230,\n\t\t\t80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 150, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 214, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 182, 0, 8, 11, 0, 8, 139,\n\t\t\t0, 8, 75, 0, 9, 246, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 206, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 174,\n\t\t\t0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 238, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 158, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 222, 82, 7, 27, 0, 8, 111,\n\t\t\t0, 8, 47, 0, 9, 190, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 254, 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9,\n\t\t\t193, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 161, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 225, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 145, 83, 7, 59, 0, 8,\n\t\t\t120, 0, 8, 56, 0, 9, 209, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 177, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 241, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8,\n\t\t\t227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 201, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 169, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 233, 80, 7, 8, 0, 8,\n\t\t\t92, 0, 8, 28, 0, 9, 153, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 217, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 185, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9,\n\t\t\t249, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 197, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 165, 0, 8, 2, 0, 8,\n\t\t\t130, 0, 8, 66, 0, 9, 229, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 149, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 213, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9,\n\t\t\t181, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 245, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 205, 81, 7, 15, 0, 8,\n\t\t\t102, 0, 8, 38, 0, 9, 173, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 237, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 157, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9,\n\t\t\t221, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 189, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 253, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0,\n\t\t\t8, 113, 0, 8, 49, 0, 9, 195, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 163, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 227, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9,\n\t\t\t147, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 211, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 179, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 243, 80, 7, 4, 0, 8,\n\t\t\t85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 203, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 171, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9,\n\t\t\t235, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 155, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 219, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 187, 0, 8, 13, 0, 8,\n\t\t\t141, 0, 8, 77, 0, 9, 251, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 199, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9,\n\t\t\t167, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 231, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 151, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 215, 82, 7, 19, 0, 8,\n\t\t\t107, 0, 8, 43, 0, 9, 183, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 247, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9,\n\t\t\t207, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 175, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 239, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 159, 84, 7, 99, 0, 8,\n\t\t\t127, 0, 8, 63, 0, 9, 223, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 191, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 255 ];\n\tvar fixed_td = [ 80, 5, 1, 87, 5, 257, 83, 5, 17, 91, 5, 4097, 81, 5, 5, 89, 5, 1025, 85, 5, 65, 93, 5, 16385, 80, 5, 3, 88, 5, 513, 84, 5, 33, 92, 5,\n\t\t\t8193, 82, 5, 9, 90, 5, 2049, 86, 5, 129, 192, 5, 24577, 80, 5, 2, 87, 5, 385, 83, 5, 25, 91, 5, 6145, 81, 5, 7, 89, 5, 1537, 85, 5, 97, 93, 5,\n\t\t\t24577, 80, 5, 4, 88, 5, 769, 84, 5, 49, 92, 5, 12289, 82, 5, 13, 90, 5, 3073, 86, 5, 193, 192, 5, 24577 ];\n\n\t// Tables for deflate from PKZIP's appnote.txt.\n\tvar cplens = [ // Copy lengths for literal codes 257..285\n\t3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0 ];\n\n\t// see note #13 above about 258\n\tvar cplext = [ // Extra bits for literal codes 257..285\n\t0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112 // 112==invalid\n\t];\n\n\tvar cpdist = [ // Copy offsets for distance codes 0..29\n\t1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577 ];\n\n\tvar cpdext = [ // Extra bits for distance codes\n\t0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 ];\n\n\t// If BMAX needs to be larger than 16, then h and x[] should be uLong.\n\tvar BMAX = 15; // maximum bit length of any code\n\n\tfunction InfTree() {\n\t\tvar that = this;\n\n\t\tvar hn; // hufts used in space\n\t\tvar v; // work area for huft_build\n\t\tvar c; // bit length count table\n\t\tvar r; // table entry for structure assignment\n\t\tvar u; // table stack\n\t\tvar x; // bit offsets, then code stack\n\n\t\tfunction huft_build(b, // code lengths in bits (all assumed <=\n\t\t// BMAX)\n\t\tbindex, n, // number of codes (assumed <= 288)\n\t\ts, // number of simple-valued codes (0..s-1)\n\t\td, // list of base values for non-simple codes\n\t\te, // list of extra bits for non-simple codes\n\t\tt, // result: starting table\n\t\tm, // maximum lookup bits, returns actual\n\t\thp,// space for trees\n\t\thn,// hufts used in space\n\t\tv // working area: values in order of bit length\n\t\t) {\n\t\t\t// Given a list of code lengths and a maximum table size, make a set of\n\t\t\t// tables to decode that set of codes. Return Z_OK on success,\n\t\t\t// Z_BUF_ERROR\n\t\t\t// if the given code set is incomplete (the tables are still built in\n\t\t\t// this\n\t\t\t// case), Z_DATA_ERROR if the input is invalid (an over-subscribed set\n\t\t\t// of\n\t\t\t// lengths), or Z_MEM_ERROR if not enough memory.\n\n\t\t\tvar a; // counter for codes of length k\n\t\t\tvar f; // i repeats in table every f entries\n\t\t\tvar g; // maximum code length\n\t\t\tvar h; // table level\n\t\t\tvar i; // counter, current code\n\t\t\tvar j; // counter\n\t\t\tvar k; // number of bits in current code\n\t\t\tvar l; // bits per table (returned in m)\n\t\t\tvar mask; // (1 << w) - 1, to avoid cc -O bug on HP\n\t\t\tvar p; // pointer into c[], b[], or v[]\n\t\t\tvar q; // points to current table\n\t\t\tvar w; // bits before this table == (l * h)\n\t\t\tvar xp; // pointer into x\n\t\t\tvar y; // number of dummy codes added\n\t\t\tvar z; // number of entries in current table\n\n\t\t\t// Generate counts for each bit length\n\n\t\t\tp = 0;\n\t\t\ti = n;\n\t\t\tdo {\n\t\t\t\tc[b[bindex + p]]++;\n\t\t\t\tp++;\n\t\t\t\ti--; // assume all entries <= BMAX\n\t\t\t} while (i !== 0);\n\n\t\t\tif (c[0] == n) { // null input--all zero length codes\n\t\t\t\tt[0] = -1;\n\t\t\t\tm[0] = 0;\n\t\t\t\treturn Z_OK;\n\t\t\t}\n\n\t\t\t// Find minimum and maximum length, bound *m by those\n\t\t\tl = m[0];\n\t\t\tfor (j = 1; j <= BMAX; j++)\n\t\t\t\tif (c[j] !== 0)\n\t\t\t\t\tbreak;\n\t\t\tk = j; // minimum code length\n\t\t\tif (l < j) {\n\t\t\t\tl = j;\n\t\t\t}\n\t\t\tfor (i = BMAX; i !== 0; i--) {\n\t\t\t\tif (c[i] !== 0)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tg = i; // maximum code length\n\t\t\tif (l > i) {\n\t\t\t\tl = i;\n\t\t\t}\n\t\t\tm[0] = l;\n\n\t\t\t// Adjust last length count to fill out codes, if needed\n\t\t\tfor (y = 1 << j; j < i; j++, y <<= 1) {\n\t\t\t\tif ((y -= c[j]) < 0) {\n\t\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ((y -= c[i]) < 0) {\n\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t}\n\t\t\tc[i] += y;\n\n\t\t\t// Generate starting offsets into the value table for each length\n\t\t\tx[1] = j = 0;\n\t\t\tp = 1;\n\t\t\txp = 2;\n\t\t\twhile (--i !== 0) { // note that i == g from above\n\t\t\t\tx[xp] = (j += c[p]);\n\t\t\t\txp++;\n\t\t\t\tp++;\n\t\t\t}\n\n\t\t\t// Make a table of values in order of bit lengths\n\t\t\ti = 0;\n\t\t\tp = 0;\n\t\t\tdo {\n\t\t\t\tif ((j = b[bindex + p]) !== 0) {\n\t\t\t\t\tv[x[j]++] = i;\n\t\t\t\t}\n\t\t\t\tp++;\n\t\t\t} while (++i < n);\n\t\t\tn = x[g]; // set n to length of v\n\n\t\t\t// Generate the Huffman codes and for each, make the table entries\n\t\t\tx[0] = i = 0; // first Huffman code is zero\n\t\t\tp = 0; // grab values in bit order\n\t\t\th = -1; // no tables yet--level -1\n\t\t\tw = -l; // bits decoded == (l * h)\n\t\t\tu[0] = 0; // just to keep compilers happy\n\t\t\tq = 0; // ditto\n\t\t\tz = 0; // ditto\n\n\t\t\t// go through the bit lengths (k already is bits in shortest code)\n\t\t\tfor (; k <= g; k++) {\n\t\t\t\ta = c[k];\n\t\t\t\twhile (a-- !== 0) {\n\t\t\t\t\t// here i is the Huffman code of length k bits for value *p\n\t\t\t\t\t// make tables up to required level\n\t\t\t\t\twhile (k > w + l) {\n\t\t\t\t\t\th++;\n\t\t\t\t\t\tw += l; // previous table always l bits\n\t\t\t\t\t\t// compute minimum size table less than or equal to l bits\n\t\t\t\t\t\tz = g - w;\n\t\t\t\t\t\tz = (z > l) ? l : z; // table size upper limit\n\t\t\t\t\t\tif ((f = 1 << (j = k - w)) > a + 1) { // try a k-w bit table\n\t\t\t\t\t\t\t// too few codes for\n\t\t\t\t\t\t\t// k-w bit table\n\t\t\t\t\t\t\tf -= a + 1; // deduct codes from patterns left\n\t\t\t\t\t\t\txp = k;\n\t\t\t\t\t\t\tif (j < z) {\n\t\t\t\t\t\t\t\twhile (++j < z) { // try smaller tables up to z bits\n\t\t\t\t\t\t\t\t\tif ((f <<= 1) <= c[++xp])\n\t\t\t\t\t\t\t\t\t\tbreak; // enough codes to use up j bits\n\t\t\t\t\t\t\t\t\tf -= c[xp]; // else deduct codes from patterns\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tz = 1 << j; // table entries for j-bit table\n\n\t\t\t\t\t\t// allocate new table\n\t\t\t\t\t\tif (hn[0] + z > MANY) { // (note: doesn't matter for fixed)\n\t\t\t\t\t\t\treturn Z_DATA_ERROR; // overflow of MANY\n\t\t\t\t\t\t}\n\t\t\t\t\t\tu[h] = q = /* hp+ */hn[0]; // DEBUG\n\t\t\t\t\t\thn[0] += z;\n\n\t\t\t\t\t\t// connect to last table, if there is one\n\t\t\t\t\t\tif (h !== 0) {\n\t\t\t\t\t\t\tx[h] = i; // save pattern for backing up\n\t\t\t\t\t\t\tr[0] = /* (byte) */j; // bits in this table\n\t\t\t\t\t\t\tr[1] = /* (byte) */l; // bits to dump before this table\n\t\t\t\t\t\t\tj = i >>> (w - l);\n\t\t\t\t\t\t\tr[2] = /* (int) */(q - u[h - 1] - j); // offset to this table\n\t\t\t\t\t\t\thp.set(r, (u[h - 1] + j) * 3);\n\t\t\t\t\t\t\t// to\n\t\t\t\t\t\t\t// last\n\t\t\t\t\t\t\t// table\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tt[0] = q; // first table is returned result\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// set up table entry in r\n\t\t\t\t\tr[1] = /* (byte) */(k - w);\n\t\t\t\t\tif (p >= n) {\n\t\t\t\t\t\tr[0] = 128 + 64; // out of values--invalid code\n\t\t\t\t\t} else if (v[p] < s) {\n\t\t\t\t\t\tr[0] = /* (byte) */(v[p] < 256 ? 0 : 32 + 64); // 256 is\n\t\t\t\t\t\t// end-of-block\n\t\t\t\t\t\tr[2] = v[p++]; // simple code is just the value\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr[0] = /* (byte) */(e[v[p] - s] + 16 + 64); // non-simple--look\n\t\t\t\t\t\t// up in lists\n\t\t\t\t\t\tr[2] = d[v[p++] - s];\n\t\t\t\t\t}\n\n\t\t\t\t\t// fill code-like entries with r\n\t\t\t\t\tf = 1 << (k - w);\n\t\t\t\t\tfor (j = i >>> w; j < z; j += f) {\n\t\t\t\t\t\thp.set(r, (q + j) * 3);\n\t\t\t\t\t}\n\n\t\t\t\t\t// backwards increment the k-bit code i\n\t\t\t\t\tfor (j = 1 << (k - 1); (i & j) !== 0; j >>>= 1) {\n\t\t\t\t\t\ti ^= j;\n\t\t\t\t\t}\n\t\t\t\t\ti ^= j;\n\n\t\t\t\t\t// backup over finished tables\n\t\t\t\t\tmask = (1 << w) - 1; // needed on HP, cc -O bug\n\t\t\t\t\twhile ((i & mask) != x[h]) {\n\t\t\t\t\t\th--; // don't need to update q\n\t\t\t\t\t\tw -= l;\n\t\t\t\t\t\tmask = (1 << w) - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Return Z_BUF_ERROR if we were given an incomplete table\n\t\t\treturn y !== 0 && g != 1 ? Z_BUF_ERROR : Z_OK;\n\t\t}\n\n\t\tfunction initWorkArea(vsize) {\n\t\t\tvar i;\n\t\t\tif (!hn) {\n\t\t\t\thn = []; // []; //new Array(1);\n\t\t\t\tv = []; // new Array(vsize);\n\t\t\t\tc = new Int32Array(BMAX + 1); // new Array(BMAX + 1);\n\t\t\t\tr = []; // new Array(3);\n\t\t\t\tu = new Int32Array(BMAX); // new Array(BMAX);\n\t\t\t\tx = new Int32Array(BMAX + 1); // new Array(BMAX + 1);\n\t\t\t}\n\t\t\tif (v.length < vsize) {\n\t\t\t\tv = []; // new Array(vsize);\n\t\t\t}\n\t\t\tfor (i = 0; i < vsize; i++) {\n\t\t\t\tv[i] = 0;\n\t\t\t}\n\t\t\tfor (i = 0; i < BMAX + 1; i++) {\n\t\t\t\tc[i] = 0;\n\t\t\t}\n\t\t\tfor (i = 0; i < 3; i++) {\n\t\t\t\tr[i] = 0;\n\t\t\t}\n\t\t\t// for(int i=0; i<BMAX; i++){u[i]=0;}\n\t\t\tu.set(c.subarray(0, BMAX), 0);\n\t\t\t// for(int i=0; i<BMAX+1; i++){x[i]=0;}\n\t\t\tx.set(c.subarray(0, BMAX + 1), 0);\n\t\t}\n\n\t\tthat.inflate_trees_bits = function(c, // 19 code lengths\n\t\tbb, // bits tree desired/actual depth\n\t\ttb, // bits tree result\n\t\thp, // space for trees\n\t\tz // for messages\n\t\t) {\n\t\t\tvar result;\n\t\t\tinitWorkArea(19);\n\t\t\thn[0] = 0;\n\t\t\tresult = huft_build(c, 0, 19, 19, null, null, tb, bb, hp, hn, v);\n\n\t\t\tif (result == Z_DATA_ERROR) {\n\t\t\t\tz.msg = \"oversubscribed dynamic bit lengths tree\";\n\t\t\t} else if (result == Z_BUF_ERROR || bb[0] === 0) {\n\t\t\t\tz.msg = \"incomplete dynamic bit lengths tree\";\n\t\t\t\tresult = Z_DATA_ERROR;\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\n\t\tthat.inflate_trees_dynamic = function(nl, // number of literal/length codes\n\t\tnd, // number of distance codes\n\t\tc, // that many (total) code lengths\n\t\tbl, // literal desired/actual bit depth\n\t\tbd, // distance desired/actual bit depth\n\t\ttl, // literal/length tree result\n\t\ttd, // distance tree result\n\t\thp, // space for trees\n\t\tz // for messages\n\t\t) {\n\t\t\tvar result;\n\n\t\t\t// build literal/length tree\n\t\t\tinitWorkArea(288);\n\t\t\thn[0] = 0;\n\t\t\tresult = huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, hn, v);\n\t\t\tif (result != Z_OK || bl[0] === 0) {\n\t\t\t\tif (result == Z_DATA_ERROR) {\n\t\t\t\t\tz.msg = \"oversubscribed literal/length tree\";\n\t\t\t\t} else if (result != Z_MEM_ERROR) {\n\t\t\t\t\tz.msg = \"incomplete literal/length tree\";\n\t\t\t\t\tresult = Z_DATA_ERROR;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\t// build distance tree\n\t\t\tinitWorkArea(288);\n\t\t\tresult = huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, hn, v);\n\n\t\t\tif (result != Z_OK || (bd[0] === 0 && nl > 257)) {\n\t\t\t\tif (result == Z_DATA_ERROR) {\n\t\t\t\t\tz.msg = \"oversubscribed distance tree\";\n\t\t\t\t} else if (result == Z_BUF_ERROR) {\n\t\t\t\t\tz.msg = \"incomplete distance tree\";\n\t\t\t\t\tresult = Z_DATA_ERROR;\n\t\t\t\t} else if (result != Z_MEM_ERROR) {\n\t\t\t\t\tz.msg = \"empty distance tree with lengths\";\n\t\t\t\t\tresult = Z_DATA_ERROR;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\treturn Z_OK;\n\t\t};\n\n\t}\n\n\tInfTree.inflate_trees_fixed = function(bl, // literal desired/actual bit depth\n\tbd, // distance desired/actual bit depth\n\ttl,// literal/length tree result\n\ttd// distance tree result\n\t) {\n\t\tbl[0] = fixed_bl;\n\t\tbd[0] = fixed_bd;\n\t\ttl[0] = fixed_tl;\n\t\ttd[0] = fixed_td;\n\t\treturn Z_OK;\n\t};\n\n\t// InfCodes\n\n\t// waiting for \"i:\"=input,\n\t// \"o:\"=output,\n\t// \"x:\"=nothing\n\tvar START = 0; // x: set up for LEN\n\tvar LEN = 1; // i: get length/literal/eob next\n\tvar LENEXT = 2; // i: getting length extra (have base)\n\tvar DIST = 3; // i: get distance next\n\tvar DISTEXT = 4;// i: getting distance extra\n\tvar COPY = 5; // o: copying bytes in window, waiting\n\t// for space\n\tvar LIT = 6; // o: got literal, waiting for output\n\t// space\n\tvar WASH = 7; // o: got eob, possibly still output\n\t// waiting\n\tvar END = 8; // x: got eob and all data flushed\n\tvar BADCODE = 9;// x: got error\n\n\tfunction InfCodes() {\n\t\tvar that = this;\n\n\t\tvar mode; // current inflate_codes mode\n\n\t\t// mode dependent information\n\t\tvar len = 0;\n\n\t\tvar tree; // pointer into tree\n\t\tvar tree_index = 0;\n\t\tvar need = 0; // bits needed\n\n\t\tvar lit = 0;\n\n\t\t// if EXT or COPY, where and how much\n\t\tvar get = 0; // bits to get for extra\n\t\tvar dist = 0; // distance back to copy from\n\n\t\tvar lbits = 0; // ltree bits decoded per branch\n\t\tvar dbits = 0; // dtree bits decoder per branch\n\t\tvar ltree; // literal/length/eob tree\n\t\tvar ltree_index = 0; // literal/length/eob tree\n\t\tvar dtree; // distance tree\n\t\tvar dtree_index = 0; // distance tree\n\n\t\t// Called with number of bytes left to write in window at least 258\n\t\t// (the maximum string length) and number of input bytes available\n\t\t// at least ten. The ten bytes are six bytes for the longest length/\n\t\t// distance pair plus four bytes for overloading the bit buffer.\n\n\t\tfunction inflate_fast(bl, bd, tl, tl_index, td, td_index, s, z) {\n\t\t\tvar t; // temporary pointer\n\t\t\tvar tp; // temporary pointer\n\t\t\tvar tp_index; // temporary pointer\n\t\t\tvar e; // extra bits or operation\n\t\t\tvar b; // bit buffer\n\t\t\tvar k; // bits in bit buffer\n\t\t\tvar p; // input data pointer\n\t\t\tvar n; // bytes available there\n\t\t\tvar q; // output window write pointer\n\t\t\tvar m; // bytes to end of window or read pointer\n\t\t\tvar ml; // mask for literal/length tree\n\t\t\tvar md; // mask for distance tree\n\t\t\tvar c; // bytes to copy\n\t\t\tvar d; // distance back to copy from\n\t\t\tvar r; // copy source pointer\n\n\t\t\tvar tp_index_t_3; // (tp_index+t)*3\n\n\t\t\t// load input, output, bit values\n\t\t\tp = z.next_in_index;\n\t\t\tn = z.avail_in;\n\t\t\tb = s.bitb;\n\t\t\tk = s.bitk;\n\t\t\tq = s.write;\n\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t// initialize masks\n\t\t\tml = inflate_mask[bl];\n\t\t\tmd = inflate_mask[bd];\n\n\t\t\t// do until not enough input or output space for fast loop\n\t\t\tdo { // assume called with m >= 258 && n >= 10\n\t\t\t\t// get literal/length code\n\t\t\t\twhile (k < (20)) { // max bits for literal/length code\n\t\t\t\t\tn--;\n\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\tk += 8;\n\t\t\t\t}\n\n\t\t\t\tt = b & ml;\n\t\t\t\ttp = tl;\n\t\t\t\ttp_index = tl_index;\n\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\n\t\t\t\tif ((e = tp[tp_index_t_3]) === 0) {\n\t\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\n\t\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\n\n\t\t\t\t\ts.window[q++] = /* (byte) */tp[tp_index_t_3 + 2];\n\t\t\t\t\tm--;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tdo {\n\n\t\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\n\t\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\n\n\t\t\t\t\tif ((e & 16) !== 0) {\n\t\t\t\t\t\te &= 15;\n\t\t\t\t\t\tc = tp[tp_index_t_3 + 2] + (/* (int) */b & inflate_mask[e]);\n\n\t\t\t\t\t\tb >>= e;\n\t\t\t\t\t\tk -= e;\n\n\t\t\t\t\t\t// decode distance base of block to copy\n\t\t\t\t\t\twhile (k < (15)) { // max bits for distance code\n\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tt = b & md;\n\t\t\t\t\t\ttp = td;\n\t\t\t\t\t\ttp_index = td_index;\n\t\t\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\n\t\t\t\t\t\te = tp[tp_index_t_3];\n\n\t\t\t\t\t\tdo {\n\n\t\t\t\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\n\t\t\t\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\n\n\t\t\t\t\t\t\tif ((e & 16) !== 0) {\n\t\t\t\t\t\t\t\t// get extra bits to add to distance base\n\t\t\t\t\t\t\t\te &= 15;\n\t\t\t\t\t\t\t\twhile (k < (e)) { // get extra bits (up to 13)\n\t\t\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\td = tp[tp_index_t_3 + 2] + (b & inflate_mask[e]);\n\n\t\t\t\t\t\t\t\tb >>= (e);\n\t\t\t\t\t\t\t\tk -= (e);\n\n\t\t\t\t\t\t\t\t// do the copy\n\t\t\t\t\t\t\t\tm -= c;\n\t\t\t\t\t\t\t\tif (q >= d) { // offset before dest\n\t\t\t\t\t\t\t\t\t// just copy\n\t\t\t\t\t\t\t\t\tr = q - d;\n\t\t\t\t\t\t\t\t\tif (q - r > 0 && 2 > (q - r)) {\n\t\t\t\t\t\t\t\t\t\ts.window[q++] = s.window[r++]; // minimum\n\t\t\t\t\t\t\t\t\t\t// count is\n\t\t\t\t\t\t\t\t\t\t// three,\n\t\t\t\t\t\t\t\t\t\ts.window[q++] = s.window[r++]; // so unroll\n\t\t\t\t\t\t\t\t\t\t// loop a\n\t\t\t\t\t\t\t\t\t\t// little\n\t\t\t\t\t\t\t\t\t\tc -= 2;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts.window.set(s.window.subarray(r, r + 2), q);\n\t\t\t\t\t\t\t\t\t\tq += 2;\n\t\t\t\t\t\t\t\t\t\tr += 2;\n\t\t\t\t\t\t\t\t\t\tc -= 2;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else { // else offset after destination\n\t\t\t\t\t\t\t\t\tr = q - d;\n\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\tr += s.end; // force pointer in window\n\t\t\t\t\t\t\t\t\t} while (r < 0); // covers invalid distances\n\t\t\t\t\t\t\t\t\te = s.end - r;\n\t\t\t\t\t\t\t\t\tif (c > e) { // if source crosses,\n\t\t\t\t\t\t\t\t\t\tc -= e; // wrapped copy\n\t\t\t\t\t\t\t\t\t\tif (q - r > 0 && e > (q - r)) {\n\t\t\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\t\t\ts.window[q++] = s.window[r++];\n\t\t\t\t\t\t\t\t\t\t\t} while (--e !== 0);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts.window.set(s.window.subarray(r, r + e), q);\n\t\t\t\t\t\t\t\t\t\t\tq += e;\n\t\t\t\t\t\t\t\t\t\t\tr += e;\n\t\t\t\t\t\t\t\t\t\t\te = 0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tr = 0; // copy rest from start of window\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// copy all or what's left\n\t\t\t\t\t\t\t\tif (q - r > 0 && c > (q - r)) {\n\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\ts.window[q++] = s.window[r++];\n\t\t\t\t\t\t\t\t\t} while (--c !== 0);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts.window.set(s.window.subarray(r, r + c), q);\n\t\t\t\t\t\t\t\t\tq += c;\n\t\t\t\t\t\t\t\t\tr += c;\n\t\t\t\t\t\t\t\t\tc = 0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t} else if ((e & 64) === 0) {\n\t\t\t\t\t\t\t\tt += tp[tp_index_t_3 + 2];\n\t\t\t\t\t\t\t\tt += (b & inflate_mask[e]);\n\t\t\t\t\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\n\t\t\t\t\t\t\t\te = tp[tp_index_t_3];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tz.msg = \"invalid distance code\";\n\n\t\t\t\t\t\t\t\tc = z.avail_in - n;\n\t\t\t\t\t\t\t\tc = (k >> 3) < c ? k >> 3 : c;\n\t\t\t\t\t\t\t\tn += c;\n\t\t\t\t\t\t\t\tp -= c;\n\t\t\t\t\t\t\t\tk -= c << 3;\n\n\t\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\ts.write = q;\n\n\t\t\t\t\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} while (true);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((e & 64) === 0) {\n\t\t\t\t\t\tt += tp[tp_index_t_3 + 2];\n\t\t\t\t\t\tt += (b & inflate_mask[e]);\n\t\t\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\n\t\t\t\t\t\tif ((e = tp[tp_index_t_3]) === 0) {\n\n\t\t\t\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\n\t\t\t\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\n\n\t\t\t\t\t\t\ts.window[q++] = /* (byte) */tp[tp_index_t_3 + 2];\n\t\t\t\t\t\t\tm--;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if ((e & 32) !== 0) {\n\n\t\t\t\t\t\tc = z.avail_in - n;\n\t\t\t\t\t\tc = (k >> 3) < c ? k >> 3 : c;\n\t\t\t\t\t\tn += c;\n\t\t\t\t\t\tp -= c;\n\t\t\t\t\t\tk -= c << 3;\n\n\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\ts.write = q;\n\n\t\t\t\t\t\treturn Z_STREAM_END;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz.msg = \"invalid literal/length code\";\n\n\t\t\t\t\t\tc = z.avail_in - n;\n\t\t\t\t\t\tc = (k >> 3) < c ? k >> 3 : c;\n\t\t\t\t\t\tn += c;\n\t\t\t\t\t\tp -= c;\n\t\t\t\t\t\tk -= c << 3;\n\n\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\ts.write = q;\n\n\t\t\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t\t\t}\n\t\t\t\t} while (true);\n\t\t\t} while (m >= 258 && n >= 10);\n\n\t\t\t// not enough input or output--restore pointers and return\n\t\t\tc = z.avail_in - n;\n\t\t\tc = (k >> 3) < c ? k >> 3 : c;\n\t\t\tn += c;\n\t\t\tp -= c;\n\t\t\tk -= c << 3;\n\n\t\t\ts.bitb = b;\n\t\t\ts.bitk = k;\n\t\t\tz.avail_in = n;\n\t\t\tz.total_in += p - z.next_in_index;\n\t\t\tz.next_in_index = p;\n\t\t\ts.write = q;\n\n\t\t\treturn Z_OK;\n\t\t}\n\n\t\tthat.init = function(bl, bd, tl, tl_index, td, td_index) {\n\t\t\tmode = START;\n\t\t\tlbits = /* (byte) */bl;\n\t\t\tdbits = /* (byte) */bd;\n\t\t\tltree = tl;\n\t\t\tltree_index = tl_index;\n\t\t\tdtree = td;\n\t\t\tdtree_index = td_index;\n\t\t\ttree = null;\n\t\t};\n\n\t\tthat.proc = function(s, z, r) {\n\t\t\tvar j; // temporary storage\n\t\t\tvar tindex; // temporary pointer\n\t\t\tvar e; // extra bits or operation\n\t\t\tvar b = 0; // bit buffer\n\t\t\tvar k = 0; // bits in bit buffer\n\t\t\tvar p = 0; // input data pointer\n\t\t\tvar n; // bytes available there\n\t\t\tvar q; // output window write pointer\n\t\t\tvar m; // bytes to end of window or read pointer\n\t\t\tvar f; // pointer to copy strings from\n\n\t\t\t// copy input/output information to locals (UPDATE macro restores)\n\t\t\tp = z.next_in_index;\n\t\t\tn = z.avail_in;\n\t\t\tb = s.bitb;\n\t\t\tk = s.bitk;\n\t\t\tq = s.write;\n\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t// process input and output based on current state\n\t\t\twhile (true) {\n\t\t\t\tswitch (mode) {\n\t\t\t\t// waiting for \"i:\"=input, \"o:\"=output, \"x:\"=nothing\n\t\t\t\tcase START: // x: set up for LEN\n\t\t\t\t\tif (m >= 258 && n >= 10) {\n\n\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\tr = inflate_fast(lbits, dbits, ltree, ltree_index, dtree, dtree_index, s, z);\n\n\t\t\t\t\t\tp = z.next_in_index;\n\t\t\t\t\t\tn = z.avail_in;\n\t\t\t\t\t\tb = s.bitb;\n\t\t\t\t\t\tk = s.bitk;\n\t\t\t\t\t\tq = s.write;\n\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t\t\t\tif (r != Z_OK) {\n\t\t\t\t\t\t\tmode = r == Z_STREAM_END ? WASH : BADCODE;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tneed = lbits;\n\t\t\t\t\ttree = ltree;\n\t\t\t\t\ttree_index = ltree_index;\n\n\t\t\t\t\tmode = LEN;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase LEN: // i: get length/literal/eob next\n\t\t\t\t\tj = need;\n\n\t\t\t\t\twhile (k < (j)) {\n\t\t\t\t\t\tif (n !== 0)\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\ttindex = (tree_index + (b & inflate_mask[j])) * 3;\n\n\t\t\t\t\tb >>>= (tree[tindex + 1]);\n\t\t\t\t\tk -= (tree[tindex + 1]);\n\n\t\t\t\t\te = tree[tindex];\n\n\t\t\t\t\tif (e === 0) { // literal\n\t\t\t\t\t\tlit = tree[tindex + 2];\n\t\t\t\t\t\tmode = LIT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((e & 16) !== 0) { // length\n\t\t\t\t\t\tget = e & 15;\n\t\t\t\t\t\tlen = tree[tindex + 2];\n\t\t\t\t\t\tmode = LENEXT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((e & 64) === 0) { // next table\n\t\t\t\t\t\tneed = e;\n\t\t\t\t\t\ttree_index = tindex / 3 + tree[tindex + 2];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((e & 32) !== 0) { // end of block\n\t\t\t\t\t\tmode = WASH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tmode = BADCODE; // invalid code\n\t\t\t\t\tz.msg = \"invalid literal/length code\";\n\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\n\t\t\t\tcase LENEXT: // i: getting length extra (have base)\n\t\t\t\t\tj = get;\n\n\t\t\t\t\twhile (k < (j)) {\n\t\t\t\t\t\tif (n !== 0)\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\tlen += (b & inflate_mask[j]);\n\n\t\t\t\t\tb >>= j;\n\t\t\t\t\tk -= j;\n\n\t\t\t\t\tneed = dbits;\n\t\t\t\t\ttree = dtree;\n\t\t\t\t\ttree_index = dtree_index;\n\t\t\t\t\tmode = DIST;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DIST: // i: get distance next\n\t\t\t\t\tj = need;\n\n\t\t\t\t\twhile (k < (j)) {\n\t\t\t\t\t\tif (n !== 0)\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\ttindex = (tree_index + (b & inflate_mask[j])) * 3;\n\n\t\t\t\t\tb >>= tree[tindex + 1];\n\t\t\t\t\tk -= tree[tindex + 1];\n\n\t\t\t\t\te = (tree[tindex]);\n\t\t\t\t\tif ((e & 16) !== 0) { // distance\n\t\t\t\t\t\tget = e & 15;\n\t\t\t\t\t\tdist = tree[tindex + 2];\n\t\t\t\t\t\tmode = DISTEXT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((e & 64) === 0) { // next table\n\t\t\t\t\t\tneed = e;\n\t\t\t\t\t\ttree_index = tindex / 3 + tree[tindex + 2];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tmode = BADCODE; // invalid code\n\t\t\t\t\tz.msg = \"invalid distance code\";\n\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\n\t\t\t\tcase DISTEXT: // i: getting distance extra\n\t\t\t\t\tj = get;\n\n\t\t\t\t\twhile (k < (j)) {\n\t\t\t\t\t\tif (n !== 0)\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\tdist += (b & inflate_mask[j]);\n\n\t\t\t\t\tb >>= j;\n\t\t\t\t\tk -= j;\n\n\t\t\t\t\tmode = COPY;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase COPY: // o: copying bytes in window, waiting for space\n\t\t\t\t\tf = q - dist;\n\t\t\t\t\twhile (f < 0) { // modulo window size-\"while\" instead\n\t\t\t\t\t\tf += s.end; // of \"if\" handles invalid distances\n\t\t\t\t\t}\n\t\t\t\t\twhile (len !== 0) {\n\n\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\n\t\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\t\tr = s.inflate_flush(z, r);\n\t\t\t\t\t\t\t\tq = s.write;\n\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\n\t\t\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ts.window[q++] = s.window[f++];\n\t\t\t\t\t\tm--;\n\n\t\t\t\t\t\tif (f == s.end)\n\t\t\t\t\t\t\tf = 0;\n\t\t\t\t\t\tlen--;\n\t\t\t\t\t}\n\t\t\t\t\tmode = START;\n\t\t\t\t\tbreak;\n\t\t\t\tcase LIT: // o: got literal, waiting for output space\n\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\n\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\tr = s.inflate_flush(z, r);\n\t\t\t\t\t\t\tq = s.write;\n\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\n\t\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tr = Z_OK;\n\n\t\t\t\t\ts.window[q++] = /* (byte) */lit;\n\t\t\t\t\tm--;\n\n\t\t\t\t\tmode = START;\n\t\t\t\t\tbreak;\n\t\t\t\tcase WASH: // o: got eob, possibly more output\n\t\t\t\t\tif (k > 7) { // return unused byte, if any\n\t\t\t\t\t\tk -= 8;\n\t\t\t\t\t\tn++;\n\t\t\t\t\t\tp--; // can always return one\n\t\t\t\t\t}\n\n\t\t\t\t\ts.write = q;\n\t\t\t\t\tr = s.inflate_flush(z, r);\n\t\t\t\t\tq = s.write;\n\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t\t\tif (s.read != s.write) {\n\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tmode = END;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase END:\n\t\t\t\t\tr = Z_STREAM_END;\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\n\t\t\t\tcase BADCODE: // x: got error\n\n\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\n\t\t\t\tdefault:\n\t\t\t\t\tr = Z_STREAM_ERROR;\n\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthat.free = function() {\n\t\t\t// ZFREE(z, c);\n\t\t};\n\n\t}\n\n\t// InfBlocks\n\n\t// Table for deflate from PKZIP's appnote.txt.\n\tvar border = [ // Order of the bit length code lengths\n\t16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\tvar TYPE = 0; // get type bits (3, including end bit)\n\tvar LENS = 1; // get lengths for stored\n\tvar STORED = 2;// processing stored block\n\tvar TABLE = 3; // get table lengths\n\tvar BTREE = 4; // get bit lengths tree for a dynamic\n\t// block\n\tvar DTREE = 5; // get length, distance trees for a\n\t// dynamic block\n\tvar CODES = 6; // processing fixed or dynamic block\n\tvar DRY = 7; // output remaining window bytes\n\tvar DONELOCKS = 8; // finished last block, done\n\tvar BADBLOCKS = 9; // ot a data error--stuck here\n\n\tfunction InfBlocks(z, w) {\n\t\tvar that = this;\n\n\t\tvar mode = TYPE; // current inflate_block mode\n\n\t\tvar left = 0; // if STORED, bytes left to copy\n\n\t\tvar table = 0; // table lengths (14 bits)\n\t\tvar index = 0; // index into blens (or border)\n\t\tvar blens; // bit lengths of codes\n\t\tvar bb = [ 0 ]; // bit length tree depth\n\t\tvar tb = [ 0 ]; // bit length decoding tree\n\n\t\tvar codes = new InfCodes(); // if CODES, current state\n\n\t\tvar last = 0; // true if this block is the last block\n\n\t\tvar hufts = new Int32Array(MANY * 3); // single malloc for tree space\n\t\tvar check = 0; // check on output\n\t\tvar inftree = new InfTree();\n\n\t\tthat.bitk = 0; // bits in bit buffer\n\t\tthat.bitb = 0; // bit buffer\n\t\tthat.window = new Uint8Array(w); // sliding window\n\t\tthat.end = w; // one byte after sliding window\n\t\tthat.read = 0; // window read pointer\n\t\tthat.write = 0; // window write pointer\n\n\t\tthat.reset = function(z, c) {\n\t\t\tif (c)\n\t\t\t\tc[0] = check;\n\t\t\t// if (mode == BTREE || mode == DTREE) {\n\t\t\t// }\n\t\t\tif (mode == CODES) {\n\t\t\t\tcodes.free(z);\n\t\t\t}\n\t\t\tmode = TYPE;\n\t\t\tthat.bitk = 0;\n\t\t\tthat.bitb = 0;\n\t\t\tthat.read = that.write = 0;\n\t\t};\n\n\t\tthat.reset(z, null);\n\n\t\t// copy as much as possible from the sliding window to the output area\n\t\tthat.inflate_flush = function(z, r) {\n\t\t\tvar n;\n\t\t\tvar p;\n\t\t\tvar q;\n\n\t\t\t// local copies of source and destination pointers\n\t\t\tp = z.next_out_index;\n\t\t\tq = that.read;\n\n\t\t\t// compute number of bytes to copy as far as end of window\n\t\t\tn = /* (int) */((q <= that.write ? that.write : that.end) - q);\n\t\t\tif (n > z.avail_out)\n\t\t\t\tn = z.avail_out;\n\t\t\tif (n !== 0 && r == Z_BUF_ERROR)\n\t\t\t\tr = Z_OK;\n\n\t\t\t// update counters\n\t\t\tz.avail_out -= n;\n\t\t\tz.total_out += n;\n\n\t\t\t// copy as far as end of window\n\t\t\tz.next_out.set(that.window.subarray(q, q + n), p);\n\t\t\tp += n;\n\t\t\tq += n;\n\n\t\t\t// see if more to copy at beginning of window\n\t\t\tif (q == that.end) {\n\t\t\t\t// wrap pointers\n\t\t\t\tq = 0;\n\t\t\t\tif (that.write == that.end)\n\t\t\t\t\tthat.write = 0;\n\n\t\t\t\t// compute bytes to copy\n\t\t\t\tn = that.write - q;\n\t\t\t\tif (n > z.avail_out)\n\t\t\t\t\tn = z.avail_out;\n\t\t\t\tif (n !== 0 && r == Z_BUF_ERROR)\n\t\t\t\t\tr = Z_OK;\n\n\t\t\t\t// update counters\n\t\t\t\tz.avail_out -= n;\n\t\t\t\tz.total_out += n;\n\n\t\t\t\t// copy\n\t\t\t\tz.next_out.set(that.window.subarray(q, q + n), p);\n\t\t\t\tp += n;\n\t\t\t\tq += n;\n\t\t\t}\n\n\t\t\t// update pointers\n\t\t\tz.next_out_index = p;\n\t\t\tthat.read = q;\n\n\t\t\t// done\n\t\t\treturn r;\n\t\t};\n\n\t\tthat.proc = function(z, r) {\n\t\t\tvar t; // temporary storage\n\t\t\tvar b; // bit buffer\n\t\t\tvar k; // bits in bit buffer\n\t\t\tvar p; // input data pointer\n\t\t\tvar n; // bytes available there\n\t\t\tvar q; // output window write pointer\n\t\t\tvar m; // bytes to end of window or read pointer\n\n\t\t\tvar i;\n\n\t\t\t// copy input/output information to locals (UPDATE macro restores)\n\t\t\t// {\n\t\t\tp = z.next_in_index;\n\t\t\tn = z.avail_in;\n\t\t\tb = that.bitb;\n\t\t\tk = that.bitk;\n\t\t\t// }\n\t\t\t// {\n\t\t\tq = that.write;\n\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t// }\n\n\t\t\t// process input based on current state\n\t\t\t// DEBUG dtree\n\t\t\twhile (true) {\n\t\t\t\tswitch (mode) {\n\t\t\t\tcase TYPE:\n\n\t\t\t\t\twhile (k < (3)) {\n\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\t\t\t\t\tt = /* (int) */(b & 7);\n\t\t\t\t\tlast = t & 1;\n\n\t\t\t\t\tswitch (t >>> 1) {\n\t\t\t\t\tcase 0: // stored\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\tt = k & 7; // go to byte boundary\n\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (t);\n\t\t\t\t\t\tk -= (t);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\tmode = LENS; // get length of stored block\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1: // fixed\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tvar bl = []; // new Array(1);\n\t\t\t\t\t\tvar bd = []; // new Array(1);\n\t\t\t\t\t\tvar tl = [ [] ]; // new Array(1);\n\t\t\t\t\t\tvar td = [ [] ]; // new Array(1);\n\n\t\t\t\t\t\tInfTree.inflate_trees_fixed(bl, bd, tl, td);\n\t\t\t\t\t\tcodes.init(bl[0], bd[0], tl[0], 0, td[0], 0);\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\tmode = CODES;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2: // dynamic\n\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\tmode = TABLE;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3: // illegal\n\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\tz.msg = \"invalid block type\";\n\t\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase LENS:\n\n\t\t\t\t\twhile (k < (32)) {\n\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((((~b) >>> 16) & 0xffff) != (b & 0xffff)) {\n\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\tz.msg = \"invalid stored block lengths\";\n\t\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tleft = (b & 0xffff);\n\t\t\t\t\tb = k = 0; // dump bits\n\t\t\t\t\tmode = left !== 0 ? STORED : (last !== 0 ? DRY : TYPE);\n\t\t\t\t\tbreak;\n\t\t\t\tcase STORED:\n\t\t\t\t\tif (n === 0) {\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\tif (q == that.end && that.read !== 0) {\n\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\tr = that.inflate_flush(z, r);\n\t\t\t\t\t\t\tq = that.write;\n\t\t\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t\t\t\t\tif (q == that.end && that.read !== 0) {\n\t\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tr = Z_OK;\n\n\t\t\t\t\tt = left;\n\t\t\t\t\tif (t > n)\n\t\t\t\t\t\tt = n;\n\t\t\t\t\tif (t > m)\n\t\t\t\t\t\tt = m;\n\t\t\t\t\tthat.window.set(z.read_buf(p, t), q);\n\t\t\t\t\tp += t;\n\t\t\t\t\tn -= t;\n\t\t\t\t\tq += t;\n\t\t\t\t\tm -= t;\n\t\t\t\t\tif ((left -= t) !== 0)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tmode = last !== 0 ? DRY : TYPE;\n\t\t\t\t\tbreak;\n\t\t\t\tcase TABLE:\n\n\t\t\t\t\twhile (k < (14)) {\n\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\ttable = t = (b & 0x3fff);\n\t\t\t\t\tif ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {\n\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\tz.msg = \"too many length or distance symbols\";\n\t\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tt = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);\n\t\t\t\t\tif (!blens || blens.length < t) {\n\t\t\t\t\t\tblens = []; // new Array(t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (i = 0; i < t; i++) {\n\t\t\t\t\t\t\tblens[i] = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// {\n\t\t\t\t\tb >>>= (14);\n\t\t\t\t\tk -= (14);\n\t\t\t\t\t// }\n\n\t\t\t\t\tindex = 0;\n\t\t\t\t\tmode = BTREE;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase BTREE:\n\t\t\t\t\twhile (index < 4 + (table >>> 10)) {\n\t\t\t\t\t\twhile (k < (3)) {\n\t\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tblens[border[index++]] = b & 7;\n\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t// }\n\t\t\t\t\t}\n\n\t\t\t\t\twhile (index < 19) {\n\t\t\t\t\t\tblens[border[index++]] = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbb[0] = 7;\n\t\t\t\t\tt = inftree.inflate_trees_bits(blens, bb, tb, hufts, z);\n\t\t\t\t\tif (t != Z_OK) {\n\t\t\t\t\t\tr = t;\n\t\t\t\t\t\tif (r == Z_DATA_ERROR) {\n\t\t\t\t\t\t\tblens = null;\n\t\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\n\t\t\t\t\tindex = 0;\n\t\t\t\t\tmode = DTREE;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DTREE:\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tt = table;\n\t\t\t\t\t\tif (index >= 258 + (t & 0x1f) + ((t >> 5) & 0x1f)) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar j, c;\n\n\t\t\t\t\t\tt = bb[0];\n\n\t\t\t\t\t\twhile (k < (t)) {\n\t\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if (tb[0] == -1) {\n\t\t\t\t\t\t// System.err.println(\"null...\");\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\tt = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 1];\n\t\t\t\t\t\tc = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 2];\n\n\t\t\t\t\t\tif (c < 16) {\n\t\t\t\t\t\t\tb >>>= (t);\n\t\t\t\t\t\t\tk -= (t);\n\t\t\t\t\t\t\tblens[index++] = c;\n\t\t\t\t\t\t} else { // c == 16..18\n\t\t\t\t\t\t\ti = c == 18 ? 7 : c - 14;\n\t\t\t\t\t\t\tj = c == 18 ? 11 : 3;\n\n\t\t\t\t\t\t\twhile (k < (t + i)) {\n\t\t\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tb >>>= (t);\n\t\t\t\t\t\t\tk -= (t);\n\n\t\t\t\t\t\t\tj += (b & inflate_mask[i]);\n\n\t\t\t\t\t\t\tb >>>= (i);\n\t\t\t\t\t\t\tk -= (i);\n\n\t\t\t\t\t\t\ti = index;\n\t\t\t\t\t\t\tt = table;\n\t\t\t\t\t\t\tif (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {\n\t\t\t\t\t\t\t\tblens = null;\n\t\t\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\t\t\tz.msg = \"invalid bit length repeat\";\n\t\t\t\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tc = c == 16 ? blens[i - 1] : 0;\n\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\tblens[i++] = c;\n\t\t\t\t\t\t\t} while (--j !== 0);\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\ttb[0] = -1;\n\t\t\t\t\t// {\n\t\t\t\t\tvar bl_ = []; // new Array(1);\n\t\t\t\t\tvar bd_ = []; // new Array(1);\n\t\t\t\t\tvar tl_ = []; // new Array(1);\n\t\t\t\t\tvar td_ = []; // new Array(1);\n\t\t\t\t\tbl_[0] = 9; // must be <= 9 for lookahead assumptions\n\t\t\t\t\tbd_[0] = 6; // must be <= 9 for lookahead assumptions\n\n\t\t\t\t\tt = table;\n\t\t\t\t\tt = inftree.inflate_trees_dynamic(257 + (t & 0x1f), 1 + ((t >> 5) & 0x1f), blens, bl_, bd_, tl_, td_, hufts, z);\n\n\t\t\t\t\tif (t != Z_OK) {\n\t\t\t\t\t\tif (t == Z_DATA_ERROR) {\n\t\t\t\t\t\t\tblens = null;\n\t\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr = t;\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tcodes.init(bl_[0], bd_[0], hufts, tl_[0], hufts, td_[0]);\n\t\t\t\t\t// }\n\t\t\t\t\tmode = CODES;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase CODES:\n\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\tthat.write = q;\n\n\t\t\t\t\tif ((r = codes.proc(that, z, r)) != Z_STREAM_END) {\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tr = Z_OK;\n\t\t\t\t\tcodes.free(z);\n\n\t\t\t\t\tp = z.next_in_index;\n\t\t\t\t\tn = z.avail_in;\n\t\t\t\t\tb = that.bitb;\n\t\t\t\t\tk = that.bitk;\n\t\t\t\t\tq = that.write;\n\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\n\t\t\t\t\tif (last === 0) {\n\t\t\t\t\t\tmode = TYPE;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tmode = DRY;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DRY:\n\t\t\t\t\tthat.write = q;\n\t\t\t\t\tr = that.inflate_flush(z, r);\n\t\t\t\t\tq = that.write;\n\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t\t\tif (that.read != that.write) {\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tmode = DONELOCKS;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DONELOCKS:\n\t\t\t\t\tr = Z_STREAM_END;\n\n\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\tthat.write = q;\n\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\tcase BADBLOCKS:\n\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\tthat.write = q;\n\t\t\t\t\treturn that.inflate_flush(z, r);\n\n\t\t\t\tdefault:\n\t\t\t\t\tr = Z_STREAM_ERROR;\n\n\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\tthat.write = q;\n\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthat.free = function(z) {\n\t\t\tthat.reset(z, null);\n\t\t\tthat.window = null;\n\t\t\thufts = null;\n\t\t\t// ZFREE(z, s);\n\t\t};\n\n\t\tthat.set_dictionary = function(d, start, n) {\n\t\t\tthat.window.set(d.subarray(start, start + n), 0);\n\t\t\tthat.read = that.write = n;\n\t\t};\n\n\t\t// Returns true if inflate is currently at the end of a block generated\n\t\t// by Z_SYNC_FLUSH or Z_FULL_FLUSH.\n\t\tthat.sync_point = function() {\n\t\t\treturn mode == LENS ? 1 : 0;\n\t\t};\n\n\t}\n\n\t// Inflate\n\n\t// preset dictionary flag in zlib header\n\tvar PRESET_DICT = 0x20;\n\n\tvar Z_DEFLATED = 8;\n\n\tvar METHOD = 0; // waiting for method byte\n\tvar FLAG = 1; // waiting for flag byte\n\tvar DICT4 = 2; // four dictionary check bytes to go\n\tvar DICT3 = 3; // three dictionary check bytes to go\n\tvar DICT2 = 4; // two dictionary check bytes to go\n\tvar DICT1 = 5; // one dictionary check byte to go\n\tvar DICT0 = 6; // waiting for inflateSetDictionary\n\tvar BLOCKS = 7; // decompressing blocks\n\tvar DONE = 12; // finished check, done\n\tvar BAD = 13; // got an error--stay here\n\n\tvar mark = [ 0, 0, 0xff, 0xff ];\n\n\tfunction Inflate() {\n\t\tvar that = this;\n\n\t\tthat.mode = 0; // current inflate mode\n\n\t\t// mode dependent information\n\t\tthat.method = 0; // if FLAGS, method byte\n\n\t\t// if CHECK, check values to compare\n\t\tthat.was = [ 0 ]; // new Array(1); // computed check value\n\t\tthat.need = 0; // stream check value\n\n\t\t// if BAD, inflateSync's marker bytes count\n\t\tthat.marker = 0;\n\n\t\t// mode independent information\n\t\tthat.wbits = 0; // log2(window size) (8..15, defaults to 15)\n\n\t\t// this.blocks; // current inflate_blocks state\n\n\t\tfunction inflateReset(z) {\n\t\t\tif (!z || !z.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\n\t\t\tz.total_in = z.total_out = 0;\n\t\t\tz.msg = null;\n\t\t\tz.istate.mode = BLOCKS;\n\t\t\tz.istate.blocks.reset(z, null);\n\t\t\treturn Z_OK;\n\t\t}\n\n\t\tthat.inflateEnd = function(z) {\n\t\t\tif (that.blocks)\n\t\t\t\tthat.blocks.free(z);\n\t\t\tthat.blocks = null;\n\t\t\t// ZFREE(z, z->state);\n\t\t\treturn Z_OK;\n\t\t};\n\n\t\tthat.inflateInit = function(z, w) {\n\t\t\tz.msg = null;\n\t\t\tthat.blocks = null;\n\n\t\t\t// set window size\n\t\t\tif (w < 8 || w > 15) {\n\t\t\t\tthat.inflateEnd(z);\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\t\t\tthat.wbits = w;\n\n\t\t\tz.istate.blocks = new InfBlocks(z, 1 << w);\n\n\t\t\t// reset state\n\t\t\tinflateReset(z);\n\t\t\treturn Z_OK;\n\t\t};\n\n\t\tthat.inflate = function(z, f) {\n\t\t\tvar r;\n\t\t\tvar b;\n\n\t\t\tif (!z || !z.istate || !z.next_in)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\tf = f == Z_FINISH ? Z_BUF_ERROR : Z_OK;\n\t\t\tr = Z_BUF_ERROR;\n\t\t\twhile (true) {\n\t\t\t\t// System.out.println(\"mode: \"+z.istate.mode);\n\t\t\t\tswitch (z.istate.mode) {\n\t\t\t\tcase METHOD:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tif (((z.istate.method = z.read_byte(z.next_in_index++)) & 0xf) != Z_DEFLATED) {\n\t\t\t\t\t\tz.istate.mode = BAD;\n\t\t\t\t\t\tz.msg = \"unknown compression method\";\n\t\t\t\t\t\tz.istate.marker = 5; // can't try inflateSync\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((z.istate.method >> 4) + 8 > z.istate.wbits) {\n\t\t\t\t\t\tz.istate.mode = BAD;\n\t\t\t\t\t\tz.msg = \"invalid window size\";\n\t\t\t\t\t\tz.istate.marker = 5; // can't try inflateSync\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tz.istate.mode = FLAG;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase FLAG:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tb = (z.read_byte(z.next_in_index++)) & 0xff;\n\n\t\t\t\t\tif ((((z.istate.method << 8) + b) % 31) !== 0) {\n\t\t\t\t\t\tz.istate.mode = BAD;\n\t\t\t\t\t\tz.msg = \"incorrect header check\";\n\t\t\t\t\t\tz.istate.marker = 5; // can't try inflateSync\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((b & PRESET_DICT) === 0) {\n\t\t\t\t\t\tz.istate.mode = BLOCKS;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tz.istate.mode = DICT4;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DICT4:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tz.istate.need = ((z.read_byte(z.next_in_index++) & 0xff) << 24) & 0xff000000;\n\t\t\t\t\tz.istate.mode = DICT3;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DICT3:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tz.istate.need += ((z.read_byte(z.next_in_index++) & 0xff) << 16) & 0xff0000;\n\t\t\t\t\tz.istate.mode = DICT2;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DICT2:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tz.istate.need += ((z.read_byte(z.next_in_index++) & 0xff) << 8) & 0xff00;\n\t\t\t\t\tz.istate.mode = DICT1;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DICT1:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tz.istate.need += (z.read_byte(z.next_in_index++) & 0xff);\n\t\t\t\t\tz.istate.mode = DICT0;\n\t\t\t\t\treturn Z_NEED_DICT;\n\t\t\t\tcase DICT0:\n\t\t\t\t\tz.istate.mode = BAD;\n\t\t\t\t\tz.msg = \"need dictionary\";\n\t\t\t\t\tz.istate.marker = 0; // can try inflateSync\n\t\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t\tcase BLOCKS:\n\n\t\t\t\t\tr = z.istate.blocks.proc(z, r);\n\t\t\t\t\tif (r == Z_DATA_ERROR) {\n\t\t\t\t\t\tz.istate.mode = BAD;\n\t\t\t\t\t\tz.istate.marker = 0; // can try inflateSync\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (r == Z_OK) {\n\t\t\t\t\t\tr = f;\n\t\t\t\t\t}\n\t\t\t\t\tif (r != Z_STREAM_END) {\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t}\n\t\t\t\t\tr = f;\n\t\t\t\t\tz.istate.blocks.reset(z, z.istate.was);\n\t\t\t\t\tz.istate.mode = DONE;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DONE:\n\t\t\t\t\treturn Z_STREAM_END;\n\t\t\t\tcase BAD:\n\t\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t\tdefault:\n\t\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthat.inflateSetDictionary = function(z, dictionary, dictLength) {\n\t\t\tvar index = 0;\n\t\t\tvar length = dictLength;\n\t\t\tif (!z || !z.istate || z.istate.mode != DICT0)\n\t\t\t\treturn Z_STREAM_ERROR;\n\n\t\t\tif (length >= (1 << z.istate.wbits)) {\n\t\t\t\tlength = (1 << z.istate.wbits) - 1;\n\t\t\t\tindex = dictLength - length;\n\t\t\t}\n\t\t\tz.istate.blocks.set_dictionary(dictionary, index, length);\n\t\t\tz.istate.mode = BLOCKS;\n\t\t\treturn Z_OK;\n\t\t};\n\n\t\tthat.inflateSync = function(z) {\n\t\t\tvar n; // number of bytes to look at\n\t\t\tvar p; // pointer to bytes\n\t\t\tvar m; // number of marker bytes found in a row\n\t\t\tvar r, w; // temporaries to save total_in and total_out\n\n\t\t\t// set up\n\t\t\tif (!z || !z.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\tif (z.istate.mode != BAD) {\n\t\t\t\tz.istate.mode = BAD;\n\t\t\t\tz.istate.marker = 0;\n\t\t\t}\n\t\t\tif ((n = z.avail_in) === 0)\n\t\t\t\treturn Z_BUF_ERROR;\n\t\t\tp = z.next_in_index;\n\t\t\tm = z.istate.marker;\n\n\t\t\t// search\n\t\t\twhile (n !== 0 && m < 4) {\n\t\t\t\tif (z.read_byte(p) == mark[m]) {\n\t\t\t\t\tm++;\n\t\t\t\t} else if (z.read_byte(p) !== 0) {\n\t\t\t\t\tm = 0;\n\t\t\t\t} else {\n\t\t\t\t\tm = 4 - m;\n\t\t\t\t}\n\t\t\t\tp++;\n\t\t\t\tn--;\n\t\t\t}\n\n\t\t\t// restore\n\t\t\tz.total_in += p - z.next_in_index;\n\t\t\tz.next_in_index = p;\n\t\t\tz.avail_in = n;\n\t\t\tz.istate.marker = m;\n\n\t\t\t// return no joy or set up to restart on a new block\n\t\t\tif (m != 4) {\n\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t}\n\t\t\tr = z.total_in;\n\t\t\tw = z.total_out;\n\t\t\tinflateReset(z);\n\t\t\tz.total_in = r;\n\t\t\tz.total_out = w;\n\t\t\tz.istate.mode = BLOCKS;\n\t\t\treturn Z_OK;\n\t\t};\n\n\t\t// Returns true if inflate is currently at the end of a block generated\n\t\t// by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP\n\t\t// implementation to provide an additional safety check. PPP uses\n\t\t// Z_SYNC_FLUSH\n\t\t// but removes the length bytes of the resulting empty stored block. When\n\t\t// decompressing, PPP checks that at the end of input packet, inflate is\n\t\t// waiting for these length bytes.\n\t\tthat.inflateSyncPoint = function(z) {\n\t\t\tif (!z || !z.istate || !z.istate.blocks)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn z.istate.blocks.sync_point();\n\t\t};\n\t}\n\n\t// ZStream\n\n\tfunction ZStream() {\n\t}\n\n\tZStream.prototype = {\n\t\tinflateInit : function(bits) {\n\t\t\tvar that = this;\n\t\t\tthat.istate = new Inflate();\n\t\t\tif (!bits)\n\t\t\t\tbits = MAX_BITS;\n\t\t\treturn that.istate.inflateInit(that, bits);\n\t\t},\n\n\t\tinflate : function(f) {\n\t\t\tvar that = this;\n\t\t\tif (!that.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn that.istate.inflate(that, f);\n\t\t},\n\n\t\tinflateEnd : function() {\n\t\t\tvar that = this;\n\t\t\tif (!that.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\tvar ret = that.istate.inflateEnd(that);\n\t\t\tthat.istate = null;\n\t\t\treturn ret;\n\t\t},\n\n\t\tinflateSync : function() {\n\t\t\tvar that = this;\n\t\t\tif (!that.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn that.istate.inflateSync(that);\n\t\t},\n\t\tinflateSetDictionary : function(dictionary, dictLength) {\n\t\t\tvar that = this;\n\t\t\tif (!that.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn that.istate.inflateSetDictionary(that, dictionary, dictLength);\n\t\t},\n\t\tread_byte : function(start) {\n\t\t\tvar that = this;\n\t\t\treturn that.next_in.subarray(start, start + 1)[0];\n\t\t},\n\t\tread_buf : function(start, size) {\n\t\t\tvar that = this;\n\t\t\treturn that.next_in.subarray(start, start + size);\n\t\t}\n\t};\n\n\t// Inflater\n\n\tfunction Inflater() {\n\t\tvar that = this;\n\t\tvar z = new ZStream();\n\t\tvar bufsize = 512;\n\t\tvar flush = Z_NO_FLUSH;\n\t\tvar buf = new Uint8Array(bufsize);\n\t\tvar nomoreinput = false;\n\n\t\tz.inflateInit();\n\t\tz.next_out = buf;\n\n\t\tthat.append = function(data, onprogress) {\n\t\t\tvar err, buffers = [], lastIndex = 0, bufferIndex = 0, bufferSize = 0, array;\n\t\t\tif (data.length === 0)\n\t\t\t\treturn;\n\t\t\tz.next_in_index = 0;\n\t\t\tz.next_in = data;\n\t\t\tz.avail_in = data.length;\n\t\t\tdo {\n\t\t\t\tz.next_out_index = 0;\n\t\t\t\tz.avail_out = bufsize;\n\t\t\t\tif ((z.avail_in === 0) && (!nomoreinput)) { // if buffer is empty and more input is available, refill it\n\t\t\t\t\tz.next_in_index = 0;\n\t\t\t\t\tnomoreinput = true;\n\t\t\t\t}\n\t\t\t\terr = z.inflate(flush);\n\t\t\t\tif (nomoreinput && (err === Z_BUF_ERROR)) {\n\t\t\t\t\tif (z.avail_in !== 0)\n\t\t\t\t\t\tthrow new Error(\"inflating: bad input\");\n\t\t\t\t} else if (err !== Z_OK && err !== Z_STREAM_END)\n\t\t\t\t\tthrow new Error(\"inflating: \" + z.msg);\n\t\t\t\tif ((nomoreinput || err === Z_STREAM_END) && (z.avail_in === data.length))\n\t\t\t\t\tthrow new Error(\"inflating: bad input\");\n\t\t\t\tif (z.next_out_index)\n\t\t\t\t\tif (z.next_out_index === bufsize)\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\n\t\t\t\tbufferSize += z.next_out_index;\n\t\t\t\tif (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {\n\t\t\t\t\tonprogress(z.next_in_index);\n\t\t\t\t\tlastIndex = z.next_in_index;\n\t\t\t\t}\n\t\t\t} while (z.avail_in > 0 || z.avail_out === 0);\n\t\t\tarray = new Uint8Array(bufferSize);\n\t\t\tbuffers.forEach(function(chunk) {\n\t\t\t\tarray.set(chunk, bufferIndex);\n\t\t\t\tbufferIndex += chunk.length;\n\t\t\t});\n\t\t\treturn array;\n\t\t};\n\t\tthat.flush = function() {\n\t\t\tz.inflateEnd();\n\t\t};\n\t}\n\n\t// 'zip' may not be defined in z-worker and some tests\n\tvar env = global.zip || global;\n\tenv.Inflater = env._jzlib_Inflater = Inflater;\n})(this);\n")]
};

module.exports = zip;


},{"zip":319}],319:[function(require,module,exports){
(function (global){(function (){
; var __browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
/*
 Copyright (c) 2013 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright
 notice, this list of conditions and the following disclaimer in
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

(function(obj) {
	"use strict";

	var ERR_BAD_FORMAT = "File format is not recognized.";
	var ERR_CRC = "CRC failed.";
	var ERR_ENCRYPTED = "File contains encrypted entry.";
	var ERR_ZIP64 = "File is using Zip64 (4gb+ file size).";
	var ERR_READ = "Error while reading zip file.";
	var ERR_WRITE = "Error while writing zip file.";
	var ERR_WRITE_DATA = "Error while writing file data.";
	var ERR_READ_DATA = "Error while reading file data.";
	var ERR_DUPLICATED_NAME = "File already exists.";
	var CHUNK_SIZE = 512 * 1024;
	
	var TEXT_PLAIN = "text/plain";

	var appendABViewSupported;
	try {
		appendABViewSupported = new Blob([ new DataView(new ArrayBuffer(0)) ]).size === 0;
	} catch (e) {
	}

	function Crc32() {
		this.crc = -1;
	}
	Crc32.prototype.append = function append(data) {
		var crc = this.crc | 0, table = this.table;
		for (var offset = 0, len = data.length | 0; offset < len; offset++)
			crc = (crc >>> 8) ^ table[(crc ^ data[offset]) & 0xFF];
		this.crc = crc;
	};
	Crc32.prototype.get = function get() {
		return ~this.crc;
	};
	Crc32.prototype.table = (function() {
		var i, j, t, table = []; // Uint32Array is actually slower than []
		for (i = 0; i < 256; i++) {
			t = i;
			for (j = 0; j < 8; j++)
				if (t & 1)
					t = (t >>> 1) ^ 0xEDB88320;
				else
					t = t >>> 1;
			table[i] = t;
		}
		return table;
	})();
	
	// "no-op" codec
	function NOOP() {}
	NOOP.prototype.append = function append(bytes, onprogress) {
		return bytes;
	};
	NOOP.prototype.flush = function flush() {};

	function blobSlice(blob, index, length) {
		if (index < 0 || length < 0 || index + length > blob.size)
			throw new RangeError('offset:' + index + ', length:' + length + ', size:' + blob.size);
		if (blob.slice)
			return blob.slice(index, index + length);
		else if (blob.webkitSlice)
			return blob.webkitSlice(index, index + length);
		else if (blob.mozSlice)
			return blob.mozSlice(index, index + length);
		else if (blob.msSlice)
			return blob.msSlice(index, index + length);
	}

	function getDataHelper(byteLength, bytes) {
		var dataBuffer, dataArray;
		dataBuffer = new ArrayBuffer(byteLength);
		dataArray = new Uint8Array(dataBuffer);
		if (bytes)
			dataArray.set(bytes, 0);
		return {
			buffer : dataBuffer,
			array : dataArray,
			view : new DataView(dataBuffer)
		};
	}

	// Readers
	function Reader() {
	}

	function TextReader(text) {
		var that = this, blobReader;

		function init(callback, onerror) {
			var blob = new Blob([ text ], {
				type : TEXT_PLAIN
			});
			blobReader = new BlobReader(blob);
			blobReader.init(function() {
				that.size = blobReader.size;
				callback();
			}, onerror);
		}

		function readUint8Array(index, length, callback, onerror) {
			blobReader.readUint8Array(index, length, callback, onerror);
		}

		that.size = 0;
		that.init = init;
		that.readUint8Array = readUint8Array;
	}
	TextReader.prototype = new Reader();
	TextReader.prototype.constructor = TextReader;

	function Data64URIReader(dataURI) {
		var that = this, dataStart;

		function init(callback) {
			var dataEnd = dataURI.length;
			while (dataURI.charAt(dataEnd - 1) == "=")
				dataEnd--;
			dataStart = dataURI.indexOf(",") + 1;
			that.size = Math.floor((dataEnd - dataStart) * 0.75);
			callback();
		}

		function readUint8Array(index, length, callback) {
			var i, data = getDataHelper(length);
			var start = Math.floor(index / 3) * 4;
			var end = Math.ceil((index + length) / 3) * 4;
			var bytes = obj.atob(dataURI.substring(start + dataStart, end + dataStart));
			var delta = index - Math.floor(start / 4) * 3;
			for (i = delta; i < delta + length; i++)
				data.array[i - delta] = bytes.charCodeAt(i);
			callback(data.array);
		}

		that.size = 0;
		that.init = init;
		that.readUint8Array = readUint8Array;
	}
	Data64URIReader.prototype = new Reader();
	Data64URIReader.prototype.constructor = Data64URIReader;

	function BlobReader(blob) {
		var that = this;

		function init(callback) {
			that.size = blob.size;
			callback();
		}

		function readUint8Array(index, length, callback, onerror) {
			var reader = new FileReader();
			reader.onload = function(e) {
				callback(new Uint8Array(e.target.result));
			};
			reader.onerror = onerror;
			try {
				reader.readAsArrayBuffer(blobSlice(blob, index, length));
			} catch (e) {
				onerror(e);
			}
		}

		that.size = 0;
		that.init = init;
		that.readUint8Array = readUint8Array;
	}
	BlobReader.prototype = new Reader();
	BlobReader.prototype.constructor = BlobReader;

	// Writers

	function Writer() {
	}
	Writer.prototype.getData = function(callback) {
		callback(this.data);
	};

	function TextWriter(encoding) {
		var that = this, blob;

		function init(callback) {
			blob = new Blob([], {
				type : TEXT_PLAIN
			});
			callback();
		}

		function writeUint8Array(array, callback) {
			blob = new Blob([ blob, appendABViewSupported ? array : array.buffer ], {
				type : TEXT_PLAIN
			});
			callback();
		}

		function getData(callback, onerror) {
			var reader = new FileReader();
			reader.onload = function(e) {
				callback(e.target.result);
			};
			reader.onerror = onerror;
			reader.readAsText(blob, encoding);
		}

		that.init = init;
		that.writeUint8Array = writeUint8Array;
		that.getData = getData;
	}
	TextWriter.prototype = new Writer();
	TextWriter.prototype.constructor = TextWriter;

	function Data64URIWriter(contentType) {
		var that = this, data = "", pending = "";

		function init(callback) {
			data += "data:" + (contentType || "") + ";base64,";
			callback();
		}

		function writeUint8Array(array, callback) {
			var i, delta = pending.length, dataString = pending;
			pending = "";
			for (i = 0; i < (Math.floor((delta + array.length) / 3) * 3) - delta; i++)
				dataString += String.fromCharCode(array[i]);
			for (; i < array.length; i++)
				pending += String.fromCharCode(array[i]);
			if (dataString.length > 2)
				data += obj.btoa(dataString);
			else
				pending = dataString;
			callback();
		}

		function getData(callback) {
			callback(data + obj.btoa(pending));
		}

		that.init = init;
		that.writeUint8Array = writeUint8Array;
		that.getData = getData;
	}
	Data64URIWriter.prototype = new Writer();
	Data64URIWriter.prototype.constructor = Data64URIWriter;

	function BlobWriter(contentType) {
		var blob, that = this;

		function init(callback) {
			blob = new Blob([], {
				type : contentType
			});
			callback();
		}

		function writeUint8Array(array, callback) {
			blob = new Blob([ blob, appendABViewSupported ? array : array.buffer ], {
				type : contentType
			});
			callback();
		}

		function getData(callback) {
			callback(blob);
		}

		that.init = init;
		that.writeUint8Array = writeUint8Array;
		that.getData = getData;
	}
	BlobWriter.prototype = new Writer();
	BlobWriter.prototype.constructor = BlobWriter;

	/** 
	 * inflate/deflate core functions
	 * @param worker {Worker} web worker for the task.
	 * @param initialMessage {Object} initial message to be sent to the worker. should contain
	 *   sn(serial number for distinguishing multiple tasks sent to the worker), and codecClass.
	 *   This function may add more properties before sending.
	 */
	function launchWorkerProcess(worker, initialMessage, reader, writer, offset, size, onprogress, onend, onreaderror, onwriteerror) {
		var chunkIndex = 0, index, outputSize, sn = initialMessage.sn, crc;

		function onflush() {
			worker.removeEventListener('message', onmessage, false);
			onend(outputSize, crc);
		}

		function onmessage(event) {
			var message = event.data, data = message.data, err = message.error;
			if (err) {
				err.toString = function () { return 'Error: ' + this.message; };
				onreaderror(err);
				return;
			}
			if (message.sn !== sn)
				return;
			if (typeof message.codecTime === 'number')
				worker.codecTime += message.codecTime; // should be before onflush()
			if (typeof message.crcTime === 'number')
				worker.crcTime += message.crcTime;

			switch (message.type) {
				case 'append':
					if (data) {
						outputSize += data.length;
						writer.writeUint8Array(data, function() {
							step();
						}, onwriteerror);
					} else
						step();
					break;
				case 'flush':
					crc = message.crc;
					if (data) {
						outputSize += data.length;
						writer.writeUint8Array(data, function() {
							onflush();
						}, onwriteerror);
					} else
						onflush();
					break;
				case 'progress':
					if (onprogress)
						onprogress(index + message.loaded, size);
					break;
				case 'importScripts': //no need to handle here
				case 'newTask':
				case 'echo':
					break;
				default:
					console.warn('zip.js:launchWorkerProcess: unknown message: ', message);
			}
		}

		function step() {
			index = chunkIndex * CHUNK_SIZE;
			// use `<=` instead of `<`, because `size` may be 0.
			if (index <= size) {
				reader.readUint8Array(offset + index, Math.min(CHUNK_SIZE, size - index), function(array) {
					if (onprogress)
						onprogress(index, size);
					var msg = index === 0 ? initialMessage : {sn : sn};
					msg.type = 'append';
					msg.data = array;
					
					// posting a message with transferables will fail on IE10
					try {
						worker.postMessage(msg, [array.buffer]);
					} catch(ex) {
						worker.postMessage(msg); // retry without transferables
					}
					chunkIndex++;
				}, onreaderror);
			} else {
				worker.postMessage({
					sn: sn,
					type: 'flush'
				});
			}
		}

		outputSize = 0;
		worker.addEventListener('message', onmessage, false);
		step();
	}

	function launchProcess(process, reader, writer, offset, size, crcType, onprogress, onend, onreaderror, onwriteerror) {
		var chunkIndex = 0, index, outputSize = 0,
			crcInput = crcType === 'input',
			crcOutput = crcType === 'output',
			crc = new Crc32();
		function step() {
			var outputData;
			index = chunkIndex * CHUNK_SIZE;
			if (index < size)
				reader.readUint8Array(offset + index, Math.min(CHUNK_SIZE, size - index), function(inputData) {
					var outputData;
					try {
						outputData = process.append(inputData, function(loaded) {
							if (onprogress)
								onprogress(index + loaded, size);
						});
					} catch (e) {
						onreaderror(e);
						return;
					}
					if (outputData) {
						outputSize += outputData.length;
						writer.writeUint8Array(outputData, function() {
							chunkIndex++;
							setTimeout(step, 1);
						}, onwriteerror);
						if (crcOutput)
							crc.append(outputData);
					} else {
						chunkIndex++;
						setTimeout(step, 1);
					}
					if (crcInput)
						crc.append(inputData);
					if (onprogress)
						onprogress(index, size);
				}, onreaderror);
			else {
				try {
					outputData = process.flush();
				} catch (e) {
					onreaderror(e);
					return;
				}
				if (outputData) {
					if (crcOutput)
						crc.append(outputData);
					outputSize += outputData.length;
					writer.writeUint8Array(outputData, function() {
						onend(outputSize, crc.get());
					}, onwriteerror);
				} else
					onend(outputSize, crc.get());
			}
		}

		step();
	}

	function inflate(worker, sn, reader, writer, offset, size, computeCrc32, onend, onprogress, onreaderror, onwriteerror) {
		var crcType = computeCrc32 ? 'output' : 'none';
		if (obj.zip.useWebWorkers) {
			var initialMessage = {
				sn: sn,
				codecClass: 'Inflater',
				crcType: crcType,
			};
			launchWorkerProcess(worker, initialMessage, reader, writer, offset, size, onprogress, onend, onreaderror, onwriteerror);
		} else
			launchProcess(new obj.zip.Inflater(), reader, writer, offset, size, crcType, onprogress, onend, onreaderror, onwriteerror);
	}

	function deflate(worker, sn, reader, writer, level, onend, onprogress, onreaderror, onwriteerror) {
		var crcType = 'input';
		if (obj.zip.useWebWorkers) {
			var initialMessage = {
				sn: sn,
				options: {level: level},
				codecClass: 'Deflater',
				crcType: crcType,
			};
			launchWorkerProcess(worker, initialMessage, reader, writer, 0, reader.size, onprogress, onend, onreaderror, onwriteerror);
		} else
			launchProcess(new obj.zip.Deflater(), reader, writer, 0, reader.size, crcType, onprogress, onend, onreaderror, onwriteerror);
	}

	function copy(worker, sn, reader, writer, offset, size, computeCrc32, onend, onprogress, onreaderror, onwriteerror) {
		var crcType = 'input';
		if (obj.zip.useWebWorkers && computeCrc32) {
			var initialMessage = {
				sn: sn,
				codecClass: 'NOOP',
				crcType: crcType,
			};
			launchWorkerProcess(worker, initialMessage, reader, writer, offset, size, onprogress, onend, onreaderror, onwriteerror);
		} else
			launchProcess(new NOOP(), reader, writer, offset, size, crcType, onprogress, onend, onreaderror, onwriteerror);
	}

	// ZipReader

	function decodeASCII(str) {
		var i, out = "", charCode, extendedASCII = [ '\u00C7', '\u00FC', '\u00E9', '\u00E2', '\u00E4', '\u00E0', '\u00E5', '\u00E7', '\u00EA', '\u00EB',
				'\u00E8', '\u00EF', '\u00EE', '\u00EC', '\u00C4', '\u00C5', '\u00C9', '\u00E6', '\u00C6', '\u00F4', '\u00F6', '\u00F2', '\u00FB', '\u00F9',
				'\u00FF', '\u00D6', '\u00DC', '\u00F8', '\u00A3', '\u00D8', '\u00D7', '\u0192', '\u00E1', '\u00ED', '\u00F3', '\u00FA', '\u00F1', '\u00D1',
				'\u00AA', '\u00BA', '\u00BF', '\u00AE', '\u00AC', '\u00BD', '\u00BC', '\u00A1', '\u00AB', '\u00BB', '_', '_', '_', '\u00A6', '\u00A6',
				'\u00C1', '\u00C2', '\u00C0', '\u00A9', '\u00A6', '\u00A6', '+', '+', '\u00A2', '\u00A5', '+', '+', '-', '-', '+', '-', '+', '\u00E3',
				'\u00C3', '+', '+', '-', '-', '\u00A6', '-', '+', '\u00A4', '\u00F0', '\u00D0', '\u00CA', '\u00CB', '\u00C8', 'i', '\u00CD', '\u00CE',
				'\u00CF', '+', '+', '_', '_', '\u00A6', '\u00CC', '_', '\u00D3', '\u00DF', '\u00D4', '\u00D2', '\u00F5', '\u00D5', '\u00B5', '\u00FE',
				'\u00DE', '\u00DA', '\u00DB', '\u00D9', '\u00FD', '\u00DD', '\u00AF', '\u00B4', '\u00AD', '\u00B1', '_', '\u00BE', '\u00B6', '\u00A7',
				'\u00F7', '\u00B8', '\u00B0', '\u00A8', '\u00B7', '\u00B9', '\u00B3', '\u00B2', '_', ' ' ];
		for (i = 0; i < str.length; i++) {
			charCode = str.charCodeAt(i) & 0xFF;
			if (charCode > 127)
				out += extendedASCII[charCode - 128];
			else
				out += String.fromCharCode(charCode);
		}
		return out;
	}

	function decodeUTF8(string) {
		return decodeURIComponent(escape(string));
	}

	function getString(bytes) {
		var i, str = "";
		for (i = 0; i < bytes.length; i++)
			str += String.fromCharCode(bytes[i]);
		return str;
	}

	function getDate(timeRaw) {
		var date = (timeRaw & 0xffff0000) >> 16, time = timeRaw & 0x0000ffff;
		try {
			return new Date(1980 + ((date & 0xFE00) >> 9), ((date & 0x01E0) >> 5) - 1, date & 0x001F, (time & 0xF800) >> 11, (time & 0x07E0) >> 5,
					(time & 0x001F) * 2, 0);
		} catch (e) {
		}
	}

	function readCommonHeader(entry, data, index, centralDirectory, onerror) {
		entry.version = data.view.getUint16(index, true);
		entry.bitFlag = data.view.getUint16(index + 2, true);
		entry.compressionMethod = data.view.getUint16(index + 4, true);
		entry.lastModDateRaw = data.view.getUint32(index + 6, true);
		entry.lastModDate = getDate(entry.lastModDateRaw);
		if ((entry.bitFlag & 0x01) === 0x01) {
			onerror(ERR_ENCRYPTED);
			return;
		}
		if (centralDirectory || (entry.bitFlag & 0x0008) != 0x0008) {
			entry.crc32 = data.view.getUint32(index + 10, true);
			entry.compressedSize = data.view.getUint32(index + 14, true);
			entry.uncompressedSize = data.view.getUint32(index + 18, true);
		}
		if (entry.compressedSize === 0xFFFFFFFF || entry.uncompressedSize === 0xFFFFFFFF) {
			onerror(ERR_ZIP64);
			return;
		}
		entry.filenameLength = data.view.getUint16(index + 22, true);
		entry.extraFieldLength = data.view.getUint16(index + 24, true);
	}

	function createZipReader(reader, callback, onerror) {
		var inflateSN = 0;

		function Entry() {
		}

		Entry.prototype.getData = function(writer, onend, onprogress, checkCrc32) {
			var that = this;

			function testCrc32(crc32) {
				var dataCrc32 = getDataHelper(4);
				dataCrc32.view.setUint32(0, crc32);
				return that.crc32 == dataCrc32.view.getUint32(0);
			}

			function getWriterData(uncompressedSize, crc32) {
				if (checkCrc32 && !testCrc32(crc32))
					onerror(ERR_CRC);
				else
					writer.getData(function(data) {
						onend(data);
					});
			}

			function onreaderror(err) {
				onerror(err || ERR_READ_DATA);
			}

			function onwriteerror(err) {
				onerror(err || ERR_WRITE_DATA);
			}

			reader.readUint8Array(that.offset, 30, function(bytes) {
				var data = getDataHelper(bytes.length, bytes), dataOffset;
				if (data.view.getUint32(0) != 0x504b0304) {
					onerror(ERR_BAD_FORMAT);
					return;
				}
				readCommonHeader(that, data, 4, false, onerror);
				dataOffset = that.offset + 30 + that.filenameLength + that.extraFieldLength;
				writer.init(function() {
					if (that.compressionMethod === 0)
						copy(that._worker, inflateSN++, reader, writer, dataOffset, that.compressedSize, checkCrc32, getWriterData, onprogress, onreaderror, onwriteerror);
					else
						inflate(that._worker, inflateSN++, reader, writer, dataOffset, that.compressedSize, checkCrc32, getWriterData, onprogress, onreaderror, onwriteerror);
				}, onwriteerror);
			}, onreaderror);
		};

		function seekEOCDR(eocdrCallback) {
			// "End of central directory record" is the last part of a zip archive, and is at least 22 bytes long.
			// Zip file comment is the last part of EOCDR and has max length of 64KB,
			// so we only have to search the last 64K + 22 bytes of a archive for EOCDR signature (0x06054b50).
			var EOCDR_MIN = 22;
			if (reader.size < EOCDR_MIN) {
				onerror(ERR_BAD_FORMAT);
				return;
			}
			var ZIP_COMMENT_MAX = 256 * 256, EOCDR_MAX = EOCDR_MIN + ZIP_COMMENT_MAX;

			// In most cases, the EOCDR is EOCDR_MIN bytes long
			doSeek(EOCDR_MIN, function() {
				// If not found, try within EOCDR_MAX bytes
				doSeek(Math.min(EOCDR_MAX, reader.size), function() {
					onerror(ERR_BAD_FORMAT);
				});
			});

			// seek last length bytes of file for EOCDR
			function doSeek(length, eocdrNotFoundCallback) {
				reader.readUint8Array(reader.size - length, length, function(bytes) {
					for (var i = bytes.length - EOCDR_MIN; i >= 0; i--) {
						if (bytes[i] === 0x50 && bytes[i + 1] === 0x4b && bytes[i + 2] === 0x05 && bytes[i + 3] === 0x06) {
							eocdrCallback(new DataView(bytes.buffer, i, EOCDR_MIN));
							return;
						}
					}
					eocdrNotFoundCallback();
				}, function() {
					onerror(ERR_READ);
				});
			}
		}

		var zipReader = {
			getEntries : function(callback) {
				var worker = this._worker;
				// look for End of central directory record
				seekEOCDR(function(dataView) {
					var datalength, fileslength;
					datalength = dataView.getUint32(16, true);
					fileslength = dataView.getUint16(8, true);
					if (datalength < 0 || datalength >= reader.size) {
						onerror(ERR_BAD_FORMAT);
						return;
					}
					reader.readUint8Array(datalength, reader.size - datalength, function(bytes) {
						var i, index = 0, entries = [], entry, filename, comment, data = getDataHelper(bytes.length, bytes);
						for (i = 0; i < fileslength; i++) {
							entry = new Entry();
							entry._worker = worker;
							if (data.view.getUint32(index) != 0x504b0102) {
								onerror(ERR_BAD_FORMAT);
								return;
							}
							readCommonHeader(entry, data, index + 6, true, onerror);
							entry.commentLength = data.view.getUint16(index + 32, true);
							entry.directory = ((data.view.getUint8(index + 38) & 0x10) == 0x10);
							entry.offset = data.view.getUint32(index + 42, true);
							filename = getString(data.array.subarray(index + 46, index + 46 + entry.filenameLength));
							entry.filename = ((entry.bitFlag & 0x0800) === 0x0800) ? decodeUTF8(filename) : decodeASCII(filename);
							if (!entry.directory && entry.filename.charAt(entry.filename.length - 1) == "/")
								entry.directory = true;
							comment = getString(data.array.subarray(index + 46 + entry.filenameLength + entry.extraFieldLength, index + 46
									+ entry.filenameLength + entry.extraFieldLength + entry.commentLength));
							entry.comment = ((entry.bitFlag & 0x0800) === 0x0800) ? decodeUTF8(comment) : decodeASCII(comment);
							entries.push(entry);
							index += 46 + entry.filenameLength + entry.extraFieldLength + entry.commentLength;
						}
						callback(entries);
					}, function() {
						onerror(ERR_READ);
					});
				});
			},
			close : function(callback) {
				if (this._worker) {
					this._worker.terminate();
					this._worker = null;
				}
				if (callback)
					callback();
			},
			_worker: null
		};

		if (!obj.zip.useWebWorkers)
			callback(zipReader);
		else {
			createWorker('inflater',
				function(worker) {
					zipReader._worker = worker;
					callback(zipReader);
				},
				function(err) {
					onerror(err);
				}
			);
		}
	}

	// ZipWriter

	function encodeUTF8(string) {
		return unescape(encodeURIComponent(string));
	}

	function getBytes(str) {
		var i, array = [];
		for (i = 0; i < str.length; i++)
			array.push(str.charCodeAt(i));
		return array;
	}

	function createZipWriter(writer, callback, onerror, dontDeflate) {
		var files = {}, filenames = [], datalength = 0;
		var deflateSN = 0;

		function onwriteerror(err) {
			onerror(err || ERR_WRITE);
		}

		function onreaderror(err) {
			onerror(err || ERR_READ_DATA);
		}

		var zipWriter = {
			add : function(name, reader, onend, onprogress, options) {
				var header, filename, date;
				var worker = this._worker;

				function writeHeader(callback) {
					var data;
					date = options.lastModDate || new Date();
					header = getDataHelper(26);
					files[name] = {
						headerArray : header.array,
						directory : options.directory,
						filename : filename,
						offset : datalength,
						comment : getBytes(encodeUTF8(options.comment || ""))
					};
					header.view.setUint32(0, 0x14000808);
					if (options.version)
						header.view.setUint8(0, options.version);
					if (!dontDeflate && options.level !== 0 && !options.directory)
						header.view.setUint16(4, 0x0800);
					header.view.setUint16(6, (((date.getHours() << 6) | date.getMinutes()) << 5) | date.getSeconds() / 2, true);
					header.view.setUint16(8, ((((date.getFullYear() - 1980) << 4) | (date.getMonth() + 1)) << 5) | date.getDate(), true);
					header.view.setUint16(22, filename.length, true);
					data = getDataHelper(30 + filename.length);
					data.view.setUint32(0, 0x504b0304);
					data.array.set(header.array, 4);
					data.array.set(filename, 30);
					datalength += data.array.length;
					writer.writeUint8Array(data.array, callback, onwriteerror);
				}

				function writeFooter(compressedLength, crc32) {
					var footer = getDataHelper(16);
					datalength += compressedLength || 0;
					footer.view.setUint32(0, 0x504b0708);
					if (typeof crc32 != "undefined") {
						header.view.setUint32(10, crc32, true);
						footer.view.setUint32(4, crc32, true);
					}
					if (reader) {
						footer.view.setUint32(8, compressedLength, true);
						header.view.setUint32(14, compressedLength, true);
						footer.view.setUint32(12, reader.size, true);
						header.view.setUint32(18, reader.size, true);
					}
					writer.writeUint8Array(footer.array, function() {
						datalength += 16;
						onend();
					}, onwriteerror);
				}

				function writeFile() {
					options = options || {};
					name = name.trim();
					if (options.directory && name.charAt(name.length - 1) != "/")
						name += "/";
					if (files.hasOwnProperty(name)) {
						onerror(ERR_DUPLICATED_NAME);
						return;
					}
					filename = getBytes(encodeUTF8(name));
					filenames.push(name);
					writeHeader(function() {
						if (reader)
							if (dontDeflate || options.level === 0)
								copy(worker, deflateSN++, reader, writer, 0, reader.size, true, writeFooter, onprogress, onreaderror, onwriteerror);
							else
								deflate(worker, deflateSN++, reader, writer, options.level, writeFooter, onprogress, onreaderror, onwriteerror);
						else
							writeFooter();
					}, onwriteerror);
				}

				if (reader)
					reader.init(writeFile, onreaderror);
				else
					writeFile();
			},
			close : function(callback) {
				if (this._worker) {
					this._worker.terminate();
					this._worker = null;
				}

				var data, length = 0, index = 0, indexFilename, file;
				for (indexFilename = 0; indexFilename < filenames.length; indexFilename++) {
					file = files[filenames[indexFilename]];
					length += 46 + file.filename.length + file.comment.length;
				}
				data = getDataHelper(length + 22);
				for (indexFilename = 0; indexFilename < filenames.length; indexFilename++) {
					file = files[filenames[indexFilename]];
					data.view.setUint32(index, 0x504b0102);
					data.view.setUint16(index + 4, 0x1400);
					data.array.set(file.headerArray, index + 6);
					data.view.setUint16(index + 32, file.comment.length, true);
					if (file.directory)
						data.view.setUint8(index + 38, 0x10);
					data.view.setUint32(index + 42, file.offset, true);
					data.array.set(file.filename, index + 46);
					data.array.set(file.comment, index + 46 + file.filename.length);
					index += 46 + file.filename.length + file.comment.length;
				}
				data.view.setUint32(index, 0x504b0506);
				data.view.setUint16(index + 8, filenames.length, true);
				data.view.setUint16(index + 10, filenames.length, true);
				data.view.setUint32(index + 12, length, true);
				data.view.setUint32(index + 16, datalength, true);
				writer.writeUint8Array(data.array, function() {
					writer.getData(callback);
				}, onwriteerror);
			},
			_worker: null
		};

		if (!obj.zip.useWebWorkers)
			callback(zipWriter);
		else {
			createWorker('deflater',
				function(worker) {
					zipWriter._worker = worker;
					callback(zipWriter);
				},
				function(err) {
					onerror(err);
				}
			);
		}
	}

	function resolveURLs(urls) {
		var a = document.createElement('a');
		return urls.map(function(url) {
			a.href = url;
			return a.href;
		});
	}

	var DEFAULT_WORKER_SCRIPTS = {
		deflater: ['z-worker.js', 'deflate.js'],
		inflater: ['z-worker.js', 'inflate.js']
	};
	function createWorker(type, callback, onerror) {
		if (obj.zip.workerScripts !== null && obj.zip.workerScriptsPath !== null) {
			onerror(new Error('Either zip.workerScripts or zip.workerScriptsPath may be set, not both.'));
			return;
		}
		var scripts;
		if (obj.zip.workerScripts) {
			scripts = obj.zip.workerScripts[type];
			if (!Array.isArray(scripts)) {
				onerror(new Error('zip.workerScripts.' + type + ' is not an array!'));
				return;
			}
			scripts = resolveURLs(scripts);
		} else {
			scripts = DEFAULT_WORKER_SCRIPTS[type].slice(0);
			scripts[0] = (obj.zip.workerScriptsPath || '') + scripts[0];
		}
		var worker = new Worker(scripts[0]);
		// record total consumed time by inflater/deflater/crc32 in this worker
		worker.codecTime = worker.crcTime = 0;
		worker.postMessage({ type: 'importScripts', scripts: scripts.slice(1) });
		worker.addEventListener('message', onmessage);
		function onmessage(ev) {
			var msg = ev.data;
			if (msg.error) {
				worker.terminate(); // should before onerror(), because onerror() may throw.
				onerror(msg.error);
				return;
			}
			if (msg.type === 'importScripts') {
				worker.removeEventListener('message', onmessage);
				worker.removeEventListener('error', errorHandler);
				callback(worker);
			}
		}
		// catch entry script loading error and other unhandled errors
		worker.addEventListener('error', errorHandler);
		function errorHandler(err) {
			worker.terminate();
			onerror(err);
		}
	}

	function onerror_default(error) {
		console.error(error);
	}
	obj.zip = {
		Reader : Reader,
		Writer : Writer,
		BlobReader : BlobReader,
		Data64URIReader : Data64URIReader,
		TextReader : TextReader,
		BlobWriter : BlobWriter,
		Data64URIWriter : Data64URIWriter,
		TextWriter : TextWriter,
		createReader : function(reader, callback, onerror) {
			onerror = onerror || onerror_default;

			reader.init(function() {
				createZipReader(reader, callback, onerror);
			}, onerror);
		},
		createWriter : function(writer, callback, onerror, dontDeflate) {
			onerror = onerror || onerror_default;
			dontDeflate = !!dontDeflate;

			writer.init(function() {
				createZipWriter(writer, callback, onerror, dontDeflate);
			}, onerror);
		},
		useWebWorkers : true,
		/**
		 * Directory containing the default worker scripts (z-worker.js, deflate.js, and inflate.js), relative to current base url.
		 * E.g.: zip.workerScripts = './';
		 */
		workerScriptsPath : null,
		/**
		 * Advanced option to control which scripts are loaded in the Web worker. If this option is specified, then workerScriptsPath must not be set.
		 * workerScripts.deflater/workerScripts.inflater should be arrays of urls to scripts for deflater/inflater, respectively.
		 * Scripts in the array are executed in order, and the first one should be z-worker.js, which is used to start the worker.
		 * All urls are relative to current base url.
		 * E.g.:
		 * zip.workerScripts = {
		 *   deflater: ['z-worker.js', 'deflate.js'],
		 *   inflater: ['z-worker.js', 'inflate.js']
		 * };
		 */
		workerScripts : null,
	};

})(this);

; browserify_shim__define__module__export__(typeof zip != "undefined" ? zip : window.zip);

}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[1,2,3,4,5,11,12,13,15,16,6,7,8,9,10,14,17,18,19]);
